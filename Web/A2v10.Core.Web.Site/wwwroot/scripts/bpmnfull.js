(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.BpmnAssets = factory());
})(this, (function () { 'use strict';

  function e$3(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}}));}

  /**
   * Flatten array, one level deep.
   *
   * @template T
   *
   * @param {T[][] | T[] | null} [arr]
   *
   * @return {T[]}
   */
  function flatten$1(arr) {
    return Array.prototype.concat.apply([], arr);
  }

  const nativeToString$1 = Object.prototype.toString;
  const nativeHasOwnProperty$1 = Object.prototype.hasOwnProperty;

  function isUndefined$2(obj) {
    return obj === undefined;
  }

  function isDefined(obj) {
    return obj !== undefined;
  }

  function isNil(obj) {
    return obj == null;
  }

  function isArray$3(obj) {
    return nativeToString$1.call(obj) === '[object Array]';
  }

  function isObject(obj) {
    return nativeToString$1.call(obj) === '[object Object]';
  }

  function isNumber(obj) {
    return nativeToString$1.call(obj) === '[object Number]';
  }

  /**
   * @param {any} obj
   *
   * @return {boolean}
   */
  function isFunction(obj) {
    const tag = nativeToString$1.call(obj);

    return (
      tag === '[object Function]' ||
      tag === '[object AsyncFunction]' ||
      tag === '[object GeneratorFunction]' ||
      tag === '[object AsyncGeneratorFunction]' ||
      tag === '[object Proxy]'
    );
  }

  function isString(obj) {
    return nativeToString$1.call(obj) === '[object String]';
  }


  /**
   * Ensure collection is an array.
   *
   * @param {Object} obj
   */
  function ensureArray(obj) {

    if (isArray$3(obj)) {
      return;
    }

    throw new Error('must supply array');
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has$1(target, key) {
    return !isNil(target) && nativeHasOwnProperty$1.call(target, key);
  }

  /**
   * @template T
   * @typedef { (
   *   ((e: T) => boolean) |
   *   ((e: T, idx: number) => boolean) |
   *   ((e: T, key: string) => boolean) |
   *   string |
   *   number
   * ) } Matcher
   */

  /**
   * @template T
   * @template U
   *
   * @typedef { (
   *   ((e: T) => U) | string | number
   * ) } Extractor
   */


  /**
   * @template T
   * @typedef { (val: T, key: any) => boolean } MatchFn
   */

  /**
   * @template T
   * @typedef { T[] } ArrayCollection
   */

  /**
   * @template T
   * @typedef { { [key: string]: T } } StringKeyValueCollection
   */

  /**
   * @template T
   * @typedef { { [key: number]: T } } NumberKeyValueCollection
   */

  /**
   * @template T
   * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection
   */

  /**
   * @template T
   * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection
   */

  /**
   * Find element in collection.
   *
   * @template T
   * @param {Collection<T>} collection
   * @param {Matcher<T>} matcher
   *
   * @return {Object}
   */
  function find$1(collection, matcher) {

    const matchFn = toMatcher(matcher);

    let match;

    forEach$1(collection, function(val, key) {
      if (matchFn(val, key)) {
        match = val;

        return false;
      }
    });

    return match;

  }


  /**
   * Find element index in collection.
   *
   * @template T
   * @param {Collection<T>} collection
   * @param {Matcher<T>} matcher
   *
   * @return {number | string | undefined}
   */
  function findIndex(collection, matcher) {

    const matchFn = toMatcher(matcher);

    let idx = isArray$3(collection) ? -1 : undefined;

    forEach$1(collection, function(val, key) {
      if (matchFn(val, key)) {
        idx = key;

        return false;
      }
    });

    return idx;
  }


  /**
   * Filter elements in collection.
   *
   * @template T
   * @param {Collection<T>} collection
   * @param {Matcher<T>} matcher
   *
   * @return {T[]} result
   */
  function filter(collection, matcher) {

    const matchFn = toMatcher(matcher);

    let result = [];

    forEach$1(collection, function(val, key) {
      if (matchFn(val, key)) {
        result.push(val);
      }
    });

    return result;
  }


  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @template T
   * @param {Collection<T>} collection
   * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator
   *
   * @return {T} return result that stopped the iteration
   */
  function forEach$1(collection, iterator) {

    let val,
        result;

    if (isUndefined$2(collection)) {
      return;
    }

    const convertKey = isArray$3(collection) ? toNum$1 : identity$1;

    for (let key in collection) {

      if (has$1(collection, key)) {
        val = collection[key];

        result = iterator(val, convertKey(key));

        if (result === false) {
          return val;
        }
      }
    }
  }

  /**
   * Return collection without element.
   *
   * @template T
   * @param {ArrayCollection<T>} arr
   * @param {Matcher<T>} matcher
   *
   * @return {T[]}
   */
  function without(arr, matcher) {

    if (isUndefined$2(arr)) {
      return [];
    }

    ensureArray(arr);

    const matchFn = toMatcher(matcher);

    return arr.filter(function(el, idx) {
      return !matchFn(el, idx);
    });

  }


  /**
   * Reduce collection, returning a single result.
   *
   * @template T
   * @template V
   *
   * @param {Collection<T>} collection
   * @param {(result: V, entry: T, index: any) => V} iterator
   * @param {V} result
   *
   * @return {V} result returned from last iterator
   */
  function reduce(collection, iterator, result) {

    forEach$1(collection, function(value, idx) {
      result = iterator(result, value, idx);
    });

    return result;
  }


  /**
   * Return true if every element in the collection
   * matches the criteria.
   *
   * @param  {Object|Array} collection
   * @param  {Function} matcher
   *
   * @return {Boolean}
   */
  function every(collection, matcher) {

    return !!reduce(collection, function(matches, val, key) {
      return matches && matcher(val, key);
    }, true);
  }


  /**
   * Return true if some elements in the collection
   * match the criteria.
   *
   * @param  {Object|Array} collection
   * @param  {Function} matcher
   *
   * @return {Boolean}
   */
  function some(collection, matcher) {

    return !!find$1(collection, matcher);
  }


  /**
   * Transform a collection into another collection
   * by piping each member through the given fn.
   *
   * @param  {Object|Array}   collection
   * @param  {Function} fn
   *
   * @return {Array} transformed collection
   */
  function map$1(collection, fn) {

    let result = [];

    forEach$1(collection, function(val, key) {
      result.push(fn(val, key));
    });

    return result;
  }


  /**
   * Get the collections keys.
   *
   * @param  {Object|Array} collection
   *
   * @return {Array}
   */
  function keys(collection) {
    return collection && Object.keys(collection) || [];
  }


  /**
   * Shorthand for `keys(o).length`.
   *
   * @param  {Object|Array} collection
   *
   * @return {Number}
   */
  function size(collection) {
    return keys(collection).length;
  }


  /**
   * Get the values in the collection.
   *
   * @param  {Object|Array} collection
   *
   * @return {Array}
   */
  function values(collection) {
    return map$1(collection, (val) => val);
  }


  /**
   * Group collection members by attribute.
   *
   * @param {Object|Array} collection
   * @param {Extractor} extractor
   *
   * @return {Object} map with { attrValue => [ a, b, c ] }
   */
  function groupBy(collection, extractor, grouped = {}) {

    extractor = toExtractor(extractor);

    forEach$1(collection, function(val) {
      let discriminator = extractor(val) || '_';

      let group = grouped[discriminator];

      if (!group) {
        group = grouped[discriminator] = [];
      }

      group.push(val);
    });

    return grouped;
  }


  function uniqueBy(extractor, ...collections) {

    extractor = toExtractor(extractor);

    let grouped = {};

    forEach$1(collections, (c) => groupBy(c, extractor, grouped));

    let result = map$1(grouped, function(val, key) {
      return val[0];
    });

    return result;
  }


  const unionBy = uniqueBy;



  /**
   * Sort collection by criteria.
   *
   * @template T
   *
   * @param {Collection<T>} collection
   * @param {Extractor<T, number | string>} extractor
   *
   * @return {Array}
   */
  function sortBy(collection, extractor) {

    extractor = toExtractor(extractor);

    let sorted = [];

    forEach$1(collection, function(value, key) {
      let disc = extractor(value, key);

      let entry = {
        d: disc,
        v: value
      };

      for (var idx = 0; idx < sorted.length; idx++) {
        let { d } = sorted[idx];

        if (disc < d) {
          sorted.splice(idx, 0, entry);
          return;
        }
      }

      // not inserted, append (!)
      sorted.push(entry);
    });

    return map$1(sorted, (e) => e.v);
  }


  /**
   * Create an object pattern matcher.
   *
   * @example
   *
   * ```javascript
   * const matcher = matchPattern({ id: 1 });
   *
   * let element = find(elements, matcher);
   * ```
   *
   * @template T
   *
   * @param {T} pattern
   *
   * @return { (el: any) =>  boolean } matcherFn
   */
  function matchPattern(pattern) {

    return function(el) {

      return every(pattern, function(val, key) {
        return el[key] === val;
      });

    };
  }


  /**
   * @param {string | ((e: any) => any) } extractor
   *
   * @return { (e: any) => any }
   */
  function toExtractor(extractor) {

    /**
     * @satisfies { (e: any) => any }
     */
    return isFunction(extractor) ? extractor : (e) => {

      // @ts-ignore: just works
      return e[extractor];
    };
  }


  /**
   * @template T
   * @param {Matcher<T>} matcher
   *
   * @return {MatchFn<T>}
   */
  function toMatcher(matcher) {
    return isFunction(matcher) ? matcher : (e) => {
      return e === matcher;
    };
  }


  function identity$1(arg) {
    return arg;
  }

  function toNum$1(arg) {
    return Number(arg);
  }

  /* global setTimeout clearTimeout */

  /**
   * @typedef { {
   *   (...args: any[]): any;
   *   flush: () => void;
   *   cancel: () => void;
   * } } DebouncedFunction
   */

  /**
   * Debounce fn, calling it only once if the given time
   * elapsed between calls.
   *
   * Lodash-style the function exposes methods to `#clear`
   * and `#flush` to control internal behavior.
   *
   * @param  {Function} fn
   * @param  {Number} timeout
   *
   * @return {DebouncedFunction} debounced function
   */
  function debounce(fn, timeout) {

    let timer;

    let lastArgs;
    let lastThis;

    let lastNow;

    function fire(force) {

      let now = Date.now();

      let scheduledDiff = force ? 0 : (lastNow + timeout) - now;

      if (scheduledDiff > 0) {
        return schedule(scheduledDiff);
      }

      fn.apply(lastThis, lastArgs);

      clear();
    }

    function schedule(timeout) {
      timer = setTimeout(fire, timeout);
    }

    function clear() {
      if (timer) {
        clearTimeout(timer);
      }

      timer = lastNow = lastArgs = lastThis = undefined;
    }

    function flush() {
      if (timer) {
        fire(true);
      }

      clear();
    }

    /**
     * @type { DebouncedFunction }
     */
    function callback(...args) {
      lastNow = Date.now();

      lastArgs = args;
      lastThis = this;

      // ensure an execution is scheduled
      if (!timer) {
        schedule(timeout);
      }
    }

    callback.flush = flush;
    callback.cancel = clear;

    return callback;
  }

  /**
   * Bind function against target <this>.
   *
   * @param  {Function} fn
   * @param  {Object}   target
   *
   * @return {Function} bound function
   */
  function bind$2(fn, target) {
    return fn.bind(target);
  }

  /**
   * Convenience wrapper for `Object.assign`.
   *
   * @param {Object} target
   * @param {...Object} others
   *
   * @return {Object} the target
   */
  function assign$1(target, ...others) {
    return Object.assign(target, ...others);
  }

  /**
   * Sets a nested property of a given object to the specified value.
   *
   * This mutates the object and returns it.
   *
   * @template T
   *
   * @param {T} target The target of the set operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} value The value to set.
   *
   * @return {T}
   */
  function set$1(target, path, value) {

    let currentTarget = target;

    forEach$1(path, function(key, idx) {

      if (typeof key !== 'number' && typeof key !== 'string') {
        throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
      }

      if (key === 'constructor') {
        throw new Error('illegal key: constructor');
      }

      if (key === '__proto__') {
        throw new Error('illegal key: __proto__');
      }

      let nextKey = path[idx + 1];
      let nextTarget = currentTarget[key];

      if (isDefined(nextKey) && isNil(nextTarget)) {
        nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
      }

      if (isUndefined$2(nextKey)) {
        if (isUndefined$2(value)) {
          delete currentTarget[key];
        } else {
          currentTarget[key] = value;
        }
      } else {
        currentTarget = nextTarget;
      }
    });

    return target;
  }


  /**
   * Gets a nested property of a given object.
   *
   * @param {Object} target The target of the get operation.
   * @param {(string|number)[]} path The path to the nested value.
   * @param {any} [defaultValue] The value to return if no value exists.
   *
   * @return {any}
   */
  function get$1(target, path, defaultValue) {

    let currentTarget = target;

    forEach$1(path, function(key) {

      // accessing nil property yields <undefined>
      if (isNil(currentTarget)) {
        currentTarget = undefined;

        return false;
      }

      currentTarget = currentTarget[key];
    });

    return isUndefined$2(currentTarget) ? defaultValue : currentTarget;
  }

  /**
   * Pick properties from the given target.
   *
   * @template T
   * @template {any[]} V
   *
   * @param {T} target
   * @param {V} properties
   *
   * @return Pick<T, V>
   */
  function pick(target, properties) {

    let result = {};

    let obj = Object(target);

    forEach$1(properties, function(prop) {

      if (prop in obj) {
        result[prop] = target[prop];
      }
    });

    return result;
  }

  /**
   * Pick all target properties, excluding the given ones.
   *
   * @template T
   * @template {any[]} V
   *
   * @param {T} target
   * @param {V} properties
   *
   * @return {Omit<T, V>} target
   */
  function omit(target, properties) {

    let result = {};

    let obj = Object(target);

    forEach$1(obj, function(prop, key) {

      if (properties.indexOf(key) === -1) {
        result[key] = prop;
      }
    });

    return result;
  }

  var DEFAULT_RENDER_PRIORITY$1 = 1000;

  /**
   * @typedef {import('../core/Types').ElementLike} Element
   * @typedef {import('../core/Types').ConnectionLike} Connection
   * @typedef {import('../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../core/EventBus').default} EventBus
   */

  /**
   * The base implementation of shape and connection renderers.
   *
   * @param {EventBus} eventBus
   * @param {number} [renderPriority=1000]
   */
  function BaseRenderer(eventBus, renderPriority) {
    var self = this;

    renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY$1;

    eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {
      var type = evt.type,
          element = context.element,
          visuals = context.gfx,
          attrs = context.attrs;

      if (self.canRender(element)) {
        if (type === 'render.shape') {
          return self.drawShape(visuals, element, attrs);
        } else {
          return self.drawConnection(visuals, element, attrs);
        }
      }
    });

    eventBus.on([ 'render.getShapePath', 'render.getConnectionPath' ], renderPriority, function(evt, element) {
      if (self.canRender(element)) {
        if (evt.type === 'render.getShapePath') {
          return self.getShapePath(element);
        } else {
          return self.getConnectionPath(element);
        }
      }
    });
  }

  /**
   * Checks whether an element can be rendered.
   *
   * @param {Element} element The element to be rendered.
   *
   * @return {boolean} Whether the element can be rendered.
   */
  BaseRenderer.prototype.canRender = function(element) {};

  /**
   * Draws a shape.
   *
   * @param {SVGElement} visuals The SVG element to draw the shape into.
   * @param {Shape} shape The shape to be drawn.
   *
   * @return {SVGElement} The SVG element of the shape drawn.
   */
  BaseRenderer.prototype.drawShape = function(visuals, shape) {};

  /**
   * Draws a connection.
   *
   * @param {SVGElement} visuals The SVG element to draw the connection into.
   * @param {Connection} connection The connection to be drawn.
   *
   * @return {SVGElement} The SVG element of the connection drawn.
   */
  BaseRenderer.prototype.drawConnection = function(visuals, connection) {};

  /**
   * Gets the SVG path of the graphical representation of a shape.
   *
   * @param {Shape} shape The shape.
   *
   * @return {string} The SVG path of the shape.
   */
  BaseRenderer.prototype.getShapePath = function(shape) {};

  /**
   * Gets the SVG path of the graphical representation of a connection.
   *
   * @param {Connection} connection The connection.
   *
   * @return {string} The SVG path of the connection.
   */
  BaseRenderer.prototype.getConnectionPath = function(connection) {};

  /**
   * @typedef { import('../model/Types').Element } Element
   * @typedef { import('../model/Types').ModdleElement } ModdleElement
   */

  /**
   * Is an element of the given BPMN type?
   *
   * @param  {Element|ModdleElement} element
   * @param  {string} type
   *
   * @return {boolean}
   */
  function is$1(element, type) {
    var bo = getBusinessObject(element);

    return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);
  }


  /**
   * Return true if element has any of the given types.
   *
   * @param {Element|ModdleElement} element
   * @param {string[]} types
   *
   * @return {boolean}
   */
  function isAny(element, types) {
    return some(types, function(t) {
      return is$1(element, t);
    });
  }

  /**
   * Return the business object for a given element.
   *
   * @param {Element|ModdleElement} element
   *
   * @return {ModdleElement}
   */
  function getBusinessObject(element) {
    return (element && element.businessObject) || element;
  }

  /**
   * Return the di object for a given element.
   *
   * @param {Element} element
   *
   * @return {ModdleElement}
   */
  function getDi(element) {
    return element && element.di;
  }

  /**
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */

  /**
   * @param {Element} element
   * @param {ModdleElement} [di]
   *
   * @return {boolean}
   */
  function isExpanded(element, di) {

    if (is$1(element, 'bpmn:CallActivity')) {
      return false;
    }

    if (is$1(element, 'bpmn:SubProcess')) {
      di = di || getDi(element);

      if (di && is$1(di, 'bpmndi:BPMNPlane')) {
        return true;
      }

      return di && !!di.isExpanded;
    }

    if (is$1(element, 'bpmn:Participant')) {
      return !!getBusinessObject(element).processRef;
    }

    return true;
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isHorizontal$3(element) {

    if (!is$1(element, 'bpmn:Participant') && !is$1(element, 'bpmn:Lane')) {
      return undefined;
    }

    var isHorizontal = getDi(element).isHorizontal;

    if (isHorizontal === undefined) {
      return true;
    }

    return isHorizontal;
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isInterrupting(element) {
    return element && getBusinessObject(element).isInterrupting !== false;
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isEventSubProcess(element) {
    return element && !!getBusinessObject(element).triggeredByEvent;
  }

  /**
   * @param {Element} element
   * @param {string} eventType
   *
   * @return {boolean}
   */
  function hasEventDefinition$2(element, eventType) {
    var eventDefinitions = getBusinessObject(element).eventDefinitions;

    return some(eventDefinitions, function(event) {
      return is$1(event, eventType);
    });
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasErrorEventDefinition(element) {
    return hasEventDefinition$2(element, 'bpmn:ErrorEventDefinition');
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasEscalationEventDefinition(element) {
    return hasEventDefinition$2(element, 'bpmn:EscalationEventDefinition');
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasCompensateEventDefinition(element) {
    return hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');
  }

  /**
   * Checks whether a value is an instance of Connection.
   *
   * @param {any} value
   *
   * @return {boolean}
   */
  function isConnection(value) {
    return isObject(value) && has$1(value, 'waypoints');
  }

  /**
   * Checks whether a value is an instance of Label.
   *
   * @param {any} value
   *
   * @return {boolean}
   */
  function isLabel(value) {
    return isObject(value) && has$1(value, 'labelTarget');
  }

  /**
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   *
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */

  var DEFAULT_LABEL_SIZE$1 = {
    width: 90,
    height: 20
  };

  var FLOW_LABEL_INDENT = 15;


  /**
   * Return true if the given semantic has an external label.
   *
   * @param {Element} semantic
   *
   * @return {boolean}
   */
  function isLabelExternal(semantic) {
    return is$1(semantic, 'bpmn:Event') ||
           is$1(semantic, 'bpmn:Gateway') ||
           is$1(semantic, 'bpmn:DataStoreReference') ||
           is$1(semantic, 'bpmn:DataObjectReference') ||
           is$1(semantic, 'bpmn:DataInput') ||
           is$1(semantic, 'bpmn:DataOutput') ||
           is$1(semantic, 'bpmn:SequenceFlow') ||
           is$1(semantic, 'bpmn:MessageFlow') ||
           is$1(semantic, 'bpmn:Group');
  }

  /**
   * Return true if the given element has an external label.
   *
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasExternalLabel(element) {
    return isLabel(element.label);
  }

  /**
   * Get the position of a sequence flow label.
   *
   * @param  {Point[]} waypoints
   *
   * @return {Point}
   */
  function getFlowLabelPosition(waypoints) {

    // get the waypoints mid
    var mid = waypoints.length / 2 - 1;

    var first = waypoints[Math.floor(mid)];
    var second = waypoints[Math.ceil(mid + 0.01)];

    // get position
    var position = getWaypointsMid(waypoints);

    // calculate angle
    var angle = Math.atan((second.y - first.y) / (second.x - first.x));

    var x = position.x,
        y = position.y;

    if (Math.abs(angle) < Math.PI / 2) {
      y -= FLOW_LABEL_INDENT;
    } else {
      x += FLOW_LABEL_INDENT;
    }

    return { x: x, y: y };
  }


  /**
   * Get the middle of a number of waypoints.
   *
   * @param  {Point[]} waypoints
   *
   * @return {Point}
   */
  function getWaypointsMid(waypoints) {

    var mid = waypoints.length / 2 - 1;

    var first = waypoints[Math.floor(mid)];
    var second = waypoints[Math.ceil(mid + 0.01)];

    return {
      x: first.x + (second.x - first.x) / 2,
      y: first.y + (second.y - first.y) / 2
    };
  }

  /**
   * Get the middle of the external label of an element.
   *
   * @param {Element} element
   *
   * @return {Point}
   */
  function getExternalLabelMid(element) {

    if (element.waypoints) {
      return getFlowLabelPosition(element.waypoints);
    } else if (is$1(element, 'bpmn:Group')) {
      return {
        x: element.x + element.width / 2,
        y: element.y + DEFAULT_LABEL_SIZE$1.height / 2
      };
    } else {
      return {
        x: element.x + element.width / 2,
        y: element.y + element.height + DEFAULT_LABEL_SIZE$1.height / 2
      };
    }
  }


  /**
   * Return the bounds of an elements label, parsed from the elements DI or
   * generated from its bounds.
   *
   * @param {ModdleElement} di
   * @param {Element} element
   *
   * @return {Rect}
   */
  function getExternalLabelBounds(di, element) {

    var mid,
        size,
        bounds,
        label = di.label;

    if (label && label.bounds) {
      bounds = label.bounds;

      size = {
        width: Math.max(DEFAULT_LABEL_SIZE$1.width, bounds.width),
        height: bounds.height
      };

      mid = {
        x: bounds.x + bounds.width / 2,
        y: bounds.y + bounds.height / 2
      };
    } else {

      mid = getExternalLabelMid(element);

      size = DEFAULT_LABEL_SIZE$1;
    }

    return assign$1({
      x: mid.x - size.width / 2,
      y: mid.y - size.height / 2
    }, size);
  }

  /**
   * @param {ModdleElement} semantic
   *
   * @returns {string}
   */
  function getLabelAttr(semantic) {
    if (
      is$1(semantic, 'bpmn:FlowElement') ||
      is$1(semantic, 'bpmn:Participant') ||
      is$1(semantic, 'bpmn:Lane') ||
      is$1(semantic, 'bpmn:SequenceFlow') ||
      is$1(semantic, 'bpmn:MessageFlow') ||
      is$1(semantic, 'bpmn:DataInput') ||
      is$1(semantic, 'bpmn:DataOutput')
    ) {
      return 'name';
    }

    if (is$1(semantic, 'bpmn:TextAnnotation')) {
      return 'text';
    }

    if (is$1(semantic, 'bpmn:Group')) {
      return 'categoryValueRef';
    }
  }

  /**
   * @param {ModdleElement} semantic
   *
   * @returns {string}
   */
  function getCategoryValue(semantic) {
    var categoryValueRef = semantic['categoryValueRef'];

    if (!categoryValueRef) {
      return '';
    }


    return categoryValueRef.value || '';
  }

  /**
   * @param {Element} element
   *
   * @return {string}
   */
  function getLabel(element) {
    var semantic = element.businessObject,
        attr = getLabelAttr(semantic);

    if (attr) {

      if (attr === 'categoryValueRef') {

        return getCategoryValue(semantic);
      }

      return semantic[attr] || '';
    }
  }


  /**
   * @param {Element} element
   * @param {string} text
   *
   * @return {Element}
   */
  function setLabel(element, text) {
    var semantic = element.businessObject,
        attr = getLabelAttr(semantic);

    if (attr) {

      if (attr === 'categoryValueRef') {
        if (!semantic[attr]) {
          return element;
        }

        semantic[attr].value = text;
      } else {
        semantic[attr] = text;
      }

    }

    return element;
  }

  function ensureImported(element, target) {

    if (element.ownerDocument !== target.ownerDocument) {
      try {

        // may fail on webkit
        return target.ownerDocument.importNode(element, true);
      } catch (e) {

        // ignore
      }
    }

    return element;
  }

  /**
   * appendTo utility
   */


  /**
   * Append a node to a target element and return the appended node.
   *
   * @param  {SVGElement} element
   * @param  {SVGElement} target
   *
   * @return {SVGElement} the appended node
   */
  function appendTo(element, target) {
    return target.appendChild(ensureImported(element, target));
  }

  /**
   * append utility
   */


  /**
   * Append a node to an element
   *
   * @param  {SVGElement} element
   * @param  {SVGElement} node
   *
   * @return {SVGElement} the element
   */
  function append(target, node) {
    appendTo(node, target);
    return target;
  }

  /**
   * attribute accessor utility
   */

  var LENGTH_ATTR = 2;

  var CSS_PROPERTIES = {
    'alignment-baseline': 1,
    'baseline-shift': 1,
    'clip': 1,
    'clip-path': 1,
    'clip-rule': 1,
    'color': 1,
    'color-interpolation': 1,
    'color-interpolation-filters': 1,
    'color-profile': 1,
    'color-rendering': 1,
    'cursor': 1,
    'direction': 1,
    'display': 1,
    'dominant-baseline': 1,
    'enable-background': 1,
    'fill': 1,
    'fill-opacity': 1,
    'fill-rule': 1,
    'filter': 1,
    'flood-color': 1,
    'flood-opacity': 1,
    'font': 1,
    'font-family': 1,
    'font-size': LENGTH_ATTR,
    'font-size-adjust': 1,
    'font-stretch': 1,
    'font-style': 1,
    'font-variant': 1,
    'font-weight': 1,
    'glyph-orientation-horizontal': 1,
    'glyph-orientation-vertical': 1,
    'image-rendering': 1,
    'kerning': 1,
    'letter-spacing': 1,
    'lighting-color': 1,
    'marker': 1,
    'marker-end': 1,
    'marker-mid': 1,
    'marker-start': 1,
    'mask': 1,
    'opacity': 1,
    'overflow': 1,
    'pointer-events': 1,
    'shape-rendering': 1,
    'stop-color': 1,
    'stop-opacity': 1,
    'stroke': 1,
    'stroke-dasharray': 1,
    'stroke-dashoffset': 1,
    'stroke-linecap': 1,
    'stroke-linejoin': 1,
    'stroke-miterlimit': 1,
    'stroke-opacity': 1,
    'stroke-width': LENGTH_ATTR,
    'text-anchor': 1,
    'text-decoration': 1,
    'text-rendering': 1,
    'unicode-bidi': 1,
    'visibility': 1,
    'word-spacing': 1,
    'writing-mode': 1
  };


  function getAttribute(node, name) {
    if (CSS_PROPERTIES[name]) {
      return node.style[name];
    } else {
      return node.getAttributeNS(null, name);
    }
  }

  function setAttribute(node, name, value) {
    var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();

    var type = CSS_PROPERTIES[hyphenated];

    if (type) {

      // append pixel unit, unless present
      if (type === LENGTH_ATTR && typeof value === 'number') {
        value = String(value) + 'px';
      }

      node.style[hyphenated] = value;
    } else {
      node.setAttributeNS(null, name, value);
    }
  }

  function setAttributes(node, attrs) {

    var names = Object.keys(attrs), i, name;

    for (i = 0, name; (name = names[i]); i++) {
      setAttribute(node, name, attrs[name]);
    }
  }

  /**
   * Gets or sets raw attributes on a node.
   *
   * @param  {SVGElement} node
   * @param  {Object} [attrs]
   * @param  {String} [name]
   * @param  {String} [value]
   *
   * @return {String}
   */
  function attr$1(node, name, value) {
    if (typeof name === 'string') {
      if (value !== undefined) {
        setAttribute(node, name, value);
      } else {
        return getAttribute(node, name);
      }
    } else {
      setAttributes(node, name);
    }

    return node;
  }

  /**
   * Taken from https://github.com/component/classes
   *
   * Without the component bits.
   */

  /**
   * toString reference.
   */

  const toString$1 = Object.prototype.toString;

  /**
    * Wrap `el` in a `ClassList`.
    *
    * @param {Element} el
    * @return {ClassList}
    * @api public
    */

  function classes$1(el) {
    return new ClassList$1(el);
  }

  function ClassList$1(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
    * Add class `name` if not already present.
    *
    * @param {String} name
    * @return {ClassList}
    * @api public
    */

  ClassList$1.prototype.add = function(name) {
    this.list.add(name);
    return this;
  };

  /**
    * Remove class `name` when present, or
    * pass a regular expression to remove
    * any which match.
    *
    * @param {String|RegExp} name
    * @return {ClassList}
    * @api public
    */

  ClassList$1.prototype.remove = function(name) {
    if ('[object RegExp]' == toString$1.call(name)) {
      return this.removeMatching(name);
    }

    this.list.remove(name);
    return this;
  };

  /**
    * Remove all classes matching `re`.
    *
    * @param {RegExp} re
    * @return {ClassList}
    * @api private
    */

  ClassList$1.prototype.removeMatching = function(re) {
    const arr = this.array();
    for (let i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
    * Toggle class `name`, can force state via `force`.
    *
    * For browsers that support classList, but do not support `force` yet,
    * the mistake will be detected and corrected.
    *
    * @param {String} name
    * @param {Boolean} force
    * @return {ClassList}
    * @api public
    */

  ClassList$1.prototype.toggle = function(name, force) {
    if ('undefined' !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  };

  /**
    * Return an array of classes.
    *
    * @return {Array}
    * @api public
    */

  ClassList$1.prototype.array = function() {
    return Array.from(this.list);
  };

  /**
    * Check if class `name` is present.
    *
    * @param {String} name
    * @return {ClassList}
    * @api public
    */

  ClassList$1.prototype.has =
   ClassList$1.prototype.contains = function(name) {
     return this.list.contains(name);
   };

  /**
   * Clear utility
   */

  /**
   * Removes all children from the given element
   *
   * @param  {SVGElement} element
   * @return {Element} the element (for chaining)
   */
  function clear$1(element) {
    var child;

    while ((child = element.firstChild)) {
      element.removeChild(child);
    }

    return element;
  }

  function clone$1(element) {
    return element.cloneNode(true);
  }

  var ns = {
    svg: 'http://www.w3.org/2000/svg'
  };

  /**
   * DOM parsing utility
   */


  var SVG_START = '<svg xmlns="' + ns.svg + '"';

  function parse$1(svg) {

    var unwrap = false;

    // ensure we import a valid svg document
    if (svg.substring(0, 4) === '<svg') {
      if (svg.indexOf(ns.svg) === -1) {
        svg = SVG_START + svg.substring(4);
      }
    } else {

      // namespace svg
      svg = SVG_START + '>' + svg + '</svg>';
      unwrap = true;
    }

    var parsed = parseDocument(svg);

    if (!unwrap) {
      return parsed;
    }

    var fragment = document.createDocumentFragment();

    var parent = parsed.firstChild;

    while (parent.firstChild) {
      fragment.appendChild(parent.firstChild);
    }

    return fragment;
  }

  function parseDocument(svg) {

    var parser;

    // parse
    parser = new DOMParser();
    parser.async = false;

    return parser.parseFromString(svg, 'text/xml');
  }

  /**
   * Create utility for SVG elements
   */



  /**
   * Create a specific type from name or SVG markup.
   *
   * @param {String} name the name or markup of the element
   * @param {Object} [attrs] attributes to set on the element
   *
   * @returns {SVGElement}
   */
  function create$1(name, attrs) {
    var element;

    name = name.trim();

    if (name.charAt(0) === '<') {
      element = parse$1(name).firstChild;
      element = document.importNode(element, true);
    } else {
      element = document.createElementNS(ns.svg, name);
    }

    if (attrs) {
      attr$1(element, attrs);
    }

    return element;
  }

  /**
   * Geometry helpers
   */


  // fake node used to instantiate svg geometry elements
  var node = null;

  function getNode() {
    if (node === null) {
      node = create$1('svg');
    }

    return node;
  }

  function extend$1(object, props) {
    var i, k, keys = Object.keys(props);

    for (i = 0; (k = keys[i]); i++) {
      object[k] = props[k];
    }

    return object;
  }

  /**
   * Create matrix via args.
   *
   * @example
   *
   * createMatrix({ a: 1, b: 1 });
   * createMatrix();
   * createMatrix(1, 2, 0, 0, 30, 20);
   *
   * @return {SVGMatrix}
   */
  function createMatrix(a, b, c, d, e, f) {
    var matrix = getNode().createSVGMatrix();

    switch (arguments.length) {
    case 0:
      return matrix;
    case 1:
      return extend$1(matrix, a);
    case 6:
      return extend$1(matrix, {
        a: a,
        b: b,
        c: c,
        d: d,
        e: e,
        f: f
      });
    }
  }

  function createTransform(matrix) {
    {
      return getNode().createSVGTransform();
    }
  }

  /**
   * Serialization util
   */

  var TEXT_ENTITIES = /([&<>]{1})/g;
  var ATTR_ENTITIES = /([&<>\n\r"]{1})/g;

  var ENTITY_REPLACEMENT = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '\''
  };

  function escape$1(str, pattern) {

    function replaceFn(match, entity) {
      return ENTITY_REPLACEMENT[entity] || entity;
    }

    return str.replace(pattern, replaceFn);
  }

  function serialize(node, output) {

    var i, len, attrMap, attrNode, childNodes;

    switch (node.nodeType) {

    // TEXT
    case 3:

      // replace special XML characters
      output.push(escape$1(node.textContent, TEXT_ENTITIES));
      break;

    // ELEMENT
    case 1:
      output.push('<', node.tagName);

      if (node.hasAttributes()) {
        attrMap = node.attributes;
        for (i = 0, len = attrMap.length; i < len; ++i) {
          attrNode = attrMap.item(i);
          output.push(' ', attrNode.name, '="', escape$1(attrNode.value, ATTR_ENTITIES), '"');
        }
      }

      if (node.hasChildNodes()) {
        output.push('>');
        childNodes = node.childNodes;
        for (i = 0, len = childNodes.length; i < len; ++i) {
          serialize(childNodes.item(i), output);
        }
        output.push('</', node.tagName, '>');
      } else {
        output.push('/>');
      }
      break;

    // COMMENT
    case 8:
      output.push('<!--', escape$1(node.nodeValue, TEXT_ENTITIES), '-->');
      break;

    // CDATA
    case 4:
      output.push('<![CDATA[', node.nodeValue, ']]>');
      break;

    default:
      throw new Error('unable to handle node ' + node.nodeType);
    }

    return output;
  }

  function get(element) {
    var child = element.firstChild,
        output = [];

    while (child) {
      serialize(child, output);
      child = child.nextSibling;
    }

    return output.join('');
  }

  function innerSVG(element, svg) {

    {
      return get(element);
    }
  }

  function remove$3(element) {
    var parent = element.parentNode;

    if (parent) {
      parent.removeChild(element);
    }

    return element;
  }

  /**
   * transform accessor utility
   */

  function wrapMatrix(transformList, transform) {
    if (transform instanceof SVGMatrix) {
      return transformList.createSVGTransformFromMatrix(transform);
    }

    return transform;
  }


  function setTransforms(transformList, transforms) {
    var i, t;

    transformList.clear();

    for (i = 0; (t = transforms[i]); i++) {
      transformList.appendItem(wrapMatrix(transformList, t));
    }
  }

  /**
   * Get or set the transforms on the given node.
   *
   * @param {SVGElement} node
   * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]
   *
   * @return {SVGTransform} the consolidated transform
   */
  function transform$1(node, transforms) {
    var transformList = node.transform.baseVal;

    if (transforms) {

      if (!Array.isArray(transforms)) {
        transforms = [ transforms ];
      }

      setTransforms(transformList, transforms);
    }

    return transformList.consolidate();
  }

  /**
   * @typedef {(string|number)[]} Component
   *
   * @typedef {import('../util/Types').Point} Point
   */

  /**
   * @param {Component[] | Component[][]} elements
   *
   * @return {string}
   */
  function componentsToPath(elements) {
    return elements.flat().join(',').replace(/,?([A-Za-z]),?/g, '$1');
  }

  /**
   * @param {Point} point
   *
   * @return {Component[]}
   */
  function move(point) {
    return [ 'M', point.x, point.y ];
  }

  /**
   * @param {Point} point
   *
   * @return {Component[]}
   */
  function lineTo(point) {
    return [ 'L', point.x, point.y ];
  }

  /**
   * @param {Point} p1
   * @param {Point} p2
   * @param {Point} p3
   *
   * @return {Component[]}
   */
  function curveTo(p1, p2, p3) {
    return [ 'C', p1.x, p1.y, p2.x, p2.y, p3.x, p3.y ];
  }

  /**
   * @param {Point[]} waypoints
   * @param {number} [cornerRadius]
   * @return {Component[][]}
   */
  function drawPath(waypoints, cornerRadius) {
    const pointCount = waypoints.length;

    const path = [ move(waypoints[0]) ];

    for (let i = 1; i < pointCount; i++) {

      const pointBefore = waypoints[i - 1];
      const point = waypoints[i];
      const pointAfter = waypoints[i + 1];

      if (!pointAfter || !cornerRadius) {
        path.push(lineTo(point));

        continue;
      }

      const effectiveRadius = Math.min(
        cornerRadius,
        vectorLength$1(point.x - pointBefore.x, point.y - pointBefore.y),
        vectorLength$1(pointAfter.x - point.x, pointAfter.y - point.y)
      );

      if (!effectiveRadius) {
        path.push(lineTo(point));

        continue;
      }

      const beforePoint = getPointAtLength(point, pointBefore, effectiveRadius);
      const beforePoint2 = getPointAtLength(point, pointBefore, effectiveRadius * .5);

      const afterPoint = getPointAtLength(point, pointAfter, effectiveRadius);
      const afterPoint2 = getPointAtLength(point, pointAfter, effectiveRadius * .5);

      path.push(lineTo(beforePoint));
      path.push(curveTo(beforePoint2, afterPoint2, afterPoint));
    }

    return path;
  }

  function getPointAtLength(start, end, length) {

    const deltaX = end.x - start.x;
    const deltaY = end.y - start.y;

    const totalLength = vectorLength$1(deltaX, deltaY);

    const percent = length / totalLength;

    return {
      x: start.x + deltaX * percent,
      y: start.y + deltaY * percent
    };
  }

  function vectorLength$1(x, y) {
    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
  }

  /**
   * @param {Point[]} points
   * @param {number|Object} [attrs]
   * @param {number} [radius]
   *
   * @return {SVGElement}
   */
  function createLine(points, attrs, radius) {

    if (isNumber(attrs)) {
      radius = attrs;
      attrs = null;
    }

    if (!attrs) {
      attrs = {};
    }

    const line = create$1('path', attrs);

    if (isNumber(radius)) {
      line.dataset.cornerRadius = String(radius);
    }

    return updateLine(line, points);
  }

  /**
   * @param {SVGElement} gfx
   * @param {Point[]} points
   *
   * @return {SVGElement}
   */
  function updateLine(gfx, points) {

    const cornerRadius = parseInt(gfx.dataset.cornerRadius, 10) || 0;

    attr$1(gfx, {
      d: componentsToPath(drawPath(points, cornerRadius))
    });

    return gfx;
  }

  var black = 'hsl(225, 10%, 15%)';
  var white = 'white';

  // element utils //////////////////////

  /**
   * Checks if eventDefinition of the given element matches with semantic type.
   *
   * @param {ModdleElement} event
   * @param {string} eventDefinitionType
   *
   * @return {boolean}
   */
  function isTypedEvent(event, eventDefinitionType) {
    return some(event.eventDefinitions, function(definition) {
      return definition.$type === eventDefinitionType;
    });
  }

  /**
   * Check if element is a throw event.
   *
   * @param {ModdleElement} event
   *
   * @return {boolean}
   */
  function isThrowEvent(event) {
    return (event.$type === 'bpmn:IntermediateThrowEvent') || (event.$type === 'bpmn:EndEvent');
  }

  /**
   * Check if element is a throw event.
   *
   * @param {ModdleElement} element
   *
   * @return {boolean}
   */
  function isCollection(element) {
    var dataObject = element.dataObjectRef;

    return element.isCollection || (dataObject && dataObject.isCollection);
  }


  // color access //////////////////////

  /**
   * @param {Element} element
   * @param {string} [defaultColor]
   * @param {string} [overrideColor]
   *
   * @return {string}
   */
  function getFillColor(element, defaultColor, overrideColor) {
    var di = getDi(element);

    return overrideColor || di.get('color:background-color') || di.get('bioc:fill') || defaultColor || white;
  }

  /**
   * @param {Element} element
   * @param {string} [defaultColor]
   * @param {string} [overrideColor]
   *
   * @return {string}
   */
  function getStrokeColor$1(element, defaultColor, overrideColor) {
    var di = getDi(element);

    return overrideColor || di.get('color:border-color') || di.get('bioc:stroke') || defaultColor || black;
  }

  /**
   * @param {Element} element
   * @param {string} [defaultColor]
   * @param {string} [defaultStrokeColor]
   * @param {string} [overrideColor]
   *
   * @return {string}
   */
  function getLabelColor(element, defaultColor, defaultStrokeColor, overrideColor) {
    var di = getDi(element),
        label = di.get('label');

    return overrideColor || (label && label.get('color:color')) || defaultColor ||
      getStrokeColor$1(element, defaultStrokeColor);
  }

  // cropping path customizations //////////////////////

  /**
   * @param {ShapeLike} shape
   *
   * @return {string} path
   */
  function getCirclePath(shape) {

    var cx = shape.x + shape.width / 2,
        cy = shape.y + shape.height / 2,
        radius = shape.width / 2;

    var circlePath = [
      [ 'M', cx, cy ],
      [ 'm', 0, -radius ],
      [ 'a', radius, radius, 0, 1, 1, 0, 2 * radius ],
      [ 'a', radius, radius, 0, 1, 1, 0, -2 * radius ],
      [ 'z' ]
    ];

    return componentsToPath(circlePath);
  }

  /**
   * @param {ShapeLike} shape
   * @param {number} [borderRadius]
   *
   * @return {string} path
   */
  function getRoundRectPath(shape, borderRadius) {

    var x = shape.x,
        y = shape.y,
        width = shape.width,
        height = shape.height;

    var roundRectPath = [
      [ 'M', x + borderRadius, y ],
      [ 'l', width - borderRadius * 2, 0 ],
      [ 'a', borderRadius, borderRadius, 0, 0, 1, borderRadius, borderRadius ],
      [ 'l', 0, height - borderRadius * 2 ],
      [ 'a', borderRadius, borderRadius, 0, 0, 1, -10, borderRadius ],
      [ 'l', borderRadius * 2 - width, 0 ],
      [ 'a', borderRadius, borderRadius, 0, 0, 1, -10, -10 ],
      [ 'l', 0, borderRadius * 2 - height ],
      [ 'a', borderRadius, borderRadius, 0, 0, 1, borderRadius, -10 ],
      [ 'z' ]
    ];

    return componentsToPath(roundRectPath);
  }

  /**
   * @param {ShapeLike} shape
   *
   * @return {string} path
   */
  function getDiamondPath(shape) {

    var width = shape.width,
        height = shape.height,
        x = shape.x,
        y = shape.y,
        halfWidth = width / 2,
        halfHeight = height / 2;

    var diamondPath = [
      [ 'M', x + halfWidth, y ],
      [ 'l', halfWidth, halfHeight ],
      [ 'l', -halfWidth, halfHeight ],
      [ 'l', -halfWidth, -halfHeight ],
      [ 'z' ]
    ];

    return componentsToPath(diamondPath);
  }

  /**
   * @param {ShapeLike} shape
   *
   * @return {string} path
   */
  function getRectPath(shape) {
    var x = shape.x,
        y = shape.y,
        width = shape.width,
        height = shape.height;

    var rectPath = [
      [ 'M', x, y ],
      [ 'l', width, 0 ],
      [ 'l', 0, height ],
      [ 'l', -width, 0 ],
      [ 'z' ]
    ];

    return componentsToPath(rectPath);
  }

  /**
   * Get width and height from element or overrides.
   *
   * @param {Dimensions|Rect|ShapeLike} bounds
   * @param {Object} overrides
   *
   * @returns {Dimensions}
   */
  function getBounds$1(bounds, overrides = {}) {
    return {
      width: getWidth(bounds, overrides),
      height: getHeight(bounds, overrides)
    };
  }

  /**
   * Get width from element or overrides.
   *
   * @param {Dimensions|Rect|ShapeLike} bounds
   * @param {Object} overrides
   *
   * @returns {number}
   */
  function getWidth(bounds, overrides = {}) {
    return has$1(overrides, 'width') ? overrides.width : bounds.width;
  }

  /**
   * Get height from element or overrides.
   *
   * @param {Dimensions|Rect|ShapeLike} bounds
   * @param {Object} overrides
   *
   * @returns {number}
   */
  function getHeight(bounds, overrides = {}) {
    return has$1(overrides, 'height') ? overrides.height : bounds.height;
  }

  function _mergeNamespaces$1(n, m) {
    m.forEach(function (e) {
      e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
        if (k !== 'default' && !(k in n)) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    });
    return Object.freeze(n);
  }

  /**
   * Flatten array, one level deep.
   *
   * @template T
   *
   * @param {T[][] | T[] | null} [arr]
   *
   * @return {T[]}
   */

  const nativeToString = Object.prototype.toString;
  const nativeHasOwnProperty = Object.prototype.hasOwnProperty;

  function isUndefined$1(obj) {
    return obj === undefined;
  }

  function isArray$2(obj) {
    return nativeToString.call(obj) === '[object Array]';
  }

  /**
   * Return true, if target owns a property with the given key.
   *
   * @param {Object} target
   * @param {String} key
   *
   * @return {Boolean}
   */
  function has(target, key) {
    return nativeHasOwnProperty.call(target, key);
  }


  /**
   * Iterate over collection; returning something
   * (non-undefined) will stop iteration.
   *
   * @template T
   * @param {Collection<T>} collection
   * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator
   *
   * @return {T} return result that stopped the iteration
   */
  function forEach(collection, iterator) {

    let val,
        result;

    if (isUndefined$1(collection)) {
      return;
    }

    const convertKey = isArray$2(collection) ? toNum : identity;

    for (let key in collection) {

      if (has(collection, key)) {
        val = collection[key];

        result = iterator(val, convertKey(key));

        if (result === false) {
          return val;
        }
      }
    }
  }


  function identity(arg) {
    return arg;
  }

  function toNum(arg) {
    return Number(arg);
  }

  /**
   * Assigns style attributes in a style-src compliant way.
   *
   * @param {Element} element
   * @param {...Object} styleSources
   *
   * @return {Element} the element
   */
  function assign(element, ...styleSources) {
    const target = element.style;

    forEach(styleSources, function(style) {
      if (!style) {
        return;
      }

      forEach(style, function(value, key) {
        target[key] = value;
      });
    });

    return element;
  }

  /**
   * Set attribute `name` to `val`, or get attr `name`.
   *
   * @param {Element} el
   * @param {String} name
   * @param {String} [val]
   * @api public
   */
  function attr(el, name, val) {

    // get
    if (arguments.length == 2) {
      return el.getAttribute(name);
    }

    // remove
    if (val === null) {
      return el.removeAttribute(name);
    }

    // set
    el.setAttribute(name, val);

    return el;
  }

  /**
   * Taken from https://github.com/component/classes
   *
   * Without the component bits.
   */

  /**
   * toString reference.
   */

  const toString = Object.prototype.toString;

  /**
   * Wrap `el` in a `ClassList`.
   *
   * @param {Element} el
   * @return {ClassList}
   * @api public
   */

  function classes(el) {
    return new ClassList(el);
  }

  /**
   * Initialize a new ClassList for `el`.
   *
   * @param {Element} el
   * @api private
   */

  function ClassList(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }

  /**
   * Add class `name` if not already present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.add = function(name) {
    this.list.add(name);
    return this;
  };

  /**
   * Remove class `name` when present, or
   * pass a regular expression to remove
   * any which match.
   *
   * @param {String|RegExp} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.remove = function(name) {
    if ('[object RegExp]' == toString.call(name)) {
      return this.removeMatching(name);
    }

    this.list.remove(name);
    return this;
  };

  /**
   * Remove all classes matching `re`.
   *
   * @param {RegExp} re
   * @return {ClassList}
   * @api private
   */

  ClassList.prototype.removeMatching = function(re) {
    const arr = this.array();
    for (let i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };

  /**
   * Toggle class `name`, can force state via `force`.
   *
   * For browsers that support classList, but do not support `force` yet,
   * the mistake will be detected and corrected.
   *
   * @param {String} name
   * @param {Boolean} force
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.toggle = function(name, force) {
    if ('undefined' !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  };

  /**
   * Return an array of classes.
   *
   * @return {Array}
   * @api public
   */

  ClassList.prototype.array = function() {
    return Array.from(this.list);
  };

  /**
   * Check if class `name` is present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */

  ClassList.prototype.has =
  ClassList.prototype.contains = function(name) {
    return this.list.contains(name);
  };

  /**
   * Clear utility
   */

  /**
   * Removes all children from the given element
   *
   * @param {Element} element
   *
   * @return {Element} the element (for chaining)
   */
  function clear(element) {
    var child;

    while ((child = element.firstChild)) {
      element.removeChild(child);
    }

    return element;
  }

  /**
   * Closest
   *
   * @param {Element} el
   * @param {string} selector
   * @param {boolean} checkYourSelf (optional)
   */
  function closest(element, selector, checkYourSelf) {
    var actualElement = checkYourSelf ? element : element.parentNode;

    return actualElement && typeof actualElement.closest === 'function' && actualElement.closest(selector) || null;
  }

  var componentEvent = {};

  var bind$1, unbind$1, prefix$6;

  function detect () {
    bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent';
    unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent';
    prefix$6 = bind$1 !== 'addEventListener' ? 'on' : '';
  }

  /**
   * Bind `el` event `type` to `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var bind_1 = componentEvent.bind = function(el, type, fn, capture){
    if (!bind$1) detect();
    el[bind$1](prefix$6 + type, fn, capture || false);
    return fn;
  };

  /**
   * Unbind `el` event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  var unbind_1 = componentEvent.unbind = function(el, type, fn, capture){
    if (!unbind$1) detect();
    el[unbind$1](prefix$6 + type, fn, capture || false);
    return fn;
  };

  var event = /*#__PURE__*/_mergeNamespaces$1({
    __proto__: null,
    bind: bind_1,
    unbind: unbind_1,
    'default': componentEvent
  }, [componentEvent]);

  /**
   * Module dependencies.
   */

  /**
   * Delegate event `type` to `selector`
   * and invoke `fn(e)`. A callback function
   * is returned which may be passed to `.unbind()`.
   *
   * @param {Element} el
   * @param {String} selector
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @return {Function}
   * @api public
   */

  // Some events don't bubble, so we want to bind to the capture phase instead
  // when delegating.
  var forceCaptureEvents = [ 'focus', 'blur' ];

  function bind(el, selector, type, fn, capture) {
    if (forceCaptureEvents.indexOf(type) !== -1) {
      capture = true;
    }

    return event.bind(el, type, function(e) {
      var target = e.target || e.srcElement;
      e.delegateTarget = closest(target, selector, true);
      if (e.delegateTarget) {
        fn.call(el, e);
      }
    }, capture);
  }

  /**
   * Unbind event `type`'s callback `fn`.
   *
   * @param {Element} el
   * @param {String} type
   * @param {Function} fn
   * @param {Boolean} capture
   * @api public
   */
  function unbind(el, type, fn, capture) {
    if (forceCaptureEvents.indexOf(type) !== -1) {
      capture = true;
    }

    return event.unbind(el, type, fn, capture);
  }

  var delegate = {
    bind,
    unbind
  };

  /**
   * Expose `parse`.
   */

  var domify = parse;

  /**
   * Tests for browser support.
   */

  var innerHTMLBug = false;
  var bugTestDiv;
  if (typeof document !== 'undefined') {
    bugTestDiv = document.createElement('div');
    // Setup
    bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
    bugTestDiv = undefined;
  }

  /**
   * Wrap map from jquery.
   */

  var map = {
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    // for script/link/style tags to work in IE6-8, you have to wrap
    // in a div with a non-whitespace character in front, ha!
    _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
  };

  map.td =
  map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map.option =
  map.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map.thead =
  map.tbody =
  map.colgroup =
  map.caption =
  map.tfoot = [1, '<table>', '</table>'];

  map.polyline =
  map.ellipse =
  map.polygon =
  map.circle =
  map.text =
  map.line =
  map.path =
  map.rect =
  map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

  /**
   * Parse `html` and return a DOM Node instance, which could be a TextNode,
   * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
   * instance, depending on the contents of the `html` string.
   *
   * @param {String} html - HTML string to "domify"
   * @param {Document} doc - The `document` instance to create the Node for
   * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
   * @api private
   */

  function parse(html, doc) {
    if ('string' != typeof html) throw new TypeError('String expected');

    // default to the global `document` object
    if (!doc) doc = document;

    // tag name
    var m = /<([\w:]+)/.exec(html);
    if (!m) return doc.createTextNode(html);

    html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

    var tag = m[1];

    // body support
    if (tag == 'body') {
      var el = doc.createElement('html');
      el.innerHTML = html;
      return el.removeChild(el.lastChild);
    }

    // wrap map
    var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;
    var depth = wrap[0];
    var prefix = wrap[1];
    var suffix = wrap[2];
    var el = doc.createElement('div');
    el.innerHTML = prefix + html + suffix;
    while (depth--) el = el.lastChild;

    // one element
    if (el.firstChild == el.lastChild) {
      return el.removeChild(el.firstChild);
    }

    // several elements
    var fragment = doc.createDocumentFragment();
    while (el.firstChild) {
      fragment.appendChild(el.removeChild(el.firstChild));
    }

    return fragment;
  }

  var domify$1 = domify;

  /**
   * @param { HTMLElement } element
   * @param { String } selector
   *
   * @return { boolean }
   */
  function matches$1(element, selector) {
    return element && typeof element.matches === 'function' && element.matches(selector) || false;
  }

  function query(selector, el) {
    el = el || document;

    return el.querySelector(selector);
  }

  function all(selector, el) {
    el = el || document;

    return el.querySelectorAll(selector);
  }

  function remove$2(el) {
    el.parentNode && el.parentNode.removeChild(el);
  }

  /**
   * @param {SVGElement} gfx
   * @param {number} x
   * @param {number} y
   * @param {number} [angle]
   * @param {number} [amount]
   */
  function transform(gfx, x, y, angle, amount) {
    var translate = createTransform();
    translate.setTranslate(x, y);

    var rotate = createTransform();
    rotate.setRotate(angle || 0, 0, 0);

    var scale = createTransform();
    scale.setScale(1, 1);

    transform$1(gfx, [ translate, rotate, scale ]);
  }


  /**
   * @param {SVGElement} gfx
   * @param {number} x
   * @param {number} y
   */
  function translate$1(gfx, x, y) {
    var translate = createTransform();
    translate.setTranslate(x, y);

    transform$1(gfx, translate);
  }


  /**
   * @param {SVGElement} gfx
   * @param {number} angle
   */
  function rotate(gfx, angle) {
    var rotate = createTransform();
    rotate.setRotate(angle, 0, 0);

    transform$1(gfx, rotate);
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var hat_1 = createCommonjsModule(function (module) {
  var hat = module.exports = function (bits, base) {
      if (!base) base = 16;
      if (bits === undefined) bits = 128;
      if (bits <= 0) return '0';
      
      var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
      for (var i = 2; digits === Infinity; i *= 2) {
          digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
      }
      
      var rem = digits - Math.floor(digits);
      
      var res = '';
      
      for (var i = 0; i < Math.floor(digits); i++) {
          var x = Math.floor(Math.random() * base).toString(base);
          res = x + res;
      }
      
      if (rem) {
          var b = Math.pow(base, rem);
          var x = Math.floor(Math.random() * b).toString(base);
          res = x + res;
      }
      
      var parsed = parseInt(res, base);
      if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
          return hat(bits, base)
      }
      else return res;
  };

  hat.rack = function (bits, base, expandBy) {
      var fn = function (data) {
          var iters = 0;
          do {
              if (iters ++ > 10) {
                  if (expandBy) bits += expandBy;
                  else throw new Error('too many ID collisions, use more bits')
              }
              
              var id = hat(bits, base);
          } while (Object.hasOwnProperty.call(hats, id));
          
          hats[id] = data;
          return id;
      };
      var hats = fn.hats = {};
      
      fn.get = function (id) {
          return fn.hats[id];
      };
      
      fn.set = function (id, value) {
          fn.hats[id] = value;
          return fn;
      };
      
      fn.bits = bits || 128;
      fn.base = base || 16;
      return fn;
  };
  });

  /**
   * Create a new id generator / cache instance.
   *
   * You may optionally provide a seed that is used internally.
   *
   * @param {Seed} seed
   */
  function Ids$1(seed) {
    if (!(this instanceof Ids$1)) {
      return new Ids$1(seed);
    }
    seed = seed || [128, 36, 1];
    this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
  }

  /**
   * Generate a next id.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */
  Ids$1.prototype.next = function (element) {
    return this._seed(element || true);
  };

  /**
   * Generate a next id with a given prefix.
   *
   * @param {Object} [element] element to bind the id to
   *
   * @return {String} id
   */
  Ids$1.prototype.nextPrefixed = function (prefix, element) {
    var id;
    do {
      id = prefix + this.next(true);
    } while (this.assigned(id));

    // claim {prefix}{random}
    this.claim(id, element);

    // return
    return id;
  };

  /**
   * Manually claim an existing id.
   *
   * @param {String} id
   * @param {String} [element] element the id is claimed by
   */
  Ids$1.prototype.claim = function (id, element) {
    this._seed.set(id, element || true);
  };

  /**
   * Returns true if the given id has already been assigned.
   *
   * @param  {String} id
   * @return {Boolean}
   */
  Ids$1.prototype.assigned = function (id) {
    return this._seed.get(id) || false;
  };

  /**
   * Unclaim an id.
   *
   * @param  {String} id the id to unclaim
   */
  Ids$1.prototype.unclaim = function (id) {
    delete this._seed.hats[id];
  };

  /**
   * Clear all claimed ids.
   */
  Ids$1.prototype.clear = function () {
    var hats = this._seed.hats,
      id;
    for (id in hats) {
      this.unclaim(id);
    }
  };

  var markerIds = new Ids$1();

  var ELEMENT_LABEL_DISTANCE$1 = 10,
      INNER_OUTER_DIST = 3,
      PARTICIPANT_STROKE_WIDTH = 1.5,
      TASK_BORDER_RADIUS = 10;

  var DEFAULT_OPACITY = 0.95,
      FULL_OPACITY = 1,
      LOW_OPACITY = 0.25;

  /**
   * @typedef { Partial<{
   *   defaultFillColor: string,
   *   defaultStrokeColor: string,
   *   defaultLabelColor: string
   * }> } BpmnRendererConfig
   *
   * @typedef { Partial<{
   *   fill: string,
   *   stroke: string,
   *   width: string,
   *   height: string
   * }> } Attrs
   */

  /**
   * @typedef { import('../model/Types').Element } Element
   * @typedef { import('../model/Types').Shape } Shape
   * @typedef { import('../model/Types').Connection } Connection
   */

  /**
   * A renderer for BPMN elements
   *
   * @param {BpmnRendererConfig} config
   * @param {import('diagram-js/lib/core/EventBus').default} eventBus
   * @param {import('diagram-js/lib/draw/Styles').default} styles
   * @param {import('./PathMap').default} pathMap
   * @param {import('diagram-js/lib/core/Canvas').default} canvas
   * @param {import('./TextRenderer').default} textRenderer
   * @param {number} [priority]
   */
  function BpmnRenderer(
      config, eventBus, styles, pathMap,
      canvas, textRenderer, priority) {

    BaseRenderer.call(this, eventBus, priority);

    var defaultFillColor = config && config.defaultFillColor,
        defaultStrokeColor = config && config.defaultStrokeColor,
        defaultLabelColor = config && config.defaultLabelColor;

    function shapeStyle(attrs) {
      return styles.computeStyle(attrs, {
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        stroke: black,
        strokeWidth: 2,
        fill: 'white'
      });
    }

    function lineStyle(attrs) {
      return styles.computeStyle(attrs, [ 'no-fill' ], {
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        stroke: black,
        strokeWidth: 2
      });
    }

    function addMarker(id, options) {
      var {
        ref = { x: 0, y: 0 },
        scale = 1,
        element,
        parentGfx = canvas._svg
      } = options;

      var marker = create$1('marker', {
        id: id,
        viewBox: '0 0 20 20',
        refX: ref.x,
        refY: ref.y,
        markerWidth: 20 * scale,
        markerHeight: 20 * scale,
        orient: 'auto'
      });

      append(marker, element);

      var defs = query(':scope > defs', parentGfx);

      if (!defs) {
        defs = create$1('defs');

        append(parentGfx, defs);
      }

      append(defs, marker);
    }

    function marker(parentGfx, type, fill, stroke) {


      var id = markerIds.nextPrefixed('marker-');

      createMarker(parentGfx, id, type, fill, stroke);

      return 'url(#' + id + ')';
    }

    function createMarker(parentGfx, id, type, fill, stroke) {

      if (type === 'sequenceflow-end') {
        var sequenceflowEnd = create$1('path', {
          d: 'M 1 5 L 11 10 L 1 15 Z',
          ...shapeStyle({
            fill: stroke,
            stroke: stroke,
            strokeWidth: 1
          })
        });

        addMarker(id, {
          element: sequenceflowEnd,
          ref: { x: 11, y: 10 },
          scale: 0.5,
          parentGfx
        });
      }

      if (type === 'messageflow-start') {
        var messageflowStart = create$1('circle', {
          cx: 6,
          cy: 6,
          r: 3.5,
          ...shapeStyle({
            fill,
            stroke: stroke,
            strokeWidth: 1,

            // fix for safari / chrome / firefox bug not correctly
            // resetting stroke dash array
            strokeDasharray: [ 10000, 1 ]
          })
        });

        addMarker(id, {
          element: messageflowStart,
          ref: { x: 6, y: 6 },
          parentGfx
        });
      }

      if (type === 'messageflow-end') {
        var messageflowEnd = create$1('path', {
          d: 'm 1 5 l 0 -3 l 7 3 l -7 3 z',
          ...shapeStyle({
            fill,
            stroke: stroke,
            strokeWidth: 1,

            // fix for safari / chrome / firefox bug not correctly
            // resetting stroke dash array
            strokeDasharray: [ 10000, 1 ]
          })
        });

        addMarker(id, {
          element: messageflowEnd,
          ref: { x: 8.5, y: 5 },
          parentGfx
        });
      }

      if (type === 'association-start') {
        var associationStart = create$1('path', {
          d: 'M 11 5 L 1 10 L 11 15',
          ...lineStyle({
            fill: 'none',
            stroke,
            strokeWidth: 1.5,

            // fix for safari / chrome / firefox bug not correctly
            // resetting stroke dash array
            strokeDasharray: [ 10000, 1 ]
          })
        });

        addMarker(id, {
          element: associationStart,
          ref: { x: 1, y: 10 },
          scale: 0.5,
          parentGfx
        });
      }

      if (type === 'association-end') {
        var associationEnd = create$1('path', {
          d: 'M 1 5 L 11 10 L 1 15',
          ...lineStyle({
            fill: 'none',
            stroke,
            strokeWidth: 1.5,

            // fix for safari / chrome / firefox bug not correctly
            // resetting stroke dash array
            strokeDasharray: [ 10000, 1 ]
          })
        });

        addMarker(id, {
          element: associationEnd,
          ref: { x: 11, y: 10 },
          scale: 0.5,
          parentGfx
        });
      }

      if (type === 'conditional-flow-marker') {
        var conditionalFlowMarker = create$1('path', {
          d: 'M 0 10 L 8 6 L 16 10 L 8 14 Z',
          ...shapeStyle({
            fill,
            stroke: stroke
          })
        });

        addMarker(id, {
          element: conditionalFlowMarker,
          ref: { x: -1, y: 10 },
          scale: 0.5,
          parentGfx
        });
      }

      if (type === 'conditional-default-flow-marker') {
        var defaultFlowMarker = create$1('path', {
          d: 'M 6 4 L 10 16',
          ...shapeStyle({
            stroke: stroke,
            fill: 'none'
          })
        });

        addMarker(id, {
          element: defaultFlowMarker,
          ref: { x: 0, y: 10 },
          scale: 0.5,
          parentGfx
        });
      }
    }

    function drawCircle(parentGfx, width, height, offset, attrs = {}) {

      if (isObject(offset)) {
        attrs = offset;
        offset = 0;
      }

      offset = offset || 0;

      attrs = shapeStyle(attrs);

      var cx = width / 2,
          cy = height / 2;

      var circle = create$1('circle', {
        cx: cx,
        cy: cy,
        r: Math.round((width + height) / 4 - offset),
        ...attrs
      });

      append(parentGfx, circle);

      return circle;
    }

    function drawRect(parentGfx, width, height, r, offset, attrs) {

      if (isObject(offset)) {
        attrs = offset;
        offset = 0;
      }

      offset = offset || 0;

      attrs = shapeStyle(attrs);

      var rect = create$1('rect', {
        x: offset,
        y: offset,
        width: width - offset * 2,
        height: height - offset * 2,
        rx: r,
        ry: r,
        ...attrs
      });

      append(parentGfx, rect);

      return rect;
    }

    function drawDiamond(parentGfx, width, height, attrs) {

      var x_2 = width / 2;
      var y_2 = height / 2;

      var points = [
        { x: x_2, y: 0 },
        { x: width, y: y_2 },
        { x: x_2, y: height },
        { x: 0, y: y_2 }
      ];

      var pointsString = points.map(function(point) {
        return point.x + ',' + point.y;
      }).join(' ');

      attrs = shapeStyle(attrs);

      var polygon = create$1('polygon', {
        ...attrs,
        points: pointsString
      });

      append(parentGfx, polygon);

      return polygon;
    }

    /**
     * @param {SVGElement} parentGfx
     * @param {Point[]} waypoints
     * @param {any} attrs
     * @param {number} [radius]
     *
     * @return {SVGElement}
     */
    function drawLine(parentGfx, waypoints, attrs, radius) {
      attrs = lineStyle(attrs);

      var line = createLine(waypoints, attrs, radius);

      append(parentGfx, line);

      return line;
    }

    /**
     * @param {SVGElement} parentGfx
     * @param {Point[]} waypoints
     * @param {any} attrs
     *
     * @return {SVGElement}
     */
    function drawConnectionSegments(parentGfx, waypoints, attrs) {
      return drawLine(parentGfx, waypoints, attrs, 5);
    }

    function drawPath(parentGfx, d, attrs) {
      attrs = lineStyle(attrs);

      var path = create$1('path', {
        ...attrs,
        d
      });

      append(parentGfx, path);

      return path;
    }

    function drawMarker(type, parentGfx, path, attrs) {
      return drawPath(parentGfx, path, assign$1({ 'data-marker': type }, attrs));
    }

    function renderer(type) {
      return handlers[type];
    }

    function as(type) {
      return function(parentGfx, element, attrs) {
        return renderer(type)(parentGfx, element, attrs);
      };
    }

    var eventIconRenderers = {
      'bpmn:MessageEventDefinition': function(parentGfx, element, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_MESSAGE', {
          xScaleFactor: 0.9,
          yScaleFactor: 0.9,
          containerWidth: attrs.width || element.width,
          containerHeight: attrs.height || element.height,
          position: {
            mx: 0.235,
            my: 0.315
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
          : getFillColor(element, defaultFillColor, attrs.fill);

        var stroke = isThrowing
          ? getFillColor(element, defaultFillColor, attrs.fill)
          : getStrokeColor$1(element, defaultStrokeColor, attrs.stroke);

        var messagePath = drawPath(parentGfx, pathData, {
          fill,
          stroke,
          strokeWidth: 1
        });

        return messagePath;
      },
      'bpmn:TimerEventDefinition': function(parentGfx, element, attrs = {}) {
        var baseWidth = attrs.width || element.width;
        var baseHeight = attrs.height || element.height;

        // use a lighter stroke for event suprocess icons
        var strokeWidth = attrs.width ? 1 : 2;

        var circle = drawCircle(parentGfx, baseWidth, baseHeight, 0.2 * baseHeight, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: strokeWidth
        });

        var pathData = pathMap.getScaledPath('EVENT_TIMER_WH', {
          xScaleFactor: 0.75,
          yScaleFactor: 0.75,
          containerWidth: baseWidth,
          containerHeight: baseHeight,
          position: {
            mx: 0.5,
            my: 0.5
          }
        });

        drawPath(parentGfx, pathData, {
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: strokeWidth
        });

        for (var i = 0; i < 12; i++) {
          var linePathData = pathMap.getScaledPath('EVENT_TIMER_LINE', {
            xScaleFactor: 0.75,
            yScaleFactor: 0.75,
            containerWidth: baseWidth,
            containerHeight: baseHeight,
            position: {
              mx: 0.5,
              my: 0.5
            }
          });

          var width = baseWidth / 2,
              height = baseHeight / 2;

          drawPath(parentGfx, linePathData, {
            strokeWidth: 1,
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            transform: 'rotate(' + (i * 30) + ',' + height + ',' + width + ')'
          });
        }

        return circle;
      },
      'bpmn:EscalationEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_ESCALATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.5,
            my: 0.2
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:ConditionalEventDefinition': function(parentGfx, event, attrs = {}) {
        var pathData = pathMap.getScaledPath('EVENT_CONDITIONAL', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.5,
            my: 0.222
          }
        });

        return drawPath(parentGfx, pathData, {
          fill: getFillColor(event, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:LinkEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_LINK', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: event.width,
          containerHeight: event.height,
          position: {
            mx: 0.57,
            my: 0.263
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:ErrorEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_ERROR', {
          xScaleFactor: 1.1,
          yScaleFactor: 1.1,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.2,
            my: 0.722
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:CancelEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_CANCEL_45', {
          xScaleFactor: 1.0,
          yScaleFactor: 1.0,
          containerWidth: event.width,
          containerHeight: event.height,
          position: {
            mx: 0.638,
            my: -0.055
          }
        });

        var fill = isThrowing ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke) : 'none';

        var path = drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        rotate(path, 45);

        return path;
      },
      'bpmn:CompensateEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_COMPENSATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.22,
            my: 0.5
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:SignalEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_SIGNAL', {
          xScaleFactor: 0.9,
          yScaleFactor: 0.9,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.5,
            my: 0.2
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          strokeWidth: 1,
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
        });
      },
      'bpmn:MultipleEventDefinition': function(parentGfx, event, attrs = {}, isThrowing) {
        var pathData = pathMap.getScaledPath('EVENT_MULTIPLE', {
          xScaleFactor: 1.1,
          yScaleFactor: 1.1,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.211,
            my: 0.36
          }
        });

        var fill = isThrowing
          ? getStrokeColor$1(event, defaultStrokeColor, attrs.stroke)
          : getFillColor(event, defaultFillColor, attrs.fill);

        return drawPath(parentGfx, pathData, {
          fill,
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:ParallelMultipleEventDefinition': function(parentGfx, event, attrs = {}) {
        var pathData = pathMap.getScaledPath('EVENT_PARALLEL_MULTIPLE', {
          xScaleFactor: 1.2,
          yScaleFactor: 1.2,
          containerWidth: attrs.width || event.width,
          containerHeight: attrs.height || event.height,
          position: {
            mx: 0.458,
            my: 0.194
          }
        });

        return drawPath(parentGfx, pathData, {
          fill: getFillColor(event, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(event, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });
      },
      'bpmn:TerminateEventDefinition': function(parentGfx, element, attrs = {}) {
        var circle = drawCircle(parentGfx, element.width, element.height, 8, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 4
        });

        return circle;
      }
    };

    function renderEventIcon(element, parentGfx, attrs = {}, proxyElement) {
      var semantic = getBusinessObject(element),
          isThrowing = isThrowEvent(semantic);

      var nodeElement = proxyElement || element;

      if (semantic.get('eventDefinitions') && semantic.get('eventDefinitions').length > 1) {
        if (semantic.get('parallelMultiple')) {
          return eventIconRenderers[ 'bpmn:ParallelMultipleEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
        }
        else {
          return eventIconRenderers[ 'bpmn:MultipleEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
        }
      }

      if (isTypedEvent(semantic, 'bpmn:MessageEventDefinition')) {
        return eventIconRenderers[ 'bpmn:MessageEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:TimerEventDefinition')) {
        return eventIconRenderers[ 'bpmn:TimerEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:ConditionalEventDefinition')) {
        return eventIconRenderers[ 'bpmn:ConditionalEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:SignalEventDefinition')) {
        return eventIconRenderers[ 'bpmn:SignalEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:EscalationEventDefinition')) {
        return eventIconRenderers[ 'bpmn:EscalationEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:LinkEventDefinition')) {
        return eventIconRenderers[ 'bpmn:LinkEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:ErrorEventDefinition')) {
        return eventIconRenderers[ 'bpmn:ErrorEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:CancelEventDefinition')) {
        return eventIconRenderers[ 'bpmn:CancelEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:CompensateEventDefinition')) {
        return eventIconRenderers[ 'bpmn:CompensateEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      if (isTypedEvent(semantic, 'bpmn:TerminateEventDefinition')) {
        return eventIconRenderers[ 'bpmn:TerminateEventDefinition' ](parentGfx, nodeElement, attrs, isThrowing);
      }

      return null;
    }

    var taskMarkerRenderers = {
      'ParticipantMultiplicityMarker': function(parentGfx, element, attrs = {}) {
        var width = getWidth(element, attrs),
            height = getHeight(element, attrs);

        var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: width,
          containerHeight: height,
          position: {
            mx: ((width / 2 - 6) / width),
            my: (height - 15) / height
          }
        });

        drawMarker('participant-multiplicity', parentGfx, markerPath, {
          strokeWidth: 2,
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      },
      'SubProcessMarker': function(parentGfx, element, attrs = {}) {
        var markerRect = drawRect(parentGfx, 14, 14, 0, {
          strokeWidth: 1,
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });

        translate$1(markerRect, element.width / 2 - 7.5, element.height - 20);

        var markerPath = pathMap.getScaledPath('MARKER_SUB_PROCESS', {
          xScaleFactor: 1.5,
          yScaleFactor: 1.5,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: (element.width / 2 - 7.5) / element.width,
            my: (element.height - 20) / element.height
          }
        });

        drawMarker('sub-process', parentGfx, markerPath, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      },
      'ParallelMarker': function(parentGfx, element, attrs) {
        var width = getWidth(element, attrs),
            height = getHeight(element, attrs);

        var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: width,
          containerHeight: height,
          position: {
            mx: ((width / 2 + attrs.parallel) / width),
            my: (height - 20) / height
          }
        });

        drawMarker('parallel', parentGfx, markerPath, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      },
      'SequentialMarker': function(parentGfx, element, attrs) {
        var markerPath = pathMap.getScaledPath('MARKER_SEQUENTIAL', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: ((element.width / 2 + attrs.seq) / element.width),
            my: (element.height - 19) / element.height
          }
        });

        drawMarker('sequential', parentGfx, markerPath, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      },
      'CompensationMarker': function(parentGfx, element, attrs) {
        var markerMath = pathMap.getScaledPath('MARKER_COMPENSATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: ((element.width / 2 + attrs.compensation) / element.width),
            my: (element.height - 13) / element.height
          }
        });

        drawMarker('compensation', parentGfx, markerMath, {
          strokeWidth: 1,
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      },
      'LoopMarker': function(parentGfx, element, attrs) {
        var width = getWidth(element, attrs),
            height = getHeight(element, attrs);

        var markerPath = pathMap.getScaledPath('MARKER_LOOP', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: width,
          containerHeight: height,
          position: {
            mx: ((width / 2 + attrs.loop) / width),
            my: (height - 7) / height
          }
        });

        drawMarker('loop', parentGfx, markerPath, {
          strokeWidth: 1.5,
          fill: 'none',
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeMiterlimit: 0.5
        });
      },
      'AdhocMarker': function(parentGfx, element, attrs) {
        var width = getWidth(element, attrs),
            height = getHeight(element, attrs);

        var markerPath = pathMap.getScaledPath('MARKER_ADHOC', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: width,
          containerHeight: height,
          position: {
            mx: ((width / 2 + attrs.adhoc) / width),
            my: (height - 15) / height
          }
        });

        drawMarker('adhoc', parentGfx, markerPath, {
          strokeWidth: 1,
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });
      }
    };

    function renderTaskMarker(type, parentGfx, element, attrs) {
      taskMarkerRenderers[ type ](parentGfx, element, attrs);
    }

    function renderTaskMarkers(parentGfx, element, taskMarkers = [], attrs = {}) {
      attrs = {
        fill: attrs.fill,
        stroke: attrs.stroke,
        width: getWidth(element, attrs),
        height: getHeight(element, attrs)
      };

      var semantic = getBusinessObject(element);

      var subprocess = taskMarkers.includes('SubProcessMarker');

      if (subprocess) {
        attrs = {
          ...attrs,
          seq: -21,
          parallel: -22,
          compensation: -25,
          loop: -18,
          adhoc: 10
        };
      } else {
        attrs = {
          ...attrs,
          seq: -5,
          parallel: -6,
          compensation: -7,
          loop: 0,
          adhoc: -8
        };
      }

      if (semantic.get('isForCompensation')) {
        taskMarkers.push('CompensationMarker');
      }

      if (is$1(semantic, 'bpmn:AdHocSubProcess')) {
        taskMarkers.push('AdhocMarker');

        if (!subprocess) {
          assign$1(attrs, { compensation: attrs.compensation - 18 });
        }
      }

      var loopCharacteristics = semantic.get('loopCharacteristics'),
          isSequential = loopCharacteristics && loopCharacteristics.get('isSequential');

      if (loopCharacteristics) {

        assign$1(attrs, {
          compensation: attrs.compensation - 18,
        });

        if (taskMarkers.includes('AdhocMarker')) {
          assign$1(attrs, {
            seq: -23,
            loop: -18,
            parallel: -24
          });
        }

        if (isSequential === undefined) {
          taskMarkers.push('LoopMarker');
        }

        if (isSequential === false) {
          taskMarkers.push('ParallelMarker');
        }

        if (isSequential === true) {
          taskMarkers.push('SequentialMarker');
        }
      }

      if (taskMarkers.includes('CompensationMarker') && taskMarkers.length === 1) {
        assign$1(attrs, {
          compensation: -8
        });
      }

      forEach$1(taskMarkers, function(marker) {
        renderTaskMarker(marker, parentGfx, element, attrs);
      });
    }

    function renderLabel(parentGfx, label, attrs = {}) {
      attrs = assign$1({
        size: {
          width: 100
        }
      }, attrs);

      var text = textRenderer.createText(label || '', attrs);

      classes$1(text).add('djs-label');

      append(parentGfx, text);

      return text;
    }

    function renderEmbeddedLabel(parentGfx, element, align, attrs = {}) {
      var semantic = getBusinessObject(element);

      var box = getBounds$1({
        x: element.x,
        y: element.y,
        width: element.width,
        height: element.height
      }, attrs);

      return renderLabel(parentGfx, semantic.name, {
        align,
        box,
        padding: 7,
        style: {
          fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor, attrs.stroke)
        }
      });
    }

    function renderExternalLabel(parentGfx, element, attrs = {}) {
      var box = {
        width: 90,
        height: 30,
        x: element.width / 2 + element.x,
        y: element.height / 2 + element.y
      };

      return renderLabel(parentGfx, getLabel(element), {
        box: box,
        fitBox: true,
        style: assign$1(
          {},
          textRenderer.getExternalStyle(),
          {
            fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor, attrs.stroke)
          }
        )
      });
    }

    function renderLaneLabel(parentGfx, text, element, attrs = {}) {
      var isHorizontalLane = isHorizontal$3(element);

      var textBox = renderLabel(parentGfx, text, {
        box: {
          height: 30,
          width: isHorizontalLane ? getHeight(element, attrs) : getWidth(element, attrs),
        },
        align: 'center-middle',
        style: {
          fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor, attrs.stroke)
        }
      });

      if (isHorizontalLane) {
        var top = -1 * getHeight(element, attrs);
        transform(textBox, 0, -top, 270);
      }
    }

    function renderActivity(parentGfx, element, attrs = {}) {
      var {
        width,
        height
      } = getBounds$1(element, attrs);

      return drawRect(parentGfx, width, height, TASK_BORDER_RADIUS, {
        ...attrs,
        fill: getFillColor(element, defaultFillColor, attrs.fill),
        fillOpacity: DEFAULT_OPACITY,
        stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
      });
    }

    function renderAssociation(parentGfx, element, attrs = {}) {
      var semantic = getBusinessObject(element);

      var fill = getFillColor(element, defaultFillColor, attrs.fill),
          stroke = getStrokeColor$1(element, defaultStrokeColor, attrs.stroke);

      if (semantic.get('associationDirection') === 'One' ||
          semantic.get('associationDirection') === 'Both') {
        attrs.markerEnd = marker(parentGfx, 'association-end', fill, stroke);
      }

      if (semantic.get('associationDirection') === 'Both') {
        attrs.markerStart = marker(parentGfx, 'association-start', fill, stroke);
      }

      attrs = pickAttrs(attrs, [
        'markerStart',
        'markerEnd'
      ]);

      return drawConnectionSegments(parentGfx, element.waypoints, {
        ...attrs,
        stroke,
        strokeDasharray: '0, 5'
      });
    }

    function renderDataObject(parentGfx, element, attrs = {}) {
      var fill = getFillColor(element, defaultFillColor, attrs.fill),
          stroke = getStrokeColor$1(element, defaultStrokeColor, attrs.stroke);

      var pathData = pathMap.getScaledPath('DATA_OBJECT_PATH', {
        xScaleFactor: 1,
        yScaleFactor: 1,
        containerWidth: element.width,
        containerHeight: element.height,
        position: {
          mx: 0.474,
          my: 0.296
        }
      });

      var dataObject = drawPath(parentGfx, pathData, {
        fill,
        fillOpacity: DEFAULT_OPACITY,
        stroke
      });

      var semantic = getBusinessObject(element);

      if (isCollection(semantic)) {
        var collectionPathData = pathMap.getScaledPath('DATA_OBJECT_COLLECTION_PATH', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.33,
            my: (element.height - 18) / element.height
          }
        });

        drawPath(parentGfx, collectionPathData, {
          strokeWidth: 2,
          fill,
          stroke
        });
      }

      return dataObject;
    }

    function renderEvent(parentGfx, element, attrs = {}) {
      return drawCircle(parentGfx, element.width, element.height, {
        fillOpacity: DEFAULT_OPACITY,
        ...attrs,
        fill: getFillColor(element, defaultFillColor, attrs.fill),
        stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
      });
    }

    function renderGateway(parentGfx, element, attrs = {}) {
      return drawDiamond(parentGfx, element.width, element.height, {
        fill: getFillColor(element, defaultFillColor, attrs.fill),
        fillOpacity: DEFAULT_OPACITY,
        stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
      });
    }

    function renderLane(parentGfx, element, attrs = {}) {
      var lane = drawRect(parentGfx, getWidth(element, attrs), getHeight(element, attrs), 0, {
        fill: getFillColor(element, defaultFillColor, attrs.fill),
        fillOpacity: attrs.fillOpacity || DEFAULT_OPACITY,
        stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
        strokeWidth: 1.5
      });

      var semantic = getBusinessObject(element);

      if (is$1(semantic, 'bpmn:Lane')) {
        var text = semantic.get('name');

        renderLaneLabel(parentGfx, text, element, attrs);
      }

      return lane;
    }

    function renderSubProcess(parentGfx, element, attrs = {}) {
      var activity = renderActivity(parentGfx, element, attrs);

      var expanded = isExpanded(element);

      if (isEventSubProcess(element)) {
        attr$1(activity, {
          strokeDasharray: '0, 5.5',
          strokeWidth: 2.5
        });

        if (!expanded) {
          var flowElements = getBusinessObject(element).flowElements || [];
          var startEvents = flowElements.filter(e => is$1(e, 'bpmn:StartEvent'));

          if (startEvents.length === 1) {
            renderEventSubProcessIcon(startEvents[0], parentGfx, attrs, element);
          }
        }
      }

      renderEmbeddedLabel(parentGfx, element, expanded ? 'center-top' : 'center-middle', attrs);

      if (expanded) {
        renderTaskMarkers(parentGfx, element, undefined, attrs);
      } else {
        renderTaskMarkers(parentGfx, element, [ 'SubProcessMarker' ], attrs);
      }

      return activity;
    }

    function renderEventSubProcessIcon(startEvent, parentGfx, attrs, proxyElement) {
      var iconSize = 22;

      // match the colors of the enclosing subprocess
      var proxyAttrs = {
        fill: getFillColor(proxyElement, defaultFillColor, attrs.fill),
        stroke: getStrokeColor$1(proxyElement, defaultStrokeColor, attrs.stroke),
        width: iconSize,
        height: iconSize
      };

      var interrupting = getBusinessObject(startEvent).isInterrupting;
      var strokeDasharray = interrupting ? 0 : 3;

      // better visibility for non-interrupting events
      var strokeWidth = interrupting ? 1 : 1.2;

      // make the icon look larger by drawing a smaller circle
      var circleSize = 20;
      var shift = (iconSize - circleSize) / 2;
      var transform = 'translate(' + shift + ',' + shift + ')';

      drawCircle(parentGfx, circleSize, circleSize, {
        fill: proxyAttrs.fill,
        stroke: proxyAttrs.stroke,
        strokeWidth,
        strokeDasharray,
        transform
      });

      renderEventIcon(startEvent, parentGfx, proxyAttrs, proxyElement);
    }

    function renderTask(parentGfx, element, attrs = {}) {
      var activity = renderActivity(parentGfx, element, attrs);

      renderEmbeddedLabel(parentGfx, element, 'center-middle', attrs);

      renderTaskMarkers(parentGfx, element, undefined, attrs);

      return activity;
    }

    var handlers = this.handlers = {
      'bpmn:AdHocSubProcess': function(parentGfx, element, attrs = {}) {
        if (isExpanded(element)) {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke',
            'width',
            'height'
          ]);
        } else {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke'
          ]);
        }

        return renderSubProcess(parentGfx, element, attrs);
      },
      'bpmn:Association': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderAssociation(parentGfx, element, attrs);
      },
      'bpmn:BoundaryEvent': function(parentGfx, element, attrs = {}) {
        var { renderIcon = true } = attrs;

        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var semantic = getBusinessObject(element),
            cancelActivity = semantic.get('cancelActivity');

        attrs = {
          strokeWidth: 1.5,
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          fillOpacity: FULL_OPACITY,
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        };

        if (!cancelActivity) {
          attrs.strokeDasharray = '6';
        }

        var event = renderEvent(parentGfx, element, attrs);

        drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, {
          ...attrs,
          fill: 'none'
        });

        if (renderIcon) {
          renderEventIcon(element, parentGfx, attrs);
        }

        return event;
      },
      'bpmn:BusinessRuleTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        var headerData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_MAIN', {
          abspos: {
            x: 8,
            y: 8
          }
        });

        var businessPath = drawPath(parentGfx, headerData);

        attr$1(businessPath, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        var headerPathData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_HEADER', {
          abspos: {
            x: 8,
            y: 8
          }
        });

        var businessHeaderPath = drawPath(parentGfx, headerPathData);

        attr$1(businessHeaderPath, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return task;
      },
      'bpmn:CallActivity': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderSubProcess(parentGfx, element, {
          strokeWidth: 5,
          ...attrs
        });
      },
      'bpmn:ComplexGateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var gateway = renderGateway(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('GATEWAY_COMPLEX', {
          xScaleFactor: 0.5,
          yScaleFactor:0.5,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.46,
            my: 0.26
          }
        });

        drawPath(parentGfx, pathData, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return gateway;
      },
      'bpmn:DataInput': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var arrowPathData = pathMap.getRawPath('DATA_ARROW');

        var dataObject = renderDataObject(parentGfx, element, attrs);

        drawPath(parentGfx, arrowPathData, {
          fill: 'none',
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return dataObject;
      },
      'bpmn:DataInputAssociation': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderAssociation(parentGfx, element, {
          ...attrs,
          markerEnd: marker(parentGfx, 'association-end', getFillColor(element, defaultFillColor, attrs.fill), getStrokeColor$1(element, defaultStrokeColor, attrs.stroke))
        });
      },
      'bpmn:DataObject': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderDataObject(parentGfx, element, attrs);
      },
      'bpmn:DataObjectReference': as('bpmn:DataObject'),
      'bpmn:DataOutput': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var arrowPathData = pathMap.getRawPath('DATA_ARROW');

        var dataObject = renderDataObject(parentGfx, element, attrs);

        drawPath(parentGfx, arrowPathData, {
          strokeWidth: 1,
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });

        return dataObject;
      },
      'bpmn:DataOutputAssociation': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderAssociation(parentGfx, element, {
          ...attrs,
          markerEnd: marker(parentGfx, 'association-end', getFillColor(element, defaultFillColor, attrs.fill), getStrokeColor$1(element, defaultStrokeColor, attrs.stroke))
        });
      },
      'bpmn:DataStoreReference': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var dataStorePath = pathMap.getScaledPath('DATA_STORE', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0,
            my: 0.133
          }
        });

        return drawPath(parentGfx, dataStorePath, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          fillOpacity: DEFAULT_OPACITY,
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 2
        });
      },
      'bpmn:EndEvent': function(parentGfx, element, attrs = {}) {
        var { renderIcon = true } = attrs;

        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var event = renderEvent(parentGfx, element, {
          ...attrs,
          strokeWidth: 4
        });

        if (renderIcon) {
          renderEventIcon(element, parentGfx, attrs);
        }

        return event;
      },
      'bpmn:EventBasedGateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var semantic = getBusinessObject(element);

        var diamond = renderGateway(parentGfx, element, attrs);

        drawCircle(parentGfx, element.width, element.height, element.height * 0.20, {
          fill: getFillColor(element, 'none', attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        var type = semantic.get('eventGatewayType'),
            instantiate = !!semantic.get('instantiate');

        function drawEvent() {

          var pathData = pathMap.getScaledPath('GATEWAY_EVENT_BASED', {
            xScaleFactor: 0.18,
            yScaleFactor: 0.18,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.36,
              my: 0.44
            }
          });

          drawPath(parentGfx, pathData, {
            fill: 'none',
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            strokeWidth: 2
          });
        }

        if (type === 'Parallel') {
          var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
            xScaleFactor: 0.4,
            yScaleFactor: 0.4,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.474,
              my: 0.296
            }
          });

          drawPath(parentGfx, pathData, {
            fill: 'none',
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            strokeWidth: 1
          });
        } else if (type === 'Exclusive') {
          if (!instantiate) {
            drawCircle(parentGfx, element.width, element.height, element.height * 0.26, {
              fill: 'none',
              stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
              strokeWidth: 1
            });
          }

          drawEvent();
        }


        return diamond;
      },
      'bpmn:ExclusiveGateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var gateway = renderGateway(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('GATEWAY_EXCLUSIVE', {
          xScaleFactor: 0.4,
          yScaleFactor: 0.4,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.32,
            my: 0.3
          }
        });

        var di = getDi(element);

        if (di.get('isMarkerVisible')) {
          drawPath(parentGfx, pathData, {
            fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            strokeWidth: 1
          });
        }

        return gateway;
      },
      'bpmn:Gateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderGateway(parentGfx, element, attrs);
      },
      'bpmn:Group': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke',
          'width',
          'height'
        ]);

        return drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, {
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1.5,
          strokeDasharray: '10, 6, 0, 6',
          fill: 'none',
          pointerEvents: 'none',
          width: getWidth(element, attrs),
          height: getHeight(element, attrs)
        });
      },
      'bpmn:InclusiveGateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var gateway = renderGateway(parentGfx, element, attrs);

        drawCircle(parentGfx, element.width, element.height, element.height * 0.24, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 2.5
        });

        return gateway;
      },
      'bpmn:IntermediateEvent': function(parentGfx, element, attrs = {}) {
        var { renderIcon = true } = attrs;

        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var outer = renderEvent(parentGfx, element, {
          ...attrs,
          strokeWidth: 1.5
        });

        drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, {
          fill: 'none',
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1.5
        });

        if (renderIcon) {
          renderEventIcon(element, parentGfx, attrs);
        }

        return outer;
      },
      'bpmn:IntermediateCatchEvent': as('bpmn:IntermediateEvent'),
      'bpmn:IntermediateThrowEvent': as('bpmn:IntermediateEvent'),
      'bpmn:Lane': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke',
          'width',
          'height'
        ]);

        return renderLane(parentGfx, element, {
          ...attrs,
          fillOpacity: LOW_OPACITY
        });
      },
      'bpmn:ManualTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('TASK_TYPE_MANUAL', {
          abspos: {
            x: 17,
            y: 15
          }
        });

        drawPath(parentGfx, pathData, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 0.5
        });

        return task;
      },
      'bpmn:MessageFlow': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var semantic = getBusinessObject(element),
            di = getDi(element);

        var fill = getFillColor(element, defaultFillColor, attrs.fill),
            stroke = getStrokeColor$1(element, defaultStrokeColor, attrs.stroke);

        var path = drawConnectionSegments(parentGfx, element.waypoints, {
          markerEnd: marker(parentGfx, 'messageflow-end', fill, stroke),
          markerStart: marker(parentGfx, 'messageflow-start', fill, stroke),
          stroke,
          strokeDasharray: '10, 11',
          strokeWidth: 1.5
        });

        if (semantic.get('messageRef')) {
          var midPoint = path.getPointAtLength(path.getTotalLength() / 2);

          var markerPathData = pathMap.getScaledPath('MESSAGE_FLOW_MARKER', {
            abspos: {
              x: midPoint.x,
              y: midPoint.y
            }
          });

          var messageAttrs = {
            strokeWidth: 1
          };

          if (di.get('messageVisibleKind') === 'initiating') {
            messageAttrs.fill = fill;
            messageAttrs.stroke = stroke;
          } else {
            messageAttrs.fill = stroke;
            messageAttrs.stroke = fill;
          }

          var message = drawPath(parentGfx, markerPathData, messageAttrs);

          var messageRef = semantic.get('messageRef'),
              name = messageRef.get('name');

          var label = renderLabel(parentGfx, name, {
            align: 'center-top',
            fitBox: true,
            style: {
              fill: stroke
            }
          });

          var messageBounds = message.getBBox(),
              labelBounds = label.getBBox();

          var translateX = midPoint.x - labelBounds.width / 2,
              translateY = midPoint.y + messageBounds.height / 2 + ELEMENT_LABEL_DISTANCE$1;

          transform(label, translateX, translateY, 0);
        }

        return path;
      },
      'bpmn:ParallelGateway': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var diamond = renderGateway(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
          xScaleFactor: 0.6,
          yScaleFactor: 0.6,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.46,
            my: 0.2
          }
        });

        drawPath(parentGfx, pathData, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return diamond;
      },
      'bpmn:Participant': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke',
          'width',
          'height'
        ]);

        var participant = renderLane(parentGfx, element, attrs);

        var expandedParticipant = isExpanded(element);
        var horizontalParticipant = isHorizontal$3(element);

        var semantic = getBusinessObject(element),
            name = semantic.get('name');

        if (expandedParticipant) {
          var waypoints = horizontalParticipant ? [
            {
              x: 30,
              y: 0
            },
            {
              x: 30,
              y: getHeight(element, attrs)
            }
          ] : [
            {
              x: 0,
              y: 30
            },
            {
              x: getWidth(element, attrs),
              y: 30
            }
          ];

          drawLine(parentGfx, waypoints, {
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            strokeWidth: PARTICIPANT_STROKE_WIDTH
          });

          renderLaneLabel(parentGfx, name, element, attrs);
        } else {
          var bounds = getBounds$1(element, attrs);

          if (!horizontalParticipant) {
            bounds.height = getWidth(element, attrs);
            bounds.width = getHeight(element, attrs);
          }

          var textBox = renderLabel(parentGfx, name, {
            box: bounds,
            align: 'center-middle',
            style: {
              fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor, attrs.stroke)
            }
          });

          if (!horizontalParticipant) {
            var top = -1 * getHeight(element, attrs);
            transform(textBox, 0, -top, 270);
          }
        }

        if (semantic.get('participantMultiplicity')) {
          renderTaskMarker('ParticipantMultiplicityMarker', parentGfx, element, attrs);
        }

        return participant;
      },
      'bpmn:ReceiveTask' : function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var semantic = getBusinessObject(element);

        var task = renderTask(parentGfx, element, attrs);

        var pathData;

        if (semantic.get('instantiate')) {
          drawCircle(parentGfx, 28, 28, 20 * 0.22, {
            fill: getFillColor(element, defaultFillColor, attrs.fill),
            stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
            strokeWidth: 1
          });

          pathData = pathMap.getScaledPath('TASK_TYPE_INSTANTIATING_SEND', {
            abspos: {
              x: 7.77,
              y: 9.52
            }
          });
        } else {
          pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
            xScaleFactor: 0.9,
            yScaleFactor: 0.9,
            containerWidth: 21,
            containerHeight: 14,
            position: {
              mx: 0.3,
              my: 0.4
            }
          });
        }

        drawPath(parentGfx, pathData, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return task;
      },
      'bpmn:ScriptTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('TASK_TYPE_SCRIPT', {
          abspos: {
            x: 15,
            y: 20
          }
        });

        drawPath(parentGfx, pathData, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return task;
      },
      'bpmn:SendTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        var pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: 21,
          containerHeight: 14,
          position: {
            mx: 0.285,
            my: 0.357
          }
        });

        drawPath(parentGfx, pathData, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getFillColor(element, defaultFillColor, attrs.fill),
          strokeWidth: 1
        });

        return task;
      },
      'bpmn:SequenceFlow': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var fill = getFillColor(element, defaultFillColor, attrs.fill),
            stroke = getStrokeColor$1(element, defaultStrokeColor, attrs.stroke);

        var connection = drawConnectionSegments(parentGfx, element.waypoints, {
          markerEnd: marker(parentGfx, 'sequenceflow-end', fill, stroke),
          stroke
        });

        var semantic = getBusinessObject(element);

        var { source } = element;

        if (source) {
          var sourceSemantic = getBusinessObject(source);

          // conditional flow marker
          if (semantic.get('conditionExpression') && is$1(sourceSemantic, 'bpmn:Activity')) {
            attr$1(connection, {
              markerStart: marker(parentGfx, 'conditional-flow-marker', fill, stroke)
            });
          }

          // default marker
          if (sourceSemantic.get('default') && (is$1(sourceSemantic, 'bpmn:Gateway') || is$1(sourceSemantic, 'bpmn:Activity')) &&
              sourceSemantic.get('default') === semantic) {
            attr$1(connection, {
              markerStart: marker(parentGfx, 'conditional-default-flow-marker', fill, stroke)
            });
          }
        }

        return connection;
      },
      'bpmn:ServiceTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        drawCircle(parentGfx, 10, 10, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: 'none',
          transform: 'translate(6, 6)'
        });

        var pathDataService1 = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
          abspos: {
            x: 12,
            y: 18
          }
        });

        drawPath(parentGfx, pathDataService1, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        drawCircle(parentGfx, 10, 10, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: 'none',
          transform: 'translate(11, 10)'
        });

        var pathDataService2 = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
          abspos: {
            x: 17,
            y: 22
          }
        });

        drawPath(parentGfx, pathDataService2, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1
        });

        return task;
      },
      'bpmn:StartEvent': function(parentGfx, element, attrs = {}) {
        var { renderIcon = true } = attrs;

        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var semantic = getBusinessObject(element);

        if (!semantic.get('isInterrupting')) {
          attrs = {
            ...attrs,
            strokeDasharray: '6'
          };
        }

        var event = renderEvent(parentGfx, element, attrs);

        if (renderIcon) {
          renderEventIcon(element, parentGfx, attrs);
        }

        return event;
      },
      'bpmn:SubProcess': function(parentGfx, element, attrs = {}) {
        if (isExpanded(element)) {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke',
            'width',
            'height'
          ]);
        } else {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke'
          ]);
        }

        return renderSubProcess(parentGfx, element, attrs);
      },
      'bpmn:Task': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        return renderTask(parentGfx, element, attrs);
      },
      'bpmn:TextAnnotation': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke',
          'width',
          'height'
        ]);

        var {
          width,
          height
        } = getBounds$1(element, attrs);

        var textElement = drawRect(parentGfx, width, height, 0, 0, {
          fill: 'none',
          stroke: 'none'
        });

        var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: width,
          containerHeight: height,
          position: {
            mx: 0.0,
            my: 0.0
          }
        });

        drawPath(parentGfx, textPathData, {
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke)
        });

        var semantic = getBusinessObject(element),
            text = semantic.get('text') || '';

        renderLabel(parentGfx, text, {
          align: 'left-top',
          box: getBounds$1(element, attrs),
          padding: 7,
          style: {
            fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor, attrs.stroke)
          }
        });

        return textElement;
      },
      'bpmn:Transaction': function(parentGfx, element, attrs = {}) {
        if (isExpanded(element)) {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke',
            'width',
            'height'
          ]);
        } else {
          attrs = pickAttrs(attrs, [
            'fill',
            'stroke'
          ]);
        }

        var outer = renderSubProcess(parentGfx, element, {
          strokeWidth: 1.5,
          ...attrs
        });

        var innerAttrs = styles.style([ 'no-fill', 'no-events' ], {
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 1.5
        });

        var expanded = isExpanded(element);

        if (!expanded) {
          attrs = {};
        }

        drawRect(
          parentGfx,
          getWidth(element, attrs),
          getHeight(element, attrs),
          TASK_BORDER_RADIUS - INNER_OUTER_DIST,
          INNER_OUTER_DIST,
          innerAttrs
        );

        return outer;
      },
      'bpmn:UserTask': function(parentGfx, element, attrs = {}) {
        attrs = pickAttrs(attrs, [
          'fill',
          'stroke'
        ]);

        var task = renderTask(parentGfx, element, attrs);

        var x = 15;
        var y = 12;

        var pathDataUser1 = pathMap.getScaledPath('TASK_TYPE_USER_1', {
          abspos: {
            x: x,
            y: y
          }
        });

        drawPath(parentGfx, pathDataUser1, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 0.5
        });

        var pathDataUser2 = pathMap.getScaledPath('TASK_TYPE_USER_2', {
          abspos: {
            x: x,
            y: y
          }
        });

        drawPath(parentGfx, pathDataUser2, {
          fill: getFillColor(element, defaultFillColor, attrs.fill),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 0.5
        });

        var pathDataUser3 = pathMap.getScaledPath('TASK_TYPE_USER_3', {
          abspos: {
            x: x,
            y: y
          }
        });

        drawPath(parentGfx, pathDataUser3, {
          fill: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          stroke: getStrokeColor$1(element, defaultStrokeColor, attrs.stroke),
          strokeWidth: 0.5
        });

        return task;
      },
      'label': function(parentGfx, element, attrs = {}) {
        return renderExternalLabel(parentGfx, element, attrs);
      }
    };

    // extension API, use at your own risk
    this._drawPath = drawPath;

    this._renderer = renderer;
  }


  e$3(BpmnRenderer, BaseRenderer);

  BpmnRenderer.$inject = [
    'config.bpmnRenderer',
    'eventBus',
    'styles',
    'pathMap',
    'canvas',
    'textRenderer'
  ];


  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  BpmnRenderer.prototype.canRender = function(element) {
    return is$1(element, 'bpmn:BaseElement');
  };

  /**
   * Draw shape into parentGfx.
   *
   * @param {SVGElement} parentGfx
   * @param {Shape} shape
   * @param {Attrs} [attrs]
   *
   * @return {SVGElement} mainGfx
   */
  BpmnRenderer.prototype.drawShape = function(parentGfx, shape, attrs = {}) {
    var { type } = shape;

    var handler = this._renderer(type);

    return handler(parentGfx, shape, attrs);
  };

  /**
   * Draw connection into parentGfx.
   *
   * @param {SVGElement} parentGfx
   * @param {Connection} connection
   * @param {Attrs} [attrs]
   *
   * @return {SVGElement} mainGfx
   */
  BpmnRenderer.prototype.drawConnection = function(parentGfx, connection, attrs = {}) {
    var { type } = connection;

    var handler = this._renderer(type);

    return handler(parentGfx, connection, attrs);
  };

  /**
   * Get shape path.
   *
   * @param {Shape} shape
   *
   * @return {string} path
   */
  BpmnRenderer.prototype.getShapePath = function(shape) {
    if (is$1(shape, 'bpmn:Event')) {
      return getCirclePath(shape);
    }

    if (is$1(shape, 'bpmn:Activity')) {
      return getRoundRectPath(shape, TASK_BORDER_RADIUS);
    }

    if (is$1(shape, 'bpmn:Gateway')) {
      return getDiamondPath(shape);
    }

    return getRectPath(shape);
  };

  /**
   * Pick attributes if they exist.
   *
   * @param {Object} attrs
   * @param {string[]} keys
   *
   * @returns {Object}
   */
  function pickAttrs(attrs, keys = []) {
    return keys.reduce((pickedAttrs, key) => {
      if (attrs[ key ]) {
        pickedAttrs[ key ] = attrs[ key ];
      }

      return pickedAttrs;
    }, {});
  }

  /**
   * @typedef {import('../util/Types').Dimensions} Dimensions
   *
   * @typedef { {
   *   top: number;
   *   left: number;
   *   right: number;
   *   bottom: number;
   * } } Padding
   *
   * @typedef { number | Partial<Padding> } PaddingConfig
   *
   * @typedef { {
   *   horizontal: 'center' | 'left' | 'right';
   *   vertical: 'top' | 'middle';
   * } } Alignment
   *
   *  @typedef { 'center-middle' | 'center-top' } AlignmentConfig
   *
   * @typedef { Partial<{
   *   align: AlignmentConfig;
   *   style: Record<string, number | string>;
   *   padding: PaddingConfig;
   * }> } BaseTextConfig
   *
   * @typedef { BaseTextConfig & Partial<{
   *   size: Dimensions;
   * }> } TextConfig
   *
   * @typedef { BaseTextConfig & Partial<{
   *   box: Dimensions;
   *   fitBox: boolean;
   * }> } TextLayoutConfig
   *
   *  @typedef { Dimensions & {
   *  text: string;
   * } } LineDescriptor
   */

  var DEFAULT_BOX_PADDING = 0;

  var DEFAULT_LABEL_SIZE = {
    width: 150,
    height: 50
  };


  /**
   * @param {AlignmentConfig} align
   * @return {Alignment}
   */
  function parseAlign(align) {

    var parts = align.split('-');

    return {
      horizontal: parts[0] || 'center',
      vertical: parts[1] || 'top'
    };
  }

  /**
   * @param {PaddingConfig} padding
   *
   * @return {Padding}
   */
  function parsePadding(padding) {

    if (isObject(padding)) {
      return assign$1({ top: 0, left: 0, right: 0, bottom: 0 }, padding);
    } else {
      return {
        top: padding,
        left: padding,
        right: padding,
        bottom: padding
      };
    }
  }

  /**
   * @param {string} text
   * @param {SVGTextElement} fakeText
   *
   * @return {import('../util/Types').Dimensions}
   */
  function getTextBBox(text, fakeText) {

    fakeText.textContent = text;

    var textBBox;

    try {
      var bbox,
          emptyLine = text === '';

      // add dummy text, when line is empty to
      // determine correct height
      fakeText.textContent = emptyLine ? 'dummy' : text;

      textBBox = fakeText.getBBox();

      // take text rendering related horizontal
      // padding into account
      bbox = {
        width: textBBox.width + textBBox.x * 2,
        height: textBBox.height
      };

      if (emptyLine) {

        // correct width
        bbox.width = 0;
      }

      return bbox;
    } catch (e) {
      console.log(e);

      return { width: 0, height: 0 };
    }
  }


  /**
   * Layout the next line and return the layouted element.
   *
   * Alters the lines passed.
   *
   * @param {string[]} lines
   * @param {number} maxWidth
   * @param {SVGTextElement} fakeText
   *
   * @return {LineDescriptor} the line descriptor
   */
  function layoutNext(lines, maxWidth, fakeText) {

    var originalLine = lines.shift(),
        fitLine = originalLine;

    var textBBox;

    for (;;) {
      textBBox = getTextBBox(fitLine, fakeText);

      textBBox.width = fitLine ? textBBox.width : 0;

      // try to fit
      if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {
        return fit(lines, fitLine, originalLine, textBBox);
      }

      fitLine = shortenLine(fitLine, textBBox.width, maxWidth);
    }
  }

  /**
   * @param {string[]} lines
   * @param {string} fitLine
   * @param {string} originalLine
   * @param {Dimensions} textBBox
   *
   * @return {LineDescriptor}
   */
  function fit(lines, fitLine, originalLine, textBBox) {
    if (fitLine.length < originalLine.length) {
      var remainder = originalLine.slice(fitLine.length).trim();

      lines.unshift(remainder);
    }

    return {
      width: textBBox.width,
      height: textBBox.height,
      text: fitLine
    };
  }

  var SOFT_BREAK = '\u00AD';


  /**
   * Shortens a line based on spacing and hyphens.
   * Returns the shortened result on success.
   *
   * @param {string} line
   * @param {number} maxLength the maximum characters of the string
   *
   * @return {string} the shortened string
   */
  function semanticShorten(line, maxLength) {

    var parts = line.split(/(\s|-|\u00AD)/g),
        part,
        shortenedParts = [],
        length = 0;

    // try to shorten via break chars
    if (parts.length > 1) {

      while ((part = parts.shift())) {
        if (part.length + length < maxLength) {
          shortenedParts.push(part);
          length += part.length;
        } else {

          // remove previous part, too if hyphen does not fit anymore
          if (part === '-' || part === SOFT_BREAK) {
            shortenedParts.pop();
          }

          break;
        }
      }
    }

    var last = shortenedParts[shortenedParts.length - 1];

    // translate trailing soft break to actual hyphen
    if (last && last === SOFT_BREAK) {
      shortenedParts[shortenedParts.length - 1] = '-';
    }

    return shortenedParts.join('');
  }


  /**
   * @param {string} line
   * @param {number} width
   * @param {number} maxWidth
   *
   * @return {string}
   */
  function shortenLine(line, width, maxWidth) {
    var length = Math.max(line.length * (maxWidth / width), 1);

    // try to shorten semantically (i.e. based on spaces and hyphens)
    var shortenedLine = semanticShorten(line, length);

    if (!shortenedLine) {

      // force shorten by cutting the long word
      shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));
    }

    return shortenedLine;
  }


  /**
   * @return {SVGSVGElement}
   */
  function getHelperSvg() {
    var helperSvg = document.getElementById('helper-svg');

    if (!helperSvg) {
      helperSvg = create$1('svg');

      attr$1(helperSvg, {
        id: 'helper-svg'
      });

      assign(helperSvg, {
        visibility: 'hidden',
        position: 'fixed',
        width: 0,
        height: 0
      });

      document.body.appendChild(helperSvg);
    }

    return helperSvg;
  }


  /**
   * Creates a new label utility
   *
   * @param {TextConfig} [config]
   */
  function Text$1(config) {

    this._config = assign$1({}, {
      size: DEFAULT_LABEL_SIZE,
      padding: DEFAULT_BOX_PADDING,
      style: {},
      align: 'center-top'
    }, config || {});
  }

  /**
   * Returns the layouted text as an SVG element.
   *
   * @param {string} text
   * @param {TextLayoutConfig} options
   *
   * @return {SVGElement}
   */
  Text$1.prototype.createText = function(text, options) {
    return this.layoutText(text, options).element;
  };

  /**
   * Returns a labels layouted dimensions.
   *
   * @param {string} text to layout
   * @param {TextLayoutConfig} options
   *
   * @return {Dimensions}
   */
  Text$1.prototype.getDimensions = function(text, options) {
    return this.layoutText(text, options).dimensions;
  };

  /**
   * Creates and returns a label and its bounding box.
   *
   * @param {string} text the text to render on the label
   * @param {TextLayoutConfig} options
   *
   * @return { {
   *   element: SVGElement,
   *   dimensions: Dimensions
   * } }
   */
  Text$1.prototype.layoutText = function(text, options) {
    var box = assign$1({}, this._config.size, options.box),
        style = assign$1({}, this._config.style, options.style),
        align = parseAlign(options.align || this._config.align),
        padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),
        fitBox = options.fitBox || false;

    var lineHeight = getLineHeight(style);

    // we split text by lines and normalize
    // {soft break} + {line break} => { line break }
    var lines = text.split(/\u00AD?\r?\n/),
        layouted = [];

    var maxWidth = box.width - padding.left - padding.right;

    // ensure correct rendering by attaching helper text node to invisible SVG
    var helperText = create$1('text');
    attr$1(helperText, { x: 0, y: 0 });
    attr$1(helperText, style);

    var helperSvg = getHelperSvg();

    append(helperSvg, helperText);

    while (lines.length) {
      layouted.push(layoutNext(lines, maxWidth, helperText));
    }

    if (align.vertical === 'middle') {
      padding.top = padding.bottom = 0;
    }

    var totalHeight = reduce(layouted, function(sum, line, idx) {
      return sum + (lineHeight || line.height);
    }, 0) + padding.top + padding.bottom;

    var maxLineWidth = reduce(layouted, function(sum, line, idx) {
      return line.width > sum ? line.width : sum;
    }, 0);

    // the y position of the next line
    var y = padding.top;

    if (align.vertical === 'middle') {
      y += (box.height - totalHeight) / 2;
    }

    // magic number initial offset
    y -= (lineHeight || layouted[0].height) / 4;


    var textElement = create$1('text');

    attr$1(textElement, style);

    // layout each line taking into account that parent
    // shape might resize to fit text size
    forEach$1(layouted, function(line) {

      var x;

      y += (lineHeight || line.height);

      switch (align.horizontal) {
      case 'left':
        x = padding.left;
        break;

      case 'right':
        x = ((fitBox ? maxLineWidth : maxWidth)
          - padding.right - line.width);
        break;

      default:

        // aka center
        x = Math.max((((fitBox ? maxLineWidth : maxWidth)
          - line.width) / 2 + padding.left), 0);
      }

      var tspan = create$1('tspan');
      attr$1(tspan, { x: x, y: y });

      tspan.textContent = line.text;

      append(textElement, tspan);
    });

    remove$3(helperText);

    var dimensions = {
      width: maxLineWidth,
      height: totalHeight
    };

    return {
      dimensions: dimensions,
      element: textElement
    };
  };


  function getLineHeight(style) {
    if ('fontSize' in style && 'lineHeight' in style) {
      return style.lineHeight * parseInt(style.fontSize, 10);
    }
  }

  var DEFAULT_FONT_SIZE = 12;
  var LINE_HEIGHT_RATIO = 1.2;

  var MIN_TEXT_ANNOTATION_HEIGHT = 30;

  /**
   * @typedef { {
   *   fontFamily: string;
   *   fontSize: number;
   *   fontWeight: string;
   *   lineHeight: number;
   * } } TextRendererStyle
   *
   * @typedef { {
   *   defaultStyle?: Partial<TextRendererStyle>;
   *   externalStyle?: Partial<TextRendererStyle>;
   * } } TextRendererConfig
   *
   * @typedef { import('diagram-js/lib/util/Text').TextLayoutConfig } TextLayoutConfig
   *
   * @typedef { import('diagram-js/lib/util/Types').Rect } Rect
   */


  /**
   * Renders text and computes text bounding boxes.
   *
   * @param {TextRendererConfig} [config]
   */
  function TextRenderer(config) {

    var defaultStyle = assign$1({
      fontFamily: 'Arial, sans-serif',
      fontSize: DEFAULT_FONT_SIZE,
      fontWeight: 'normal',
      lineHeight: LINE_HEIGHT_RATIO
    }, config && config.defaultStyle || {});

    var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;

    var externalStyle = assign$1({}, defaultStyle, {
      fontSize: fontSize
    }, config && config.externalStyle || {});

    var textUtil = new Text$1({
      style: defaultStyle
    });

    /**
     * Get the new bounds of an externally rendered,
     * layouted label.
     *
     * @param {Rect} bounds
     * @param {string} text
     *
     * @return {Rect}
     */
    this.getExternalLabelBounds = function(bounds, text) {

      var layoutedDimensions = textUtil.getDimensions(text, {
        box: {
          width: 90,
          height: 30
        },
        style: externalStyle
      });

      // resize label shape to fit label text
      return {
        x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),
        y: Math.round(bounds.y),
        width: Math.ceil(layoutedDimensions.width),
        height: Math.ceil(layoutedDimensions.height)
      };

    };

    /**
     * Get the new bounds of text annotation.
     *
     * @param {Rect} bounds
     * @param {string} text
     *
     * @return {Rect}
     */
    this.getTextAnnotationBounds = function(bounds, text) {

      var layoutedDimensions = textUtil.getDimensions(text, {
        box: bounds,
        style: defaultStyle,
        align: 'left-top',
        padding: 5
      });

      return {
        x: bounds.x,
        y: bounds.y,
        width: bounds.width,
        height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))
      };
    };

    /**
     * Create a layouted text element.
     *
     * @param {string} text
     * @param {TextLayoutConfig} [options]
     *
     * @return {SVGElement} rendered text
     */
    this.createText = function(text, options) {
      return textUtil.createText(text, options || {});
    };

    /**
     * Get default text style.
     */
    this.getDefaultStyle = function() {
      return defaultStyle;
    };

    /**
     * Get the external text style.
     */
    this.getExternalStyle = function() {
      return externalStyle;
    };

  }

  TextRenderer.$inject = [
    'config.textRenderer'
  ];

  /**
   * Map containing SVG paths needed by BpmnRenderer
   */
  function PathMap() {

    /**
     * Contains a map of path elements
     *
     * <h1>Path definition</h1>
     * A parameterized path is defined like this:
     * <pre>
     * 'GATEWAY_PARALLEL': {
     *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
            '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
     *   height: 17.5,
     *   width:  17.5,
     *   heightElements: [2.5, 7.5],
     *   widthElements: [2.5, 7.5]
     * }
     * </pre>
     * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling
     * is based on the ratio between the specified height and width in this object and the
     * height and width that is set as scale target (Note x,y coordinates will be scaled with
     * individual ratios).</p>
     * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.
     * The scaling is based on the computed ratios.
     * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using
     * the computed ratio coefficient.
     * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.
     *   <ul>
     *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>
     *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>
     *   </ul>
     *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.
     * </p>
     */
    this.pathMap = {
      'EVENT_MESSAGE': {
        d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
        height: 36,
        width:  36,
        heightElements: [ 6, 14 ],
        widthElements: [ 10.5, 21 ]
      },
      'EVENT_SIGNAL': {
        d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x1},0 Z',
        height: 36,
        width: 36,
        heightElements: [ 18 ],
        widthElements: [ 10, 20 ]
      },
      'EVENT_ESCALATION': {
        d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x0},-{e.y1} l -{e.x0},{e.y1} Z',
        height: 36,
        width: 36,
        heightElements: [ 20, 7 ],
        widthElements: [ 8 ]
      },
      'EVENT_CONDITIONAL': {
        d: 'M {e.x0},{e.y0} l {e.x1},0 l 0,{e.y2} l -{e.x1},0 Z ' +
           'M {e.x2},{e.y3} l {e.x0},0 ' +
           'M {e.x2},{e.y4} l {e.x0},0 ' +
           'M {e.x2},{e.y5} l {e.x0},0 ' +
           'M {e.x2},{e.y6} l {e.x0},0 ' +
           'M {e.x2},{e.y7} l {e.x0},0 ' +
           'M {e.x2},{e.y8} l {e.x0},0 ',
        height: 36,
        width:  36,
        heightElements: [ 8.5, 14.5, 18, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5 ],
        widthElements:  [ 10.5, 14.5, 12.5 ]
      },
      'EVENT_LINK': {
        d: 'm {mx},{my} 0,{e.y0} -{e.x1},0 0,{e.y1} {e.x1},0 0,{e.y0} {e.x0},-{e.y2} -{e.x0},-{e.y2} z',
        height: 36,
        width: 36,
        heightElements: [ 4.4375, 6.75, 7.8125 ],
        widthElements: [ 9.84375, 13.5 ]
      },
      'EVENT_ERROR': {
        d: 'm {mx},{my} {e.x0},-{e.y0} {e.x1},-{e.y1} {e.x2},{e.y2} {e.x3},-{e.y3} -{e.x4},{e.y4} -{e.x5},-{e.y5} z',
        height: 36,
        width: 36,
        heightElements: [ 0.023, 8.737, 8.151, 16.564, 10.591, 8.714 ],
        widthElements: [ 0.085, 6.672, 6.97, 4.273, 5.337, 6.636 ]
      },
      'EVENT_CANCEL_45': {
        d: 'm {mx},{my} -{e.x1},0 0,{e.x0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
          '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
        height: 36,
        width: 36,
        heightElements: [ 4.75, 8.5 ],
        widthElements: [ 4.75, 8.5 ]
      },
      'EVENT_COMPENSATION': {
        d: 'm {mx},{my} {e.x0},-{e.y0} 0,{e.y1} z m {e.x1},-{e.y2} {e.x2},-{e.y3} 0,{e.y1} -{e.x2},-{e.y3} z',
        height: 36,
        width: 36,
        heightElements: [ 6.5, 13, 0.4, 6.1 ],
        widthElements: [ 9, 9.3, 8.7 ]
      },
      'EVENT_TIMER_WH': {
        d: 'M {mx},{my} l {e.x0},-{e.y0} m -{e.x0},{e.y0} l {e.x1},{e.y1} ',
        height: 36,
        width:  36,
        heightElements: [ 10, 2 ],
        widthElements: [ 3, 7 ]
      },
      'EVENT_TIMER_LINE': {
        d:  'M {mx},{my} ' +
            'm {e.x0},{e.y0} l -{e.x1},{e.y1} ',
        height: 36,
        width:  36,
        heightElements: [ 10, 3 ],
        widthElements: [ 0, 0 ]
      },
      'EVENT_MULTIPLE': {
        d:'m {mx},{my} {e.x1},-{e.y0} {e.x1},{e.y0} -{e.x0},{e.y1} -{e.x2},0 z',
        height: 36,
        width:  36,
        heightElements: [ 6.28099, 12.56199 ],
        widthElements: [ 3.1405, 9.42149, 12.56198 ]
      },
      'EVENT_PARALLEL_MULTIPLE': {
        d:'m {mx},{my} {e.x0},0 0,{e.y1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
          '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
        height: 36,
        width:  36,
        heightElements: [ 2.56228, 7.68683 ],
        widthElements: [ 2.56228, 7.68683 ]
      },
      'GATEWAY_EXCLUSIVE': {
        d:'m {mx},{my} {e.x0},{e.y0} {e.x1},{e.y0} {e.x2},0 {e.x4},{e.y2} ' +
                      '{e.x4},{e.y1} {e.x2},0 {e.x1},{e.y3} {e.x0},{e.y3} ' +
                      '{e.x3},0 {e.x5},{e.y1} {e.x5},{e.y2} {e.x3},0 z',
        height: 17.5,
        width:  17.5,
        heightElements: [ 8.5, 6.5312, -6.5312, -8.5 ],
        widthElements:  [ 6.5, -6.5, 3, -3, 5, -5 ]
      },
      'GATEWAY_PARALLEL': {
        d:'m {mx},{my} 0,{e.y1} -{e.x1},0 0,{e.y0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
          '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
        height: 30,
        width:  30,
        heightElements: [ 5, 12.5 ],
        widthElements: [ 5, 12.5 ]
      },
      'GATEWAY_EVENT_BASED': {
        d:'m {mx},{my} {e.x0},{e.y0} {e.x0},{e.y1} {e.x1},{e.y2} {e.x2},0 z',
        height: 11,
        width:  11,
        heightElements: [ -6, 6, 12, -12 ],
        widthElements: [ 9, -3, -12 ]
      },
      'GATEWAY_COMPLEX': {
        d:'m {mx},{my} 0,{e.y0} -{e.x0},-{e.y1} -{e.x1},{e.y2} {e.x0},{e.y1} -{e.x2},0 0,{e.y3} ' +
          '{e.x2},0  -{e.x0},{e.y1} l {e.x1},{e.y2} {e.x0},-{e.y1} 0,{e.y0} {e.x3},0 0,-{e.y0} {e.x0},{e.y1} ' +
          '{e.x1},-{e.y2} -{e.x0},-{e.y1} {e.x2},0 0,-{e.y3} -{e.x2},0 {e.x0},-{e.y1} -{e.x1},-{e.y2} ' +
          '-{e.x0},{e.y1} 0,-{e.y0} -{e.x3},0 z',
        height: 17.125,
        width:  17.125,
        heightElements: [ 4.875, 3.4375, 2.125, 3 ],
        widthElements: [ 3.4375, 2.125, 4.875, 3 ]
      },
      'DATA_OBJECT_PATH': {
        d:'m 0,0 {e.x1},0 {e.x0},{e.y0} 0,{e.y1} -{e.x2},0 0,-{e.y2} {e.x1},0 0,{e.y0} {e.x0},0',
        height: 61,
        width:  51,
        heightElements: [ 10, 50, 60 ],
        widthElements: [ 10, 40, 50, 60 ]
      },
      'DATA_OBJECT_COLLECTION_PATH': {
        d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
        height: 10,
        width: 10,
        heightElements: [],
        widthElements: []
      },
      'DATA_ARROW': {
        d:'m 5,9 9,0 0,-3 5,5 -5,5 0,-3 -9,0 z',
        height: 61,
        width:  51,
        heightElements: [],
        widthElements: []
      },
      'DATA_STORE': {
        d:'m  {mx},{my} ' +
          'l  0,{e.y2} ' +
          'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
          'l  0,-{e.y2} ' +
          'c -{e.x0},-{e.y1} -{e.x1},-{e.y1} -{e.x2},0' +
          'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
          'm  -{e.x2},{e.y0}' +
          'c  {e.x0},{e.y1} {e.x1},{e.y1} {e.x2},0' +
          'm  -{e.x2},{e.y0}' +
          'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0',
        height: 61,
        width:  61,
        heightElements: [ 7, 10, 45 ],
        widthElements:  [ 2, 58, 60 ]
      },
      'TEXT_ANNOTATION': {
        d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',
        height: 30,
        width: 10,
        heightElements: [ 30 ],
        widthElements: [ 10 ]
      },
      'MARKER_SUB_PROCESS': {
        d: 'm{mx},{my} m 7,2 l 0,10 m -5,-5 l 10,0',
        height: 10,
        width: 10,
        heightElements: [],
        widthElements: []
      },
      'MARKER_PARALLEL': {
        d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
        height: 10,
        width: 10,
        heightElements: [],
        widthElements: []
      },
      'MARKER_SEQUENTIAL': {
        d: 'm{mx},{my} m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0',
        height: 10,
        width: 10,
        heightElements: [],
        widthElements: []
      },
      'MARKER_COMPENSATION': {
        d: 'm {mx},{my} 7,-5 0,10 z m 7.1,-0.3 6.9,-4.7 0,10 -6.9,-4.7 z',
        height: 10,
        width: 21,
        heightElements: [],
        widthElements: []
      },
      'MARKER_LOOP': {
        d: 'm {mx},{my} c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 ' +
          '-6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 ' +
          '0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 ' +
          'l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902',
        height: 13.9,
        width: 13.7,
        heightElements: [],
        widthElements: []
      },
      'MARKER_ADHOC': {
        d: 'm {mx},{my} m 0.84461,2.64411 c 1.05533,-1.23780996 2.64337,-2.07882 4.29653,-1.97997996 2.05163,0.0805 ' +
          '3.85579,1.15803 5.76082,1.79107 1.06385,0.34139996 2.24454,0.1438 3.18759,-0.43767 0.61743,-0.33642 ' +
          '1.2775,-0.64078 1.7542,-1.17511 0,0.56023 0,1.12046 0,1.6807 -0.98706,0.96237996 -2.29792,1.62393996 ' +
          '-3.6918,1.66181996 -1.24459,0.0927 -2.46671,-0.2491 -3.59505,-0.74812 -1.35789,-0.55965 ' +
          '-2.75133,-1.33436996 -4.27027,-1.18121996 -1.37741,0.14601 -2.41842,1.13685996 -3.44288,1.96782996 z',
        height: 4,
        width: 15,
        heightElements: [],
        widthElements: []
      },
      'TASK_TYPE_SEND': {
        d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
        height: 14,
        width:  21,
        heightElements: [ 6, 14 ],
        widthElements: [ 10.5, 21 ]
      },
      'TASK_TYPE_SCRIPT': {
        d: 'm {mx},{my} c 9.966553,-6.27276 -8.000926,-7.91932 2.968968,-14.938 l -8.802728,0 ' +
          'c -10.969894,7.01868 6.997585,8.66524 -2.968967,14.938 z ' +
          'm -7,-12 l 5,0 ' +
          'm -4.5,3 l 4.5,0 ' +
          'm -3,3 l 5,0' +
          'm -4,3 l 5,0',
        height: 15,
        width:  12.6,
        heightElements: [ 6, 14 ],
        widthElements: [ 10.5, 21 ]
      },
      'TASK_TYPE_USER_1': {
        d: 'm {mx},{my} c 0.909,-0.845 1.594,-2.049 1.594,-3.385 0,-2.554 -1.805,-4.62199999 ' +
          '-4.357,-4.62199999 -2.55199998,0 -4.28799998,2.06799999 -4.28799998,4.62199999 0,1.348 ' +
          '0.974,2.562 1.89599998,3.405 -0.52899998,0.187 -5.669,2.097 -5.794,4.7560005 v 6.718 ' +
          'h 17 v -6.718 c 0,-2.2980005 -5.5279996,-4.5950005 -6.0509996,-4.7760005 z' +
          'm -8,6 l 0,5.5 m 11,0 l 0,-5'
      },
      'TASK_TYPE_USER_2': {
        d: 'm {mx},{my} m 2.162,1.009 c 0,2.4470005 -2.158,4.4310005 -4.821,4.4310005 ' +
          '-2.66499998,0 -4.822,-1.981 -4.822,-4.4310005 '
      },
      'TASK_TYPE_USER_3': {
        d: 'm {mx},{my} m -6.9,-3.80 c 0,0 2.25099998,-2.358 4.27399998,-1.177 2.024,1.181 4.221,1.537 ' +
          '4.124,0.965 -0.098,-0.57 -0.117,-3.79099999 -4.191,-4.13599999 -3.57499998,0.001 ' +
          '-4.20799998,3.36699999 -4.20699998,4.34799999 z'
      },
      'TASK_TYPE_MANUAL': {
        d: 'm {mx},{my} c 0.234,-0.01 5.604,0.008 8.029,0.004 0.808,0 1.271,-0.172 1.417,-0.752 0.227,-0.898 ' +
          '-0.334,-1.314 -1.338,-1.316 -2.467,-0.01 -7.886,-0.004 -8.108,-0.004 -0.014,-0.079 0.016,-0.533 0,-0.61 ' +
          '0.195,-0.042 8.507,0.006 9.616,0.002 0.877,-0.007 1.35,-0.438 1.353,-1.208 0.003,-0.768 -0.479,-1.09 ' +
          '-1.35,-1.091 -2.968,-0.002 -9.619,-0.013 -9.619,-0.013 v -0.591 c 0,0 5.052,-0.016 7.225,-0.016 ' +
          '0.888,-0.002 1.354,-0.416 1.351,-1.193 -0.006,-0.761 -0.492,-1.196 -1.361,-1.196 -3.473,-0.005 ' +
          '-10.86,-0.003 -11.0829995,-0.003 -0.022,-0.047 -0.045,-0.094 -0.069,-0.139 0.3939995,-0.319 ' +
          '2.0409995,-1.626 2.4149995,-2.017 0.469,-0.4870005 0.519,-1.1650005 0.162,-1.6040005 -0.414,-0.511 ' +
          '-0.973,-0.5 -1.48,-0.236 -1.4609995,0.764 -6.5999995,3.6430005 -7.7329995,4.2710005 -0.9,0.499 ' +
          '-1.516,1.253 -1.882,2.19 -0.37000002,0.95 -0.17,2.01 -0.166,2.979 0.004,0.718 -0.27300002,1.345 ' +
          '-0.055,2.063 0.629,2.087 2.425,3.312 4.859,3.318 4.6179995,0.014 9.2379995,-0.139 13.8569995,-0.158 ' +
          '0.755,-0.004 1.171,-0.301 1.182,-1.033 0.012,-0.754 -0.423,-0.969 -1.183,-0.973 -1.778,-0.01 ' +
          '-5.824,-0.004 -6.04,-0.004 10e-4,-0.084 0.003,-0.586 10e-4,-0.67 z'
      },
      'TASK_TYPE_INSTANTIATING_SEND': {
        d: 'm {mx},{my} l 0,8.4 l 12.6,0 l 0,-8.4 z l 6.3,3.6 l 6.3,-3.6'
      },
      'TASK_TYPE_SERVICE': {
        d: 'm {mx},{my} v -1.71335 c 0.352326,-0.0705 0.703932,-0.17838 1.047628,-0.32133 ' +
          '0.344416,-0.14465 0.665822,-0.32133 0.966377,-0.52145 l 1.19431,1.18005 1.567487,-1.57688 ' +
          '-1.195028,-1.18014 c 0.403376,-0.61394 0.683079,-1.29908 0.825447,-2.01824 l 1.622133,-0.01 ' +
          'v -2.2196 l -1.636514,0.01 c -0.07333,-0.35153 -0.178319,-0.70024 -0.323564,-1.04372 ' +
          '-0.145244,-0.34406 -0.321407,-0.6644 -0.522735,-0.96217 l 1.131035,-1.13631 -1.583305,-1.56293 ' +
          '-1.129598,1.13589 c -0.614052,-0.40108 -1.302883,-0.68093 -2.022633,-0.82247 l 0.0093,-1.61852 ' +
          'h -2.241173 l 0.0042,1.63124 c -0.353763,0.0736 -0.705369,0.17977 -1.049785,0.32371 -0.344415,0.14437 ' +
          '-0.665102,0.32092 -0.9635006,0.52046 l -1.1698628,-1.15823 -1.5667691,1.5792 1.1684265,1.15669 ' +
          'c -0.4026573,0.61283 -0.68308,1.29797 -0.8247287,2.01713 l -1.6588041,0.003 v 2.22174 ' +
          'l 1.6724648,-0.006 c 0.073327,0.35077 0.1797598,0.70243 0.3242851,1.04472 0.1452428,0.34448 ' +
          '0.3214064,0.6644 0.5227339,0.96066 l -1.1993431,1.19723 1.5840256,1.56011 1.1964668,-1.19348 ' +
          'c 0.6140517,0.40346 1.3028827,0.68232 2.0233517,0.82331 l 7.19e-4,1.69892 h 2.226848 z ' +
          'm 0.221462,-3.9957 c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
          '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
          '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
      },
      'TASK_TYPE_SERVICE_FILL': {
        d: 'm {mx},{my} c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
          '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
          '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
      },
      'TASK_TYPE_BUSINESS_RULE_HEADER': {
        d: 'm {mx},{my} 0,4 20,0 0,-4 z'
      },
      'TASK_TYPE_BUSINESS_RULE_MAIN': {
        d: 'm {mx},{my} 0,12 20,0 0,-12 z' +
          'm 0,8 l 20,0 ' +
          'm -13,-4 l 0,8'
      },
      'MESSAGE_FLOW_MARKER': {
        d: 'm {mx},{my} m -10.5 ,-7 l 0,14 l 21,0 l 0,-14 z l 10.5,6 l 10.5,-6'
      }
    };

    /**
     * Return raw path for the given ID.
     *
     * @param {string} pathId
     *
     * @return {string} raw path
     */
    this.getRawPath = function getRawPath(pathId) {
      return this.pathMap[pathId].d;
    };

    /**
     * Scales the path to the given height and width.
     * <h1>Use case</h1>
     * <p>Use case is to scale the content of elements (event, gateways) based
     * on the element bounding box's size.
     * </p>
     * <h1>Why not transform</h1>
     * <p>Scaling a path with transform() will also scale the stroke and IE does not support
     * the option 'non-scaling-stroke' to prevent this.
     * Also there are use cases where only some parts of a path should be
     * scaled.</p>
     *
     * @param {string} pathId The ID of the path.
     * @param {Object} param <p>
     *   Example param object scales the path to 60% size of the container (data.width, data.height).
     *   <pre>
     *   {
     *     xScaleFactor: 0.6,
     *     yScaleFactor:0.6,
     *     containerWidth: data.width,
     *     containerHeight: data.height,
     *     position: {
     *       mx: 0.46,
     *       my: 0.2,
     *     }
     *   }
     *   </pre>
     *   <ul>
     *    <li>targetpathwidth = xScaleFactor * containerWidth</li>
     *    <li>targetpathheight = yScaleFactor * containerHeight</li>
     *    <li>Position is used to set the starting coordinate of the path. M is computed:
      *    <ul>
      *      <li>position.x * containerWidth</li>
      *      <li>position.y * containerHeight</li>
      *    </ul>
      *    Center of the container <pre> position: {
     *       mx: 0.5,
     *       my: 0.5,
     *     }</pre>
     *     Upper left corner of the container
     *     <pre> position: {
     *       mx: 0.0,
     *       my: 0.0,
     *     }</pre>
     *    </li>
     *   </ul>
     * </p>
     *
     * @return {string} scaled path
     */
    this.getScaledPath = function getScaledPath(pathId, param) {
      var rawPath = this.pathMap[pathId];

      // positioning
      // compute the start point of the path
      var mx, my;

      if (param.abspos) {
        mx = param.abspos.x;
        my = param.abspos.y;
      } else {
        mx = param.containerWidth * param.position.mx;
        my = param.containerHeight * param.position.my;
      }

      var coordinates = {}; // map for the scaled coordinates
      if (param.position) {

        // path
        var heightRatio = (param.containerHeight / rawPath.height) * param.yScaleFactor;
        var widthRatio = (param.containerWidth / rawPath.width) * param.xScaleFactor;


        // Apply height ratio
        for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {
          coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;
        }

        // Apply width ratio
        for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {
          coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;
        }
      }

      // Apply value to raw path
      var path = format(
        rawPath.d, {
          mx: mx,
          my: my,
          e: coordinates
        }
      );
      return path;
    };
  }

  // helpers //////////////////////

  // copied and adjusted from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js
  var tokenRegex = /\{([^{}]+)\}/g,
      objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g; // matches .xxxxx or ["xxxxx"] to run over object properties

  function replacer(all, key, obj) {
    var res = obj;
    key.replace(objNotationRegex, function(all, name, quote, quotedName, isFunc) {
      name = name || quotedName;
      if (res) {
        if (name in res) {
          res = res[name];
        }
        typeof res == 'function' && isFunc && (res = res());
      }
    });
    res = (res == null || res == obj ? all : res) + '';

    return res;
  }

  function format(str, obj) {
    return String(str).replace(tokenRegex, function(all, key) {
      return replacer(all, key, obj);
    });
  }

  var DrawModule$1 = {
    __init__: [ 'bpmnRenderer' ],
    bpmnRenderer: [ 'type', BpmnRenderer ],
    textRenderer: [ 'type', TextRenderer ],
    pathMap: [ 'type', PathMap ]
  };

  /**
   * @typedef { {
   *   [key: string]: string;
   * } } TranslateReplacements
   */

  /**
   * A simple translation stub to be used for multi-language support
   * in diagrams. Can be easily replaced with a more sophisticated
   * solution.
   *
   * @example
   *
   * ```javascript
   * // use it inside any diagram component by injecting `translate`.
   *
   * function MyService(translate) {
   *   alert(translate('HELLO {you}', { you: 'You!' }));
   * }
   * ```
   *
   * @param {string} template to interpolate
   * @param {TranslateReplacements} [replacements] a map with substitutes
   *
   * @return {string} the translated string
   */
  function translate(template, replacements) {

    replacements = replacements || {};

    return template.replace(/{([^}]+)}/g, function(_, key) {
      return replacements[key] || '{' + key + '}';
    });
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var TranslateModule = {
    translate: [ 'value', translate ]
  };

  /**
   * @typedef {import('../util/Types').Axis} Axis
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   */

  /**
   * Computes the distance between two points.
   *
   * @param {Point} a
   * @param {Point} b
   *
   * @return {number} The distance between the two points.
   */
  function pointDistance(a, b) {
    if (!a || !b) {
      return -1;
    }

    return Math.sqrt(
      Math.pow(a.x - b.x, 2) +
      Math.pow(a.y - b.y, 2)
    );
  }


  /**
   * Returns true if the point r is on the line between p and q.
   *
   * @param {Point} p
   * @param {Point} q
   * @param {Point} r
   * @param {number} [accuracy=5] The accuracy with which to check (lower is better).
   *
   * @return {boolean}
   */
  function pointsOnLine(p, q, r, accuracy) {

    if (typeof accuracy === 'undefined') {
      accuracy = 5;
    }

    if (!p || !q || !r) {
      return false;
    }

    var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),
        dist = pointDistance(p, q);

    // @see http://stackoverflow.com/a/907491/412190
    return Math.abs(val / dist) <= accuracy;
  }


  var ALIGNED_THRESHOLD = 2;

  /**
   * Check whether two points are horizontally or vertically aligned.
   *
   * @param {Point[]|Point} a
   * @param {Point} [b]
   *
   * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).
   */
  function pointsAligned(a, b) {
    var points = Array.from(arguments).flat();

    const axisMap = {
      'x': 'v',
      'y': 'h'
    };

    for (const [ axis, orientation ] of Object.entries(axisMap)) {
      if (pointsAlignedOnAxis(axis, points)) {
        return orientation;
      }
    }

    return false;
  }

  /**
   * @param {Axis} axis
   * @param {Point[]} points
   *
   * @return {boolean}
   */
  function pointsAlignedOnAxis(axis, points) {
    const referencePoint = points[0];

    return every(points, function(point) {
      return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;
    });
  }

  /**
   * Returns true if the point p is inside the rectangle rect
   *
   * @param {Point} p
   * @param {Rect} rect
   * @param {number} tolerance
   *
   * @return {boolean}
   */
  function pointInRect(p, rect, tolerance) {
    tolerance = tolerance || 0;

    return p.x > rect.x - tolerance &&
           p.y > rect.y - tolerance &&
           p.x < rect.x + rect.width + tolerance &&
           p.y < rect.y + rect.height + tolerance;
  }

  /**
   * Returns a point in the middle of points p and q
   *
   * @param {Point} p
   * @param {Point} q
   *
   * @return {Point} The mid point between the two points.
   */
  function getMidPoint(p, q) {
    return {
      x: Math.round(p.x + ((q.x - p.x) / 2.0)),
      y: Math.round(p.y + ((q.y - p.y) / 2.0))
    };
  }

  /**
   * This file contains source code adapted from Snap.svg (licensed Apache-2.0).
   *
   * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js
   */

  /* eslint no-fallthrough: "off" */

  var p2s = /,?([a-z]),?/gi,
      toFloat = parseFloat,
      math = Math,
      PI = math.PI,
      mmin = math.min,
      mmax = math.max,
      pow = math.pow,
      abs$7 = math.abs,
      pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/ig,
      pathValues = /(-?\d*\.?\d*(?:e[-+]?\d+)?)[\s]*,?[\s]*/ig;

  var isArray$1 = Array.isArray || function(o) { return o instanceof Array; };

  function hasProperty(obj, property) {
    return Object.prototype.hasOwnProperty.call(obj, property);
  }

  function clone(obj) {

    if (typeof obj == 'function' || Object(obj) !== obj) {
      return obj;
    }

    var res = new obj.constructor;

    for (var key in obj) {
      if (hasProperty(obj, key)) {
        res[key] = clone(obj[key]);
      }
    }

    return res;
  }

  function repush(array, item) {
    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {
      return array.push(array.splice(i, 1)[0]);
    }
  }

  function cacher(f) {

    function newf() {

      var arg = Array.prototype.slice.call(arguments, 0),
          args = arg.join('\u2400'),
          cache = newf.cache = newf.cache || {},
          count = newf.count = newf.count || [];

      if (hasProperty(cache, args)) {
        repush(count, args);
        return cache[args];
      }

      count.length >= 1e3 && delete cache[count.shift()];
      count.push(args);
      cache[args] = f(...arguments);

      return cache[args];
    }
    return newf;
  }

  function parsePathString(pathString) {

    if (!pathString) {
      return null;
    }

    var pth = paths(pathString);

    if (pth.arr) {
      return clone(pth.arr);
    }

    var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
        data = [];

    if (isArray$1(pathString) && isArray$1(pathString[0])) { // rough assumption
      data = clone(pathString);
    }

    if (!data.length) {

      String(pathString).replace(pathCommand, function(a, b, c) {
        var params = [],
            name = b.toLowerCase();

        c.replace(pathValues, function(a, b) {
          b && params.push(+b);
        });

        if (name == 'm' && params.length > 2) {
          data.push([ b, ...params.splice(0, 2) ]);
          name = 'l';
          b = b == 'm' ? 'l' : 'L';
        }

        while (params.length >= paramCounts[name]) {
          data.push([ b, ...params.splice(0, paramCounts[name]) ]);
          if (!paramCounts[name]) {
            break;
          }
        }
      });
    }

    data.toString = paths.toString;
    pth.arr = clone(data);

    return data;
  }

  function paths(ps) {
    var p = paths.ps = paths.ps || {};

    if (p[ps]) {
      p[ps].sleep = 100;
    } else {
      p[ps] = {
        sleep: 100
      };
    }

    setTimeout(function() {
      for (var key in p) {
        if (hasProperty(p, key) && key != ps) {
          p[key].sleep--;
          !p[key].sleep && delete p[key];
        }
      }
    });

    return p[ps];
  }

  function rectBBox(x, y, width, height) {

    if (arguments.length === 1) {
      y = x.y;
      width = x.width;
      height = x.height;
      x = x.x;
    }

    return {
      x: x,
      y: y,
      width: width,
      height: height,
      x2: x + width,
      y2: y + height
    };
  }

  function pathToString() {
    return this.join(',').replace(p2s, '$1');
  }

  function pathClone(pathArray) {
    var res = clone(pathArray);
    res.toString = pathToString;
    return res;
  }

  function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
    var t1 = 1 - t,
        t13 = pow(t1, 3),
        t12 = pow(t1, 2),
        t2 = t * t,
        t3 = t2 * t,
        x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,
        y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;

    return {
      x: fixError(x),
      y: fixError(y)
    };
  }

  function bezierBBox(points) {

    var bbox = curveBBox(...points);

    return rectBBox(
      bbox.x0,
      bbox.y0,
      bbox.x1 - bbox.x0,
      bbox.y1 - bbox.y0
    );
  }

  function isPointInsideBBox$2(bbox, x, y) {
    return x >= bbox.x &&
      x <= bbox.x + bbox.width &&
      y >= bbox.y &&
      y <= bbox.y + bbox.height;
  }

  function isBBoxIntersect(bbox1, bbox2) {
    bbox1 = rectBBox(bbox1);
    bbox2 = rectBBox(bbox2);
    return isPointInsideBBox$2(bbox2, bbox1.x, bbox1.y)
      || isPointInsideBBox$2(bbox2, bbox1.x2, bbox1.y)
      || isPointInsideBBox$2(bbox2, bbox1.x, bbox1.y2)
      || isPointInsideBBox$2(bbox2, bbox1.x2, bbox1.y2)
      || isPointInsideBBox$2(bbox1, bbox2.x, bbox2.y)
      || isPointInsideBBox$2(bbox1, bbox2.x2, bbox2.y)
      || isPointInsideBBox$2(bbox1, bbox2.x, bbox2.y2)
      || isPointInsideBBox$2(bbox1, bbox2.x2, bbox2.y2)
      || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x
          || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)
      && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y
          || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
  }

  function base3(t, p1, p2, p3, p4) {
    var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
        t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
    return t * t2 - 3 * p1 + 3 * p2;
  }

  function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {

    if (z == null) {
      z = 1;
    }

    z = z > 1 ? 1 : z < 0 ? 0 : z;

    var z2 = z / 2,
        n = 12,
        Tvalues = [ -0.1252,.1252,-0.3678,.3678,-0.5873,.5873,-0.7699,.7699,-0.9041,.9041,-0.9816,.9816 ],
        Cvalues = [ 0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472 ],
        sum = 0;

    for (var i = 0; i < n; i++) {
      var ct = z2 * Tvalues[i] + z2,
          xbase = base3(ct, x1, x2, x3, x4),
          ybase = base3(ct, y1, y2, y3, y4),
          comb = xbase * xbase + ybase * ybase;

      sum += Cvalues[i] * math.sqrt(comb);
    }

    return z2 * sum;
  }


  function intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {

    if (
      mmax(x1, x2) < mmin(x3, x4) ||
        mmin(x1, x2) > mmax(x3, x4) ||
        mmax(y1, y2) < mmin(y3, y4) ||
        mmin(y1, y2) > mmax(y3, y4)
    ) {
      return;
    }

    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
        ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
        denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

    if (!denominator) {
      return;
    }

    var px = fixError(nx / denominator),
        py = fixError(ny / denominator),
        px2 = +px.toFixed(2),
        py2 = +py.toFixed(2);

    if (
      px2 < +mmin(x1, x2).toFixed(2) ||
        px2 > +mmax(x1, x2).toFixed(2) ||
        px2 < +mmin(x3, x4).toFixed(2) ||
        px2 > +mmax(x3, x4).toFixed(2) ||
        py2 < +mmin(y1, y2).toFixed(2) ||
        py2 > +mmax(y1, y2).toFixed(2) ||
        py2 < +mmin(y3, y4).toFixed(2) ||
        py2 > +mmax(y3, y4).toFixed(2)
    ) {
      return;
    }

    return { x: px, y: py };
  }

  function fixError(number) {
    return Math.round(number * 100000000000) / 100000000000;
  }

  function findBezierIntersections(bez1, bez2, justCount) {
    var bbox1 = bezierBBox(bez1),
        bbox2 = bezierBBox(bez2);

    if (!isBBoxIntersect(bbox1, bbox2)) {
      return [];
    }

    // As an optimization, lines will have only 1 segment

    var l1 = bezlen(...bez1),
        l2 = bezlen(...bez2),
        n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,
        n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,
        dots1 = [],
        dots2 = [],
        xy = {},
        res = [];

    for (var i = 0; i < n1 + 1; i++) {
      var p = findDotsAtSegment(...bez1, i / n1);
      dots1.push({ x: p.x, y: p.y, t: i / n1 });
    }

    for (i = 0; i < n2 + 1; i++) {
      p = findDotsAtSegment(...bez2, i / n2);
      dots2.push({ x: p.x, y: p.y, t: i / n2 });
    }

    for (i = 0; i < n1; i++) {

      for (var j = 0; j < n2; j++) {
        var di = dots1[i],
            di1 = dots1[i + 1],
            dj = dots2[j],
            dj1 = dots2[j + 1],
            ci = abs$7(di1.x - di.x) < .01 ? 'y' : 'x',
            cj = abs$7(dj1.x - dj.x) < .01 ? 'y' : 'x',
            is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),
            key;

        if (is) {
          key = is.x.toFixed(9) + '#' + is.y.toFixed(9);

          if (xy[key]) {
            continue;
          }

          xy[key] = true;

          var t1 = di.t + abs$7((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),
              t2 = dj.t + abs$7((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);

          if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {

            {
              res.push({
                x: is.x,
                y: is.y,
                t1: t1,
                t2: t2
              });
            }
          }
        }
      }
    }

    return res;
  }


  /**
   * Find or counts the intersections between two SVG paths.
   *
   * Returns a number in counting mode and a list of intersections otherwise.
   *
   * A single intersection entry contains the intersection coordinates (x, y)
   * as well as additional information regarding the intersecting segments
   * on each path (segment1, segment2) and the relative location of the
   * intersection on these segments (t1, t2).
   *
   * The path may be an SVG path string or a list of path components
   * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.
   *
   * @example
   *
   * var intersections = findPathIntersections(
   *   'M0,0L100,100',
   *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]
   * );
   *
   * // intersections = [
   * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }
   * // ]
   *
   * @param {String|Array<PathDef>} path1
   * @param {String|Array<PathDef>} path2
   * @param {Boolean} [justCount=false]
   *
   * @return {Array<Intersection>|Number}
   */
  function findPathIntersections(path1, path2, justCount) {
    path1 = pathToCurve(path1);
    path2 = pathToCurve(path2);

    var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,
        res = justCount ? 0 : [];

    for (var i = 0, ii = path1.length; i < ii; i++) {
      var pi = path1[i];

      if (pi[0] == 'M') {
        x1 = x1m = pi[1];
        y1 = y1m = pi[2];
      } else {

        if (pi[0] == 'C') {
          bez1 = [ x1, y1, ...pi.slice(1) ];
          x1 = bez1[6];
          y1 = bez1[7];
        } else {
          bez1 = [ x1, y1, x1, y1, x1m, y1m, x1m, y1m ];
          x1 = x1m;
          y1 = y1m;
        }

        for (var j = 0, jj = path2.length; j < jj; j++) {
          var pj = path2[j];

          if (pj[0] == 'M') {
            x2 = x2m = pj[1];
            y2 = y2m = pj[2];
          } else {

            if (pj[0] == 'C') {
              bez2 = [ x2, y2, ...pj.slice(1) ];
              x2 = bez2[6];
              y2 = bez2[7];
            } else {
              bez2 = [ x2, y2, x2, y2, x2m, y2m, x2m, y2m ];
              x2 = x2m;
              y2 = y2m;
            }

            var intr = findBezierIntersections(bez1, bez2);

            {

              for (var k = 0, kk = intr.length; k < kk; k++) {
                intr[k].segment1 = i;
                intr[k].segment2 = j;
                intr[k].bez1 = bez1;
                intr[k].bez2 = bez2;
              }

              res = res.concat(intr);
            }
          }
        }
      }
    }

    return res;
  }


  function pathToAbsolute(pathArray) {
    var pth = paths(pathArray);

    if (pth.abs) {
      return pathClone(pth.abs);
    }

    if (!isArray$1(pathArray) || !isArray$1(pathArray && pathArray[0])) { // rough assumption
      pathArray = parsePathString(pathArray);
    }

    if (!pathArray || !pathArray.length) {
      return [ [ 'M', 0, 0 ] ];
    }

    var res = [],
        x = 0,
        y = 0,
        mx = 0,
        my = 0,
        start = 0,
        pa0;

    if (pathArray[0][0] == 'M') {
      x = +pathArray[0][1];
      y = +pathArray[0][2];
      mx = x;
      my = y;
      start++;
      res[0] = [ 'M', x, y ];
    }

    for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
      res.push(r = []);
      pa = pathArray[i];
      pa0 = pa[0];

      if (pa0 != pa0.toUpperCase()) {
        r[0] = pa0.toUpperCase();

        switch (r[0]) {
        case 'A':
          r[1] = pa[1];
          r[2] = pa[2];
          r[3] = pa[3];
          r[4] = pa[4];
          r[5] = pa[5];
          r[6] = +pa[6] + x;
          r[7] = +pa[7] + y;
          break;
        case 'V':
          r[1] = +pa[1] + y;
          break;
        case 'H':
          r[1] = +pa[1] + x;
          break;
        case 'M':
          mx = +pa[1] + x;
          my = +pa[2] + y;
        default:
          for (var j = 1, jj = pa.length; j < jj; j++) {
            r[j] = +pa[j] + ((j % 2) ? x : y);
          }
        }
      } else {
        for (var k = 0, kk = pa.length; k < kk; k++) {
          r[k] = pa[k];
        }
      }
      pa0 = pa0.toUpperCase();

      switch (r[0]) {
      case 'Z':
        x = +mx;
        y = +my;
        break;
      case 'H':
        x = r[1];
        break;
      case 'V':
        y = r[1];
        break;
      case 'M':
        mx = r[r.length - 2];
        my = r[r.length - 1];
      default:
        x = r[r.length - 2];
        y = r[r.length - 1];
      }
    }

    res.toString = pathToString;
    pth.abs = pathClone(res);

    return res;
  }

  function isLine(bez) {
    return (
      bez[0] === bez[2] &&
      bez[1] === bez[3] &&
      bez[4] === bez[6] &&
      bez[5] === bez[7]
    );
  }

  function lineToCurve(x1, y1, x2, y2) {
    return [
      x1, y1, x2,
      y2, x2, y2
    ];
  }

  function qubicToCurve(x1, y1, ax, ay, x2, y2) {
    var _13 = 1 / 3,
        _23 = 2 / 3;

    return [
      _13 * x1 + _23 * ax,
      _13 * y1 + _23 * ay,
      _13 * x2 + _23 * ax,
      _13 * y2 + _23 * ay,
      x2,
      y2
    ];
  }

  function arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {

    // for more information of where this math came from visit:
    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
    var _120 = PI * 120 / 180,
        rad = PI / 180 * (+angle || 0),
        res = [],
        xy,
        rotate = cacher(function(x, y, rad) {
          var X = x * math.cos(rad) - y * math.sin(rad),
              Y = x * math.sin(rad) + y * math.cos(rad);

          return { x: X, y: Y };
        });

    if (!recursive) {
      xy = rotate(x1, y1, -rad);
      x1 = xy.x;
      y1 = xy.y;
      xy = rotate(x2, y2, -rad);
      x2 = xy.x;
      y2 = xy.y;

      var x = (x1 - x2) / 2,
          y = (y1 - y2) / 2;

      var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);

      if (h > 1) {
        h = math.sqrt(h);
        rx = h * rx;
        ry = h * ry;
      }

      var rx2 = rx * rx,
          ry2 = ry * ry,
          k = (large_arc_flag == sweep_flag ? -1 : 1) *
              math.sqrt(abs$7((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
          cx = k * rx * y / ry + (x1 + x2) / 2,
          cy = k * -ry * x / rx + (y1 + y2) / 2,
          f1 = math.asin(((y1 - cy) / ry).toFixed(9)),
          f2 = math.asin(((y2 - cy) / ry).toFixed(9));

      f1 = x1 < cx ? PI - f1 : f1;
      f2 = x2 < cx ? PI - f2 : f2;
      f1 < 0 && (f1 = PI * 2 + f1);
      f2 < 0 && (f2 = PI * 2 + f2);

      if (sweep_flag && f1 > f2) {
        f1 = f1 - PI * 2;
      }
      if (!sweep_flag && f2 > f1) {
        f2 = f2 - PI * 2;
      }
    } else {
      f1 = recursive[0];
      f2 = recursive[1];
      cx = recursive[2];
      cy = recursive[3];
    }

    var df = f2 - f1;

    if (abs$7(df) > _120) {
      var f2old = f2,
          x2old = x2,
          y2old = y2;

      f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
      x2 = cx + rx * math.cos(f2);
      y2 = cy + ry * math.sin(f2);
      res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [ f2, f2old, cx, cy ]);
    }

    df = f2 - f1;

    var c1 = math.cos(f1),
        s1 = math.sin(f1),
        c2 = math.cos(f2),
        s2 = math.sin(f2),
        t = math.tan(df / 4),
        hx = 4 / 3 * rx * t,
        hy = 4 / 3 * ry * t,
        m1 = [ x1, y1 ],
        m2 = [ x1 + hx * s1, y1 - hy * c1 ],
        m3 = [ x2 + hx * s2, y2 - hy * c2 ],
        m4 = [ x2, y2 ];

    m2[0] = 2 * m1[0] - m2[0];
    m2[1] = 2 * m1[1] - m2[1];

    if (recursive) {
      return [ m2, m3, m4 ].concat(res);
    } else {
      res = [ m2, m3, m4 ].concat(res).join().split(',');
      var newres = [];

      for (var i = 0, ii = res.length; i < ii; i++) {
        newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
      }

      return newres;
    }
  }

  // Returns bounding box of cubic bezier curve.
  // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
  // Original version: NISHIO Hirokazu
  // Modifications: https://github.com/timo22345
  function curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {
    var tvalues = [],
        bounds = [ [], [] ],
        a, b, c, t, t1, t2, b2ac, sqrtb2ac;

    for (var i = 0; i < 2; ++i) {

      if (i == 0) {
        b = 6 * x0 - 12 * x1 + 6 * x2;
        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
        c = 3 * x1 - 3 * x0;
      } else {
        b = 6 * y0 - 12 * y1 + 6 * y2;
        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
        c = 3 * y1 - 3 * y0;
      }

      if (abs$7(a) < 1e-12) {

        if (abs$7(b) < 1e-12) {
          continue;
        }

        t = -c / b;

        if (0 < t && t < 1) {
          tvalues.push(t);
        }

        continue;
      }

      b2ac = b * b - 4 * c * a;
      sqrtb2ac = math.sqrt(b2ac);

      if (b2ac < 0) {
        continue;
      }

      t1 = (-b + sqrtb2ac) / (2 * a);

      if (0 < t1 && t1 < 1) {
        tvalues.push(t1);
      }

      t2 = (-b - sqrtb2ac) / (2 * a);

      if (0 < t2 && t2 < 1) {
        tvalues.push(t2);
      }
    }

    var j = tvalues.length,
        jlen = j,
        mt;

    while (j--) {
      t = tvalues[j];
      mt = 1 - t;
      bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
      bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
    }

    bounds[0][jlen] = x0;
    bounds[1][jlen] = y0;
    bounds[0][jlen + 1] = x3;
    bounds[1][jlen + 1] = y3;
    bounds[0].length = bounds[1].length = jlen + 2;

    return {
      x0: mmin(...bounds[0]),
      y0: mmin(...bounds[1]),
      x1: mmax(...bounds[0]),
      y1: mmax(...bounds[1])
    };
  }

  function pathToCurve(path) {

    var pth = paths(path);

    // return cached curve, if existing
    if (pth.curve) {
      return pathClone(pth.curve);
    }

    var curvedPath = pathToAbsolute(path),
        attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },
        processPath = function(path, d, pathCommand) {
          var nx, ny;

          if (!path) {
            return [ 'C', d.x, d.y, d.x, d.y, d.x, d.y ];
          }

          !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);

          switch (path[0]) {
          case 'M':
            d.X = path[1];
            d.Y = path[2];
            break;
          case 'A':
            path = [ 'C', ...arcToCurve(d.x, d.y, ...path.slice(1)) ];
            break;
          case 'S':
            if (pathCommand == 'C' || pathCommand == 'S') {

              // In 'S' case we have to take into account, if the previous command is C/S.
              nx = d.x * 2 - d.bx;

              // And reflect the previous
              ny = d.y * 2 - d.by;

              // command's control point relative to the current point.
            }
            else {

              // or some else or nothing
              nx = d.x;
              ny = d.y;
            }
            path = [ 'C', nx, ny, ...path.slice(1) ];
            break;
          case 'T':
            if (pathCommand == 'Q' || pathCommand == 'T') {

              // In 'T' case we have to take into account, if the previous command is Q/T.
              d.qx = d.x * 2 - d.qx;

              // And make a reflection similar
              d.qy = d.y * 2 - d.qy;

              // to case 'S'.
            }
            else {

              // or something else or nothing
              d.qx = d.x;
              d.qy = d.y;
            }
            path = [ 'C', ...qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]) ];
            break;
          case 'Q':
            d.qx = path[1];
            d.qy = path[2];
            path = [ 'C', ...qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]) ];
            break;
          case 'L':
            path = [ 'C', ...lineToCurve(d.x, d.y, path[1], path[2]) ];
            break;
          case 'H':
            path = [ 'C', ...lineToCurve(d.x, d.y, path[1], d.y) ];
            break;
          case 'V':
            path = [ 'C', ...lineToCurve(d.x, d.y, d.x, path[1]) ];
            break;
          case 'Z':
            path = [ 'C', ...lineToCurve(d.x, d.y, d.X, d.Y) ];
            break;
          }

          return path;
        },

        fixArc = function(pp, i) {

          if (pp[i].length > 7) {
            pp[i].shift();
            var pi = pp[i];

            while (pi.length) {
              pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved
              pp.splice(i++, 0, [ 'C', ...pi.splice(0, 6) ]);
            }

            pp.splice(i, 1);
            ii = curvedPath.length;
          }
        },

        pathCommands = [], // path commands of original path p
        pfirst = '', // temporary holder for original path command
        pathCommand = ''; // holder for previous path command of original path

    for (var i = 0, ii = curvedPath.length; i < ii; i++) {
      curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command

      if (pfirst != 'C') // C is not saved yet, because it may be result of conversion
      {
        pathCommands[i] = pfirst; // Save current path command
        i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand
      }
      curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath

      if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command
      // which may produce multiple C:s
      // so we have to make sure that C is also C in original path

      fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands

      var seg = curvedPath[i],
          seglen = seg.length;

      attrs.x = seg[seglen - 2];
      attrs.y = seg[seglen - 1];
      attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
      attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
    }

    // cache curve
    pth.curve = pathClone(curvedPath);

    return curvedPath;
  }

  /**
   * @typedef {import('../core/Types').ElementLike} Element
   * @typedef {import('../core/Types').ConnectionLike} Connection
   *
   * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL
   * @typedef {import('../util/Types').Intersection} Intersection
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   * @typedef {import('../util/Types').RectTRBL} RectTRBL
   */

  /**
   * @param {Rect} bounds
   *
   * @returns {Rect}
   */
  function roundBounds(bounds) {
    return {
      x: Math.round(bounds.x),
      y: Math.round(bounds.y),
      width: Math.round(bounds.width),
      height: Math.round(bounds.height)
    };
  }

  /**
   * @param {Point} point
   *
   * @returns {Point}
   */
  function roundPoint(point) {

    return {
      x: Math.round(point.x),
      y: Math.round(point.y)
    };
  }


  /**
   * Convert the given bounds to a { top, left, bottom, right } descriptor.
   *
   * @param {Point|Rect} bounds
   *
   * @return {RectTRBL}
   */
  function asTRBL(bounds) {
    return {
      top: bounds.y,
      right: bounds.x + (bounds.width || 0),
      bottom: bounds.y + (bounds.height || 0),
      left: bounds.x
    };
  }


  /**
   * Convert a { top, left, bottom, right } to an objects bounds.
   *
   * @param {RectTRBL} trbl
   *
   * @return {Rect}
   */
  function asBounds(trbl) {
    return {
      x: trbl.left,
      y: trbl.top,
      width: trbl.right - trbl.left,
      height: trbl.bottom - trbl.top
    };
  }


  /**
   * Get the mid of the given bounds or point.
   *
   * @param {Point|Rect} bounds
   *
   * @return {Point}
   */
  function getBoundsMid(bounds) {
    return roundPoint({
      x: bounds.x + (bounds.width || 0) / 2,
      y: bounds.y + (bounds.height || 0) / 2
    });
  }


  /**
   * Get the mid of the given Connection.
   *
   * @param {Connection} connection
   *
   * @return {Point}
   */
  function getConnectionMid(connection) {
    var waypoints = connection.waypoints;

    // calculate total length and length of each segment
    var parts = waypoints.reduce(function(parts, point, index) {

      var lastPoint = waypoints[index - 1];

      if (lastPoint) {
        var lastPart = parts[parts.length - 1];

        var startLength = lastPart && lastPart.endLength || 0;
        var length = distance(lastPoint, point);

        parts.push({
          start: lastPoint,
          end: point,
          startLength: startLength,
          endLength: startLength + length,
          length: length
        });
      }

      return parts;
    }, []);

    var totalLength = parts.reduce(function(length, part) {
      return length + part.length;
    }, 0);

    // find which segement contains middle point
    var midLength = totalLength / 2;

    var i = 0;
    var midSegment = parts[i];

    while (midSegment.endLength < midLength) {
      midSegment = parts[++i];
    }

    // calculate relative position on mid segment
    var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;

    var midPoint = {
      x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,
      y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress
    };

    return midPoint;
  }


  /**
   * Get the mid of the given Element.
   *
   * @param {Element} element
   *
   * @return {Point}
   */
  function getMid(element) {
    if (isConnection(element)) {
      return getConnectionMid(element);
    }

    return getBoundsMid(element);
  }

  // orientation utils //////////////////////

  /**
   * Get orientation of the given rectangle with respect to
   * the reference rectangle.
   *
   * A padding (positive or negative) may be passed to influence
   * horizontal / vertical orientation and intersection.
   *
   * @param {Rect} rect
   * @param {Rect} reference
   * @param {Point|number} padding
   *
   * @return {DirectionTRBL|Intersection} the orientation; one of top, top-left, left, ..., bottom, right or intersect.
   */
  function getOrientation(rect, reference, padding) {

    padding = padding || 0;

    // make sure we can use an object, too
    // for individual { x, y } padding
    if (!isObject(padding)) {
      padding = { x: padding, y: padding };
    }


    var rectOrientation = asTRBL(rect),
        referenceOrientation = asTRBL(reference);

    var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,
        right = rectOrientation.left - padding.x >= referenceOrientation.right,
        bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,
        left = rectOrientation.right + padding.x <= referenceOrientation.left;

    var vertical = top ? 'top' : (bottom ? 'bottom' : null),
        horizontal = left ? 'left' : (right ? 'right' : null);

    if (horizontal && vertical) {
      return vertical + '-' + horizontal;
    } else {
      return horizontal || vertical || 'intersect';
    }
  }


  // intersection utils //////////////////////

  /**
   * Get intersection between an element and a line path.
   *
   * @param {string} elementPath
   * @param {string} linePath
   * @param {boolean} cropStart Whether to crop start or end.
   *
   * @return {Point}
   */
  function getElementLineIntersection(elementPath, linePath, cropStart) {

    var intersections = getIntersections(elementPath, linePath);

    // recognize intersections
    // only one -> choose
    // two close together -> choose first
    // two or more distinct -> pull out appropriate one
    // none -> ok (fallback to point itself)
    if (intersections.length === 1) {
      return roundPoint(intersections[0]);
    } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {
      return roundPoint(intersections[0]);
    } else if (intersections.length > 1) {

      // sort by intersections based on connection segment +
      // distance from start
      intersections = sortBy(intersections, function(i) {
        var distance = Math.floor(i.t2 * 100) || 1;

        distance = 100 - distance;

        distance = (distance < 10 ? '0' : '') + distance;

        // create a sort string that makes sure we sort
        // line segment ASC + line segment position DESC (for cropStart)
        // line segment ASC + line segment position ASC (for cropEnd)
        return i.segment2 + '#' + distance;
      });

      return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);
    }

    return null;
  }


  function getIntersections(a, b) {
    return findPathIntersections(a, b);
  }


  function filterRedundantWaypoints(waypoints) {

    // alter copy of waypoints, not original
    waypoints = waypoints.slice();

    var idx = 0,
        point,
        previousPoint,
        nextPoint;

    while (waypoints[idx]) {
      point = waypoints[idx];
      previousPoint = waypoints[idx - 1];
      nextPoint = waypoints[idx + 1];

      if (pointDistance(point, nextPoint) === 0 ||
          pointsOnLine(previousPoint, nextPoint, point)) {

        // remove point, if overlapping with {nextPoint}
        // or on line with {previousPoint} -> {point} -> {nextPoint}
        waypoints.splice(idx, 1);
      } else {
        idx++;
      }
    }

    return waypoints;
  }

  // helpers //////////////////////

  function distance(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
  }

  function elementToString(e) {
    if (!e) {
      return '<null>';
    }

    return '<' + e.$type + (e.id ? ' id="' + e.id : '') + '" />';
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('../features/modeling/ElementFactory').default} ElementFactory
   * @typedef {import('../draw/TextRenderer').default} TextRenderer
   *
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').Label} Label
   * @typedef {import('../model/Types').Shape} Shape
   * @typedef {import('../model/Types').Connection} Connection
   * @typedef {import('../model/Types').Root} Root
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */

  /**
   * @param {ModdleElement} semantic
   * @param {ModdleElement} di
   * @param {Object} [attrs=null]
   *
   * @return {Object}
   */
  function elementData(semantic, di, attrs) {
    return assign$1({
      id: semantic.id,
      type: semantic.$type,
      businessObject: semantic,
      di: di
    }, attrs);
  }

  function getWaypoints(di, source, target) {

    var waypoints = di.waypoint;

    if (!waypoints || waypoints.length < 2) {
      return [ getMid(source), getMid(target) ];
    }

    return waypoints.map(function(p) {
      return { x: p.x, y: p.y };
    });
  }

  function notYetDrawn(semantic, refSemantic, property) {
    return new Error(
      `element ${ elementToString(refSemantic) } referenced by ${ elementToString(semantic) }#${ property } not yet drawn`
    );
  }


  /**
   * An importer that adds bpmn elements to the canvas
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {ElementFactory} elementFactory
   * @param {ElementRegistry} elementRegistry
   * @param {TextRenderer} textRenderer
   */
  function BpmnImporter(
      eventBus, canvas, elementFactory,
      elementRegistry, textRenderer) {

    this._eventBus = eventBus;
    this._canvas = canvas;
    this._elementFactory = elementFactory;
    this._elementRegistry = elementRegistry;
    this._textRenderer = textRenderer;
  }

  BpmnImporter.$inject = [
    'eventBus',
    'canvas',
    'elementFactory',
    'elementRegistry',
    'textRenderer'
  ];


  /**
   * Add a BPMN element (semantic) to the canvas making it a child of the
   * given parent.
   *
   * @param {ModdleElement} semantic
   * @param {ModdleElement} di
   * @param {Shape} parentElement
   *
   * @return {Shape | Root | Connection}
   */
  BpmnImporter.prototype.add = function(semantic, di, parentElement) {
    var element,
        hidden;

    var parentIndex;

    // ROOT ELEMENT
    // handle the special case that we deal with a
    // invisible root element (process, subprocess or collaboration)
    if (is$1(di, 'bpmndi:BPMNPlane')) {

      var attrs = is$1(semantic, 'bpmn:SubProcess')
        ? { id: semantic.id + '_plane' }
        : {};

      // add a virtual element (not being drawn)
      element = this._elementFactory.createRoot(elementData(semantic, di, attrs));

      this._canvas.addRootElement(element);
    }

    // SHAPE
    else if (is$1(di, 'bpmndi:BPMNShape')) {

      var collapsed = !isExpanded(semantic, di),
          isFrame = isFrameElement$1(semantic);

      hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

      var bounds = di.bounds;

      element = this._elementFactory.createShape(elementData(semantic, di, {
        collapsed: collapsed,
        hidden: hidden,
        x: Math.round(bounds.x),
        y: Math.round(bounds.y),
        width: Math.round(bounds.width),
        height: Math.round(bounds.height),
        isFrame: isFrame
      }));

      if (is$1(semantic, 'bpmn:BoundaryEvent')) {
        this._attachBoundary(semantic, element);
      }

      // insert lanes behind other flow nodes (cf. #727)
      if (is$1(semantic, 'bpmn:Lane')) {
        parentIndex = 0;
      }

      if (is$1(semantic, 'bpmn:DataStoreReference')) {

        // check whether data store is inside our outside of its semantic parent
        if (!isPointInsideBBox$1(parentElement, getMid(bounds))) {
          parentElement = this._canvas.findRoot(parentElement);
        }
      }

      this._canvas.addShape(element, parentElement, parentIndex);
    }

    // CONNECTION
    else if (is$1(di, 'bpmndi:BPMNEdge')) {

      var source = this._getSource(semantic),
          target = this._getTarget(semantic);

      hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

      element = this._elementFactory.createConnection(elementData(semantic, di, {
        hidden: hidden,
        source: source,
        target: target,
        waypoints: getWaypoints(di, source, target)
      }));

      if (is$1(semantic, 'bpmn:DataAssociation')) {

        // render always on top; this ensures DataAssociations
        // are rendered correctly across different "hacks" people
        // love to model such as cross participant / sub process
        // associations
        parentElement = this._canvas.findRoot(parentElement);
      }

      this._canvas.addConnection(element, parentElement, parentIndex);
    } else {
      throw new Error(
        `unknown di ${ elementToString(di) } for element ${ elementToString(semantic) }`
      );
    }

    // (optional) LABEL
    if (isLabelExternal(semantic) && getLabel(element)) {
      this.addLabel(semantic, di, element);
    }

    this._eventBus.fire('bpmnElement.added', { element: element });

    return element;
  };


  /**
   * Attach a boundary element to the given host.
   *
   * @param {ModdleElement} boundarySemantic
   * @param {Shape} boundaryElement
   */
  BpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {
    var hostSemantic = boundarySemantic.attachedToRef;

    if (!hostSemantic) {
      throw new Error(
        `missing ${ elementToString(boundarySemantic) }#attachedToRef`
      );
    }

    var host = this._elementRegistry.get(hostSemantic.id),
        attachers = host && host.attachers;

    if (!host) {
      throw notYetDrawn(boundarySemantic, hostSemantic, 'attachedToRef');
    }

    // wire element.host <> host.attachers
    boundaryElement.host = host;

    if (!attachers) {
      host.attachers = attachers = [];
    }

    if (attachers.indexOf(boundaryElement) === -1) {
      attachers.push(boundaryElement);
    }
  };


  /**
   * Add a label to a given element.
   *
   * @param {ModdleElement} semantic
   * @param {ModdleElement} di
   * @param {Element} element
   *
   * @return {Label}
   */
  BpmnImporter.prototype.addLabel = function(semantic, di, element) {
    var bounds,
        text,
        label;

    bounds = getExternalLabelBounds(di, element);

    text = getLabel(element);

    if (text) {

      // get corrected bounds from actual layouted text
      bounds = this._textRenderer.getExternalLabelBounds(bounds, text);
    }

    label = this._elementFactory.createLabel(elementData(semantic, di, {
      id: semantic.id + '_label',
      labelTarget: element,
      type: 'label',
      hidden: element.hidden || !getLabel(element),
      x: Math.round(bounds.x),
      y: Math.round(bounds.y),
      width: Math.round(bounds.width),
      height: Math.round(bounds.height)
    }));

    return this._canvas.addShape(label, element.parent);
  };

  /**
   * Get the source or target of the given connection.
   *
   * @param {ModdleElement} semantic
   * @param {'source' | 'target'} side
   *
   * @return {Element}
   */
  BpmnImporter.prototype._getConnectedElement = function(semantic, side) {

    var element,
        refSemantic,
        type = semantic.$type;

    refSemantic = semantic[side + 'Ref'];

    // handle mysterious isMany DataAssociation#sourceRef
    if (side === 'source' && type === 'bpmn:DataInputAssociation') {
      refSemantic = refSemantic && refSemantic[0];
    }

    // fix source / target for DataInputAssociation / DataOutputAssociation
    if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||
        side === 'target' && type === 'bpmn:DataInputAssociation') {

      refSemantic = semantic.$parent;
    }

    element = refSemantic && this._getElement(refSemantic);

    if (element) {
      return element;
    }

    if (refSemantic) {
      throw notYetDrawn(semantic, refSemantic, side + 'Ref');
    } else {
      throw new Error(
        `${ elementToString(semantic) }#${ side } Ref not specified`
      );
    }
  };

  BpmnImporter.prototype._getSource = function(semantic) {
    return this._getConnectedElement(semantic, 'source');
  };

  BpmnImporter.prototype._getTarget = function(semantic) {
    return this._getConnectedElement(semantic, 'target');
  };


  BpmnImporter.prototype._getElement = function(semantic) {
    return this._elementRegistry.get(semantic.id);
  };


  // helpers ////////////////////

  function isPointInsideBBox$1(bbox, point) {
    var x = point.x,
        y = point.y;

    return x >= bbox.x &&
      x <= bbox.x + bbox.width &&
      y >= bbox.y &&
      y <= bbox.y + bbox.height;
  }

  function isFrameElement$1(semantic) {
    return is$1(semantic, 'bpmn:Group');
  }

  var ImportModule = {
    __depends__: [
      TranslateModule
    ],
    bpmnImporter: [ 'type', BpmnImporter ]
  };

  var CoreModule$1 = {
    __depends__: [
      DrawModule$1,
      ImportModule
    ]
  };

  /**
   * @typedef {import('../model/Types').Connection} Connection
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').Shape} Shape
   *
   * @typedef {import('../util/Types').Rect} Rect
   *
   * @typedef { {
   *   allShapes: Record<string, Shape>,
   *   allConnections: Record<string, Connection>,
   *   topLevel: Record<string, Element>,
   *   enclosedConnections: Record<string, Connection>,
   *   enclosedElements: Record<string, Element>
   * } } Closure
   */

  /**
   * Get parent elements.
   *
   * @param {Element[]} elements
   *
   * @return {Element[]}
   */
  function getParents$1(elements) {

    // find elements that are not children of any other elements
    return filter(elements, function(element) {
      return !find$1(elements, function(e) {
        return e !== element && getParent$1(element, e);
      });
    });
  }


  function getParent$1(element, parent) {
    if (!parent) {
      return;
    }

    if (element === parent) {
      return parent;
    }

    if (!element.parent) {
      return;
    }

    return getParent$1(element.parent, parent);
  }


  /**
   * Adds an element to a collection and returns true if the
   * element was added.
   *
   * @param {Object[]} elements
   * @param {Object} element
   * @param {boolean} [unique]
   */
  function add$2(elements, element, unique) {
    var canAdd = !unique || elements.indexOf(element) === -1;

    if (canAdd) {
      elements.push(element);
    }

    return canAdd;
  }


  /**
   * Iterate over each element in a collection, calling the iterator function `fn`
   * with (element, index, recursionDepth).
   *
   * Recurse into all elements that are returned by `fn`.
   *
   * @param {Element|Element[]} elements
   * @param {(element: Element, index: number, depth: number) => Element[] | boolean | undefined} fn
   * @param {number} [depth] maximum recursion depth
   */
  function eachElement(elements, fn, depth) {

    depth = depth || 0;

    if (!isArray$3(elements)) {
      elements = [ elements ];
    }

    forEach$1(elements, function(s, i) {
      var filter = fn(s, i, depth);

      if (isArray$3(filter) && filter.length) {
        eachElement(filter, fn, depth + 1);
      }
    });
  }


  /**
   * Collects self + child elements up to a given depth from a list of elements.
   *
   * @param {Element|Element[]} elements the elements to select the children from
   * @param {boolean} unique whether to return a unique result set (no duplicates)
   * @param {number} maxDepth the depth to search through or -1 for infinite
   *
   * @return {Element[]} found elements
   */
  function selfAndChildren(elements, unique, maxDepth) {
    var result = [],
        processedChildren = [];

    eachElement(elements, function(element, i, depth) {
      add$2(result, element, unique);

      var children = element.children;

      // max traversal depth not reached yet
      {

        // children exist && children not yet processed
        if (children && add$2(processedChildren, children, unique)) {
          return children;
        }
      }
    });

    return result;
  }


  /**
   * Return self + ALL children for a number of elements
   *
   * @param {Element[]} elements to query
   * @param {boolean} [allowDuplicates] to allow duplicates in the result set
   *
   * @return {Element[]} the collected elements
   */
  function selfAndAllChildren(elements, allowDuplicates) {
    return selfAndChildren(elements, !allowDuplicates);
  }


  /**
   * Gets the the closure for all selected elements,
   * their enclosed children and connections.
   *
   * @param {Element[]} elements
   * @param {boolean} [isTopLevel=true]
   * @param {Closure} [closure]
   *
   * @return {Closure} newClosure
   */
  function getClosure(elements, isTopLevel, closure) {

    if (isUndefined$2(isTopLevel)) {
      isTopLevel = true;
    }

    if (isObject(isTopLevel)) {
      closure = isTopLevel;
      isTopLevel = true;
    }


    closure = closure || {};

    var allShapes = copyObject(closure.allShapes),
        allConnections = copyObject(closure.allConnections),
        enclosedElements = copyObject(closure.enclosedElements),
        enclosedConnections = copyObject(closure.enclosedConnections);

    var topLevel = copyObject(
      closure.topLevel,
      isTopLevel && groupBy(elements, function(e) { return e.id; })
    );


    function handleConnection(c) {
      if (topLevel[c.source.id] && topLevel[c.target.id]) {
        topLevel[c.id] = [ c ];
      }

      // not enclosed as a child, but maybe logically
      // (connecting two moved elements?)
      if (allShapes[c.source.id] && allShapes[c.target.id]) {
        enclosedConnections[c.id] = enclosedElements[c.id] = c;
      }

      allConnections[c.id] = c;
    }

    function handleElement(element) {

      enclosedElements[element.id] = element;

      if (element.waypoints) {

        // remember connection
        enclosedConnections[element.id] = allConnections[element.id] = element;
      } else {

        // remember shape
        allShapes[element.id] = element;

        // remember all connections
        forEach$1(element.incoming, handleConnection);

        forEach$1(element.outgoing, handleConnection);

        // recurse into children
        return element.children;
      }
    }

    eachElement(elements, handleElement);

    return {
      allShapes: allShapes,
      allConnections: allConnections,
      topLevel: topLevel,
      enclosedConnections: enclosedConnections,
      enclosedElements: enclosedElements
    };
  }

  /**
   * Returns the surrounding bbox for all elements in
   * the array or the element primitive.
   *
   * @param {Element|Element[]} elements
   * @param {boolean} [stopRecursion=false]
   *
   * @return {Rect}
   */
  function getBBox(elements, stopRecursion) {

    stopRecursion = !!stopRecursion;
    if (!isArray$3(elements)) {
      elements = [ elements ];
    }

    var minX,
        minY,
        maxX,
        maxY;

    forEach$1(elements, function(element) {

      // If element is a connection the bbox must be computed first
      var bbox = element;
      if (element.waypoints && !stopRecursion) {
        bbox = getBBox(element.waypoints, true);
      }

      var x = bbox.x,
          y = bbox.y,
          height = bbox.height || 0,
          width = bbox.width || 0;

      if (x < minX || minX === undefined) {
        minX = x;
      }
      if (y < minY || minY === undefined) {
        minY = y;
      }

      if ((x + width) > maxX || maxX === undefined) {
        maxX = x + width;
      }
      if ((y + height) > maxY || maxY === undefined) {
        maxY = y + height;
      }
    });

    return {
      x: minX,
      y: minY,
      height: maxY - minY,
      width: maxX - minX
    };
  }


  /**
   * Returns all elements that are enclosed from the bounding box.
   *
   *   * If bbox.(width|height) is not specified the method returns
   *     all elements with element.x/y > bbox.x/y
   *   * If only bbox.x or bbox.y is specified, method return all elements with
   *     e.x > bbox.x or e.y > bbox.y
   *
   * @param {Element[]} elements List of Elements to search through
   * @param {Rect} bbox the enclosing bbox.
   *
   * @return {Element[]} enclosed elements
   */
  function getEnclosedElements(elements, bbox) {

    var filteredElements = {};

    forEach$1(elements, function(element) {

      var e = element;

      if (e.waypoints) {
        e = getBBox(e);
      }

      if (!isNumber(bbox.y) && (e.x > bbox.x)) {
        filteredElements[element.id] = element;
      }
      if (!isNumber(bbox.x) && (e.y > bbox.y)) {
        filteredElements[element.id] = element;
      }
      if (e.x > bbox.x && e.y > bbox.y) {
        if (isNumber(bbox.width) && isNumber(bbox.height) &&
            e.width + e.x < bbox.width + bbox.x &&
            e.height + e.y < bbox.height + bbox.y) {

          filteredElements[element.id] = element;
        } else if (!isNumber(bbox.width) || !isNumber(bbox.height)) {
          filteredElements[element.id] = element;
        }
      }
    });

    return filteredElements;
  }

  /**
   * Get the element's type
   *
   * @param {Element} element
   *
   * @return {'connection' | 'shape' | 'root'}
   */
  function getType(element) {

    if ('waypoints' in element) {
      return 'connection';
    }

    if ('x' in element) {
      return 'shape';
    }

    return 'root';
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isFrameElement(element) {
    return !!(element && element.isFrame);
  }

  // helpers ///////////////////////////////

  function copyObject(src1, src2) {
    return assign$1({}, src1 || {}, src2 || {});
  }

  /**
   * Util that provides unique IDs.
   *
   * @class
   * @constructor
   *
   * The ids can be customized via a given prefix and contain a random value to avoid collisions.
   *
   * @param {string} [prefix] a prefix to prepend to generated ids (for better readability)
   */
  function IdGenerator(prefix) {

    this._counter = 0;
    this._prefix = (prefix ? prefix + '-' : '') + Math.floor(Math.random() * 1000000000) + '-';
  }

  /**
   * Returns a next unique ID.
   *
   * @return {string} the id
   */
  IdGenerator.prototype.next = function() {
    return this._prefix + (++this._counter);
  };

  // document wide unique overlay ids
  var ids$1 = new IdGenerator('ov');

  var LOW_PRIORITY$r = 500;

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef { {
   *   minZoom?: number,
   *   maxZoom?: number
   * } } OverlaysConfigShow
   *
   * @typedef { {
   *   min?: number,
   *   max?: number
   * } } OverlaysConfigScale
   *
   * @typedef { {
  *   id: string,
  *   type: string | null,
  *   element: Element | string
  * } & OverlayAttrs } Overlay
  *
   * @typedef { {
   *   html: HTMLElement | string,
   *   position: {
   *     top?: number,
   *     right?: number,
   *     bottom?: number,
   *     left?: number
   *   }
   * } & OverlaysConfigDefault } OverlayAttrs
   *
   * @typedef { {
   *   html: HTMLElement,
   *   element: Element,
   *   overlays: Overlay[]
   * } } OverlayContainer
   *
   * @typedef {{
   *   defaults?: OverlaysConfigDefault
   * }} OverlaysConfig
   *
   * @typedef { {
   *  show?: OverlaysConfigShow,
   *  scale?: OverlaysConfigScale | boolean
   * } } OverlaysConfigDefault
   *
   * @typedef { {
   *   id?: string;
   *   element?: Element | string;
   *   type?: string;
   * } | string } OverlaysFilter
   */

  /**
   * A service that allows users to attach overlays to diagram elements.
   *
   * The overlay service will take care of overlay positioning during updates.
   *
   * @example
   *
   * ```javascript
   * // add a pink badge on the top left of the shape
   *
   * overlays.add(someShape, {
   *   position: {
   *     top: -5,
   *     left: -5
   *   },
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   * // or add via shape id
   *
   * overlays.add('some-element-id', {
   *   position: {
   *     top: -5,
   *     left: -5
   *   }
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   * // or add with optional type
   *
   * overlays.add(someShape, 'badge', {
   *   position: {
   *     top: -5,
   *     left: -5
   *   }
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   * ```
   *
   * ```javascript
   * // remove an overlay
   *
   * var id = overlays.add(...);
   * overlays.remove(id);
   *
   *
   * You may configure overlay defaults during tool by providing a `config` module
   * with `overlays.defaults` as an entry:
   *
   * {
   *   overlays: {
   *     defaults: {
   *       show: {
   *         minZoom: 0.7,
   *         maxZoom: 5.0
   *       },
   *       scale: {
   *         min: 1
   *       }
   *     }
   * }
   * ```
   *
   * @param {OverlaysConfig} config
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   */
  function Overlays(config, eventBus, canvas, elementRegistry) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._elementRegistry = elementRegistry;

    this._ids = ids$1;

    /**
     * @type {OverlaysConfigDefault}
     */
    this._overlayDefaults = assign$1({

      // no show constraints
      show: null,

      // always scale
      scale: true
    }, config && config.defaults);

    /**
     * @type {Record<string, Overlay>}
     */
    this._overlays = {};

    /**
     * @type {OverlayContainer[]}
     */
    this._overlayContainers = [];

    /**
     * @type {HTMLElement}
     */
    this._overlayRoot = createRoot$1(canvas.getContainer());

    this._init();
  }


  Overlays.$inject = [
    'config.overlays',
    'eventBus',
    'canvas',
    'elementRegistry'
  ];


  /**
   * Returns the overlay with the specified ID or a list of overlays
   * for an element with a given type.
   *
   * @example
   *
   * ```javascript
   * // return the single overlay with the given ID
   * overlays.get('some-id');
   *
   * // return all overlays for the shape
   * overlays.get({ element: someShape });
   *
   * // return all overlays on shape with type 'badge'
   * overlays.get({ element: someShape, type: 'badge' });
   *
   * // shape can also be specified as ID
   * overlays.get({ element: 'element-id', type: 'badge' });
   * ```
   *
   * @param {OverlaysFilter} search The filter to be used to find the overlay(s).
   *
   * @return {Overlay|Overlay[]} The overlay(s).
   */
  Overlays.prototype.get = function(search) {

    if (isString(search)) {
      search = { id: search };
    }

    if (isString(search.element)) {
      search.element = this._elementRegistry.get(search.element);
    }

    if (search.element) {
      var container = this._getOverlayContainer(search.element, true);

      // return a list of overlays when searching by element (+type)
      if (container) {
        return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();
      } else {
        return [];
      }
    } else if (search.type) {
      return filter(this._overlays, matchPattern({ type: search.type }));
    } else {

      // return single element when searching by id
      return search.id ? this._overlays[search.id] : null;
    }
  };

  /**
   * Adds an HTML overlay to an element.
   *
   * @param {Element|string} element The element to add the overlay to.
   * @param {string} [type] An optional type that can be used to filter.
   * @param {OverlayAttrs} overlay The overlay.
   *
   * @return {string} The overlay's ID that can be used to get or remove it.
   */
  Overlays.prototype.add = function(element, type, overlay) {

    if (isObject(type)) {
      overlay = type;
      type = null;
    }

    if (!element.id) {
      element = this._elementRegistry.get(element);
    }

    if (!overlay.position) {
      throw new Error('must specifiy overlay position');
    }

    if (!overlay.html) {
      throw new Error('must specifiy overlay html');
    }

    if (!element) {
      throw new Error('invalid element specified');
    }

    var id = this._ids.next();

    overlay = assign$1({}, this._overlayDefaults, overlay, {
      id: id,
      type: type,
      element: element,
      html: overlay.html
    });

    this._addOverlay(overlay);

    return id;
  };


  /**
   * Remove an overlay with the given ID or all overlays matching the given filter.
   *
   * @see Overlays#get for filter options.
   *
   * @param {OverlaysFilter} filter The filter to be used to find the overlay.
   */
  Overlays.prototype.remove = function(filter) {

    var overlays = this.get(filter) || [];

    if (!isArray$3(overlays)) {
      overlays = [ overlays ];
    }

    var self = this;

    forEach$1(overlays, function(overlay) {

      var container = self._getOverlayContainer(overlay.element, true);

      if (overlay) {
        remove$2(overlay.html);
        remove$2(overlay.htmlContainer);

        delete overlay.htmlContainer;
        delete overlay.element;

        delete self._overlays[overlay.id];
      }

      if (container) {
        var idx = container.overlays.indexOf(overlay);
        if (idx !== -1) {
          container.overlays.splice(idx, 1);
        }
      }
    });

  };

  /**
   * Checks whether overlays are shown.
   *
   * @return {boolean} Whether overlays are shown.
   */
  Overlays.prototype.isShown = function() {
    return this._overlayRoot.style.display !== 'none';
  };

  /**
   * Show all overlays.
   */
  Overlays.prototype.show = function() {
    setVisible$1(this._overlayRoot);
  };

  /**
   * Hide all overlays.
   */
  Overlays.prototype.hide = function() {
    setVisible$1(this._overlayRoot, false);
  };

  /**
   * Remove all overlays and their container.
   */
  Overlays.prototype.clear = function() {
    this._overlays = {};

    this._overlayContainers = [];

    clear(this._overlayRoot);
  };

  Overlays.prototype._updateOverlayContainer = function(container) {
    var element = container.element,
        html = container.html;

    // update container left,top according to the elements x,y coordinates
    // this ensures we can attach child elements relative to this container

    var x = element.x,
        y = element.y;

    if (element.waypoints) {
      var bbox = getBBox(element);
      x = bbox.x;
      y = bbox.y;
    }

    setPosition$1(html, x, y);

    attr(container.html, 'data-container-id', element.id);
  };


  Overlays.prototype._updateOverlay = function(overlay) {

    var position = overlay.position,
        htmlContainer = overlay.htmlContainer,
        element = overlay.element;

    // update overlay html relative to shape because
    // it is already positioned on the element

    // update relative
    var left = position.left,
        top = position.top;

    if (position.right !== undefined) {

      var width;

      if (element.waypoints) {
        width = getBBox(element).width;
      } else {
        width = element.width;
      }

      left = position.right * -1 + width;
    }

    if (position.bottom !== undefined) {

      var height;

      if (element.waypoints) {
        height = getBBox(element).height;
      } else {
        height = element.height;
      }

      top = position.bottom * -1 + height;
    }

    setPosition$1(htmlContainer, left || 0, top || 0);
    this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
  };


  Overlays.prototype._createOverlayContainer = function(element) {
    var html = domify$1('<div class="djs-overlays" />');
    assign(html, { position: 'absolute' });

    this._overlayRoot.appendChild(html);

    var container = {
      html: html,
      element: element,
      overlays: []
    };

    this._updateOverlayContainer(container);

    this._overlayContainers.push(container);

    return container;
  };


  Overlays.prototype._updateRoot = function(viewbox) {
    var scale = viewbox.scale || 1;

    var matrix = 'matrix(' +
    [
      scale,
      0,
      0,
      scale,
      -1 * viewbox.x * scale,
      -1 * viewbox.y * scale
    ].join(',') +
    ')';

    setTransform(this._overlayRoot, matrix);
  };


  Overlays.prototype._getOverlayContainer = function(element, raw) {
    var container = find$1(this._overlayContainers, function(c) {
      return c.element === element;
    });


    if (!container && !raw) {
      return this._createOverlayContainer(element);
    }

    return container;
  };


  Overlays.prototype._addOverlay = function(overlay) {

    var id = overlay.id,
        element = overlay.element,
        html = overlay.html,
        htmlContainer,
        overlayContainer;

    // unwrap jquery (for those who need it)
    if (html.get && html.constructor.prototype.jquery) {
      html = html.get(0);
    }

    // create proper html elements from
    // overlay HTML strings
    if (isString(html)) {
      html = domify$1(html);
    }

    overlayContainer = this._getOverlayContainer(element);

    htmlContainer = domify$1('<div class="djs-overlay" data-overlay-id="' + id + '">');
    assign(htmlContainer, { position: 'absolute' });

    htmlContainer.appendChild(html);

    if (overlay.type) {
      classes(htmlContainer).add('djs-overlay-' + overlay.type);
    }

    var elementRoot = this._canvas.findRoot(element);
    var activeRoot = this._canvas.getRootElement();

    setVisible$1(htmlContainer, elementRoot === activeRoot);

    overlay.htmlContainer = htmlContainer;

    overlayContainer.overlays.push(overlay);
    overlayContainer.html.appendChild(htmlContainer);

    this._overlays[id] = overlay;

    this._updateOverlay(overlay);
    this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
  };


  Overlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {
    var show = overlay.show,
        rootElement = this._canvas.findRoot(overlay.element),
        minZoom = show && show.minZoom,
        maxZoom = show && show.maxZoom,
        htmlContainer = overlay.htmlContainer,
        activeRootElement = this._canvas.getRootElement(),
        visible = true;

    if (rootElement !== activeRootElement) {
      visible = false;
    } else if (show) {
      if (
        (isDefined(minZoom) && minZoom > viewbox.scale) ||
        (isDefined(maxZoom) && maxZoom < viewbox.scale)
      ) {
        visible = false;
      }
    }

    setVisible$1(htmlContainer, visible);

    this._updateOverlayScale(overlay, viewbox);
  };


  Overlays.prototype._updateOverlayScale = function(overlay, viewbox) {
    var shouldScale = overlay.scale,
        minScale,
        maxScale,
        htmlContainer = overlay.htmlContainer;

    var scale, transform = '';

    if (shouldScale !== true) {

      if (shouldScale === false) {
        minScale = 1;
        maxScale = 1;
      } else {
        minScale = shouldScale.min;
        maxScale = shouldScale.max;
      }

      if (isDefined(minScale) && viewbox.scale < minScale) {
        scale = (1 / viewbox.scale || 1) * minScale;
      }

      if (isDefined(maxScale) && viewbox.scale > maxScale) {
        scale = (1 / viewbox.scale || 1) * maxScale;
      }
    }

    if (isDefined(scale)) {
      transform = 'scale(' + scale + ',' + scale + ')';
    }

    setTransform(htmlContainer, transform);
  };


  Overlays.prototype._updateOverlaysVisibilty = function(viewbox) {

    var self = this;

    forEach$1(this._overlays, function(overlay) {
      self._updateOverlayVisibilty(overlay, viewbox);
    });
  };


  Overlays.prototype._init = function() {

    var eventBus = this._eventBus;

    var self = this;


    // scroll/zoom integration

    function updateViewbox(viewbox) {
      self._updateRoot(viewbox);
      self._updateOverlaysVisibilty(viewbox);

      self.show();
    }

    eventBus.on('canvas.viewbox.changing', function(event) {
      self.hide();
    });

    eventBus.on('canvas.viewbox.changed', function(event) {
      updateViewbox(event.viewbox);
    });


    // remove integration

    eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
      var element = e.element;
      var overlays = self.get({ element: element });

      forEach$1(overlays, function(o) {
        self.remove(o.id);
      });

      var container = self._getOverlayContainer(element);

      if (container) {
        remove$2(container.html);
        var i = self._overlayContainers.indexOf(container);
        if (i !== -1) {
          self._overlayContainers.splice(i, 1);
        }
      }
    });


    // move integration

    eventBus.on('element.changed', LOW_PRIORITY$r, function(e) {
      var element = e.element;

      var container = self._getOverlayContainer(element, true);

      if (container) {
        forEach$1(container.overlays, function(overlay) {
          self._updateOverlay(overlay);
        });

        self._updateOverlayContainer(container);
      }
    });


    // marker integration, simply add them on the overlays as classes, too.

    eventBus.on('element.marker.update', function(e) {
      var container = self._getOverlayContainer(e.element, true);
      if (container) {
        classes(container.html)[e.add ? 'add' : 'remove'](e.marker);
      }
    });


    eventBus.on('root.set', function() {
      self._updateOverlaysVisibilty(self._canvas.viewbox());
    });

    // clear overlays with diagram

    eventBus.on('diagram.clear', this.clear, this);
  };



  // helpers /////////////////////////////

  function createRoot$1(parentNode) {
    var root = domify$1(
      '<div class="djs-overlay-container" />'
    );

    assign(root, {
      position: 'absolute',
      width: 0,
      height: 0
    });

    parentNode.insertBefore(root, parentNode.firstChild);

    return root;
  }

  function setPosition$1(el, x, y) {
    assign(el, { left: x + 'px', top: y + 'px' });
  }

  /**
   * Set element visible
   *
   * @param {DOMElement} el
   * @param {boolean} [visible=true]
   */
  function setVisible$1(el, visible) {
    el.style.display = visible === false ? 'none' : '';
  }

  function setTransform(el, transform) {

    el.style['transform-origin'] = 'top left';

    [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {
      el.style[prefix + 'transform'] = transform;
    });
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var OverlaysModule = {
    __init__: [ 'overlays' ],
    overlays: [ 'type', Overlays ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
   */

  /**
   * Adds change support to the diagram, including
   *
   * <ul>
   *   <li>redrawing shapes and connections on change</li>
   * </ul>
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   * @param {GraphicsFactory} graphicsFactory
   */
  function ChangeSupport(
      eventBus, canvas, elementRegistry,
      graphicsFactory) {


    // redraw shapes / connections on change

    eventBus.on('element.changed', function(event) {

      var element = event.element;

      // element might have been deleted and replaced by new element with same ID
      // thus check for parent of element except for root element
      if (element.parent || element === canvas.getRootElement()) {
        event.gfx = elementRegistry.getGraphics(element);
      }

      // shape + gfx may have been deleted
      if (!event.gfx) {
        return;
      }

      eventBus.fire(getType(element) + '.changed', event);
    });

    eventBus.on('elements.changed', function(event) {

      var elements = event.elements;

      elements.forEach(function(e) {
        eventBus.fire('element.changed', { element: e });
      });

      graphicsFactory.updateContainments(elements);
    });

    eventBus.on('shape.changed', function(event) {
      graphicsFactory.update('shape', event.element, event.gfx);
    });

    eventBus.on('connection.changed', function(event) {
      graphicsFactory.update('connection', event.element, event.gfx);
    });
  }

  ChangeSupport.$inject = [
    'eventBus',
    'canvas',
    'elementRegistry',
    'graphicsFactory'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ChangeSupportModule = {
    __init__: [ 'changeSupport' ],
    changeSupport: [ 'type', ChangeSupport ]
  };

  /**
   * @typedef {import('../core/Types').ElementLike} ElementLike
   * @typedef {import('../core/EventBus').default} EventBus
   * @typedef {import('./CommandStack').CommandContext} CommandContext
   *
   * @typedef {string|string[]} Events
   * @typedef { (context: CommandContext) => ElementLike[] | void } HandlerFunction
   * @typedef { (context: CommandContext) => void } ComposeHandlerFunction
   */

  var DEFAULT_PRIORITY$7 = 1000;

  /**
   * A utility that can be used to plug into the command execution for
   * extension and/or validation.
   *
   * @class
   * @constructor
   *
   * @example
   *
   * ```javascript
   * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
   *
   * class CommandLogger extends CommandInterceptor {
   *   constructor(eventBus) {
   *     super(eventBus);
   *
   *   this.preExecute('shape.create', (event) => {
   *     console.log('commandStack.shape-create.preExecute', event);
   *   });
   * }
   * ```
   *
   * @param {EventBus} eventBus
   */
  function CommandInterceptor(eventBus) {

    /**
     * @type {EventBus}
     */
    this._eventBus = eventBus;
  }

  CommandInterceptor.$inject = [ 'eventBus' ];

  function unwrapEvent(fn, that) {
    return function(event) {
      return fn.call(that || null, event.context, event.command, event);
    };
  }


  /**
   * Intercept a command during one of the phases.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {string} [hook] phase to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {

    if (isFunction(hook) || isNumber(hook)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = hook;
      hook = null;
    }

    if (isFunction(priority)) {
      that = unwrap;
      unwrap = handlerFn;
      handlerFn = priority;
      priority = DEFAULT_PRIORITY$7;
    }

    if (isObject(unwrap)) {
      that = unwrap;
      unwrap = false;
    }

    if (!isFunction(handlerFn)) {
      throw new Error('handlerFn must be a function');
    }

    if (!isArray$3(events)) {
      events = [ events ];
    }

    var eventBus = this._eventBus;

    forEach$1(events, function(event) {

      // concat commandStack(.event)?(.hook)?
      var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');

      eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
    });
  };

  /**
   * Add a <canExecute> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.canExecute = createHook('canExecute');

  /**
   * Add a <preExecute> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.preExecute = createHook('preExecute');

  /**
   * Add a <preExecuted> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.preExecuted = createHook('preExecuted');

  /**
   * Add a <execute> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.execute = createHook('execute');

  /**
   * Add a <executed> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.executed = createHook('executed');

  /**
   * Add a <postExecute> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.postExecute = createHook('postExecute');

  /**
   * Add a <postExecuted> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.postExecuted = createHook('postExecuted');

  /**
   * Add a <revert> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.revert = createHook('revert');

  /**
   * Add a <reverted> phase of command interceptor.
   *
   * @param {Events} [events] command(s) to intercept
   * @param {number} [priority]
   * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
   * @param {boolean} [unwrap] whether the event should be unwrapped
   * @param {any} [that]
   */
  CommandInterceptor.prototype.reverted = createHook('reverted');

  /*
   * Add prototype methods for each phase of command execution (e.g. execute,
   * revert).
   *
   * @param {string} hook
   *
   * @return { (
   *   events?: Events,
   *   priority?: number,
   *   handlerFn: ComposeHandlerFunction|HandlerFunction,
   *   unwrap?: boolean
   * ) => any }
   */
  function createHook(hook) {

    /**
     * @this {CommandInterceptor}
     *
     * @param {Events} [events]
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap]
     * @param {any} [that]
     */
    const hookFn = function(events, priority, handlerFn, unwrap, that) {

      if (isFunction(events) || isNumber(events)) {
        that = unwrap;
        unwrap = handlerFn;
        handlerFn = priority;
        priority = events;
        events = null;
      }

      this.on(events, hook, priority, handlerFn, unwrap, that);
    };

    return hookFn;
  }

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   */

  /**
   * A modeling behavior that ensures we set the correct root element
   * as we undo and redo commands.
   *
   * @param {Canvas} canvas
   * @param {Injector} injector
   */
  function RootElementsBehavior(canvas, injector) {

    injector.invoke(CommandInterceptor, this);

    this.executed(function(event) {
      var context = event.context;

      if (context.rootElement) {
        canvas.setRootElement(context.rootElement);
      } else {
        context.rootElement = canvas.getRootElement();
      }
    });

    this.revert(function(event) {
      var context = event.context;

      if (context.rootElement) {
        canvas.setRootElement(context.rootElement);
      }
    });
  }

  e$3(RootElementsBehavior, CommandInterceptor);

  RootElementsBehavior.$inject = [ 'canvas', 'injector' ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var RootElementsModule = {
    __init__: [ 'rootElementsBehavior' ],
    rootElementsBehavior: [ 'type', RootElementsBehavior ]
  };

  /**
   * @param {string} str
   *
   * @return {string}
   */
  function escapeCSS(str) {
    return CSS.escape(str);
  }

  var HTML_ESCAPE_MAP = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&#39;'
  };

  /**
   * @param {string} str
   *
   * @return {string}
   */
  function escapeHTML(str) {
    str = '' + str;

    return str && str.replace(/[&<>"']/g, function(match) {
      return HTML_ESCAPE_MAP[match];
    });
  }

  /**
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */

  var planeSuffix = '_plane';

  /**
   * Get primary shape ID for a plane.
   *
   * @param  {Element|ModdleElement} element
   *
   * @return {string}
   */
  function getShapeIdFromPlane(element) {
    var id = element.id;

    return removePlaneSuffix(id);
  }

  /**
   * Get plane ID for a primary shape.
   *
   * @param  {Element|ModdleElement} element
   *
   * @return {string}
   */
  function getPlaneIdFromShape(element) {
    var id = element.id;

    if (is$1(element, 'bpmn:SubProcess')) {
      return addPlaneSuffix(id);
    }

    return id;
  }

  /**
   * Get plane ID for primary shape ID.
   *
   * @param {string} id
   *
   * @return {string}
   */
  function toPlaneId(id) {
    return addPlaneSuffix(id);
  }

  /**
   * Check wether element is plane.
   *
   * @param  {Element|ModdleElement} element
   *
   * @return {boolean}
   */
  function isPlane$1(element) {
    var di = getDi(element);

    return is$1(di, 'bpmndi:BPMNPlane');
  }

  function addPlaneSuffix(id) {
    return id + planeSuffix;
  }

  function removePlaneSuffix(id) {
    return id.replace(new RegExp(planeSuffix + '$'), '');
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   */

  var OPEN_CLASS = 'bjs-breadcrumbs-shown';


  /**
   * Adds overlays that allow switching planes on collapsed subprocesses.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Canvas} canvas
   */
  function DrilldownBreadcrumbs(eventBus, elementRegistry, canvas) {
    var breadcrumbs = domify$1('<ul class="bjs-breadcrumbs"></ul>');
    var container = canvas.getContainer();
    var containerClasses = classes(container);
    container.appendChild(breadcrumbs);

    var businessObjectParents = [];

    // update breadcrumbs if name or ID of the primary shape changes
    eventBus.on('element.changed', function(event) {
      var shape = event.element,
          businessObject = getBusinessObject(shape);

      var isPresent = find$1(businessObjectParents, function(element) {
        return element === businessObject;
      });

      if (!isPresent) {
        return;
      }

      updateBreadcrumbs();
    });

    /**
     * Updates the displayed breadcrumbs. If no element is provided, only the
     * labels are updated.
     *
     * @param {Element} [element]
     */
    function updateBreadcrumbs(element) {
      if (element) {
        businessObjectParents = getBusinessObjectParentChain(element);
      }

      var path = businessObjectParents.flatMap(function(parent) {
        var parentPlane =
          canvas.findRoot(getPlaneIdFromShape(parent)) ||
          canvas.findRoot(parent.id);

        // when the root is a collaboration, the process does not have a
        // corresponding element in the elementRegisty. Instead, we search
        // for the corresponding participant
        if (!parentPlane && is$1(parent, 'bpmn:Process')) {
          var participant = elementRegistry.find(function(element) {
            var businessObject = getBusinessObject(element);

            return businessObject && businessObject.get('processRef') === parent;
          });

          parentPlane = participant && canvas.findRoot(participant.id);
        }

        if (!parentPlane) {
          return [];
        }

        var title = escapeHTML(parent.name || parent.id);
        var link = domify$1('<li><span class="bjs-crumb"><a title="' + title + '">' + title + '</a></span></li>');

        link.addEventListener('click', function() {
          canvas.setRootElement(parentPlane);
        });

        return link;
      });

      breadcrumbs.innerHTML = '';

      // show breadcrumbs and expose state to .djs-container
      var visible = path.length > 1;

      containerClasses.toggle(OPEN_CLASS, visible);

      path.forEach(function(element) {
        breadcrumbs.appendChild(element);
      });
    }

    eventBus.on('root.set', function(event) {
      updateBreadcrumbs(event.element);
    });

  }

  DrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'canvas' ];


  // helpers //////////

  /**
   * Returns the parents for the element using the business object chain,
   * starting with the root element.
   *
   * @param {Shape} child
   *
   * @return {Shape}
   */
  function getBusinessObjectParentChain(child) {
    var businessObject = getBusinessObject(child);

    var parents = [];

    for (var element = businessObject; element; element = element.$parent) {
      if (is$1(element, 'bpmn:SubProcess') || is$1(element, 'bpmn:Process')) {
        parents.push(element);
      }
    }

    return parents.reverse();
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * Move collapsed subprocesses into view when drilling down.
   *
   * Zoom and scroll are saved in a session.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function DrilldownCentering(eventBus, canvas) {

    var currentRoot = null;
    var positionMap = new Map$1();

    eventBus.on('root.set', function(event) {
      var newRoot = event.element;
      var currentViewbox = canvas.viewbox();
      var storedViewbox = positionMap.get(newRoot);

      positionMap.set(currentRoot, {
        x: currentViewbox.x,
        y: currentViewbox.y,
        zoom: currentViewbox.scale
      });

      currentRoot = newRoot;

      // Keep viewbox when replacing root elements
      if (!is$1(newRoot, 'bpmn:SubProcess') && !storedViewbox) {
        return;
      }

      storedViewbox = storedViewbox || { x: 0, y: 0, zoom: 1 };

      var dx = (currentViewbox.x - storedViewbox.x) * currentViewbox.scale,
          dy = (currentViewbox.y - storedViewbox.y) * currentViewbox.scale;

      if (dx !== 0 || dy !== 0) {
        canvas.scroll({
          dx: dx,
          dy: dy
        });
      }

      if (storedViewbox.zoom !== currentViewbox.scale) {
        canvas.zoom(storedViewbox.zoom, { x: 0, y: 0 });
      }
    });

    eventBus.on('diagram.clear', function() {
      positionMap.clear();
      currentRoot = null;
    });

  }

  DrilldownCentering.$inject = [ 'eventBus', 'canvas' ];


  /**
   * ES5 Map implementation. Works.
   */
  function Map$1() {

    this._entries = [];

    this.set = function(key, value) {

      var found = false;

      for (var k in this._entries) {
        if (this._entries[k][0] === key) {
          this._entries[k][1] = value;

          found = true;

          break;
        }
      }

      if (!found) {
        this._entries.push([ key, value ]);
      }
    };

    this.get = function(key) {

      for (var k in this._entries) {
        if (this._entries[k][0] === key) {
          return this._entries[k][1];
        }
      }

      return null;
    };

    this.clear = function() {
      this._entries.length = 0;
    };

    this.remove = function(key) {

      var idx = -1;

      for (var k in this._entries) {
        if (this._entries[k][0] === key) {
          idx = k;

          break;
        }
      }

      if (idx !== -1) {
        this._entries.splice(idx, 1);
      }
    };
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../model/Types').Moddle} Moddle
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/core/Canvas').CanvasPlane} CanvasPlane
   *
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   */

  var DEFAULT_POSITION$1 = {
    x: 180,
    y: 160
  };

  /**
   * Hook into `import.render.start` and create new planes for diagrams with
   * collapsed subprocesses and all DI elements on the same plane.
   *
   * @param {EventBus} eventBus
   * @param {Moddle} moddle
   */
  function SubprocessCompatibility(eventBus, moddle) {
    this._eventBus = eventBus;
    this._moddle = moddle;

    var self = this;

    eventBus.on('import.render.start', 1500, function(e, context) {
      self._handleImport(context.definitions);
    });
  }

  /**
   * @param {ModdleElement} definitions
   */
  SubprocessCompatibility.prototype._handleImport = function(definitions) {
    if (!definitions.diagrams) {
      return;
    }

    var self = this;
    this._definitions = definitions;
    this._processToDiagramMap = {};

    definitions.diagrams.forEach(function(diagram) {
      if (!diagram.plane || !diagram.plane.bpmnElement) {
        return;
      }

      self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;
    });

    var newDiagrams = definitions.diagrams
      .filter(diagram => diagram.plane)
      .flatMap(diagram => self._createNewDiagrams(diagram.plane));

    newDiagrams.forEach(function(diagram) {
      self._movePlaneElementsToOrigin(diagram.plane);
    });
  };


  /**
   * Moves all DI elements from collapsed subprocesses to a new plane.
   *
   * @param {CanvasPlane} plane
   *
   * @return {ModdleElement[]} new diagrams created for the collapsed subprocesses
   */
  SubprocessCompatibility.prototype._createNewDiagrams = function(plane) {
    var self = this;

    var collapsedElements = [];
    var elementsToMove = [];

    plane.get('planeElement').forEach(function(diElement) {
      var businessObject = diElement.bpmnElement;

      if (!businessObject) {
        return;
      }

      var parent = businessObject.$parent;

      if (is$1(businessObject, 'bpmn:SubProcess') && !diElement.isExpanded) {
        collapsedElements.push(businessObject);
      }

      if (shouldMoveToPlane(businessObject, plane)) {

        // don't change the array while we iterate over it
        elementsToMove.push({ diElement: diElement, parent: parent });
      }
    });

    var newDiagrams = [];

    // create new planes for all collapsed subprocesses, even when they are empty
    collapsedElements.forEach(function(element) {
      if (!self._processToDiagramMap[ element.id ]) {
        var diagram = self._createDiagram(element);

        self._processToDiagramMap[element.id] = diagram;

        newDiagrams.push(diagram);
      }
    });

    elementsToMove.forEach(function(element) {
      var diElement = element.diElement;
      var parent = element.parent;

      // parent is expanded, get nearest collapsed parent
      while (parent && collapsedElements.indexOf(parent) === -1) {
        parent = parent.$parent;
      }

      // false positive, all parents are expanded
      if (!parent) {
        return;
      }

      var diagram = self._processToDiagramMap[ parent.id ];

      self._moveToDiPlane(diElement, diagram.plane);
    });

    return newDiagrams;
  };

  /**
   * @param {CanvasPlane} plane
   */
  SubprocessCompatibility.prototype._movePlaneElementsToOrigin = function(plane) {
    var elements = plane.get('planeElement');

    // get bounding box of all elements
    var planeBounds = getPlaneBounds(plane);

    var offset = {
      x: planeBounds.x - DEFAULT_POSITION$1.x,
      y: planeBounds.y - DEFAULT_POSITION$1.y
    };

    elements.forEach(function(diElement) {
      if (diElement.waypoint) {
        diElement.waypoint.forEach(function(waypoint) {
          waypoint.x = waypoint.x - offset.x;
          waypoint.y = waypoint.y - offset.y;
        });
      } else if (diElement.bounds) {
        diElement.bounds.x = diElement.bounds.x - offset.x;
        diElement.bounds.y = diElement.bounds.y - offset.y;
      }
    });
  };

  /**
   * @param {ModdleElement} diElement
   * @param {CanvasPlane} newPlane
   */
  SubprocessCompatibility.prototype._moveToDiPlane = function(diElement, newPlane) {
    var containingDiagram = findRootDiagram(diElement);

    // remove DI from old Plane and add it to the new one
    var parentPlaneElement = containingDiagram.plane.get('planeElement');

    parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);

    newPlane.get('planeElement').push(diElement);
  };

  /**
   * @param {ModdleElement} businessObject
   *
   * @return {ModdleElement}
   */
  SubprocessCompatibility.prototype._createDiagram = function(businessObject) {
    var plane = this._moddle.create('bpmndi:BPMNPlane', {
      bpmnElement: businessObject
    });

    var diagram = this._moddle.create('bpmndi:BPMNDiagram', {
      plane: plane
    });

    plane.$parent = diagram;

    plane.bpmnElement = businessObject;

    diagram.$parent = this._definitions;

    this._definitions.diagrams.push(diagram);

    return diagram;
  };

  SubprocessCompatibility.$inject = [ 'eventBus', 'moddle' ];


  // helpers //////////

  function findRootDiagram(element) {
    if (is$1(element, 'bpmndi:BPMNDiagram')) {
      return element;
    } else {
      return findRootDiagram(element.$parent);
    }
  }

  /**
   * @param {CanvasPlane} plane
   *
   * @return {Rect}
   */
  function getPlaneBounds(plane) {
    var planeTrbl = {
      top: Infinity,
      right: -Infinity,
      bottom: -Infinity,
      left: Infinity
    };

    plane.planeElement.forEach(function(element) {
      if (!element.bounds) {
        return;
      }

      var trbl = asTRBL(element.bounds);

      planeTrbl.top = Math.min(trbl.top, planeTrbl.top);
      planeTrbl.left = Math.min(trbl.left, planeTrbl.left);
    });

    return asBounds(planeTrbl);
  }

  /**
   * @param {ModdleElement} businessObject
   * @param {CanvasPlane} plane
   *
   * @return {boolean}
   */
  function shouldMoveToPlane(businessObject, plane) {
    var parent = businessObject.$parent;

    // don't move elements that are already on the plane
    if (!is$1(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {
      return false;
    }

    // dataAssociations are children of the subprocess but rendered on process level
    // cf. https://github.com/bpmn-io/bpmn-js/issues/1619
    if (isAny(businessObject, [ 'bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation' ])) {
      return false;
    }

    return true;
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/overlays/Overlays').default} Overlays
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Parent} Parent
   * @typedef {import('../../model/Types').Shape} Shape
   */

  var LOW_PRIORITY$q = 250;
  var ARROW_DOWN_SVG = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.81801948,3.50735931 L10.4996894,9.1896894 L10.5,4 L12,4 L12,12 L4,12 L4,10.5 L9.6896894,10.4996894 L3.75735931,4.56801948 C3.46446609,4.27512627 3.46446609,3.80025253 3.75735931,3.50735931 C4.05025253,3.21446609 4.52512627,3.21446609 4.81801948,3.50735931 Z"/></svg>';

  var EMPTY_MARKER = 'bjs-drilldown-empty';

  /**
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Overlays} overlays
   * @param {Translate} translate
   */
  function DrilldownOverlayBehavior(
      canvas, eventBus, elementRegistry, overlays, translate
  ) {
    CommandInterceptor.call(this, eventBus);

    this._canvas = canvas;
    this._eventBus = eventBus;
    this._elementRegistry = elementRegistry;
    this._overlays = overlays;
    this._translate = translate;

    var self = this;

    this.executed('shape.toggleCollapse', LOW_PRIORITY$q, function(context) {
      var shape = context.shape;

      // Add overlay to the collapsed shape
      if (self._canDrillDown(shape)) {
        self._addOverlay(shape);
      } else {
        self._removeOverlay(shape);
      }
    }, true);


    this.reverted('shape.toggleCollapse', LOW_PRIORITY$q, function(context) {
      var shape = context.shape;

      // Add overlay to the collapsed shape
      if (self._canDrillDown(shape)) {
        self._addOverlay(shape);
      } else {
        self._removeOverlay(shape);
      }
    }, true);


    this.executed([ 'shape.create', 'shape.move', 'shape.delete' ], LOW_PRIORITY$q,
      function(context) {
        var oldParent = context.oldParent,
            newParent = context.newParent || context.parent,
            shape = context.shape;

        // Add overlay to the collapsed shape
        if (self._canDrillDown(shape)) {
          self._addOverlay(shape);
        }

        self._updateDrilldownOverlay(oldParent);
        self._updateDrilldownOverlay(newParent);
        self._updateDrilldownOverlay(shape);
      }, true);


    this.reverted([ 'shape.create', 'shape.move', 'shape.delete' ], LOW_PRIORITY$q,
      function(context) {
        var oldParent = context.oldParent,
            newParent = context.newParent || context.parent,
            shape = context.shape;

        // Add overlay to the collapsed shape
        if (self._canDrillDown(shape)) {
          self._addOverlay(shape);
        }

        self._updateDrilldownOverlay(oldParent);
        self._updateDrilldownOverlay(newParent);
        self._updateDrilldownOverlay(shape);
      }, true);


    eventBus.on('import.render.complete', function() {
      elementRegistry.filter(function(e) {
        return self._canDrillDown(e);
      }).map(function(el) {
        self._addOverlay(el);
      });
    });

  }

  e$3(DrilldownOverlayBehavior, CommandInterceptor);

  /**
   * @param {Shape} shape
   */
  DrilldownOverlayBehavior.prototype._updateDrilldownOverlay = function(shape) {
    var canvas = this._canvas;

    if (!shape) {
      return;
    }

    var root = canvas.findRoot(shape);

    if (root) {
      this._updateOverlayVisibility(root);
    }
  };

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  DrilldownOverlayBehavior.prototype._canDrillDown = function(element) {
    var canvas = this._canvas;

    return is$1(element, 'bpmn:SubProcess') && canvas.findRoot(getPlaneIdFromShape(element));
  };

  /**
   * Update the visibility of the drilldown overlay. If the plane has no elements,
   * the drilldown will only be shown when the element is selected.
   *
   * @param {Parent} element The collapsed root or shape.
   */
  DrilldownOverlayBehavior.prototype._updateOverlayVisibility = function(element) {
    var overlays = this._overlays;

    var businessObject = getBusinessObject(element);

    var overlay = overlays.get({ element: businessObject.id, type: 'drilldown' })[0];

    if (!overlay) {
      return;
    }

    var hasFlowElements = businessObject
      && businessObject.get('flowElements')
      && businessObject.get('flowElements').length;

    classes(overlay.html).toggle(EMPTY_MARKER, !hasFlowElements);
  };

  /**
   * Add a drilldown button to the given element assuming the plane has the same
   * ID as the element.
   *
   * @param {Shape} element The collapsed shape.
   */
  DrilldownOverlayBehavior.prototype._addOverlay = function(element) {
    var canvas = this._canvas,
        overlays = this._overlays,
        bo = getBusinessObject(element);

    var existingOverlays = overlays.get({ element: element, type: 'drilldown' });

    if (existingOverlays.length) {
      this._removeOverlay(element);
    }

    var button = domify$1('<button type="button" class="bjs-drilldown">' + ARROW_DOWN_SVG + '</button>'),
        elementName = bo.get('name') || bo.get('id'),
        title = this._translate('Open {element}', { element: elementName });
    button.setAttribute('title', title);

    button.addEventListener('click', function() {
      canvas.setRootElement(canvas.findRoot(getPlaneIdFromShape(element)));
    });

    overlays.add(element, 'drilldown', {
      position: {
        bottom: -7,
        right: -8
      },
      html: button
    });

    this._updateOverlayVisibility(element);
  };

  DrilldownOverlayBehavior.prototype._removeOverlay = function(element) {
    var overlays = this._overlays;

    overlays.remove({
      element: element,
      type: 'drilldown'
    });
  };

  DrilldownOverlayBehavior.$inject = [
    'canvas',
    'eventBus',
    'elementRegistry',
    'overlays',
    'translate'
  ];

  var DrilldownModdule = {
    __depends__: [ OverlaysModule, ChangeSupportModule, RootElementsModule ],
    __init__: [ 'drilldownBreadcrumbs', 'drilldownOverlayBehavior', 'drilldownCentering', 'subprocessCompatibility' ],
    drilldownBreadcrumbs: [ 'type', DrilldownBreadcrumbs ],
    drilldownCentering: [ 'type', DrilldownCentering ],
    drilldownOverlayBehavior: [ 'type', DrilldownOverlayBehavior ],
    subprocessCompatibility: [ 'type', SubprocessCompatibility ]
  };

  /**
   * @typedef {import('../util/Types').Point} Point
   */

  function __stopPropagation(event) {
    if (!event || typeof event.stopPropagation !== 'function') {
      return;
    }

    event.stopPropagation();
  }

  /**
   * @param {import('../core/EventBus').Event} event
   *
   * @return {Event}
   */
  function getOriginal$1(event) {
    return event.originalEvent || event.srcEvent;
  }

  /**
   * @param {Event|import('../core/EventBus').Event} event
   */
  function stopPropagation$1(event) {
    __stopPropagation(event);
    __stopPropagation(getOriginal$1(event));
  }

  /**
   * @param {Event} event
   *
   * @return {Point|null}
   */
  function toPoint(event) {

    if (event.pointers && event.pointers.length) {
      event = event.pointers[0];
    }

    if (event.touches && event.touches.length) {
      event = event.touches[0];
    }

    return event ? {
      x: event.clientX,
      y: event.clientY
    } : null;
  }

  function isMac() {
    return (/mac/i).test(navigator.platform);
  }

  /**
   * @param {MouseEvent} event
   * @param {string} button
   *
   * @return {boolean}
   */
  function isButton(event, button) {
    return (getOriginal$1(event) || event).button === button;
  }

  /**
   * @param {MouseEvent} event
   *
   * @return {boolean}
   */
  function isPrimaryButton(event) {

    // button === 0 -> left áka primary mouse button
    return isButton(event, 0);
  }

  /**
   * @param {MouseEvent} event
   *
   * @return {boolean}
   */
  function isAuxiliaryButton(event) {

    // button === 1 -> auxiliary áka wheel button
    return isButton(event, 1);
  }

  /**
   * @param {MouseEvent} event
   *
   * @return {boolean}
   */
  function hasPrimaryModifier(event) {
    var originalEvent = getOriginal$1(event) || event;

    if (!isPrimaryButton(event)) {
      return false;
    }

    // Use cmd as primary modifier key for mac OS
    if (isMac()) {
      return originalEvent.metaKey;
    } else {
      return originalEvent.ctrlKey;
    }
  }

  /**
   * @param {MouseEvent} event
   *
   * @return {boolean}
   */
  function hasSecondaryModifier(event) {
    var originalEvent = getOriginal$1(event) || event;

    return isPrimaryButton(event) && originalEvent.shiftKey;
  }

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../draw/Styles').default} Styles
   *
   * @typedef {import('../../util/Types').Point} Point
   */

  function allowAll(event) { return true; }

  function allowPrimaryAndAuxiliary(event) {
    return isPrimaryButton(event) || isAuxiliaryButton(event);
  }

  var LOW_PRIORITY$p = 500;


  /**
   * A plugin that provides interaction events for diagram elements.
   *
   * It emits the following events:
   *
   *   * element.click
   *   * element.contextmenu
   *   * element.dblclick
   *   * element.hover
   *   * element.mousedown
   *   * element.mousemove
   *   * element.mouseup
   *   * element.out
   *
   * Each event is a tuple { element, gfx, originalEvent }.
   *
   * Canceling the event via Event#preventDefault()
   * prevents the original DOM operation.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Styles} styles
   */
  function InteractionEvents(eventBus, elementRegistry, styles) {

    var self = this;

    /**
     * Fire an interaction event.
     *
     * @param {string} type local event name, e.g. element.click.
     * @param {MouseEvent|TouchEvent} event native event
     * @param {Element} [element] the diagram element to emit the event on;
     *                                   defaults to the event target
     */
    function fire(type, event, element) {

      if (isIgnored(type, event)) {
        return;
      }

      var target, gfx, returnValue;

      if (!element) {
        target = event.delegateTarget || event.target;

        if (target) {
          gfx = target;
          element = elementRegistry.get(gfx);
        }
      } else {
        gfx = elementRegistry.getGraphics(element);
      }

      if (!gfx || !element) {
        return;
      }

      returnValue = eventBus.fire(type, {
        element: element,
        gfx: gfx,
        originalEvent: event
      });

      if (returnValue === false) {
        event.stopPropagation();
        event.preventDefault();
      }
    }

    // TODO(nikku): document this
    var handlers = {};

    function mouseHandler(localEventName) {
      return handlers[localEventName];
    }

    function isIgnored(localEventName, event) {

      var filter = ignoredFilters[localEventName] || isPrimaryButton;

      // only react on left mouse button interactions
      // except for interaction events that are enabled
      // for secundary mouse button
      return !filter(event);
    }

    var bindings = {
      click: 'element.click',
      contextmenu: 'element.contextmenu',
      dblclick: 'element.dblclick',
      mousedown: 'element.mousedown',
      mousemove: 'element.mousemove',
      mouseover: 'element.hover',
      mouseout: 'element.out',
      mouseup: 'element.mouseup',
    };

    var ignoredFilters = {
      'element.contextmenu': allowAll,
      'element.mousedown': allowPrimaryAndAuxiliary,
      'element.mouseup': allowPrimaryAndAuxiliary,
      'element.click': allowPrimaryAndAuxiliary,
      'element.dblclick': allowPrimaryAndAuxiliary
    };


    // manual event trigger //////////

    /**
     * Trigger an interaction event (based on a native dom event)
     * on the target shape or connection.
     *
     * @param {string} eventName the name of the triggered DOM event
     * @param {MouseEvent|TouchEvent} event
     * @param {Element} targetElement
     */
    function triggerMouseEvent(eventName, event, targetElement) {

      // i.e. element.mousedown...
      var localEventName = bindings[eventName];

      if (!localEventName) {
        throw new Error('unmapped DOM event name <' + eventName + '>');
      }

      return fire(localEventName, event, targetElement);
    }


    var ELEMENT_SELECTOR = 'svg, .djs-element';

    // event handling ///////

    function registerEvent(node, event, localEvent, ignoredFilter) {

      var handler = handlers[localEvent] = function(event) {
        fire(localEvent, event);
      };

      if (ignoredFilter) {
        ignoredFilters[localEvent] = ignoredFilter;
      }

      handler.$delegate = delegate.bind(node, ELEMENT_SELECTOR, event, handler);
    }

    function unregisterEvent(node, event, localEvent) {

      var handler = mouseHandler(localEvent);

      if (!handler) {
        return;
      }

      delegate.unbind(node, event, handler.$delegate);
    }

    function registerEvents(svg) {
      forEach$1(bindings, function(val, key) {
        registerEvent(svg, key, val);
      });
    }

    function unregisterEvents(svg) {
      forEach$1(bindings, function(val, key) {
        unregisterEvent(svg, key, val);
      });
    }

    eventBus.on('canvas.destroy', function(event) {
      unregisterEvents(event.svg);
    });

    eventBus.on('canvas.init', function(event) {
      registerEvents(event.svg);
    });


    // hit box updating ////////////////

    eventBus.on([ 'shape.added', 'connection.added' ], function(event) {
      var element = event.element,
          gfx = event.gfx;

      eventBus.fire('interactionEvents.createHit', { element: element, gfx: gfx });
    });

    // Update djs-hit on change.
    // A low priortity is necessary, because djs-hit of labels has to be updated
    // after the label bounds have been updated in the renderer.
    eventBus.on([
      'shape.changed',
      'connection.changed'
    ], LOW_PRIORITY$p, function(event) {

      var element = event.element,
          gfx = event.gfx;

      eventBus.fire('interactionEvents.updateHit', { element: element, gfx: gfx });
    });

    eventBus.on('interactionEvents.createHit', LOW_PRIORITY$p, function(event) {
      var element = event.element,
          gfx = event.gfx;

      self.createDefaultHit(element, gfx);
    });

    eventBus.on('interactionEvents.updateHit', function(event) {
      var element = event.element,
          gfx = event.gfx;

      self.updateDefaultHit(element, gfx);
    });


    // hit styles ////////////

    var STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-stroke');

    var CLICK_STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-click-stroke');

    var ALL_HIT_STYLE = createHitStyle('djs-hit djs-hit-all');

    var NO_MOVE_HIT_STYLE = createHitStyle('djs-hit djs-hit-no-move');

    var HIT_TYPES = {
      'all': ALL_HIT_STYLE,
      'click-stroke': CLICK_STROKE_HIT_STYLE,
      'stroke': STROKE_HIT_STYLE,
      'no-move': NO_MOVE_HIT_STYLE
    };

    function createHitStyle(classNames, attrs) {

      attrs = assign$1({
        stroke: 'white',
        strokeWidth: 15
      }, attrs || {});

      return styles.cls(classNames, [ 'no-fill', 'no-border' ], attrs);
    }


    // style helpers ///////////////

    function applyStyle(hit, type) {

      var attrs = HIT_TYPES[type];

      if (!attrs) {
        throw new Error('invalid hit type <' + type + '>');
      }

      attr$1(hit, attrs);

      return hit;
    }

    function appendHit(gfx, hit) {
      append(gfx, hit);
    }


    // API

    /**
     * Remove hints on the given graphics.
     *
     * @param {SVGElement} gfx
     */
    this.removeHits = function(gfx) {
      var hits = all('.djs-hit', gfx);

      forEach$1(hits, remove$3);
    };

    /**
     * Create default hit for the given element.
     *
     * @param {Element} element
     * @param {SVGElement} gfx
     *
     * @return {SVGElement} created hit
     */
    this.createDefaultHit = function(element, gfx) {
      var waypoints = element.waypoints,
          isFrame = element.isFrame,
          boxType;

      if (waypoints) {
        return this.createWaypointsHit(gfx, waypoints);
      } else {

        boxType = isFrame ? 'stroke' : 'all';

        return this.createBoxHit(gfx, boxType, {
          width: element.width,
          height: element.height
        });
      }
    };

    /**
     * Create hits for the given waypoints.
     *
     * @param {SVGElement} gfx
     * @param {Point[]} waypoints
     *
     * @return {SVGElement}
     */
    this.createWaypointsHit = function(gfx, waypoints) {

      var hit = createLine(waypoints);

      applyStyle(hit, 'stroke');

      appendHit(gfx, hit);

      return hit;
    };

    /**
     * Create hits for a box.
     *
     * @param {SVGElement} gfx
     * @param {string} type
     * @param {Object} attrs
     *
     * @return {SVGElement}
     */
    this.createBoxHit = function(gfx, type, attrs) {

      attrs = assign$1({
        x: 0,
        y: 0
      }, attrs);

      var hit = create$1('rect');

      applyStyle(hit, type);

      attr$1(hit, attrs);

      appendHit(gfx, hit);

      return hit;
    };

    /**
     * Update default hit of the element.
     *
     * @param {Element} element
     * @param {SVGElement} gfx
     *
     * @return {SVGElement} updated hit
     */
    this.updateDefaultHit = function(element, gfx) {

      var hit = query('.djs-hit', gfx);

      if (!hit) {
        return;
      }

      if (element.waypoints) {
        updateLine(hit, element.waypoints);
      } else {
        attr$1(hit, {
          width: element.width,
          height: element.height
        });
      }

      return hit;
    };

    this.fire = fire;

    this.triggerMouseEvent = triggerMouseEvent;

    this.mouseHandler = mouseHandler;

    this.registerEvent = registerEvent;
    this.unregisterEvent = unregisterEvent;
  }


  InteractionEvents.$inject = [
    'eventBus',
    'elementRegistry',
    'styles'
  ];


  /**
   * An event indicating that the mouse hovered over an element
   *
   * @event element.hover
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has left an element
   *
   * @event element.out
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has clicked an element
   *
   * @event element.click
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has double clicked an element
   *
   * @event element.dblclick
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has gone down on an element.
   *
   * @event element.mousedown
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the mouse has gone up on an element.
   *
   * @event element.mouseup
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * An event indicating that the context menu action is triggered
   * via mouse or touch controls.
   *
   * @event element.contextmenu
   *
   * @type {Object}
   * @property {Element} element
   * @property {SVGElement} gfx
   * @property {Event} originalEvent
   */

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var InteractionEventsModule$1 = {
    __init__: [ 'interactionEvents' ],
    interactionEvents: [ 'type', InteractionEvents ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  /**
   * A service that offers the current selection in a diagram.
   * Offers the api to control the selection, too.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function Selection(eventBus, canvas) {

    this._eventBus = eventBus;
    this._canvas = canvas;

    /**
     * @type {Object[]}
     */
    this._selectedElements = [];

    var self = this;

    eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
      var element = e.element;
      self.deselect(element);
    });

    eventBus.on([ 'diagram.clear', 'root.set' ], function(e) {
      self.select(null);
    });
  }

  Selection.$inject = [ 'eventBus', 'canvas' ];

  /**
   * Deselect an element.
   *
   * @param {Object} element The element to deselect.
   */
  Selection.prototype.deselect = function(element) {
    var selectedElements = this._selectedElements;

    var idx = selectedElements.indexOf(element);

    if (idx !== -1) {
      var oldSelection = selectedElements.slice();

      selectedElements.splice(idx, 1);

      this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
    }
  };

  /**
   * Get the selected elements.
   *
   * @return {Object[]} The selected elements.
   */
  Selection.prototype.get = function() {
    return this._selectedElements;
  };

  /**
   * Check whether an element is selected.
   *
   * @param {Object} element The element.
   *
   * @return {boolean} Whether the element is selected.
   */
  Selection.prototype.isSelected = function(element) {
    return this._selectedElements.indexOf(element) !== -1;
  };


  /**
   * Select one or many elements.
   *
   * @param {Object|Object[]} elements The element(s) to select.
   * @param {boolean} [add] Whether to add the element(s) to the selected elements.
   * Defaults to `false`.
   */
  Selection.prototype.select = function(elements, add) {
    var selectedElements = this._selectedElements,
        oldSelection = selectedElements.slice();

    if (!isArray$3(elements)) {
      elements = elements ? [ elements ] : [];
    }

    var canvas = this._canvas;

    var rootElement = canvas.getRootElement();

    elements = elements.filter(function(element) {
      var elementRoot = canvas.findRoot(element);

      return rootElement === elementRoot;
    });

    // selection may be cleared by passing an empty array or null
    // to the method
    if (add) {
      forEach$1(elements, function(element) {
        if (selectedElements.indexOf(element) !== -1) {

          // already selected
          return;
        } else {
          selectedElements.push(element);
        }
      });
    } else {
      this._selectedElements = selectedElements = elements.slice();
    }

    this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var MARKER_HOVER = 'hover',
      MARKER_SELECTED = 'selected';

  /**
   * A plugin that adds a visible selection UI to shapes and connections
   * by appending the <code>hover</code> and <code>selected</code> classes to them.
   *
   * @class
   *
   * Makes elements selectable, too.
   *
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   */
  function SelectionVisuals(canvas, eventBus) {
    this._canvas = canvas;

    function addMarker(e, cls) {
      canvas.addMarker(e, cls);
    }

    function removeMarker(e, cls) {
      canvas.removeMarker(e, cls);
    }

    eventBus.on('element.hover', function(event) {
      addMarker(event.element, MARKER_HOVER);
    });

    eventBus.on('element.out', function(event) {
      removeMarker(event.element, MARKER_HOVER);
    });

    eventBus.on('selection.changed', function(event) {

      function deselect(s) {
        removeMarker(s, MARKER_SELECTED);
      }

      function select(s) {
        addMarker(s, MARKER_SELECTED);
      }

      var oldSelection = event.oldSelection,
          newSelection = event.newSelection;

      forEach$1(oldSelection, function(e) {
        if (newSelection.indexOf(e) === -1) {
          deselect(e);
        }
      });

      forEach$1(newSelection, function(e) {
        if (oldSelection.indexOf(e) === -1) {
          select(e);
        }
      });
    });
  }

  SelectionVisuals.$inject = [
    'canvas',
    'eventBus'
  ];

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('./Selection').default} Selection
   */

  /**
   * @param {EventBus} eventBus
   * @param {Selection} selection
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   */
  function SelectionBehavior(eventBus, selection, canvas, elementRegistry) {

    // Select elements on create
    eventBus.on('create.end', 500, function(event) {
      var context = event.context,
          canExecute = context.canExecute,
          elements = context.elements,
          hints = context.hints || {},
          autoSelect = hints.autoSelect;

      if (canExecute) {
        if (autoSelect === false) {

          // Select no elements
          return;
        }

        if (isArray$3(autoSelect)) {
          selection.select(autoSelect);
        } else {

          // Select all elements by default
          selection.select(elements.filter(isShown));
        }
      }
    });

    // Select connection targets on connect
    eventBus.on('connect.end', 500, function(event) {
      var context = event.context,
          connection = context.connection;

      if (connection) {
        selection.select(connection);
      }
    });

    // Select shapes on move
    eventBus.on('shape.move.end', 500, function(event) {
      var previousSelection = event.previousSelection || [];

      var shape = elementRegistry.get(event.context.shape.id);

      // Always select main shape on move
      var isSelected = find$1(previousSelection, function(selectedShape) {
        return shape.id === selectedShape.id;
      });

      if (!isSelected) {
        selection.select(shape);
      }
    });

    // Select elements on click
    eventBus.on('element.click', function(event) {

      if (!isPrimaryButton(event)) {
        return;
      }

      var element = event.element;

      if (element === canvas.getRootElement()) {
        element = null;
      }

      var isSelected = selection.isSelected(element),
          isMultiSelect = selection.get().length > 1;

      // Add to selection if SHIFT pressed
      var add = hasSecondaryModifier(event);

      if (isSelected && isMultiSelect) {
        if (add) {

          // Deselect element
          return selection.deselect(element);
        } else {

          // Select element only
          return selection.select(element);
        }
      } else if (!isSelected) {

        // Select element
        selection.select(element, add);
      } else {

        // Deselect element
        selection.deselect(element);
      }
    });
  }

  SelectionBehavior.$inject = [
    'eventBus',
    'selection',
    'canvas',
    'elementRegistry'
  ];


  function isShown(element) {
    return !element.hidden;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var SelectionModule = {
    __init__: [ 'selectionVisuals', 'selectionBehavior' ],
    __depends__: [
      InteractionEventsModule$1,
    ],
    selection: [ 'type', Selection ],
    selectionVisuals: [ 'type', SelectionVisuals ],
    selectionBehavior: [ 'type', SelectionBehavior ]
  };

  const CLASS_PATTERN = /^class[ {]/;


  /**
   * @param {function} fn
   *
   * @return {boolean}
   */
  function isClass(fn) {
    return CLASS_PATTERN.test(fn.toString());
  }

  /**
   * @param {any} obj
   *
   * @return {boolean}
   */
  function isArray(obj) {
    return Array.isArray(obj);
  }

  /**
   * @param {any} obj
   * @param {string} prop
   *
   * @return {boolean}
   */
  function hasOwnProp(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /**
   * @typedef {import('./index.js').InjectAnnotated } InjectAnnotated
   */

  /**
   * @template T
   *
   * @params {[...string[], T] | ...string[], T} args
   *
   * @return {T & InjectAnnotated}
   */
  function annotate(...args) {

    if (args.length === 1 && isArray(args[0])) {
      args = args[0];
    }

    args = [ ...args ];

    const fn = args.pop();

    fn.$inject = args;

    return fn;
  }


  // Current limitations:
  // - can't put into "function arg" comments
  // function /* (no parenthesis like this) */ (){}
  // function abc( /* xx (no parenthesis like this) */ a, b) {}
  //
  // Just put the comment before function or inside:
  // /* (((this is fine))) */ function(a, b) {}
  // function abc(a) { /* (((this is fine))) */}
  //
  // - can't reliably auto-annotate constructor; we'll match the
  // first constructor(...) pattern found which may be the one
  // of a nested class, too.

  const CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
  const FN_ARGS = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
  const FN_ARG = /\/\*([^*]*)\*\//m;

  /**
   * @param {unknown} fn
   *
   * @return {string[]}
   */
  function parseAnnotations(fn) {

    if (typeof fn !== 'function') {
      throw new Error(`Cannot annotate "${fn}". Expected a function!`);
    }

    const match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);

    // may parse class without constructor
    if (!match) {
      return [];
    }

    const args = match[1] || match[2];

    return args && args.split(',').map(arg => {
      const argMatch = arg.match(FN_ARG);
      return (argMatch && argMatch[1] || arg).trim();
    }) || [];
  }

  /**
   * @typedef { import('./index.js').ModuleDeclaration } ModuleDeclaration
   * @typedef { import('./index.js').ModuleDefinition } ModuleDefinition
   * @typedef { import('./index.js').InjectorContext } InjectorContext
   *
   * @typedef { import('./index.js').TypedDeclaration<any, any> } TypedDeclaration
   */

  /**
   * Create a new injector with the given modules.
   *
   * @param {ModuleDefinition[]} modules
   * @param {InjectorContext} [_parent]
   */
  function Injector(modules, _parent) {

    const parent = _parent || /** @type InjectorContext */ ({
      get: function(name, strict) {
        currentlyResolving.push(name);

        if (strict === false) {
          return null;
        } else {
          throw error(`No provider for "${ name }"!`);
        }
      }
    });

    const currentlyResolving = [];
    const providers = this._providers = Object.create(parent._providers || null);
    const instances = this._instances = Object.create(null);

    const self = instances.injector = this;

    const error = function(msg) {
      const stack = currentlyResolving.join(' -> ');
      currentlyResolving.length = 0;
      return new Error(stack ? `${ msg } (Resolving: ${ stack })` : msg);
    };

    /**
     * Return a named service.
     *
     * @param {string} name
     * @param {boolean} [strict=true] if false, resolve missing services to null
     *
     * @return {any}
     */
    function get(name, strict) {
      if (!providers[name] && name.includes('.')) {

        const parts = name.split('.');
        let pivot = get(/** @type { string } */ (parts.shift()));

        while (parts.length) {
          pivot = pivot[/** @type { string } */ (parts.shift())];
        }

        return pivot;
      }

      if (hasOwnProp(instances, name)) {
        return instances[name];
      }

      if (hasOwnProp(providers, name)) {
        if (currentlyResolving.indexOf(name) !== -1) {
          currentlyResolving.push(name);
          throw error('Cannot resolve circular dependency!');
        }

        currentlyResolving.push(name);
        instances[name] = providers[name][0](providers[name][1]);
        currentlyResolving.pop();

        return instances[name];
      }

      return parent.get(name, strict);
    }

    function fnDef(fn, locals) {

      if (typeof locals === 'undefined') {
        locals = {};
      }

      if (typeof fn !== 'function') {
        if (isArray(fn)) {
          fn = annotate(fn.slice());
        } else {
          throw error(`Cannot invoke "${ fn }". Expected a function!`);
        }
      }

      /**
       * @type {string[]}
       */
      const inject = fn.$inject || parseAnnotations(fn);
      const dependencies = inject.map(dep => {
        if (hasOwnProp(locals, dep)) {
          return locals[dep];
        } else {
          return get(dep);
        }
      });

      return {
        fn: fn,
        dependencies
      };
    }

    /**
     * Instantiate the given type, injecting dependencies.
     *
     * @template T
     *
     * @param { Function | [...string[], Function ]} type
     *
     * @return T
     */
    function instantiate(type) {
      const {
        fn,
        dependencies
      } = fnDef(type);

      // instantiate var args constructor
      const Constructor = Function.prototype.bind.call(fn, null, ...dependencies);

      return new Constructor();
    }

    /**
     * Invoke the given function, injecting dependencies. Return the result.
     *
     * @template T
     *
     * @param { Function | [...string[], Function ]} func
     * @param { Object } [context]
     * @param { Object } [locals]
     *
     * @return {T} invocation result
     */
    function invoke(func, context, locals) {
      const {
        fn,
        dependencies
      } = fnDef(func, locals);

      return fn.apply(context, dependencies);
    }

    /**
     * @param {Injector} childInjector
     *
     * @return {Function}
     */
    function createPrivateInjectorFactory(childInjector) {
      return annotate(key => childInjector.get(key));
    }

    /**
     * @param {ModuleDefinition[]} modules
     * @param {string[]} [forceNewInstances]
     *
     * @return {Injector}
     */
    function createChild(modules, forceNewInstances) {
      if (forceNewInstances && forceNewInstances.length) {
        const fromParentModule = Object.create(null);
        const matchedScopes = Object.create(null);

        const privateInjectorsCache = [];
        const privateChildInjectors = [];
        const privateChildFactories = [];

        let provider;
        let cacheIdx;
        let privateChildInjector;
        let privateChildInjectorFactory;

        for (let name in providers) {
          provider = providers[name];

          if (forceNewInstances.indexOf(name) !== -1) {
            if (provider[2] === 'private') {
              cacheIdx = privateInjectorsCache.indexOf(provider[3]);
              if (cacheIdx === -1) {
                privateChildInjector = provider[3].createChild([], forceNewInstances);
                privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
                privateInjectorsCache.push(provider[3]);
                privateChildInjectors.push(privateChildInjector);
                privateChildFactories.push(privateChildInjectorFactory);
                fromParentModule[name] = [ privateChildInjectorFactory, name, 'private', privateChildInjector ];
              } else {
                fromParentModule[name] = [ privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx] ];
              }
            } else {
              fromParentModule[name] = [ provider[2], provider[1] ];
            }
            matchedScopes[name] = true;
          }

          if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {
            /* jshint -W083 */
            forceNewInstances.forEach(scope => {
              if (provider[1].$scope.indexOf(scope) !== -1) {
                fromParentModule[name] = [ provider[2], provider[1] ];
                matchedScopes[scope] = true;
              }
            });
          }
        }

        forceNewInstances.forEach(scope => {
          if (!matchedScopes[scope]) {
            throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
          }
        });

        modules.unshift(fromParentModule);
      }

      return new Injector(modules, self);
    }

    const factoryMap = {
      factory: invoke,
      type: instantiate,
      value: function(value) {
        return value;
      }
    };

    /**
     * @param {ModuleDefinition} moduleDefinition
     * @param {Injector} injector
     */
    function createInitializer(moduleDefinition, injector) {

      const initializers = moduleDefinition.__init__ || [];

      return function() {
        initializers.forEach(initializer => {

          // eagerly resolve component (fn or string)
          if (typeof initializer === 'string') {
            injector.get(initializer);
          } else {
            injector.invoke(initializer);
          }
        });
      };
    }

    /**
     * @param {ModuleDefinition} moduleDefinition
     */
    function loadModule(moduleDefinition) {

      const moduleExports = moduleDefinition.__exports__;

      // private module
      if (moduleExports) {
        const nestedModules = moduleDefinition.__modules__;

        const clonedModule = Object.keys(moduleDefinition).reduce((clonedModule, key) => {

          if (key !== '__exports__' && key !== '__modules__' && key !== '__init__' && key !== '__depends__') {
            clonedModule[key] = moduleDefinition[key];
          }

          return clonedModule;
        }, Object.create(null));

        const childModules = (nestedModules || []).concat(clonedModule);

        const privateInjector = createChild(childModules);
        const getFromPrivateInjector = annotate(function(key) {
          return privateInjector.get(key);
        });

        moduleExports.forEach(function(key) {
          providers[key] = [ getFromPrivateInjector, key, 'private', privateInjector ];
        });

        // ensure child injector initializes
        const initializers = (moduleDefinition.__init__ || []).slice();

        initializers.unshift(function() {
          privateInjector.init();
        });

        moduleDefinition = Object.assign({}, moduleDefinition, {
          __init__: initializers
        });

        return createInitializer(moduleDefinition, privateInjector);
      }

      // normal module
      Object.keys(moduleDefinition).forEach(function(key) {

        if (key === '__init__' || key === '__depends__') {
          return;
        }

        const typeDeclaration = /** @type { TypedDeclaration } */ (
          moduleDefinition[key]
        );

        if (typeDeclaration[2] === 'private') {
          providers[key] = typeDeclaration;
          return;
        }

        const type = typeDeclaration[0];
        const value = typeDeclaration[1];

        providers[key] = [ factoryMap[type], arrayUnwrap(type, value), type ];
      });

      return createInitializer(moduleDefinition, self);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     * @param {ModuleDefinition} moduleDefinition
     *
     * @return {ModuleDefinition[]}
     */
    function resolveDependencies(moduleDefinitions, moduleDefinition) {

      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }

      moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);

      if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
        return moduleDefinitions;
      }

      return moduleDefinitions.concat(moduleDefinition);
    }

    /**
     * @param {ModuleDefinition[]} moduleDefinitions
     *
     * @return { () => void } initializerFn
     */
    function bootstrap(moduleDefinitions) {

      const initializers = moduleDefinitions
        .reduce(resolveDependencies, [])
        .map(loadModule);

      let initialized = false;

      return function() {

        if (initialized) {
          return;
        }

        initialized = true;

        initializers.forEach(initializer => initializer());
      };
    }

    // public API
    this.get = get;
    this.invoke = invoke;
    this.instantiate = instantiate;
    this.createChild = createChild;

    // setup
    this.init = bootstrap(modules);
  }


  // helpers ///////////////

  function arrayUnwrap(type, value) {
    if (type !== 'value' && isArray(value)) {
      value = annotate(value.slice());
    }

    return value;
  }

  /**
   * @typedef {import('../core/EventBus').default} EventBus
   * @typedef {import('./Styles').default} Styles
   */

  // apply default renderer with lowest possible priority
  // so that it only kicks in if noone else could render
  var DEFAULT_RENDER_PRIORITY = 1;

  /**
   * The default renderer used for shapes and connections.
   *
   * @param {EventBus} eventBus
   * @param {Styles} styles
   */
  function DefaultRenderer(eventBus, styles) {

    BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY);

    this.CONNECTION_STYLE = styles.style([ 'no-fill' ], { strokeWidth: 5, stroke: 'fuchsia' });
    this.SHAPE_STYLE = styles.style({ fill: 'white', stroke: 'fuchsia', strokeWidth: 2 });
    this.FRAME_STYLE = styles.style([ 'no-fill' ], { stroke: 'fuchsia', strokeDasharray: 4, strokeWidth: 2 });
  }

  e$3(DefaultRenderer, BaseRenderer);


  /**
   * @private
   */
  DefaultRenderer.prototype.canRender = function() {
    return true;
  };

  /**
   * @private
   */
  DefaultRenderer.prototype.drawShape = function drawShape(visuals, element, attrs) {
    var rect = create$1('rect');

    attr$1(rect, {
      x: 0,
      y: 0,
      width: element.width || 0,
      height: element.height || 0
    });

    if (isFrameElement(element)) {
      attr$1(rect, assign$1({}, this.FRAME_STYLE, attrs || {}));
    } else {
      attr$1(rect, assign$1({}, this.SHAPE_STYLE, attrs || {}));
    }

    append(visuals, rect);

    return rect;
  };

  /**
   * @private
   */
  DefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection, attrs) {

    var line = createLine(connection.waypoints, assign$1({}, this.CONNECTION_STYLE, attrs || {}));
    append(visuals, line);

    return line;
  };

  /**
   * @private
   */
  DefaultRenderer.prototype.getShapePath = function getShapePath(shape) {

    var x = shape.x,
        y = shape.y,
        width = shape.width,
        height = shape.height;

    var shapePath = [
      [ 'M', x, y ],
      [ 'l', width, 0 ],
      [ 'l', 0, height ],
      [ 'l', -width, 0 ],
      [ 'z' ]
    ];

    return componentsToPath(shapePath);
  };

  /**
   * @private
   */
  DefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {
    var waypoints = connection.waypoints;

    var idx, point, connectionPath = [];

    for (idx = 0; (point = waypoints[idx]); idx++) {

      // take invisible docking into account
      // when creating the path
      point = point.original || point;

      connectionPath.push([ idx === 0 ? 'M' : 'L', point.x, point.y ]);
    }

    return componentsToPath(connectionPath);
  };

  DefaultRenderer.$inject = [ 'eventBus', 'styles' ];

  /**
   * A component that manages shape styles
   */
  function Styles() {

    var defaultTraits = {

      'no-fill': {
        fill: 'none'
      },
      'no-border': {
        strokeOpacity: 0.0
      },
      'no-events': {
        pointerEvents: 'none'
      }
    };

    var self = this;

    /**
     * Builds a style definition from a className, a list of traits and an object
     * of additional attributes.
     *
     * @param {string} className
     * @param {string[]} [traits]
     * @param {Object} [additionalAttrs]
     *
     * @return {Object} the style definition
     */
    this.cls = function(className, traits, additionalAttrs) {
      var attrs = this.style(traits, additionalAttrs);

      return assign$1(attrs, { 'class': className });
    };

    /**
     * Builds a style definition from a list of traits and an object of additional
     * attributes.
     *
     * @param {string[]} [traits]
     * @param {Object} additionalAttrs
     *
     * @return {Object} the style definition
     */
    this.style = function(traits, additionalAttrs) {

      if (!isArray$3(traits) && !additionalAttrs) {
        additionalAttrs = traits;
        traits = [];
      }

      var attrs = reduce(traits, function(attrs, t) {
        return assign$1(attrs, defaultTraits[t] || {});
      }, {});

      return additionalAttrs ? assign$1(attrs, additionalAttrs) : attrs;
    };


    /**
     * Computes a style definition from a list of traits and an object of
     * additional attributes, with custom style definition object.
     *
     * @param {Object} custom
     * @param {string[]} [traits]
     * @param {Object} defaultStyles
     *
     * @return {Object} the style definition
     */
    this.computeStyle = function(custom, traits, defaultStyles) {
      if (!isArray$3(traits)) {
        defaultStyles = traits;
        traits = [];
      }

      return self.style(traits || [], assign$1({}, defaultStyles, custom || {}));
    };
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var DrawModule = {
    __init__: [ 'defaultRenderer' ],
    defaultRenderer: [ 'type', DefaultRenderer ],
    styles: [ 'type', Styles ]
  };

  /**
   * Failsafe remove an element from a collection
   *
   * @param {Array<Object>} [collection]
   * @param {Object} [element]
   *
   * @return {number} the previous index of the element
   */
  function remove$1(collection, element) {

    if (!collection || !element) {
      return -1;
    }

    var idx = collection.indexOf(element);

    if (idx !== -1) {
      collection.splice(idx, 1);
    }

    return idx;
  }

  /**
   * Fail save add an element to the given connection, ensuring
   * it does not yet exist.
   *
   * @param {Array<Object>} collection
   * @param {Object} element
   * @param {number} [idx]
   */
  function add$1(collection, element, idx) {

    if (!collection || !element) {
      return;
    }

    if (typeof idx !== 'number') {
      idx = -1;
    }

    var currentIdx = collection.indexOf(element);

    if (currentIdx !== -1) {

      if (currentIdx === idx) {

        // nothing to do, position has not changed
        return;
      } else {

        if (idx !== -1) {

          // remove from current position
          collection.splice(currentIdx, 1);
        } else {

          // already exists in collection
          return;
        }
      }
    }

    if (idx !== -1) {

      // insert at specified position
      collection.splice(idx, 0, element);
    } else {

      // push to end
      collection.push(element);
    }
  }


  /**
   * Fail save get the index of an element in a collection.
   *
   * @param {Array<Object>} collection
   * @param {Object} element
   *
   * @return {number} the index or -1 if collection or element do
   *                  not exist or the element is not contained.
   */
  function indexOf(collection, element) {

    if (!collection || !element) {
      return -1;
    }

    return collection.indexOf(element);
  }

  /**
   * @typedef {import('./Types').ConnectionLike} ConnectionLike
   * @typedef {import('./Types').RootLike} RootLike
   * @typedef {import('./Types').ParentLike } ParentLike
   * @typedef {import('./Types').ShapeLike} ShapeLike
   *
   * @typedef { {
   *   container?: HTMLElement;
   *   deferUpdate?: boolean;
   *   width?: number;
   *   height?: number;
   *   autoFocus?: boolean;
   * } } CanvasConfig
   * @typedef { {
   *   group: SVGElement;
   *   index: number;
   *   visible: boolean;
   * } } CanvasLayer
   * @typedef { {
   *   [key: string]: CanvasLayer;
   * } } CanvasLayers
   * @typedef { {
   *   rootElement: ShapeLike;
   *   layer: CanvasLayer;
   * } } CanvasPlane
   * @typedef { {
   *   scale: number;
   *   inner: Rect;
   *   outer: Dimensions;
   * } & Rect } CanvasViewbox
   *
   * @typedef {import('./ElementRegistry').default} ElementRegistry
   * @typedef {import('./EventBus').default} EventBus
   * @typedef {import('./GraphicsFactory').default} GraphicsFactory
   *
   * @typedef {import('../util/Types').Dimensions} Dimensions
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   * @typedef {import('../util/Types').RectTRBL} RectTRBL
   * @typedef {import('../util/Types').ScrollDelta} ScrollDelta
   */

  function round$c(number, resolution) {
    return Math.round(number * resolution) / resolution;
  }

  function ensurePx(number) {
    return isNumber(number) ? number + 'px' : number;
  }

  function findRoot(element) {
    while (element.parent) {
      element = element.parent;
    }

    return element;
  }

  /**
   * Creates a HTML container element for a SVG element with
   * the given configuration
   *
   * @param {CanvasConfig} options
   *
   * @return {HTMLElement} the container element
   */
  function createContainer(options) {

    options = assign$1({}, { width: '100%', height: '100%' }, options);

    const container = options.container || document.body;

    // create a <div> around the svg element with the respective size
    // this way we can always get the correct container size
    // (this is impossible for <svg> elements at the moment)
    const parent = document.createElement('div');
    parent.setAttribute('class', 'djs-container djs-parent');

    assign(parent, {
      position: 'relative',
      overflow: 'hidden',
      width: ensurePx(options.width),
      height: ensurePx(options.height)
    });

    container.appendChild(parent);

    return parent;
  }

  function createGroup(parent, cls, childIndex) {
    const group = create$1('g');
    classes$1(group).add(cls);

    const index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;

    // must ensure second argument is node or _null_
    // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
    parent.insertBefore(group, parent.childNodes[index] || null);

    return group;
  }

  const BASE_LAYER = 'base';

  // render plane contents behind utility layers
  const PLANE_LAYER_INDEX = 0;
  const UTILITY_LAYER_INDEX = 1;


  const REQUIRED_MODEL_ATTRS = {
    shape: [ 'x', 'y', 'width', 'height' ],
    connection: [ 'waypoints' ]
  };

  /**
   * The main drawing canvas.
   *
   * @class
   * @constructor
   *
   * @emits Canvas#canvas.init
   *
   * @param {CanvasConfig|null} config
   * @param {EventBus} eventBus
   * @param {GraphicsFactory} graphicsFactory
   * @param {ElementRegistry} elementRegistry
   */
  function Canvas(config, eventBus, graphicsFactory, elementRegistry) {
    this._eventBus = eventBus;
    this._elementRegistry = elementRegistry;
    this._graphicsFactory = graphicsFactory;

    /**
     * @type {number}
     */
    this._rootsIdx = 0;

    /**
     * @type {CanvasLayers}
     */
    this._layers = {};

    /**
     * @type {CanvasPlane[]}
     */
    this._planes = [];

    /**
     * @type {RootLike|null}
     */
    this._rootElement = null;

    /**
     * @type {boolean}
     */
    this._focused = false;

    this._init(config || {});
  }

  Canvas.$inject = [
    'config.canvas',
    'eventBus',
    'graphicsFactory',
    'elementRegistry'
  ];

  /**
   * Creates a <svg> element that is wrapped into a <div>.
   * This way we are always able to correctly figure out the size of the svg element
   * by querying the parent node.

   * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)

   * <div class="djs-container" style="width: {desired-width}, height: {desired-height}">
   *   <svg width="100%" height="100%">
   *    ...
   *   </svg>
   * </div>
   *
   * @param {CanvasConfig} config
   */
  Canvas.prototype._init = function(config) {
    const eventBus = this._eventBus;

    // html container
    const container = this._container = createContainer(config);

    const svg = this._svg = create$1('svg');

    attr$1(svg, {
      width: '100%',
      height: '100%'
    });

    attr(svg, 'tabindex', 0);

    config.autoFocus && eventBus.on('element.hover', () => {
      this.restoreFocus();
    });

    eventBus.on('element.mousedown', 500, (event) => {
      this.focus();
    });

    svg.addEventListener('focusin', () => {
      this._setFocused(true);
    });

    svg.addEventListener('focusout', () => {
      this._setFocused(false);
    });

    append(container, svg);

    const viewport = this._viewport = createGroup(svg, 'viewport');

    // debounce canvas.viewbox.changed events when deferUpdate is set
    // to help with potential performance issues
    if (config.deferUpdate) {
      this._viewboxChanged = debounce(bind$2(this._viewboxChanged, this), 300);
    }

    eventBus.on('diagram.init', () => {

      /**
       * An event indicating that the canvas is ready to be drawn on.
       *
       * @memberOf Canvas
       *
       * @event canvas.init
       *
       * @type {Object}
       * @property {SVGElement} svg the created svg element
       * @property {SVGElement} viewport the direct parent of diagram elements and shapes
       */
      eventBus.fire('canvas.init', {
        svg: svg,
        viewport: viewport
      });

    });

    // reset viewbox on shape changes to
    // recompute the viewbox
    eventBus.on([
      'shape.added',
      'connection.added',
      'shape.removed',
      'connection.removed',
      'elements.changed',
      'root.set'
    ], () => {
      delete this._cachedViewbox;
    });

    eventBus.on('diagram.destroy', 500, this._destroy, this);
    eventBus.on('diagram.clear', 500, this._clear, this);
  };

  Canvas.prototype._destroy = function() {
    this._eventBus.fire('canvas.destroy', {
      svg: this._svg,
      viewport: this._viewport
    });

    const parent = this._container.parentNode;

    if (parent) {
      parent.removeChild(this._container);
    }

    delete this._svg;
    delete this._container;
    delete this._layers;
    delete this._planes;
    delete this._rootElement;
    delete this._viewport;
  };

  Canvas.prototype._setFocused = function(focused) {

    if (focused == this._focused) {
      return;
    }

    this._focused = focused;

    this._eventBus.fire('canvas.focus.changed', { focused });
  };

  Canvas.prototype._clear = function() {

    const allElements = this._elementRegistry.getAll();

    // remove all elements
    allElements.forEach(element => {
      const type = getType(element);

      if (type === 'root') {
        this.removeRootElement(element);
      } else {
        this._removeElement(element, type);
      }
    });

    // remove all planes
    this._planes = [];
    this._rootElement = null;

    // force recomputation of view box
    delete this._cachedViewbox;
  };

  /**
   * Sets focus on the canvas SVG element.
   */
  Canvas.prototype.focus = function() {
    this._svg.focus({ preventScroll: true });

    this._setFocused(true);
  };

  /**
  * Sets focus on the canvas SVG element if `document.body` is currently focused.
  */
  Canvas.prototype.restoreFocus = function() {
    if (document.activeElement === document.body) {
      this.focus();
    }
  };

  /**
  * Returns true if the canvas is focused.
  *
  * @return {boolean}
  */
  Canvas.prototype.isFocused = function() {
    return this._focused;
  };

  /**
   * Returns the default layer on which
   * all elements are drawn.
   *
   * @return {SVGElement}  The SVG element of the layer.
   */
  Canvas.prototype.getDefaultLayer = function() {
    return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);
  };

  /**
   * Returns a layer that is used to draw elements
   * or annotations on it.
   *
   * Non-existing layers retrieved through this method
   * will be created. During creation, the optional index
   * may be used to create layers below or above existing layers.
   * A layer with a certain index is always created above all
   * existing layers with the same index.
   *
   * @param {string} name The name of the layer.
   * @param {number} [index] The index of the layer.
   *
   * @return {SVGElement} The SVG element of the layer.
   */
  Canvas.prototype.getLayer = function(name, index) {

    if (!name) {
      throw new Error('must specify a name');
    }

    let layer = this._layers[name];

    if (!layer) {
      layer = this._layers[name] = this._createLayer(name, index);
    }

    // throw an error if layer creation / retrival is
    // requested on different index
    if (typeof index !== 'undefined' && layer.index !== index) {
      throw new Error('layer <' + name + '> already created at index <' + index + '>');
    }

    return layer.group;
  };

  /**
   * For a given index, return the number of layers that have a higher index and
   * are visible.
   *
   * This is used to determine the node a layer should be inserted at.
   *
   * @param {number} index
   *
   * @return {number}
   */
  Canvas.prototype._getChildIndex = function(index) {
    return reduce(this._layers, function(childIndex, layer) {
      if (layer.visible && index >= layer.index) {
        childIndex++;
      }

      return childIndex;
    }, 0);
  };

  /**
   * Creates a given layer and returns it.
   *
   * @param {string} name
   * @param {number} [index=0]
   *
   * @return {CanvasLayer}
   */
  Canvas.prototype._createLayer = function(name, index) {

    if (typeof index === 'undefined') {
      index = UTILITY_LAYER_INDEX;
    }

    const childIndex = this._getChildIndex(index);

    return {
      group: createGroup(this._viewport, 'layer-' + name, childIndex),
      index: index,
      visible: true
    };
  };


  /**
   * Shows a given layer.
   *
   * @param {string} name The name of the layer.
   *
   * @return {SVGElement} The SVG element of the layer.
   */
  Canvas.prototype.showLayer = function(name) {

    if (!name) {
      throw new Error('must specify a name');
    }

    const layer = this._layers[name];

    if (!layer) {
      throw new Error('layer <' + name + '> does not exist');
    }

    const viewport = this._viewport;
    const group = layer.group;
    const index = layer.index;

    if (layer.visible) {
      return group;
    }

    const childIndex = this._getChildIndex(index);

    viewport.insertBefore(group, viewport.childNodes[childIndex] || null);

    layer.visible = true;

    return group;
  };

  /**
   * Hides a given layer.
   *
   * @param {string} name The name of the layer.
   *
   * @return {SVGElement} The SVG element of the layer.
   */
  Canvas.prototype.hideLayer = function(name) {

    if (!name) {
      throw new Error('must specify a name');
    }

    const layer = this._layers[name];

    if (!layer) {
      throw new Error('layer <' + name + '> does not exist');
    }

    const group = layer.group;

    if (!layer.visible) {
      return group;
    }

    remove$3(group);

    layer.visible = false;

    return group;
  };


  Canvas.prototype._removeLayer = function(name) {

    const layer = this._layers[name];

    if (layer) {
      delete this._layers[name];

      remove$3(layer.group);
    }
  };

  /**
   * Returns the currently active layer. Can be null.
   *
   * @return {CanvasLayer|null} The active layer of `null`.
   */
  Canvas.prototype.getActiveLayer = function() {
    const plane = this._findPlaneForRoot(this.getRootElement());

    if (!plane) {
      return null;
    }

    return plane.layer;
  };


  /**
   * Returns the plane which contains the given element.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   *
   * @return {RootLike|undefined} The root of the element.
   */
  Canvas.prototype.findRoot = function(element) {
    if (typeof element === 'string') {
      element = this._elementRegistry.get(element);
    }

    if (!element) {
      return;
    }

    const plane = this._findPlaneForRoot(
      findRoot(element)
    ) || {};

    return plane.rootElement;
  };

  /**
   * Return a list of all root elements on the diagram.
   *
   * @return {(RootLike)[]} The list of root elements.
   */
  Canvas.prototype.getRootElements = function() {
    return this._planes.map(function(plane) {
      return plane.rootElement;
    });
  };

  Canvas.prototype._findPlaneForRoot = function(rootElement) {
    return find$1(this._planes, function(plane) {
      return plane.rootElement === rootElement;
    });
  };


  /**
   * Returns the html element that encloses the
   * drawing canvas.
   *
   * @return {HTMLElement} The HTML element of the container.
   */
  Canvas.prototype.getContainer = function() {
    return this._container;
  };


  // markers //////////////////////

  Canvas.prototype._updateMarker = function(element, marker, add) {
    let container;

    if (!element.id) {
      element = this._elementRegistry.get(element);
    }

    element.markers = element.markers || new Set();

    // we need to access all
    container = this._elementRegistry._elements[element.id];

    if (!container) {
      return;
    }

    forEach$1([ container.gfx, container.secondaryGfx ], function(gfx) {
      if (gfx) {

        // invoke either addClass or removeClass based on mode
        if (add) {
          element.markers.add(marker);
          classes$1(gfx).add(marker);
        } else {
          element.markers.delete(marker);
          classes$1(gfx).remove(marker);
        }
      }
    });

    /**
     * An event indicating that a marker has been updated for an element
     *
     * @event element.marker.update
     * @type {Object}
     * @property {Element} element the shape
     * @property {SVGElement} gfx the graphical representation of the shape
     * @property {string} marker
     * @property {boolean} add true if the marker was added, false if it got removed
     */
    this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });
  };


  /**
   * Adds a marker to an element (basically a css class).
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @example
   *
   * ```javascript
   * canvas.addMarker('foo', 'some-marker');
   *
   * const fooGfx = canvas.getGraphics('foo');
   *
   * fooGfx; // <g class="... some-marker"> ... </g>
   * ```
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   * @param {string} marker The marker.
   */
  Canvas.prototype.addMarker = function(element, marker) {
    this._updateMarker(element, marker, true);
  };


  /**
   * Remove a marker from an element.
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   * @param {string} marker The marker.
   */
  Canvas.prototype.removeMarker = function(element, marker) {
    this._updateMarker(element, marker, false);
  };

  /**
   * Check whether an element has a given marker.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   * @param {string} marker The marker.
   */
  Canvas.prototype.hasMarker = function(element, marker) {
    if (!element.id) {
      element = this._elementRegistry.get(element);
    }

    if (!element.markers) {
      return false;
    }

    return element.markers.has(marker);
  };

  /**
   * Toggles a marker on an element.
   *
   * Fires the element.marker.update event, making it possible to
   * integrate extension into the marker life-cycle, too.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   * @param {string} marker The marker.
   */
  Canvas.prototype.toggleMarker = function(element, marker) {
    if (this.hasMarker(element, marker)) {
      this.removeMarker(element, marker);
    } else {
      this.addMarker(element, marker);
    }
  };

  /**
   * Returns the current root element.
   *
   * Supports two different modes for handling root elements:
   *
   * 1. if no root element has been added before, an implicit root will be added
   * and returned. This is used in applications that don't require explicit
   * root elements.
   *
   * 2. when root elements have been added before calling `getRootElement`,
   * root elements can be null. This is used for applications that want to manage
   * root elements themselves.
   *
   * @return {RootLike} The current root element.
   */
  Canvas.prototype.getRootElement = function() {
    const rootElement = this._rootElement;

    // can return null if root elements are present but none was set yet
    if (rootElement || this._planes.length) {
      return rootElement;
    }

    return this.setRootElement(this.addRootElement(null));
  };

  /**
   * Adds a given root element and returns it.
   *
   * @param {RootLike} [rootElement] The root element to be added.
   *
   * @return {RootLike} The added root element or an implicit root element.
   */
  Canvas.prototype.addRootElement = function(rootElement) {
    const idx = this._rootsIdx++;

    if (!rootElement) {
      rootElement = {
        id: '__implicitroot_' + idx,
        children: [],
        isImplicit: true
      };
    }

    const layerName = rootElement.layer = 'root-' + idx;

    this._ensureValid('root', rootElement);

    const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);

    this.hideLayer(layerName);

    this._addRoot(rootElement, layer);

    this._planes.push({
      rootElement: rootElement,
      layer: layer
    });

    return rootElement;
  };

  /**
   * Removes a given root element and returns it.
   *
   * @param {RootLike|string} rootElement element or element ID
   *
   * @return {RootLike|undefined} removed element
   */
  Canvas.prototype.removeRootElement = function(rootElement) {

    if (typeof rootElement === 'string') {
      rootElement = this._elementRegistry.get(rootElement);
    }

    const plane = this._findPlaneForRoot(rootElement);

    if (!plane) {
      return;
    }

    // hook up life-cycle events
    this._removeRoot(rootElement);

    // clean up layer
    this._removeLayer(rootElement.layer);

    // clean up plane
    this._planes = this._planes.filter(function(plane) {
      return plane.rootElement !== rootElement;
    });

    // clean up active root
    if (this._rootElement === rootElement) {
      this._rootElement = null;
    }

    return rootElement;
  };


  /**
   * Sets a given element as the new root element for the canvas
   * and returns the new root element.
   *
   * @param {RootLike} rootElement The root element to be set.
   *
   * @return {RootLike} The set root element.
   */
  Canvas.prototype.setRootElement = function(rootElement) {

    if (rootElement === this._rootElement) {
      return rootElement;
    }

    let plane;

    if (!rootElement) {
      throw new Error('rootElement required');
    }

    plane = this._findPlaneForRoot(rootElement);

    // give set add semantics for backwards compatibility
    if (!plane) {
      rootElement = this.addRootElement(rootElement);
    }

    this._setRoot(rootElement);

    return rootElement;
  };


  Canvas.prototype._removeRoot = function(element) {
    const elementRegistry = this._elementRegistry,
          eventBus = this._eventBus;

    // simulate element remove event sequence
    eventBus.fire('root.remove', { element: element });
    eventBus.fire('root.removed', { element: element });

    elementRegistry.remove(element);
  };


  Canvas.prototype._addRoot = function(element, gfx) {
    const elementRegistry = this._elementRegistry,
          eventBus = this._eventBus;

    // resemble element add event sequence
    eventBus.fire('root.add', { element: element });

    elementRegistry.add(element, gfx);

    eventBus.fire('root.added', { element: element, gfx: gfx });
  };


  Canvas.prototype._setRoot = function(rootElement, layer) {

    const currentRoot = this._rootElement;

    if (currentRoot) {

      // un-associate previous root element <svg>
      this._elementRegistry.updateGraphics(currentRoot, null, true);

      // hide previous layer
      this.hideLayer(currentRoot.layer);
    }

    if (rootElement) {

      if (!layer) {
        layer = this._findPlaneForRoot(rootElement).layer;
      }

      // associate element with <svg>
      this._elementRegistry.updateGraphics(rootElement, this._svg, true);

      // show root layer
      this.showLayer(rootElement.layer);
    }

    this._rootElement = rootElement;

    this._eventBus.fire('root.set', { element: rootElement });
  };

  Canvas.prototype._ensureValid = function(type, element) {
    if (!element.id) {
      throw new Error('element must have an id');
    }

    if (this._elementRegistry.get(element.id)) {
      throw new Error('element <' + element.id + '> already exists');
    }

    const requiredAttrs = REQUIRED_MODEL_ATTRS[type];

    const valid = every(requiredAttrs, function(attr) {
      return typeof element[attr] !== 'undefined';
    });

    if (!valid) {
      throw new Error(
        'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);
    }
  };

  Canvas.prototype._setParent = function(element, parent, parentIndex) {
    add$1(parent.children, element, parentIndex);
    element.parent = parent;
  };

  /**
   * Adds an element to the canvas.
   *
   * This wires the parent <-> child relationship between the element and
   * a explicitly specified parent or an implicit root element.
   *
   * During add it emits the events
   *
   *  * <{type}.add> (element, parent)
   *  * <{type}.added> (element, gfx)
   *
   * Extensions may hook into these events to perform their magic.
   *
   * @param {string} type
   * @param {ConnectionLike|ShapeLike} element
   * @param {ShapeLike} [parent]
   * @param {number} [parentIndex]
   *
   * @return {ConnectionLike|ShapeLike} The added element.
   */
  Canvas.prototype._addElement = function(type, element, parent, parentIndex) {

    parent = parent || this.getRootElement();

    const eventBus = this._eventBus,
          graphicsFactory = this._graphicsFactory;

    this._ensureValid(type, element);

    eventBus.fire(type + '.add', { element: element, parent: parent });

    this._setParent(element, parent, parentIndex);

    // create graphics
    const gfx = graphicsFactory.create(type, element, parentIndex);

    this._elementRegistry.add(element, gfx);

    // update its visual
    graphicsFactory.update(type, element, gfx);

    eventBus.fire(type + '.added', { element: element, gfx: gfx });

    return element;
  };

  /**
   * Adds a shape to the canvas.
   *
   * @param {ShapeLike} shape The shape to be added
   * @param {ParentLike} [parent] The shape's parent.
   * @param {number} [parentIndex] The index at which to add the shape to the parent's children.
   *
   * @return {ShapeLike} The added shape.
   */
  Canvas.prototype.addShape = function(shape, parent, parentIndex) {
    return this._addElement('shape', shape, parent, parentIndex);
  };

  /**
   * Adds a connection to the canvas.
   *
   * @param {ConnectionLike} connection The connection to be added.
   * @param {ParentLike} [parent] The connection's parent.
   * @param {number} [parentIndex] The index at which to add the connection to the parent's children.
   *
   * @return {ConnectionLike} The added connection.
   */
  Canvas.prototype.addConnection = function(connection, parent, parentIndex) {
    return this._addElement('connection', connection, parent, parentIndex);
  };


  /**
   * Internal remove element
   */
  Canvas.prototype._removeElement = function(element, type) {

    const elementRegistry = this._elementRegistry,
          graphicsFactory = this._graphicsFactory,
          eventBus = this._eventBus;

    element = elementRegistry.get(element.id || element);

    if (!element) {

      // element was removed already
      return;
    }

    eventBus.fire(type + '.remove', { element: element });

    graphicsFactory.remove(element);

    // unset parent <-> child relationship
    remove$1(element.parent && element.parent.children, element);
    element.parent = null;

    eventBus.fire(type + '.removed', { element: element });

    elementRegistry.remove(element);

    return element;
  };


  /**
   * Removes a shape from the canvas.
   *
   * @fires ShapeRemoveEvent
   * @fires ShapeRemovedEvent
   *
   * @param {ShapeLike|string} shape The shape or its ID.
   *
   * @return {ShapeLike} The removed shape.
   */
  Canvas.prototype.removeShape = function(shape) {

    /**
     * An event indicating that a shape is about to be removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event ShapeRemoveEvent
     * @type {Object}
     * @property {ShapeLike} element The shape.
     * @property {SVGElement} gfx The graphical element.
     */

    /**
     * An event indicating that a shape has been removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event ShapeRemovedEvent
     * @type {Object}
     * @property {ShapeLike} element The shape.
     * @property {SVGElement} gfx The graphical element.
     */
    return this._removeElement(shape, 'shape');
  };


  /**
   * Removes a connection from the canvas.
   *
   * @fires ConnectionRemoveEvent
   * @fires ConnectionRemovedEvent
   *
   * @param {ConnectionLike|string} connection The connection or its ID.
   *
   * @return {ConnectionLike} The removed connection.
   */
  Canvas.prototype.removeConnection = function(connection) {

    /**
     * An event indicating that a connection is about to be removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event ConnectionRemoveEvent
     * @type {Object}
     * @property {ConnectionLike} element The connection.
     * @property {SVGElement} gfx The graphical element.
     */

    /**
     * An event indicating that a connection has been removed from the canvas.
     *
     * @memberOf Canvas
     *
     * @event ConnectionRemovedEvent
     * @type {Object}
     * @property {ConnectionLike} element The connection.
     * @property {SVGElement} gfx The graphical element.
     */
    return this._removeElement(connection, 'connection');
  };


  /**
   * Returns the graphical element of an element.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
   * @param {boolean} [secondary=false] Whether to return the secondary graphical element.
   *
   * @return {SVGElement} The graphical element.
   */
  Canvas.prototype.getGraphics = function(element, secondary) {
    return this._elementRegistry.getGraphics(element, secondary);
  };


  /**
   * Perform a viewbox update via a given change function.
   *
   * @param {Function} changeFn
   */
  Canvas.prototype._changeViewbox = function(changeFn) {

    // notify others of the upcoming viewbox change
    this._eventBus.fire('canvas.viewbox.changing');

    // perform actual change
    changeFn.apply(this);

    // reset the cached viewbox so that
    // a new get operation on viewbox or zoom
    // triggers a viewbox re-computation
    this._cachedViewbox = null;

    // notify others of the change; this step
    // may or may not be debounced
    this._viewboxChanged();
  };

  Canvas.prototype._viewboxChanged = function() {
    this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });
  };


  /**
   * Gets or sets the view box of the canvas, i.e. the
   * area that is currently displayed.
   *
   * The getter may return a cached viewbox (if it is currently
   * changing). To force a recomputation, pass `false` as the first argument.
   *
   * @example
   *
   * ```javascript
   * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })
   *
   * // sets the visible area of the diagram to (100|100) -> (600|100)
   * // and and scales it according to the diagram width
   *
   * const viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.
   *
   * console.log(viewbox);
   * // {
   * //   inner: Dimensions,
   * //   outer: Dimensions,
   * //   scale,
   * //   x, y,
   * //   width, height
   * // }
   *
   * // if the current diagram is zoomed and scrolled, you may reset it to the
   * // default zoom via this method, too:
   *
   * const zoomedAndScrolledViewbox = canvas.viewbox();
   *
   * canvas.viewbox({
   *   x: 0,
   *   y: 0,
   *   width: zoomedAndScrolledViewbox.outer.width,
   *   height: zoomedAndScrolledViewbox.outer.height
   * });
   * ```
   *
   * @param {Rect} [box] The viewbox to be set.
   *
   * @return {CanvasViewbox} The set viewbox.
   */
  Canvas.prototype.viewbox = function(box) {

    if (box === undefined && this._cachedViewbox) {
      return structuredClone(this._cachedViewbox);
    }

    const viewport = this._viewport,
          outerBox = this.getSize();
    let innerBox,
        matrix,
        activeLayer,
        transform,
        scale,
        x, y;

    if (!box) {

      // compute the inner box based on the
      // diagrams active layer. This allows us to exclude
      // external components, such as overlays

      activeLayer = this._rootElement ? this.getActiveLayer() : null;
      innerBox = activeLayer && activeLayer.getBBox() || {};

      transform = transform$1(viewport);
      matrix = transform ? transform.matrix : createMatrix();
      scale = round$c(matrix.a, 1000);

      x = round$c(-matrix.e || 0, 1000);
      y = round$c(-matrix.f || 0, 1000);

      box = this._cachedViewbox = {
        x: x ? x / scale : 0,
        y: y ? y / scale : 0,
        width: outerBox.width / scale,
        height: outerBox.height / scale,
        scale: scale,
        inner: {
          width: innerBox.width || 0,
          height: innerBox.height || 0,
          x: innerBox.x || 0,
          y: innerBox.y || 0
        },
        outer: outerBox
      };

      return box;
    } else {

      this._changeViewbox(function() {
        scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);

        const matrix = this._svg.createSVGMatrix()
          .scale(scale)
          .translate(-box.x, -box.y);

        transform$1(viewport, matrix);
      });
    }

    return box;
  };


  /**
   * Gets or sets the scroll of the canvas.
   *
   * @param {ScrollDelta} [delta] The scroll to be set.
   *
   * @return {Point}
   */
  Canvas.prototype.scroll = function(delta) {

    const node = this._viewport;
    let matrix = node.getCTM();

    if (delta) {
      this._changeViewbox(function() {
        delta = assign$1({ dx: 0, dy: 0 }, delta || {});

        matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);

        setCTM(node, matrix);
      });
    }

    return { x: matrix.e, y: matrix.f };
  };

  /**
   * Scrolls the viewbox to contain the given element.
   * Optionally specify a padding to be applied to the edges.
   *
   * @param {ShapeLike|ConnectionLike|string} element The element to scroll to or its ID.
   * @param {RectTRBL|number} [padding=100] The padding to be applied. Can also specify top, bottom, left and right.
   */
  Canvas.prototype.scrollToElement = function(element, padding) {
    let defaultPadding = 100;

    if (typeof element === 'string') {
      element = this._elementRegistry.get(element);
    }

    // set to correct rootElement
    const rootElement = this.findRoot(element);

    if (rootElement !== this.getRootElement()) {
      this.setRootElement(rootElement);
    }

    // element is rootElement, do not change viewport
    if (rootElement === element) {
      return;
    }

    if (!padding) {
      padding = {};
    }
    if (typeof padding === 'number') {
      defaultPadding = padding;
    }

    padding = {
      top: padding.top || defaultPadding,
      right: padding.right || defaultPadding,
      bottom: padding.bottom || defaultPadding,
      left: padding.left || defaultPadding
    };

    const elementBounds = getBBox(element),
          elementTrbl = asTRBL(elementBounds),
          viewboxBounds = this.viewbox(),
          zoom = this.zoom();
    let dx, dy;

    // shrink viewboxBounds with padding
    viewboxBounds.y += padding.top / zoom;
    viewboxBounds.x += padding.left / zoom;
    viewboxBounds.width -= (padding.right + padding.left) / zoom;
    viewboxBounds.height -= (padding.bottom + padding.top) / zoom;

    const viewboxTrbl = asTRBL(viewboxBounds);

    const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;

    if (!canFit) {

      // top-left when element can't fit
      dx = elementBounds.x - viewboxBounds.x;
      dy = elementBounds.y - viewboxBounds.y;

    } else {

      const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),
            dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),
            dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),
            dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);

      dx = dRight || dLeft;
      dy = dBottom || dTop;

    }

    this.scroll({ dx: -dx * zoom, dy: -dy * zoom });
  };

  /**
   * Gets or sets the current zoom of the canvas, optionally zooming to the
   * specified position.
   *
   * The getter may return a cached zoom level. Call it with `false` as the first
   * argument to force recomputation of the current level.
   *
   * @param {number|'fit-viewport'} [newScale] The new zoom level, either a number,
   * i.e. 0.9, or `fit-viewport` to adjust the size to fit the current viewport.
   * @param {Point} [center] The reference point { x: ..., y: ...} to zoom to.
   *
   * @return {number} The set zoom level.
   */
  Canvas.prototype.zoom = function(newScale, center) {

    if (!newScale) {
      return this.viewbox(newScale).scale;
    }

    if (newScale === 'fit-viewport') {
      return this._fitViewport(center);
    }

    let outer,
        matrix;

    this._changeViewbox(function() {

      if (typeof center !== 'object') {
        outer = this.viewbox().outer;

        center = {
          x: outer.width / 2,
          y: outer.height / 2
        };
      }

      matrix = this._setZoom(newScale, center);
    });

    return round$c(matrix.a, 1000);
  };

  function setCTM(node, m) {
    const mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';
    node.setAttribute('transform', mstr);
  }

  Canvas.prototype._fitViewport = function(center) {

    const vbox = this.viewbox(),
          outer = vbox.outer,
          inner = vbox.inner;
    let newScale,
        newViewbox;

    // display the complete diagram without zooming in.
    // instead of relying on internal zoom, we perform a
    // hard reset on the canvas viewbox to realize this
    //
    // if diagram does not need to be zoomed in, we focus it around
    // the diagram origin instead

    if (inner.x >= 0 &&
        inner.y >= 0 &&
        inner.x + inner.width <= outer.width &&
        inner.y + inner.height <= outer.height &&
        !center) {

      newViewbox = {
        x: 0,
        y: 0,
        width: Math.max(inner.width + inner.x, outer.width),
        height: Math.max(inner.height + inner.y, outer.height)
      };
    } else {

      newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);
      newViewbox = {
        x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),
        y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),
        width: outer.width / newScale,
        height: outer.height / newScale
      };
    }

    this.viewbox(newViewbox);

    return this.viewbox(false).scale;
  };


  Canvas.prototype._setZoom = function(scale, center) {

    const svg = this._svg,
          viewport = this._viewport;

    const matrix = svg.createSVGMatrix();
    const point = svg.createSVGPoint();

    let centerPoint,
        originalPoint,
        currentMatrix,
        scaleMatrix,
        newMatrix;

    currentMatrix = viewport.getCTM();

    const currentScale = currentMatrix.a;

    if (center) {
      centerPoint = assign$1(point, center);

      // revert applied viewport transformations
      originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());

      // create scale matrix
      scaleMatrix = matrix
        .translate(originalPoint.x, originalPoint.y)
        .scale(1 / currentScale * scale)
        .translate(-originalPoint.x, -originalPoint.y);

      newMatrix = currentMatrix.multiply(scaleMatrix);
    } else {
      newMatrix = matrix.scale(scale);
    }

    setCTM(this._viewport, newMatrix);

    return newMatrix;
  };


  /**
   * Returns the size of the canvas.
   *
   * @return {Dimensions} The size of the canvas.
   */
  Canvas.prototype.getSize = function() {
    return {
      width: this._container.clientWidth,
      height: this._container.clientHeight
    };
  };


  /**
   * Returns the absolute bounding box of an element.
   *
   * The absolute bounding box may be used to display overlays in the callers
   * (browser) coordinate system rather than the zoomed in/out canvas coordinates.
   *
   * @param {ShapeLike|ConnectionLike} element The element.
   *
   * @return {Rect} The element's absolute bounding box.
   */
  Canvas.prototype.getAbsoluteBBox = function(element) {
    const vbox = this.viewbox();
    let bbox;

    // connection
    // use svg bbox
    if (element.waypoints) {
      const gfx = this.getGraphics(element);

      bbox = gfx.getBBox();
    }

    // shapes
    // use data
    else {
      bbox = element;
    }

    const x = bbox.x * vbox.scale - vbox.x * vbox.scale;
    const y = bbox.y * vbox.scale - vbox.y * vbox.scale;

    const width = bbox.width * vbox.scale;
    const height = bbox.height * vbox.scale;

    return {
      x: x,
      y: y,
      width: width,
      height: height
    };
  };

  /**
   * Fires an event so other modules can react to the canvas resizing.
   */
  Canvas.prototype.resized = function() {

    // force recomputation of view box
    delete this._cachedViewbox;

    this._eventBus.fire('canvas.resized');
  };

  var ELEMENT_ID = 'data-element-id';

  /**
   * @typedef {import('./Types').ElementLike} ElementLike
   *
   * @typedef {import('./EventBus').default} EventBus
   *
   * @typedef { (element: ElementLike, gfx: SVGElement) => boolean|any } ElementRegistryFilterCallback
   * @typedef { (element: ElementLike, gfx: SVGElement) => any } ElementRegistryForEachCallback
   */

  /**
   * A registry that keeps track of all shapes in the diagram.
   *
   * @class
   * @constructor
   *
   * @param {EventBus} eventBus
   */
  function ElementRegistry(eventBus) {

    /**
     * @type { {
     *   [id: string]: {
     *     element: ElementLike;
     *     gfx?: SVGElement;
     *     secondaryGfx?: SVGElement;
     *   }
     * } }
     */
    this._elements = {};

    this._eventBus = eventBus;
  }

  ElementRegistry.$inject = [ 'eventBus' ];

  /**
   * Add an element and its graphical representation(s) to the registry.
   *
   * @param {ElementLike} element The element to be added.
   * @param {SVGElement} gfx The primary graphical representation.
   * @param {SVGElement} [secondaryGfx] The secondary graphical representation.
   */
  ElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {

    var id = element.id;

    this._validateId(id);

    // associate dom node with element
    attr$1(gfx, ELEMENT_ID, id);

    if (secondaryGfx) {
      attr$1(secondaryGfx, ELEMENT_ID, id);
    }

    this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };
  };

  /**
   * Remove an element from the registry.
   *
   * @param {ElementLike|string} element
   */
  ElementRegistry.prototype.remove = function(element) {
    var elements = this._elements,
        id = element.id || element,
        container = id && elements[id];

    if (container) {

      // unset element id on gfx
      attr$1(container.gfx, ELEMENT_ID, '');

      if (container.secondaryGfx) {
        attr$1(container.secondaryGfx, ELEMENT_ID, '');
      }

      delete elements[id];
    }
  };

  /**
   * Update an elements ID.
   *
   * @param {ElementLike|string} element The element or its ID.
   * @param {string} newId The new ID.
   */
  ElementRegistry.prototype.updateId = function(element, newId) {

    this._validateId(newId);

    if (typeof element === 'string') {
      element = this.get(element);
    }

    this._eventBus.fire('element.updateId', {
      element: element,
      newId: newId
    });

    var gfx = this.getGraphics(element),
        secondaryGfx = this.getGraphics(element, true);

    this.remove(element);

    element.id = newId;

    this.add(element, gfx, secondaryGfx);
  };

  /**
   * Update the graphical representation of an element.
   *
   * @param {ElementLike|string} filter The element or its ID.
   * @param {SVGElement} gfx The new graphical representation.
   * @param {boolean} [secondary=false] Whether to update the secondary graphical representation.
   */
  ElementRegistry.prototype.updateGraphics = function(filter, gfx, secondary) {
    var id = filter.id || filter;

    var container = this._elements[id];

    if (secondary) {
      container.secondaryGfx = gfx;
    } else {
      container.gfx = gfx;
    }

    if (gfx) {
      attr$1(gfx, ELEMENT_ID, id);
    }

    return gfx;
  };

  /**
   * Get the element with the given ID or graphical representation.
   *
   * @example
   *
   * ```javascript
   * elementRegistry.get('SomeElementId_1');
   *
   * elementRegistry.get(gfx);
   * ```
   *
   * @param {string|SVGElement} filter The elements ID or graphical representation.
   *
   * @return {ElementLike|undefined} The element.
   */
  ElementRegistry.prototype.get = function(filter) {
    var id;

    if (typeof filter === 'string') {
      id = filter;
    } else {
      id = filter && attr$1(filter, ELEMENT_ID);
    }

    var container = this._elements[id];
    return container && container.element;
  };

  /**
   * Return all elements that match a given filter function.
   *
   * @param {ElementRegistryFilterCallback} fn The filter function.
   *
   * @return {ElementLike[]} The matching elements.
   */
  ElementRegistry.prototype.filter = function(fn) {

    var filtered = [];

    this.forEach(function(element, gfx) {
      if (fn(element, gfx)) {
        filtered.push(element);
      }
    });

    return filtered;
  };

  /**
   * Return the first element that matches the given filter function.
   *
   * @param {ElementRegistryFilterCallback} fn The filter function.
   *
   * @return {ElementLike|undefined} The matching element.
   */
  ElementRegistry.prototype.find = function(fn) {
    var map = this._elements,
        keys = Object.keys(map);

    for (var i = 0; i < keys.length; i++) {
      var id = keys[i],
          container = map[id],
          element = container.element,
          gfx = container.gfx;

      if (fn(element, gfx)) {
        return element;
      }
    }
  };

  /**
   * Get all elements.
   *
   * @return {ElementLike[]} All elements.
   */
  ElementRegistry.prototype.getAll = function() {
    return this.filter(function(e) { return e; });
  };

  /**
   * Execute a given function for each element.
   *
   * @param {ElementRegistryForEachCallback} fn The function to execute.
   */
  ElementRegistry.prototype.forEach = function(fn) {

    var map = this._elements;

    Object.keys(map).forEach(function(id) {
      var container = map[id],
          element = container.element,
          gfx = container.gfx;

      return fn(element, gfx);
    });
  };

  /**
   * Return the graphical representation of an element.
   *
   * @example
   *
   * ```javascript
   * elementRegistry.getGraphics('SomeElementId_1');
   *
   * elementRegistry.getGraphics(rootElement); // <g ...>
   *
   * elementRegistry.getGraphics(rootElement, true); // <svg ...>
   * ```
   *
   * @param {ElementLike|string} filter The element or its ID.
   * @param {boolean} [secondary=false] Whether to return the secondary graphical representation.
   *
   * @return {SVGElement} The graphical representation.
   */
  ElementRegistry.prototype.getGraphics = function(filter, secondary) {
    var id = filter.id || filter;

    var container = this._elements[id];
    return container && (secondary ? container.secondaryGfx : container.gfx);
  };

  /**
   * Validate an ID and throw an error if invalid.
   *
   * @param {string} id
   *
   * @throws {Error} Error indicating that the ID is invalid or already assigned.
   */
  ElementRegistry.prototype._validateId = function(id) {
    if (!id) {
      throw new Error('element must have an id');
    }

    if (this._elements[id]) {
      throw new Error('element with id ' + id + ' already added');
    }
  };

  /**
   * Extends a collection with {@link Refs} aware methods
   *
   * @param {Array<Object>} collection
   * @param {Refs} refs instance
   * @param {Object} property represented by the collection
   * @param {Object} target object the collection is attached to
   *
   * @return {RefsCollection<Object>} the extended array
   */
  function extend(collection, refs, property, target) {
    var inverseProperty = property.inverse;

    /**
     * Removes the given element from the array and returns it.
     *
     * @method RefsCollection#remove
     *
     * @param {Object} element the element to remove
     */
    Object.defineProperty(collection, 'remove', {
      value: function (element) {
        var idx = this.indexOf(element);
        if (idx !== -1) {
          this.splice(idx, 1);

          // unset inverse
          refs.unset(element, inverseProperty, target);
        }
        return element;
      }
    });

    /**
     * Returns true if the collection contains the given element
     *
     * @method RefsCollection#contains
     *
     * @param {Object} element the element to check for
     */
    Object.defineProperty(collection, 'contains', {
      value: function (element) {
        return this.indexOf(element) !== -1;
      }
    });

    /**
     * Adds an element to the array, unless it exists already (set semantics).
     *
     * @method RefsCollection#add
     *
     * @param {Object} element the element to add
     * @param {Number} optional index to add element to
     *                 (possibly moving other elements around)
     */
    Object.defineProperty(collection, 'add', {
      value: function (element, idx) {
        var currentIdx = this.indexOf(element);
        if (typeof idx === 'undefined') {
          if (currentIdx !== -1) {
            // element already in collection (!)
            return;
          }

          // add to end of array, as no idx is specified
          idx = this.length;
        }

        // handle already in collection
        if (currentIdx !== -1) {
          // remove element from currentIdx
          this.splice(currentIdx, 1);
        }

        // add element at idx
        this.splice(idx, 0, element);
        if (currentIdx === -1) {
          // set inverse, unless element was
          // in collection already
          refs.set(element, inverseProperty, target);
        }
      }
    });

    // a simple marker, identifying this element
    // as being a refs collection
    Object.defineProperty(collection, '__refs_collection', {
      value: true
    });
    return collection;
  }

  /**
   * Checks if a given collection is extended
   *
   * @param {Array<Object>} collection
   *
   * @return {boolean}
   */
  function isExtended(collection) {
    return collection.__refs_collection === true;
  }

  function hasOwnProperty$1(e, property) {
    return Object.prototype.hasOwnProperty.call(e, property.name || property);
  }
  function defineCollectionProperty(ref, property, target) {
    var collection = extend(target[property.name] || [], ref, property, target);
    Object.defineProperty(target, property.name, {
      enumerable: property.enumerable,
      value: collection
    });
    if (collection.length) {
      collection.forEach(function (o) {
        ref.set(o, property.inverse, target);
      });
    }
  }
  function defineProperty$1(ref, property, target) {
    var inverseProperty = property.inverse;
    var _value = target[property.name];
    Object.defineProperty(target, property.name, {
      configurable: property.configurable,
      enumerable: property.enumerable,
      get: function () {
        return _value;
      },
      set: function (value) {
        // return if we already performed all changes
        if (value === _value) {
          return;
        }
        var old = _value;

        // temporary set null
        _value = null;
        if (old) {
          ref.unset(old, inverseProperty, target);
        }

        // set new value
        _value = value;

        // set inverse value
        ref.set(_value, inverseProperty, target);
      }
    });
  }

  /**
   * Creates a new references object defining two inversly related
   * attribute descriptors a and b.
   *
   * <p>
   *   When bound to an object using {@link Refs#bind} the references
   *   get activated and ensure that add and remove operations are applied
   *   reversely, too.
   * </p>
   *
   * <p>
   *   For attributes represented as collections {@link Refs} provides the
   *   {@link RefsCollection#add}, {@link RefsCollection#remove} and {@link RefsCollection#contains} extensions
   *   that must be used to properly hook into the inverse change mechanism.
   * </p>
   *
   * @class Refs
   *
   * @classdesc A bi-directional reference between two attributes.
   *
   * @param {Refs.AttributeDescriptor} a property descriptor
   * @param {Refs.AttributeDescriptor} b property descriptor
   *
   * @example
   *
   * var refs = Refs({ name: 'wheels', collection: true, enumerable: true }, { name: 'car' });
   *
   * var car = { name: 'toyota' };
   * var wheels = [{ pos: 'front-left' }, { pos: 'front-right' }];
   *
   * refs.bind(car, 'wheels');
   *
   * car.wheels // []
   * car.wheels.add(wheels[0]);
   * car.wheels.add(wheels[1]);
   *
   * car.wheels // [{ pos: 'front-left' }, { pos: 'front-right' }]
   *
   * wheels[0].car // { name: 'toyota' };
   * car.wheels.remove(wheels[0]);
   *
   * wheels[0].car // undefined
   */
  function Refs(a, b) {
    if (!(this instanceof Refs)) {
      return new Refs(a, b);
    }

    // link
    a.inverse = b;
    b.inverse = a;
    this.props = {};
    this.props[a.name] = a;
    this.props[b.name] = b;
  }

  /**
   * Binds one side of a bi-directional reference to a
   * target object.
   *
   * @memberOf Refs
   *
   * @param  {Object} target
   * @param  {String} property
   */
  Refs.prototype.bind = function (target, property) {
    if (typeof property === 'string') {
      if (!this.props[property]) {
        throw new Error('no property <' + property + '> in ref');
      }
      property = this.props[property];
    }
    if (property.collection) {
      defineCollectionProperty(this, property, target);
    } else {
      defineProperty$1(this, property, target);
    }
  };
  Refs.prototype.ensureRefsCollection = function (target, property) {
    var collection = target[property.name];
    if (!isExtended(collection)) {
      defineCollectionProperty(this, property, target);
    }
    return collection;
  };
  Refs.prototype.ensureBound = function (target, property) {
    if (!hasOwnProperty$1(target, property)) {
      this.bind(target, property);
    }
  };
  Refs.prototype.unset = function (target, property, value) {
    if (target) {
      this.ensureBound(target, property);
      if (property.collection) {
        this.ensureRefsCollection(target, property).remove(value);
      } else {
        target[property.name] = undefined;
      }
    }
  };
  Refs.prototype.set = function (target, property, value) {
    if (target) {
      this.ensureBound(target, property);
      if (property.collection) {
        this.ensureRefsCollection(target, property).add(value);
      } else {
        target[property.name] = value;
      }
    }
  };

  var parentRefs = new Refs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),
      labelRefs = new Refs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),
      attacherRefs = new Refs({ name: 'attachers', collection: true }, { name: 'host' }),
      outgoingRefs = new Refs({ name: 'outgoing', collection: true }, { name: 'source' }),
      incomingRefs = new Refs({ name: 'incoming', collection: true }, { name: 'target' });

  /**
   * @typedef {import('./Types').Element} Element
   * @typedef {import('./Types').Shape} Shape
   * @typedef {import('./Types').Root} Root
   * @typedef {import('./Types').Label} Label
   * @typedef {import('./Types').Connection} Connection
   */

  /**
   * The basic graphical representation
   *
   * @class
   * @constructor
   */
  function ElementImpl() {

    /**
     * The object that backs up the shape
     *
     * @name Element#businessObject
     * @type Object
     */
    Object.defineProperty(this, 'businessObject', {
      writable: true
    });


    /**
     * Single label support, will mapped to multi label array
     *
     * @name Element#label
     * @type Object
     */
    Object.defineProperty(this, 'label', {
      get: function() {
        return this.labels[0];
      },
      set: function(newLabel) {

        var label = this.label,
            labels = this.labels;

        if (!newLabel && label) {
          labels.remove(label);
        } else {
          labels.add(newLabel, 0);
        }
      }
    });

    /**
     * The parent shape
     *
     * @name Element#parent
     * @type Shape
     */
    parentRefs.bind(this, 'parent');

    /**
     * The list of labels
     *
     * @name Element#labels
     * @type Label
     */
    labelRefs.bind(this, 'labels');

    /**
     * The list of outgoing connections
     *
     * @name Element#outgoing
     * @type Array<Connection>
     */
    outgoingRefs.bind(this, 'outgoing');

    /**
     * The list of incoming connections
     *
     * @name Element#incoming
     * @type Array<Connection>
     */
    incomingRefs.bind(this, 'incoming');
  }


  /**
   * A graphical object
   *
   * @class
   * @constructor
   *
   * @extends ElementImpl
   */
  function ShapeImpl() {
    ElementImpl.call(this);

    /**
     * Indicates frame shapes
     *
     * @name ShapeImpl#isFrame
     * @type boolean
     */

    /**
     * The list of children
     *
     * @name ShapeImpl#children
     * @type Element[]
     */
    parentRefs.bind(this, 'children');

    /**
     * @name ShapeImpl#host
     * @type Shape
     */
    attacherRefs.bind(this, 'host');

    /**
     * @name ShapeImpl#attachers
     * @type Shape
     */
    attacherRefs.bind(this, 'attachers');
  }

  e$3(ShapeImpl, ElementImpl);


  /**
   * A root graphical object
   *
   * @class
   * @constructor
   *
   * @extends ElementImpl
   */
  function RootImpl() {
    ElementImpl.call(this);

    /**
     * The list of children
     *
     * @name RootImpl#children
     * @type Element[]
     */
    parentRefs.bind(this, 'children');
  }

  e$3(RootImpl, ShapeImpl);


  /**
   * A label for an element
   *
   * @class
   * @constructor
   *
   * @extends ShapeImpl
   */
  function LabelImpl() {
    ShapeImpl.call(this);

    /**
     * The labeled element
     *
     * @name LabelImpl#labelTarget
     * @type Element
     */
    labelRefs.bind(this, 'labelTarget');
  }

  e$3(LabelImpl, ShapeImpl);


  /**
   * A connection between two elements
   *
   * @class
   * @constructor
   *
   * @extends ElementImpl
   */
  function ConnectionImpl() {
    ElementImpl.call(this);

    /**
     * The element this connection originates from
     *
     * @name ConnectionImpl#source
     * @type Element
     */
    outgoingRefs.bind(this, 'source');

    /**
     * The element this connection points to
     *
     * @name ConnectionImpl#target
     * @type Element
     */
    incomingRefs.bind(this, 'target');
  }

  e$3(ConnectionImpl, ElementImpl);


  var types$7 = {
    connection: ConnectionImpl,
    shape: ShapeImpl,
    label: LabelImpl,
    root: RootImpl
  };

  /**
   * Creates a root element.
   *
   * @overlord
   *
   * @example
   *
   * ```javascript
   * import * as Model from 'diagram-js/lib/model';
   *
   * const root = Model.create('root', {
   *   x: 100,
   *   y: 100,
   *   width: 100,
   *   height: 100
   * });
   * ```
   *
   * @param {'root'} type
   * @param {any} [attrs]
   *
   * @return {Root}
   */

  /**
   * Creates a connection.
   *
   * @overlord
   *
   * @example
   *
   * ```javascript
   * import * as Model from 'diagram-js/lib/model';
   *
   * const connection = Model.create('connection', {
   *   waypoints: [
   *     { x: 100, y: 100 },
   *     { x: 200, y: 100 }
   *   ]
   * });
   * ```
   *
   * @param {'connection'} type
   * @param {any} [attrs]
   *
   * @return {Connection}
   */

  /**
   * Creates a shape.
   *
   * @overlord
   *
   * @example
   *
   * ```javascript
   * import * as Model from 'diagram-js/lib/model';
   *
   * const shape = Model.create('shape', {
   *   x: 100,
   *   y: 100,
   *   width: 100,
   *   height: 100
   * });
   * ```
   *
   * @param {'shape'} type
   * @param {any} [attrs]
   *
   * @return {Shape}
   */

  /**
   * Creates a label.
   *
   * @example
   *
   * ```javascript
   * import * as Model from 'diagram-js/lib/model';
   *
   * const label = Model.create('label', {
   *   x: 100,
   *   y: 100,
   *   width: 100,
   *   height: 100,
   *   labelTarget: shape
   * });
   * ```
   *
   * @param {'label'} type
   * @param {Object} [attrs]
   *
   * @return {Label}
   */
  function create(type, attrs) {
    var Type = types$7[type];
    if (!Type) {
      throw new Error('unknown type: <' + type + '>');
    }
    return assign$1(new Type(), attrs);
  }

  /**
   * Checks whether an object is a model instance.
   *
   * @param {any} obj
   *
   * @return {boolean}
   */
  function isModelElement(obj) {
    return obj instanceof ElementImpl;
  }

  /**
   * @typedef {import('../model/Types').Element} Element
   * @typedef {import('../model/Types').Connection} Connection
   * @typedef {import('../model/Types').Label} Label
   * @typedef {import('../model/Types').Root} Root
   * @typedef {import('../model/Types').Shape} Shape
   */

  /**
   * A factory for model elements.
   *
   * @template {Connection} [T=Connection]
   * @template {Label} [U=Label]
   * @template {Root} [V=Root]
   * @template {Shape} [W=Shape]
   */
  function ElementFactory$1() {
    this._uid = 12;
  }

  /**
   * Create a root element.
   *
   * @param {Partial<Root>} [attrs]
   *
   * @return {V} The created root element.
   */
  ElementFactory$1.prototype.createRoot = function(attrs) {
    return this.create('root', attrs);
  };

  /**
   * Create a label.
   *
   * @param {Partial<Label>} [attrs]
   *
   * @return {U} The created label.
   */
  ElementFactory$1.prototype.createLabel = function(attrs) {
    return this.create('label', attrs);
  };

  /**
   * Create a shape.
   *
   * @param {Partial<Shape>} [attrs]
   *
   * @return {W} The created shape.
   */
  ElementFactory$1.prototype.createShape = function(attrs) {
    return this.create('shape', attrs);
  };

  /**
   * Create a connection.
   *
   * @param {Partial<Connection>} [attrs]
   *
   * @return {T} The created connection.
   */
  ElementFactory$1.prototype.createConnection = function(attrs) {
    return this.create('connection', attrs);
  };

  /**
   * Create a root element.
   *
   * @overlord
   * @param {'root'} type
   * @param {Partial<Root>} [attrs]
   * @return {V}
   */
  /**
   * Create a shape.
   *
   * @overlord
   * @param {'shape'} type
   * @param {Partial<Shape>} [attrs]
   * @return {W}
   */
  /**
   * Create a connection.
   *
   * @overlord
   * @param {'connection'} type
   * @param {Partial<Connection>} [attrs]
   * @return {T}
   */
  /**
   * Create a label.
   *
   * @param {'label'} type
   * @param {Partial<Label>} [attrs]
   * @return {U}
   */
  ElementFactory$1.prototype.create = function(type, attrs) {

    attrs = assign$1({}, attrs || {});

    if (!attrs.id) {
      attrs.id = type + '_' + (this._uid++);
    }

    return create(type, attrs);
  };

  var FN_REF = '__fn';

  var DEFAULT_PRIORITY$6 = 1000;

  var slice = Array.prototype.slice;

  /**
   * @typedef { {
   *   stopPropagation(): void;
   *   preventDefault(): void;
   *   cancelBubble: boolean;
   *   defaultPrevented: boolean;
   *   returnValue: any;
   * } } Event
   */

  /**
   * @template E
   *
   * @typedef { (event: E & Event, ...any) => any } EventBusEventCallback
   */

  /**
   * @typedef { {
   *  priority: number;
   *  next: EventBusListener | null;
   *  callback: EventBusEventCallback<any>;
   * } } EventBusListener
   */

  /**
   * A general purpose event bus.
   *
   * This component is used to communicate across a diagram instance.
   * Other parts of a diagram can use it to listen to and broadcast events.
   *
   *
   * ## Registering for Events
   *
   * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
   * methods to register for events. {@link EventBus#off} can be used to
   * remove event registrations. Listeners receive an instance of {@link Event}
   * as the first argument. It allows them to hook into the event execution.
   *
   * ```javascript
   *
   * // listen for event
   * eventBus.on('foo', function(event) {
   *
   *   // access event type
   *   event.type; // 'foo'
   *
   *   // stop propagation to other listeners
   *   event.stopPropagation();
   *
   *   // prevent event default
   *   event.preventDefault();
   * });
   *
   * // listen for event with custom payload
   * eventBus.on('bar', function(event, payload) {
   *   console.log(payload);
   * });
   *
   * // listen for event returning value
   * eventBus.on('foobar', function(event) {
   *
   *   // stop event propagation + prevent default
   *   return false;
   *
   *   // stop event propagation + return custom result
   *   return {
   *     complex: 'listening result'
   *   };
   * });
   *
   *
   * // listen with custom priority (default=1000, higher is better)
   * eventBus.on('priorityfoo', 1500, function(event) {
   *   console.log('invoked first!');
   * });
   *
   *
   * // listen for event and pass the context (`this`)
   * eventBus.on('foobar', function(event) {
   *   this.foo();
   * }, this);
   * ```
   *
   *
   * ## Emitting Events
   *
   * Events can be emitted via the event bus using {@link EventBus#fire}.
   *
   * ```javascript
   *
   * // false indicates that the default action
   * // was prevented by listeners
   * if (eventBus.fire('foo') === false) {
   *   console.log('default has been prevented!');
   * };
   *
   *
   * // custom args + return value listener
   * eventBus.on('sum', function(event, a, b) {
   *   return a + b;
   * });
   *
   * // you can pass custom arguments + retrieve result values.
   * var sum = eventBus.fire('sum', 1, 2);
   * console.log(sum); // 3
   * ```
   *
   * @template [EventMap=null]
   */
  function EventBus() {

    /**
     * @type { Record<string, EventBusListener> }
     */
    this._listeners = {};

    // cleanup on destroy on lowest priority to allow
    // message passing until the bitter end
    this.on('diagram.destroy', 1, this._destroy, this);
  }

  /**
   * @overlord
   *
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @template T
   *
   * @param {string|string[]} events to subscribe to
   * @param {number} [priority=1000] listen priority
   * @param {EventBusEventCallback<T>} callback
   * @param {any} [that] callback context
   */
  /**
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @template {keyof EventMap} EventName
   *
   * @param {EventName} events to subscribe to
   * @param {number} [priority=1000] listen priority
   * @param {EventBusEventCallback<EventMap[EventName]>} callback
   * @param {any} [that] callback context
   */
  EventBus.prototype.on = function(events, priority, callback, that) {

    events = isArray$3(events) ? events : [ events ];

    if (isFunction(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$6;
    }

    if (!isNumber(priority)) {
      throw new Error('priority must be a number');
    }

    var actualCallback = callback;

    if (that) {
      actualCallback = bind$2(callback, that);

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      actualCallback[FN_REF] = callback[FN_REF] || callback;
    }

    var self = this;

    events.forEach(function(e) {
      self._addListener(e, {
        priority: priority,
        callback: actualCallback,
        next: null
      });
    });
  };

  /**
   * @overlord
   *
   * Register an event listener that is called only once.
   *
   * @template T
   *
   * @param {string|string[]} events to subscribe to
   * @param {number} [priority=1000] the listen priority
   * @param {EventBusEventCallback<T>} callback
   * @param {any} [that] callback context
   */
  /**
   * Register an event listener that is called only once.
   *
   * @template {keyof EventMap} EventName
   *
   * @param {EventName} events to subscribe to
   * @param {number} [priority=1000] listen priority
   * @param {EventBusEventCallback<EventMap[EventName]>} callback
   * @param {any} [that] callback context
   */
  EventBus.prototype.once = function(events, priority, callback, that) {
    var self = this;

    if (isFunction(priority)) {
      that = callback;
      callback = priority;
      priority = DEFAULT_PRIORITY$6;
    }

    if (!isNumber(priority)) {
      throw new Error('priority must be a number');
    }

    function wrappedCallback() {
      wrappedCallback.__isTomb = true;

      var result = callback.apply(that, arguments);

      self.off(events, wrappedCallback);

      return result;
    }

    // make sure we remember and are able to remove
    // bound callbacks via {@link #off} using the original
    // callback
    wrappedCallback[FN_REF] = callback;

    this.on(events, priority, wrappedCallback);
  };


  /**
   * Removes event listeners by event and callback.
   *
   * If no callback is given, all listeners for a given event name are being removed.
   *
   * @param {string|string[]} events
   * @param {EventBusEventCallback<unknown>} [callback]
   */
  EventBus.prototype.off = function(events, callback) {

    events = isArray$3(events) ? events : [ events ];

    var self = this;

    events.forEach(function(event) {
      self._removeListener(event, callback);
    });

  };


  /**
   * Create an event recognized be the event bus.
   *
   * @param {Object} data Event data.
   *
   * @return {Event} An event that will be recognized by the event bus.
   */
  EventBus.prototype.createEvent = function(data) {
    var event = new InternalEvent();

    event.init(data);

    return event;
  };


  /**
   * Fires an event.
   *
   * @example
   *
   * ```javascript
   * // fire event by name
   * events.fire('foo');
   *
   * // fire event object with nested type
   * var event = { type: 'foo' };
   * events.fire(event);
   *
   * // fire event with explicit type
   * var event = { x: 10, y: 20 };
   * events.fire('element.moved', event);
   *
   * // pass additional arguments to the event
   * events.on('foo', function(event, bar) {
   *   alert(bar);
   * });
   *
   * events.fire({ type: 'foo' }, 'I am bar!');
   * ```
   *
   * @param {string} [type] event type
   * @param {Object} [data] event or event data
   * @param {...any} [args] additional arguments the callback will be called with.
   *
   * @return {any} The return value. Will be set to `false` if the default was prevented.
   */
  EventBus.prototype.fire = function(type, data) {
    var event,
        firstListener,
        returnValue,
        args;

    args = slice.call(arguments);

    if (typeof type === 'object') {
      data = type;
      type = data.type;
    }

    if (!type) {
      throw new Error('no event type specified');
    }

    firstListener = this._listeners[type];

    if (!firstListener) {
      return;
    }

    // we make sure we fire instances of our home made
    // events here. We wrap them only once, though
    if (data instanceof InternalEvent) {

      // we are fine, we alread have an event
      event = data;
    } else {
      event = this.createEvent(data);
    }

    // ensure we pass the event as the first parameter
    args[0] = event;

    // original event type (in case we delegate)
    var originalType = event.type;

    // update event type before delegation
    if (type !== originalType) {
      event.type = type;
    }

    try {
      returnValue = this._invokeListeners(event, args, firstListener);
    } finally {

      // reset event type after delegation
      if (type !== originalType) {
        event.type = originalType;
      }
    }

    // set the return value to false if the event default
    // got prevented and no other return value exists
    if (returnValue === undefined && event.defaultPrevented) {
      returnValue = false;
    }

    return returnValue;
  };

  /**
   * Handle an error by firing an event.
   *
   * @param {Error} error The error to be handled.
   *
   * @return {boolean} Whether the error was handled.
   */
  EventBus.prototype.handleError = function(error) {
    return this.fire('error', { error: error }) === false;
  };


  EventBus.prototype._destroy = function() {
    this._listeners = {};
  };

  /**
   * @param {Event} event
   * @param {any[]} args
   * @param {EventBusListener} listener
   *
   * @return {any}
   */
  EventBus.prototype._invokeListeners = function(event, args, listener) {

    var returnValue;

    while (listener) {

      // handle stopped propagation
      if (event.cancelBubble) {
        break;
      }

      returnValue = this._invokeListener(event, args, listener);

      listener = listener.next;
    }

    return returnValue;
  };

  /**
   * @param {Event} event
   * @param {any[]} args
   * @param {EventBusListener} listener
   *
   * @return {any}
   */
  EventBus.prototype._invokeListener = function(event, args, listener) {

    var returnValue;

    if (listener.callback.__isTomb) {
      return returnValue;
    }

    try {

      // returning false prevents the default action
      returnValue = invokeFunction(listener.callback, args);

      // stop propagation on return value
      if (returnValue !== undefined) {
        event.returnValue = returnValue;
        event.stopPropagation();
      }

      // prevent default on return false
      if (returnValue === false) {
        event.preventDefault();
      }
    } catch (error) {
      if (!this.handleError(error)) {
        console.error('unhandled error in event listener', error);

        throw error;
      }
    }

    return returnValue;
  };

  /**
   * Add new listener with a certain priority to the list
   * of listeners (for the given event).
   *
   * The semantics of listener registration / listener execution are
   * first register, first serve: New listeners will always be inserted
   * after existing listeners with the same priority.
   *
   * Example: Inserting two listeners with priority 1000 and 1300
   *
   *    * before: [ 1500, 1500, 1000, 1000 ]
   *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
   *
   * @param {string} event
   * @param {EventBusListener} newListener
   */
  EventBus.prototype._addListener = function(event, newListener) {

    var listener = this._getListeners(event),
        previousListener;

    // no prior listeners
    if (!listener) {
      this._setListeners(event, newListener);

      return;
    }

    // ensure we order listeners by priority from
    // 0 (high) to n > 0 (low)
    while (listener) {

      if (listener.priority < newListener.priority) {

        newListener.next = listener;

        if (previousListener) {
          previousListener.next = newListener;
        } else {
          this._setListeners(event, newListener);
        }

        return;
      }

      previousListener = listener;
      listener = listener.next;
    }

    // add new listener to back
    previousListener.next = newListener;
  };


  /**
   * @param {string} name
   *
   * @return {EventBusListener}
   */
  EventBus.prototype._getListeners = function(name) {
    return this._listeners[name];
  };

  /**
   * @param {string} name
   * @param {EventBusListener} listener
   */
  EventBus.prototype._setListeners = function(name, listener) {
    this._listeners[name] = listener;
  };

  EventBus.prototype._removeListener = function(event, callback) {

    var listener = this._getListeners(event),
        nextListener,
        previousListener,
        listenerCallback;

    if (!callback) {

      // clear listeners
      this._setListeners(event, null);

      return;
    }

    while (listener) {

      nextListener = listener.next;

      listenerCallback = listener.callback;

      if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
        if (previousListener) {
          previousListener.next = nextListener;
        } else {

          // new first listener
          this._setListeners(event, nextListener);
        }
      }

      previousListener = listener;
      listener = nextListener;
    }
  };

  /**
   * A event that is emitted via the event bus.
   */
  function InternalEvent() { }

  InternalEvent.prototype.stopPropagation = function() {
    this.cancelBubble = true;
  };

  InternalEvent.prototype.preventDefault = function() {
    this.defaultPrevented = true;
  };

  InternalEvent.prototype.init = function(data) {
    assign$1(this, data || {});
  };


  /**
   * Invoke function. Be fast...
   *
   * @param {Function} fn
   * @param {any[]} args
   *
   * @return {any}
   */
  function invokeFunction(fn, args) {
    return fn.apply(null, args);
  }

  /**
   * SVGs for elements are generated by the {@link GraphicsFactory}.
   *
   * This utility gives quick access to the important semantic
   * parts of an element.
   */

  /**
   * Returns the visual part of a diagram element.
   *
   * @param {SVGElement} gfx
   *
   * @return {SVGElement}
   */
  function getVisual(gfx) {
    return gfx.childNodes[0];
  }

  /**
   * Returns the children for a given diagram element.
   *
   * @param {SVGElement} gfx
   * @return {SVGElement}
   */
  function getChildren$2(gfx) {
    return gfx.parentNode.childNodes[1];
  }

  /**
   * @typedef {import('./Types').ConnectionLike} ConnectionLike
   * @typedef {import('./Types').ElementLike} ElementLike
   * @typedef {import('./Types').ShapeLike} ShapeLike
   *
   * @typedef {import('./ElementRegistry').default} ElementRegistry
   * @typedef {import('./EventBus').default} EventBus
   */

  /**
   * A factory that creates graphical elements.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   */
  function GraphicsFactory(eventBus, elementRegistry) {
    this._eventBus = eventBus;
    this._elementRegistry = elementRegistry;
  }

  GraphicsFactory.$inject = [ 'eventBus' , 'elementRegistry' ];

  /**
   * @param { { parent?: any } } element
   * @return {SVGElement}
   */
  GraphicsFactory.prototype._getChildrenContainer = function(element) {

    var gfx = this._elementRegistry.getGraphics(element);

    var childrenGfx;

    // root element
    if (!element.parent) {
      childrenGfx = gfx;
    } else {
      childrenGfx = getChildren$2(gfx);
      if (!childrenGfx) {
        childrenGfx = create$1('g');
        classes$1(childrenGfx).add('djs-children');

        append(gfx.parentNode, childrenGfx);
      }
    }

    return childrenGfx;
  };

  /**
   * Clears the graphical representation of the element and returns the
   * cleared visual (the <g class="djs-visual" /> element).
   */
  GraphicsFactory.prototype._clear = function(gfx) {
    var visual = getVisual(gfx);

    clear(visual);

    return visual;
  };

  /**
   * Creates a gfx container for shapes and connections
   *
   * The layout is as follows:
   *
   * <g class="djs-group">
   *
   *   <!-- the gfx -->
   *   <g class="djs-element djs-(shape|connection|frame)">
   *     <g class="djs-visual">
   *       <!-- the renderer draws in here -->
   *     </g>
   *
   *     <!-- extensions (overlays, click box, ...) goes here
   *   </g>
   *
   *   <!-- the gfx child nodes -->
   *   <g class="djs-children"></g>
   * </g>
   *
   * @param {string} type the type of the element, i.e. shape | connection
   * @param {SVGElement} childrenGfx
   * @param {number} [parentIndex] position to create container in parent
   * @param {boolean} [isFrame] is frame element
   *
   * @return {SVGElement}
   */
  GraphicsFactory.prototype._createContainer = function(
      type, childrenGfx, parentIndex, isFrame
  ) {
    var outerGfx = create$1('g');
    classes$1(outerGfx).add('djs-group');

    // insert node at position
    if (typeof parentIndex !== 'undefined') {
      prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);
    } else {
      append(childrenGfx, outerGfx);
    }

    var gfx = create$1('g');
    classes$1(gfx).add('djs-element');
    classes$1(gfx).add('djs-' + type);

    if (isFrame) {
      classes$1(gfx).add('djs-frame');
    }

    append(outerGfx, gfx);

    // create visual
    var visual = create$1('g');
    classes$1(visual).add('djs-visual');

    append(gfx, visual);

    return gfx;
  };

  /**
   * Create a graphical element.
   *
   * @param { 'shape' | 'connection' | 'label' | 'root' } type The type of the element.
   * @param {ElementLike} element The element.
   * @param {number} [parentIndex] The index at which to add the graphical element to its parent's children.
   *
   * @return {SVGElement} The graphical element.
   */
  GraphicsFactory.prototype.create = function(type, element, parentIndex) {
    var childrenGfx = this._getChildrenContainer(element.parent);
    return this._createContainer(type, childrenGfx, parentIndex, isFrameElement(element));
  };

  /**
   * Update the containments of the given elements.
   *
   * @param {ElementLike[]} elements The elements.
   */
  GraphicsFactory.prototype.updateContainments = function(elements) {

    var self = this,
        elementRegistry = this._elementRegistry,
        parents;

    parents = reduce(elements, function(map, e) {

      if (e.parent) {
        map[e.parent.id] = e.parent;
      }

      return map;
    }, {});

    // update all parents of changed and reorganized their children
    // in the correct order (as indicated in our model)
    forEach$1(parents, function(parent) {

      var children = parent.children;

      if (!children) {
        return;
      }

      var childrenGfx = self._getChildrenContainer(parent);

      forEach$1(children.slice().reverse(), function(child) {
        var childGfx = elementRegistry.getGraphics(child);

        prependTo(childGfx.parentNode, childrenGfx);
      });
    });
  };

  /**
   * Draw a shape.
   *
   * @param {SVGElement} visual The graphical element.
   * @param {ShapeLike} element The shape.
   * @param {Object} attrs Optional attributes.
   *
   * @return {SVGElement}
   */
  GraphicsFactory.prototype.drawShape = function(visual, element, attrs = {}) {
    var eventBus = this._eventBus;

    return eventBus.fire('render.shape', { gfx: visual, element, attrs });
  };

  /**
   * Get the path of a shape.
   *
   * @param {ShapeLike} element The shape.
   *
   * @return {string} The path of the shape.
   */
  GraphicsFactory.prototype.getShapePath = function(element) {
    var eventBus = this._eventBus;

    return eventBus.fire('render.getShapePath', element);
  };

  /**
   * Draw a connection.
   *
   * @param {SVGElement} visual The graphical element.
   * @param {ConnectionLike} element The connection.
   * @param {Object} attrs Optional attributes.
   *
   * @return {SVGElement}
   */
  GraphicsFactory.prototype.drawConnection = function(visual, element, attrs = {}) {
    var eventBus = this._eventBus;

    return eventBus.fire('render.connection', { gfx: visual, element, attrs });
  };

  /**
   * Get the path of a connection.
   *
   * @param {ConnectionLike} connection The connection.
   *
   * @return {string} The path of the connection.
   */
  GraphicsFactory.prototype.getConnectionPath = function(connection) {
    var eventBus = this._eventBus;

    return eventBus.fire('render.getConnectionPath', connection);
  };

  /**
   * Update an elements graphical representation.
   *
   * @param {'shape'|'connection'} type
   * @param {ElementLike} element
   * @param {SVGElement} gfx
   */
  GraphicsFactory.prototype.update = function(type, element, gfx) {

    // do NOT update root element
    if (!element.parent) {
      return;
    }

    var visual = this._clear(gfx);

    // redraw
    if (type === 'shape') {
      this.drawShape(visual, element);

      // update positioning
      translate$1(gfx, element.x, element.y);
    } else if (type === 'connection') {
      this.drawConnection(visual, element);
    } else {
      throw new Error('unknown type: ' + type);
    }

    if (element.hidden) {
      attr$1(gfx, 'display', 'none');
    } else {
      attr$1(gfx, 'display', 'block');
    }
  };

  /**
   * Remove a graphical element.
   *
   * @param {ElementLike} element The element.
   */
  GraphicsFactory.prototype.remove = function(element) {
    var gfx = this._elementRegistry.getGraphics(element);

    // remove
    remove$3(gfx.parentNode);
  };


  // helpers //////////

  function prependTo(newNode, parentNode, siblingNode) {
    var node = siblingNode || parentNode.firstChild;

    // do not prepend node to itself to prevent IE from crashing
    // https://github.com/bpmn-io/bpmn-js/issues/746
    if (newNode === node) {
      return;
    }

    parentNode.insertBefore(newNode, node);
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var CoreModule = {
    __depends__: [ DrawModule ],
    __init__: [ 'canvas' ],
    canvas: [ 'type', Canvas ],
    elementRegistry: [ 'type', ElementRegistry ],
    elementFactory: [ 'type', ElementFactory$1 ],
    eventBus: [ 'type', EventBus ],
    graphicsFactory: [ 'type', GraphicsFactory ]
  };

  /**
   * @typedef {import('didi').InjectionContext} InjectionContext
   * @typedef {import('didi').LocalsMap} LocalsMap
   * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration
   *
   * @typedef { {
   *   modules?: ModuleDeclaration[];
   * } & Record<string, any> } DiagramOptions
   */

  /**
   * @template T
   * @typedef {import('didi').FactoryFunction<T>} FactoryFunction
   */

  /**
   * @template T
   * @typedef {import('didi').ArrayFunc<T>} ArrayFunc
   */

  /**
   * Bootstrap an injector from a list of modules, instantiating a number of default components
   *
   * @param {ModuleDeclaration[]} modules
   *
   * @return {Injector} a injector to use to access the components
   */
  function bootstrap(modules) {
    var injector = new Injector(modules);

    injector.init();

    return injector;
  }

  /**
   * Creates an injector from passed options.
   *
   * @template ServiceMap
   * @param {DiagramOptions} [options]
   *
   * @return {Injector<ServiceMap>}
   */
  function createInjector(options) {

    options = options || {};

    /**
     * @type { ModuleDeclaration }
     */
    var configModule = {
      'config': [ 'value', options ]
    };

    var modules = [ configModule, CoreModule ].concat(options.modules || []);

    return bootstrap(modules);
  }


  /**
   * The main diagram-js entry point that bootstraps the diagram with the given
   * configuration.
   *
   * To register extensions with the diagram, pass them as Array<Module> to the constructor.
   *
   * @class
   * @constructor
   * @template [ServiceMap=null]
   *
   * @example Creating a plug-in that logs whenever a shape is added to the canvas.
   *
   * ```javascript
   * // plug-in implementation
   * function MyLoggingPlugin(eventBus) {
   *   eventBus.on('shape.added', function(event) {
   *     console.log('shape ', event.shape, ' was added to the diagram');
   *   });
   * }
   *
   * // export as module
   * export default {
   *   __init__: [ 'myLoggingPlugin' ],
   *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]
   * };
   * ```
   *
   * Use the plug-in in a Diagram instance:
   *
   * ```javascript
   * import MyLoggingModule from 'path-to-my-logging-plugin';
   *
   * var diagram = new Diagram({
   *   modules: [
   *     MyLoggingModule
   *   ]
   * });
   *
   * diagram.invoke([ 'canvas', function(canvas) {
   *   // add shape to drawing canvas
   *   canvas.addShape({ x: 10, y: 10 });
   * });
   *
   * // 'shape ... was added to the diagram' logged to console
   * ```
   *
   * @param {DiagramOptions} [options]
   * @param {Injector<ServiceMap>} [injector] An (optional) injector to bootstrap the diagram with.
   */
  function Diagram(options, injector) {

    /**
     * @type {Injector<ServiceMap>}
     */
    this._injector = injector || createInjector(options);

    // init

    /**
     * An event indicating that all plug-ins are loaded.
     *
     * Use this event to fire other events to interested plug-ins
     *
     * @memberOf Diagram
     *
     * @event diagram.init
     *
     * @example
     *
     * ```javascript
     * eventBus.on('diagram.init', function() {
     *   eventBus.fire('my-custom-event', { foo: 'BAR' });
     * });
     * ```
     *
     * @type {Object}
     */
    this.get('eventBus').fire('diagram.init');
  }

  /**
   * @overlord
   *
   * Resolves a diagram service.
   *
   * @template T
   *
   * @param {string} name The name of the service to get.
   *
   * @return {T}
   */
  /**
   * @overlord
   *
   * Resolves a diagram service.
   *
   * @template T
   *
   * @param {string} name The name of the service to get.
   * @param {true} strict If false, resolve missing services to null.
   *
   * @return {T}
   */
  /**
   * @overlord
   *
   * Resolves a diagram service.
   *
   * @template T
   *
   * @param {string} name The name of the service to get.
   * @param {boolean} strict If false, resolve missing services to null.
   *
   * @return {T|null}
   */
  /**
   * Resolves a diagram service.
   *
   * @template {keyof ServiceMap} Name
   *
   * @param {Name} name The name of the service to get.
   *
   * @return {ServiceMap[Name]}
   */
  Diagram.prototype.get = function(name, strict) {
    return this._injector.get(name, strict);
  };

  /**
   * @overlord
   *
   * Invoke the given function, injecting dependencies. Return the result.
   *
   * @template T
   *
   * @param {FactoryFunction<T>} func
   * @param {InjectionContext} [context]
   * @param {LocalsMap} [locals]
   *
   * @return {T}
   */
  /**
   * Invoke the given function, injecting dependencies provided in
   * array notation. Return the result.
   *
   * @template T
   *
   * @param {ArrayFunc<T>} func function to be invoked
   * @param {InjectionContext} [context] context of the invocation
   * @param {LocalsMap} [locals] locals provided
   *
   * @return {T}
   */
  Diagram.prototype.invoke = function(func, context, locals) {
    return this._injector.invoke(func, context, locals);
  };

  /**
   * Destroys the diagram
   */
  Diagram.prototype.destroy = function() {
    this.get('eventBus').fire('diagram.destroy');
  };

  /**
   * Clear the diagram, removing all contents.
   */
  Diagram.prototype.clear = function() {
    this.get('eventBus').fire('diagram.clear');
  };

  /**
   * Moddle base element.
   */
  function Base() { }

  Base.prototype.get = function(name) {
    return this.$model.properties.get(this, name);
  };

  Base.prototype.set = function(name, value) {
    this.$model.properties.set(this, name, value);
  };

  /**
   * A model element factory.
   *
   * @param {Moddle} model
   * @param {Properties} properties
   */
  function Factory(model, properties) {
    this.model = model;
    this.properties = properties;
  }


  Factory.prototype.createType = function(descriptor) {

    var model = this.model;

    var props = this.properties,
        prototype = Object.create(Base.prototype);

    // initialize default values
    forEach$1(descriptor.properties, function(p) {
      if (!p.isMany && p.default !== undefined) {
        prototype[p.name] = p.default;
      }
    });

    props.defineModel(prototype, model);
    props.defineDescriptor(prototype, descriptor);

    var name = descriptor.ns.name;

    /**
     * The new type constructor
     */
    function ModdleElement(attrs) {
      props.define(this, '$type', { value: name, enumerable: true });
      props.define(this, '$attrs', { value: {} });
      props.define(this, '$parent', { writable: true });

      forEach$1(attrs, bind$2(function(val, key) {
        this.set(key, val);
      }, this));
    }

    ModdleElement.prototype = prototype;

    ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;

    // static links
    props.defineModel(ModdleElement, model);
    props.defineDescriptor(ModdleElement, descriptor);

    return ModdleElement;
  };

  /**
   * Built-in moddle types
   */
  var BUILTINS = {
    String: true,
    Boolean: true,
    Integer: true,
    Real: true,
    Element: true
  };

  /**
   * Converters for built in types from string representations
   */
  var TYPE_CONVERTERS = {
    String: function(s) { return s; },
    Boolean: function(s) { return s === 'true'; },
    Integer: function(s) { return parseInt(s, 10); },
    Real: function(s) { return parseFloat(s); }
  };

  /**
   * Convert a type to its real representation
   */
  function coerceType(type, value) {

    var converter = TYPE_CONVERTERS[type];

    if (converter) {
      return converter(value);
    } else {
      return value;
    }
  }

  /**
   * Return whether the given type is built-in
   */
  function isBuiltIn(type) {
    return !!BUILTINS[type];
  }

  /**
   * Return whether the given type is simple
   */
  function isSimple(type) {
    return !!TYPE_CONVERTERS[type];
  }

  /**
   * Parses a namespaced attribute name of the form (ns:)localName to an object,
   * given a default prefix to assume in case no explicit namespace is given.
   *
   * @param {String} name
   * @param {String} [defaultPrefix] the default prefix to take, if none is present.
   *
   * @return {Object} the parsed name
   */
  function parseName$1(name, defaultPrefix) {
    var parts = name.split(/:/),
        localName, prefix;

    // no prefix (i.e. only local name)
    if (parts.length === 1) {
      localName = name;
      prefix = defaultPrefix;
    }

    // prefix + local name
    else if (parts.length === 2) {
      localName = parts[1];
      prefix = parts[0];
    }

    else {
      throw new Error('expected <prefix:localName> or <localName>, got ' + name);
    }

    name = (prefix ? prefix + ':' : '') + localName;

    return {
      name: name,
      prefix: prefix,
      localName: localName
    };
  }

  /**
   * A utility to build element descriptors.
   */
  function DescriptorBuilder(nameNs) {
    this.ns = nameNs;
    this.name = nameNs.name;
    this.allTypes = [];
    this.allTypesByName = {};
    this.properties = [];
    this.propertiesByName = {};
  }


  DescriptorBuilder.prototype.build = function() {
    return pick(this, [
      'ns',
      'name',
      'allTypes',
      'allTypesByName',
      'properties',
      'propertiesByName',
      'bodyProperty',
      'idProperty'
    ]);
  };

  /**
   * Add property at given index.
   *
   * @param {Object} p
   * @param {Number} [idx]
   * @param {Boolean} [validate=true]
   */
  DescriptorBuilder.prototype.addProperty = function(p, idx, validate) {

    if (typeof idx === 'boolean') {
      validate = idx;
      idx = undefined;
    }

    this.addNamedProperty(p, validate !== false);

    var properties = this.properties;

    if (idx !== undefined) {
      properties.splice(idx, 0, p);
    } else {
      properties.push(p);
    }
  };


  DescriptorBuilder.prototype.replaceProperty = function(oldProperty, newProperty, replace) {
    var oldNameNs = oldProperty.ns;

    var props = this.properties,
        propertiesByName = this.propertiesByName,
        rename = oldProperty.name !== newProperty.name;

    if (oldProperty.isId) {
      if (!newProperty.isId) {
        throw new Error(
          'property <' + newProperty.ns.name + '> must be id property ' +
          'to refine <' + oldProperty.ns.name + '>');
      }

      this.setIdProperty(newProperty, false);
    }

    if (oldProperty.isBody) {

      if (!newProperty.isBody) {
        throw new Error(
          'property <' + newProperty.ns.name + '> must be body property ' +
          'to refine <' + oldProperty.ns.name + '>');
      }

      // TODO: Check compatibility
      this.setBodyProperty(newProperty, false);
    }

    // validate existence and get location of old property
    var idx = props.indexOf(oldProperty);
    if (idx === -1) {
      throw new Error('property <' + oldNameNs.name + '> not found in property list');
    }

    // remove old property
    props.splice(idx, 1);

    // replacing the named property is intentional
    //
    //  * validate only if this is a "rename" operation
    //  * add at specific index unless we "replace"
    //
    this.addProperty(newProperty, replace ? undefined : idx, rename);

    // make new property available under old name
    propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;
  };


  DescriptorBuilder.prototype.redefineProperty = function(p, targetPropertyName, replace) {

    var nsPrefix = p.ns.prefix;
    var parts = targetPropertyName.split('#');

    var name = parseName$1(parts[0], nsPrefix);
    var attrName = parseName$1(parts[1], name.prefix).name;

    var redefinedProperty = this.propertiesByName[attrName];
    if (!redefinedProperty) {
      throw new Error('refined property <' + attrName + '> not found');
    } else {
      this.replaceProperty(redefinedProperty, p, replace);
    }

    delete p.redefines;
  };

  DescriptorBuilder.prototype.addNamedProperty = function(p, validate) {
    var ns = p.ns,
        propsByName = this.propertiesByName;

    if (validate) {
      this.assertNotDefined(p, ns.name);
      this.assertNotDefined(p, ns.localName);
    }

    propsByName[ns.name] = propsByName[ns.localName] = p;
  };

  DescriptorBuilder.prototype.removeNamedProperty = function(p) {
    var ns = p.ns,
        propsByName = this.propertiesByName;

    delete propsByName[ns.name];
    delete propsByName[ns.localName];
  };

  DescriptorBuilder.prototype.setBodyProperty = function(p, validate) {

    if (validate && this.bodyProperty) {
      throw new Error(
        'body property defined multiple times ' +
        '(<' + this.bodyProperty.ns.name + '>, <' + p.ns.name + '>)');
    }

    this.bodyProperty = p;
  };

  DescriptorBuilder.prototype.setIdProperty = function(p, validate) {

    if (validate && this.idProperty) {
      throw new Error(
        'id property defined multiple times ' +
        '(<' + this.idProperty.ns.name + '>, <' + p.ns.name + '>)');
    }

    this.idProperty = p;
  };

  DescriptorBuilder.prototype.assertNotTrait = function(typeDescriptor) {

    const _extends = typeDescriptor.extends || [];

    if (_extends.length) {
      throw new Error(
        `cannot create <${ typeDescriptor.name }> extending <${ typeDescriptor.extends }>`
      );
    }
  };

  DescriptorBuilder.prototype.assertNotDefined = function(p, name) {
    var propertyName = p.name,
        definedProperty = this.propertiesByName[propertyName];

    if (definedProperty) {
      throw new Error(
        'property <' + propertyName + '> already defined; ' +
        'override of <' + definedProperty.definedBy.ns.name + '#' + definedProperty.ns.name + '> by ' +
        '<' + p.definedBy.ns.name + '#' + p.ns.name + '> not allowed without redefines');
    }
  };

  DescriptorBuilder.prototype.hasProperty = function(name) {
    return this.propertiesByName[name];
  };

  DescriptorBuilder.prototype.addTrait = function(t, inherited) {

    if (inherited) {
      this.assertNotTrait(t);
    }

    var typesByName = this.allTypesByName,
        types = this.allTypes;

    var typeName = t.name;

    if (typeName in typesByName) {
      return;
    }

    forEach$1(t.properties, bind$2(function(p) {

      // clone property to allow extensions
      p = assign$1({}, p, {
        name: p.ns.localName,
        inherited: inherited
      });

      Object.defineProperty(p, 'definedBy', {
        value: t
      });

      var replaces = p.replaces,
          redefines = p.redefines;

      // add replace/redefine support
      if (replaces || redefines) {
        this.redefineProperty(p, replaces || redefines, replaces);
      } else {
        if (p.isBody) {
          this.setBodyProperty(p);
        }
        if (p.isId) {
          this.setIdProperty(p);
        }
        this.addProperty(p);
      }
    }, this));

    types.push(t);
    typesByName[typeName] = t;
  };

  /**
   * A registry of Moddle packages.
   *
   * @param {Array<Package>} packages
   * @param {Properties} properties
   */
  function Registry(packages, properties) {
    this.packageMap = {};
    this.typeMap = {};

    this.packages = [];

    this.properties = properties;

    forEach$1(packages, bind$2(this.registerPackage, this));
  }


  Registry.prototype.getPackage = function(uriOrPrefix) {
    return this.packageMap[uriOrPrefix];
  };

  Registry.prototype.getPackages = function() {
    return this.packages;
  };


  Registry.prototype.registerPackage = function(pkg) {

    // copy package
    pkg = assign$1({}, pkg);

    var pkgMap = this.packageMap;

    ensureAvailable(pkgMap, pkg, 'prefix');
    ensureAvailable(pkgMap, pkg, 'uri');

    // register types
    forEach$1(pkg.types, bind$2(function(descriptor) {
      this.registerType(descriptor, pkg);
    }, this));

    pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;
    this.packages.push(pkg);
  };


  /**
   * Register a type from a specific package with us
   */
  Registry.prototype.registerType = function(type, pkg) {

    type = assign$1({}, type, {
      superClass: (type.superClass || []).slice(),
      extends: (type.extends || []).slice(),
      properties: (type.properties || []).slice(),
      meta: assign$1((type.meta || {}))
    });

    var ns = parseName$1(type.name, pkg.prefix),
        name = ns.name,
        propertiesByName = {};

    // parse properties
    forEach$1(type.properties, bind$2(function(p) {

      // namespace property names
      var propertyNs = parseName$1(p.name, ns.prefix),
          propertyName = propertyNs.name;

      // namespace property types
      if (!isBuiltIn(p.type)) {
        p.type = parseName$1(p.type, propertyNs.prefix).name;
      }

      assign$1(p, {
        ns: propertyNs,
        name: propertyName
      });

      propertiesByName[propertyName] = p;
    }, this));

    // update ns + name
    assign$1(type, {
      ns: ns,
      name: name,
      propertiesByName: propertiesByName
    });

    forEach$1(type.extends, bind$2(function(extendsName) {
      var extendsNameNs = parseName$1(extendsName, ns.prefix);

      var extended = this.typeMap[extendsNameNs.name];

      extended.traits = extended.traits || [];
      extended.traits.push(name);
    }, this));

    // link to package
    this.definePackage(type, pkg);

    // register
    this.typeMap[name] = type;
  };


  /**
   * Traverse the type hierarchy from bottom to top,
   * calling iterator with (type, inherited) for all elements in
   * the inheritance chain.
   *
   * @param {Object} nsName
   * @param {Function} iterator
   * @param {Boolean} [trait=false]
   */
  Registry.prototype.mapTypes = function(nsName, iterator, trait) {

    var type = isBuiltIn(nsName.name) ? { name: nsName.name } : this.typeMap[nsName.name];

    var self = this;

    /**
     * Traverse the selected super type or trait
     *
     * @param {String} cls
     * @param {Boolean} [trait=false]
     */
    function traverse(cls, trait) {
      var parentNs = parseName$1(cls, isBuiltIn(cls) ? '' : nsName.prefix);
      self.mapTypes(parentNs, iterator, trait);
    }

    /**
     * Traverse the selected trait.
     *
     * @param {String} cls
     */
    function traverseTrait(cls) {
      return traverse(cls, true);
    }

    /**
     * Traverse the selected super type
     *
     * @param {String} cls
     */
    function traverseSuper(cls) {
      return traverse(cls, false);
    }

    if (!type) {
      throw new Error('unknown type <' + nsName.name + '>');
    }

    forEach$1(type.superClass, trait ? traverseTrait : traverseSuper);

    // call iterator with (type, inherited=!trait)
    iterator(type, !trait);

    forEach$1(type.traits, traverseTrait);
  };


  /**
   * Returns the effective descriptor for a type.
   *
   * @param  {String} type the namespaced name (ns:localName) of the type
   *
   * @return {Descriptor} the resulting effective descriptor
   */
  Registry.prototype.getEffectiveDescriptor = function(name) {

    var nsName = parseName$1(name);

    var builder = new DescriptorBuilder(nsName);

    this.mapTypes(nsName, function(type, inherited) {
      builder.addTrait(type, inherited);
    });

    var descriptor = builder.build();

    // define package link
    this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);

    return descriptor;
  };


  Registry.prototype.definePackage = function(target, pkg) {
    this.properties.define(target, '$pkg', { value: pkg });
  };



  // helpers ////////////////////////////

  function ensureAvailable(packageMap, pkg, identifierKey) {

    var value = pkg[identifierKey];

    if (value in packageMap) {
      throw new Error('package with ' + identifierKey + ' <' + value + '> already defined');
    }
  }

  /**
   * A utility that gets and sets properties of model elements.
   *
   * @param {Model} model
   */
  function Properties(model) {
    this.model = model;
  }


  /**
   * Sets a named property on the target element.
   * If the value is undefined, the property gets deleted.
   *
   * @param {Object} target
   * @param {String} name
   * @param {Object} value
   */
  Properties.prototype.set = function(target, name, value) {

    if (!isString(name) || !name.length) {
      throw new TypeError('property name must be a non-empty string');
    }

    var property = this.getProperty(target, name);

    var propertyName = property && property.name;

    if (isUndefined(value)) {

      // unset the property, if the specified value is undefined;
      // delete from $attrs (for extensions) or the target itself
      if (property) {
        delete target[propertyName];
      } else {
        delete target.$attrs[stripGlobal(name)];
      }
    } else {

      // set the property, defining well defined properties on the fly
      // or simply updating them in target.$attrs (for extensions)
      if (property) {
        if (propertyName in target) {
          target[propertyName] = value;
        } else {
          defineProperty(target, property, value);
        }
      } else {
        target.$attrs[stripGlobal(name)] = value;
      }
    }
  };

  /**
   * Returns the named property of the given element
   *
   * @param  {Object} target
   * @param  {String} name
   *
   * @return {Object}
   */
  Properties.prototype.get = function(target, name) {

    var property = this.getProperty(target, name);

    if (!property) {
      return target.$attrs[stripGlobal(name)];
    }

    var propertyName = property.name;

    // check if access to collection property and lazily initialize it
    if (!target[propertyName] && property.isMany) {
      defineProperty(target, property, []);
    }

    return target[propertyName];
  };


  /**
   * Define a property on the target element
   *
   * @param  {Object} target
   * @param  {String} name
   * @param  {Object} options
   */
  Properties.prototype.define = function(target, name, options) {

    if (!options.writable) {

      var value = options.value;

      // use getters for read-only variables to support ES6 proxies
      // cf. https://github.com/bpmn-io/internal-docs/issues/386
      options = assign$1({}, options, {
        get: function() { return value; }
      });

      delete options.value;
    }

    Object.defineProperty(target, name, options);
  };


  /**
   * Define the descriptor for an element
   */
  Properties.prototype.defineDescriptor = function(target, descriptor) {
    this.define(target, '$descriptor', { value: descriptor });
  };

  /**
   * Define the model for an element
   */
  Properties.prototype.defineModel = function(target, model) {
    this.define(target, '$model', { value: model });
  };

  /**
   * Return property with the given name on the element.
   *
   * @param {any} target
   * @param {string} name
   *
   * @return {object | null} property
   */
  Properties.prototype.getProperty = function(target, name) {

    var model = this.model;

    var property = model.getPropertyDescriptor(target, name);

    if (property) {
      return property;
    }

    if (name.includes(':')) {
      return null;
    }

    const strict = model.config.strict;

    if (typeof strict !== 'undefined') {
      const error = new TypeError(`unknown property <${ name }> on <${ target.$type }>`);

      if (strict) {
        throw error;
      } else {

        // eslint-disable-next-line no-undef
        typeof console !== 'undefined' && console.warn(error);
      }
    }

    return null;
  };

  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  function defineProperty(target, property, value) {
    Object.defineProperty(target, property.name, {
      enumerable: !property.isReference,
      writable: true,
      value: value,
      configurable: true
    });
  }

  function stripGlobal(name) {
    return name.replace(/^:/, '');
  }

  // Moddle implementation /////////////////////////////////////////////////

  /**
   * @class Moddle
   *
   * A model that can be used to create elements of a specific type.
   *
   * @example
   *
   * var Moddle = require('moddle');
   *
   * var pkg = {
   *   name: 'mypackage',
   *   prefix: 'my',
   *   types: [
   *     { name: 'Root' }
   *   ]
   * };
   *
   * var moddle = new Moddle([pkg]);
   *
   * @param {Array<Package>} packages the packages to contain
   *
   * @param { { strict?: boolean } } [config] moddle configuration
   */
  function Moddle(packages, config = {}) {

    this.properties = new Properties(this);

    this.factory = new Factory(this, this.properties);
    this.registry = new Registry(packages, this.properties);

    this.typeCache = {};

    this.config = config;
  }


  /**
   * Create an instance of the specified type.
   *
   * @method Moddle#create
   *
   * @example
   *
   * var foo = moddle.create('my:Foo');
   * var bar = moddle.create('my:Bar', { id: 'BAR_1' });
   *
   * @param  {String|Object} descriptor the type descriptor or name know to the model
   * @param  {Object} attrs   a number of attributes to initialize the model instance with
   * @return {Object}         model instance
   */
  Moddle.prototype.create = function(descriptor, attrs) {
    var Type = this.getType(descriptor);

    if (!Type) {
      throw new Error('unknown type <' + descriptor + '>');
    }

    return new Type(attrs);
  };


  /**
   * Returns the type representing a given descriptor
   *
   * @method Moddle#getType
   *
   * @example
   *
   * var Foo = moddle.getType('my:Foo');
   * var foo = new Foo({ 'id' : 'FOO_1' });
   *
   * @param  {String|Object} descriptor the type descriptor or name know to the model
   * @return {Object}         the type representing the descriptor
   */
  Moddle.prototype.getType = function(descriptor) {

    var cache = this.typeCache;

    var name = isString(descriptor) ? descriptor : descriptor.ns.name;

    var type = cache[name];

    if (!type) {
      descriptor = this.registry.getEffectiveDescriptor(name);
      type = cache[name] = this.factory.createType(descriptor);
    }

    return type;
  };


  /**
   * Creates an any-element type to be used within model instances.
   *
   * This can be used to create custom elements that lie outside the meta-model.
   * The created element contains all the meta-data required to serialize it
   * as part of meta-model elements.
   *
   * @method Moddle#createAny
   *
   * @example
   *
   * var foo = moddle.createAny('vendor:Foo', 'http://vendor', {
   *   value: 'bar'
   * });
   *
   * var container = moddle.create('my:Container', 'http://my', {
   *   any: [ foo ]
   * });
   *
   * // go ahead and serialize the stuff
   *
   *
   * @param  {String} name  the name of the element
   * @param  {String} nsUri the namespace uri of the element
   * @param  {Object} [properties] a map of properties to initialize the instance with
   * @return {Object} the any type instance
   */
  Moddle.prototype.createAny = function(name, nsUri, properties) {

    var nameNs = parseName$1(name);

    var element = {
      $type: name,
      $instanceOf: function(type) {
        return type === this.$type;
      },
      get: function(key) {
        return this[key];
      },
      set: function(key, value) {
        set$1(this, [ key ], value);
      }
    };

    var descriptor = {
      name: name,
      isGeneric: true,
      ns: {
        prefix: nameNs.prefix,
        localName: nameNs.localName,
        uri: nsUri
      }
    };

    this.properties.defineDescriptor(element, descriptor);
    this.properties.defineModel(element, this);
    this.properties.define(element, 'get', { enumerable: false, writable: true });
    this.properties.define(element, 'set', { enumerable: false, writable: true });
    this.properties.define(element, '$parent', { enumerable: false, writable: true });
    this.properties.define(element, '$instanceOf', { enumerable: false, writable: true });

    forEach$1(properties, function(a, key) {
      if (isObject(a) && a.value !== undefined) {
        element[a.name] = a.value;
      } else {
        element[key] = a;
      }
    });

    return element;
  };

  /**
   * Returns a registered package by uri or prefix
   *
   * @return {Object} the package
   */
  Moddle.prototype.getPackage = function(uriOrPrefix) {
    return this.registry.getPackage(uriOrPrefix);
  };

  /**
   * Returns a snapshot of all known packages
   *
   * @return {Object} the package
   */
  Moddle.prototype.getPackages = function() {
    return this.registry.getPackages();
  };

  /**
   * Returns the descriptor for an element
   */
  Moddle.prototype.getElementDescriptor = function(element) {
    return element.$descriptor;
  };

  /**
   * Returns true if the given descriptor or instance
   * represents the given type.
   *
   * May be applied to this, if element is omitted.
   */
  Moddle.prototype.hasType = function(element, type) {
    if (type === undefined) {
      type = element;
      element = this;
    }

    var descriptor = element.$model.getElementDescriptor(element);

    return (type in descriptor.allTypesByName);
  };

  /**
   * Returns the descriptor of an elements named property
   */
  Moddle.prototype.getPropertyDescriptor = function(element, property) {
    return this.getElementDescriptor(element).propertiesByName[property];
  };

  /**
   * Returns a mapped type's descriptor
   */
  Moddle.prototype.getTypeDescriptor = function(type) {
    return this.registry.typeMap[type];
  };

  var fromCharCode = String.fromCharCode;

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  var ENTITY_PATTERN = /&#(\d+);|&#x([0-9a-f]+);|&(\w+);/ig;

  var ENTITY_MAPPING = {
    'amp': '&',
    'apos': '\'',
    'gt': '>',
    'lt': '<',
    'quot': '"'
  };

  // map UPPERCASE variants of supported special chars
  Object.keys(ENTITY_MAPPING).forEach(function(k) {
    ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];
  });


  function replaceEntities(_, d, x, z) {

    // reserved names, i.e. &nbsp;
    if (z) {
      if (hasOwnProperty.call(ENTITY_MAPPING, z)) {
        return ENTITY_MAPPING[z];
      } else {

        // fall back to original value
        return '&' + z + ';';
      }
    }

    // decimal encoded char
    if (d) {
      return fromCharCode(d);
    }

    // hex encoded char
    return fromCharCode(parseInt(x, 16));
  }


  /**
   * A basic entity decoder that can decode a minimal
   * sub-set of reserved names (&amp;) as well as
   * hex (&#xaaf;) and decimal (&#1231;) encoded characters.
   *
   * @param {string} s
   *
   * @return {string} decoded string
   */
  function decodeEntities(s) {
    if (s.length > 3 && s.indexOf('&') !== -1) {
      return s.replace(ENTITY_PATTERN, replaceEntities);
    }

    return s;
  }

  var NON_WHITESPACE_OUTSIDE_ROOT_NODE = 'non-whitespace outside of root node';

  function error$2(msg) {
    return new Error(msg);
  }

  function missingNamespaceForPrefix(prefix) {
    return 'missing namespace for prefix <' + prefix + '>';
  }

  function getter(getFn) {
    return {
      'get': getFn,
      'enumerable': true
    };
  }

  function cloneNsMatrix(nsMatrix) {
    var clone = {}, key;
    for (key in nsMatrix) {
      clone[key] = nsMatrix[key];
    }
    return clone;
  }

  function uriPrefix(prefix) {
    return prefix + '$uri';
  }

  function buildNsMatrix(nsUriToPrefix) {
    var nsMatrix = {},
        uri,
        prefix;

    for (uri in nsUriToPrefix) {
      prefix = nsUriToPrefix[uri];
      nsMatrix[prefix] = prefix;
      nsMatrix[uriPrefix(prefix)] = uri;
    }

    return nsMatrix;
  }

  function noopGetContext() {
    return { line: 0, column: 0 };
  }

  function throwFunc(err) {
    throw err;
  }

  /**
   * Creates a new parser with the given options.
   *
   * @constructor
   *
   * @param  {!Object<string, ?>=} options
   */
  function Parser$1(options) {

    if (!this) {
      return new Parser$1(options);
    }

    var proxy = options && options['proxy'];

    var onText,
        onOpenTag,
        onCloseTag,
        onCDATA,
        onError = throwFunc,
        onWarning,
        onComment,
        onQuestion,
        onAttention;

    var getContext = noopGetContext;

    /**
     * Do we need to parse the current elements attributes for namespaces?
     *
     * @type {boolean}
     */
    var maybeNS = false;

    /**
     * Do we process namespaces at all?
     *
     * @type {boolean}
     */
    var isNamespace = false;

    /**
     * The caught error returned on parse end
     *
     * @type {Error}
     */
    var returnError = null;

    /**
     * Should we stop parsing?
     *
     * @type {boolean}
     */
    var parseStop = false;

    /**
     * A map of { uri: prefix } used by the parser.
     *
     * This map will ensure we can normalize prefixes during processing;
     * for each uri, only one prefix will be exposed to the handlers.
     *
     * @type {!Object<string, string>}}
     */
    var nsUriToPrefix;

    /**
     * Handle parse error.
     *
     * @param  {string|Error} err
     */
    function handleError(err) {
      if (!(err instanceof Error)) {
        err = error$2(err);
      }

      returnError = err;

      onError(err, getContext);
    }

    /**
     * Handle parse error.
     *
     * @param  {string|Error} err
     */
    function handleWarning(err) {

      if (!onWarning) {
        return;
      }

      if (!(err instanceof Error)) {
        err = error$2(err);
      }

      onWarning(err, getContext);
    }

    /**
     * Register parse listener.
     *
     * @param  {string}   name
     * @param  {Function} cb
     *
     * @return {Parser}
     */
    this['on'] = function(name, cb) {

      if (typeof cb !== 'function') {
        throw error$2('required args <name, cb>');
      }

      switch (name) {
      case 'openTag': onOpenTag = cb; break;
      case 'text': onText = cb; break;
      case 'closeTag': onCloseTag = cb; break;
      case 'error': onError = cb; break;
      case 'warn': onWarning = cb; break;
      case 'cdata': onCDATA = cb; break;
      case 'attention': onAttention = cb; break; // <!XXXXX zzzz="eeee">
      case 'question': onQuestion = cb; break; // <? ....  ?>
      case 'comment': onComment = cb; break;
      default:
        throw error$2('unsupported event: ' + name);
      }

      return this;
    };

    /**
     * Set the namespace to prefix mapping.
     *
     * @example
     *
     * parser.ns({
     *   'http://foo': 'foo',
     *   'http://bar': 'bar'
     * });
     *
     * @param  {!Object<string, string>} nsMap
     *
     * @return {Parser}
     */
    this['ns'] = function(nsMap) {

      if (typeof nsMap === 'undefined') {
        nsMap = {};
      }

      if (typeof nsMap !== 'object') {
        throw error$2('required args <nsMap={}>');
      }

      var _nsUriToPrefix = {}, k;

      for (k in nsMap) {
        _nsUriToPrefix[k] = nsMap[k];
      }

      isNamespace = true;
      nsUriToPrefix = _nsUriToPrefix;

      return this;
    };

    /**
     * Parse xml string.
     *
     * @param  {string} xml
     *
     * @return {Error} returnError, if not thrown
     */
    this['parse'] = function(xml) {
      if (typeof xml !== 'string') {
        throw error$2('required args <xml=string>');
      }

      returnError = null;

      parse(xml);

      getContext = noopGetContext;
      parseStop = false;

      return returnError;
    };

    /**
     * Stop parsing.
     */
    this['stop'] = function() {
      parseStop = true;
    };

    /**
     * Parse string, invoking configured listeners on element.
     *
     * @param  {string} xml
     */
    function parse(xml) {
      var nsMatrixStack = isNamespace ? [] : null,
          nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null,
          _nsMatrix,
          nodeStack = [],
          anonymousNsCount = 0,
          tagStart = false,
          tagEnd = false,
          i = 0, j = 0,
          x, y, q, w, v,
          xmlns,
          elementName,
          _elementName,
          elementProxy
          ;

      var attrsString = '',
          attrsStart = 0,
          cachedAttrs // false = parsed with errors, null = needs parsing
          ;

      /**
       * Parse attributes on demand and returns the parsed attributes.
       *
       * Return semantics: (1) `false` on attribute parse error,
       * (2) object hash on extracted attrs.
       *
       * @return {boolean|Object}
       */
      function getAttrs() {
        if (cachedAttrs !== null) {
          return cachedAttrs;
        }

        var nsUri,
            nsUriPrefix,
            nsName,
            defaultAlias = isNamespace && nsMatrix['xmlns'],
            attrList = isNamespace && maybeNS ? [] : null,
            i = attrsStart,
            s = attrsString,
            l = s.length,
            hasNewMatrix,
            newalias,
            value,
            alias,
            name,
            attrs = {},
            seenAttrs = {},
            skipAttr,
            w,
            j;

        parseAttr:
        for (; i < l; i++) {
          skipAttr = false;
          w = s.charCodeAt(i);

          if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE={ \f\n\r\t\v}
            continue;
          }

          // wait for non whitespace character
          if (w < 65 || w > 122 || (w > 90 && w < 97)) {
            if (w !== 95 && w !== 58) { // char 95"_" 58":"
              handleWarning('illegal first char attribute name');
              skipAttr = true;
            }
          }

          // parse attribute name
          for (j = i + 1; j < l; j++) {
            w = s.charCodeAt(j);

            if (
              w > 96 && w < 123 ||
              w > 64 && w < 91 ||
              w > 47 && w < 59 ||
              w === 46 || // '.'
              w === 45 || // '-'
              w === 95 // '_'
            ) {
              continue;
            }

            // unexpected whitespace
            if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
              handleWarning('missing attribute value');
              i = j;

              continue parseAttr;
            }

            // expected "="
            if (w === 61) { // "=" == 61
              break;
            }

            handleWarning('illegal attribute name char');
            skipAttr = true;
          }

          name = s.substring(i, j);

          if (name === 'xmlns:xmlns') {
            handleWarning('illegal declaration of xmlns');
            skipAttr = true;
          }

          w = s.charCodeAt(j + 1);

          if (w === 34) { // '"'
            j = s.indexOf('"', i = j + 2);

            if (j === -1) {
              j = s.indexOf('\'', i);

              if (j !== -1) {
                handleWarning('attribute value quote missmatch');
                skipAttr = true;
              }
            }

          } else if (w === 39) { // "'"
            j = s.indexOf('\'', i = j + 2);

            if (j === -1) {
              j = s.indexOf('"', i);

              if (j !== -1) {
                handleWarning('attribute value quote missmatch');
                skipAttr = true;
              }
            }

          } else {
            handleWarning('missing attribute value quotes');
            skipAttr = true;

            // skip to next space
            for (j = j + 1; j < l; j++) {
              w = s.charCodeAt(j + 1);

              if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
                break;
              }
            }

          }

          if (j === -1) {
            handleWarning('missing closing quotes');

            j = l;
            skipAttr = true;
          }

          if (!skipAttr) {
            value = s.substring(i, j);
          }

          i = j;

          // ensure SPACE follows attribute
          // skip illegal content otherwise
          // example a="b"c
          for (; j + 1 < l; j++) {
            w = s.charCodeAt(j + 1);

            if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
              break;
            }

            // FIRST ILLEGAL CHAR
            if (i === j) {
              handleWarning('illegal character after attribute end');
              skipAttr = true;
            }
          }

          // advance cursor to next attribute
          i = j + 1;

          if (skipAttr) {
            continue parseAttr;
          }

          // check attribute re-declaration
          if (name in seenAttrs) {
            handleWarning('attribute <' + name + '> already defined');
            continue;
          }

          seenAttrs[name] = true;

          if (!isNamespace) {
            attrs[name] = value;
            continue;
          }

          // try to extract namespace information
          if (maybeNS) {
            newalias = (
              name === 'xmlns'
                ? 'xmlns'
                : (name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:')
                  ? name.substr(6)
                  : null
            );

            // handle xmlns(:alias) assignment
            if (newalias !== null) {
              nsUri = decodeEntities(value);
              nsUriPrefix = uriPrefix(newalias);

              alias = nsUriToPrefix[nsUri];

              if (!alias) {

                // no prefix defined or prefix collision
                if (
                  (newalias === 'xmlns') ||
                  (nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri)
                ) {

                  // alocate free ns prefix
                  do {
                    alias = 'ns' + (anonymousNsCount++);
                  } while (typeof nsMatrix[alias] !== 'undefined');
                } else {
                  alias = newalias;
                }

                nsUriToPrefix[nsUri] = alias;
              }

              if (nsMatrix[newalias] !== alias) {
                if (!hasNewMatrix) {
                  nsMatrix = cloneNsMatrix(nsMatrix);
                  hasNewMatrix = true;
                }

                nsMatrix[newalias] = alias;
                if (newalias === 'xmlns') {
                  nsMatrix[uriPrefix(alias)] = nsUri;
                  defaultAlias = alias;
                }

                nsMatrix[nsUriPrefix] = nsUri;
              }

              // expose xmlns(:asd)="..." in attributes
              attrs[name] = value;
              continue;
            }

            // collect attributes until all namespace
            // declarations are processed
            attrList.push(name, value);
            continue;

          } /** end if (maybeNs) */

          // handle attributes on element without
          // namespace declarations
          w = name.indexOf(':');
          if (w === -1) {
            attrs[name] = value;
            continue;
          }

          // normalize ns attribute name
          if (!(nsName = nsMatrix[name.substring(0, w)])) {
            handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
            continue;
          }

          name = defaultAlias === nsName
            ? name.substr(w + 1)
            : nsName + name.substr(w);

          // end: normalize ns attribute name

          attrs[name] = value;
        }


        // handle deferred, possibly namespaced attributes
        if (maybeNS) {

          // normalize captured attributes
          for (i = 0, l = attrList.length; i < l; i++) {

            name = attrList[i++];
            value = attrList[i];

            w = name.indexOf(':');

            if (w !== -1) {

              // normalize ns attribute name
              if (!(nsName = nsMatrix[name.substring(0, w)])) {
                handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
                continue;
              }

              name = defaultAlias === nsName
                ? name.substr(w + 1)
                : nsName + name.substr(w);

              // end: normalize ns attribute name
            }

            attrs[name] = value;
          }

          // end: normalize captured attributes
        }

        return cachedAttrs = attrs;
      }

      /**
       * Extract the parse context { line, column, part }
       * from the current parser position.
       *
       * @return {Object} parse context
       */
      function getParseContext() {
        var splitsRe = /(\r\n|\r|\n)/g;

        var line = 0;
        var column = 0;
        var startOfLine = 0;
        var endOfLine = j;
        var match;
        var data;

        while (i >= startOfLine) {

          match = splitsRe.exec(xml);

          if (!match) {
            break;
          }

          // end of line = (break idx + break chars)
          endOfLine = match[0].length + match.index;

          if (endOfLine > i) {
            break;
          }

          // advance to next line
          line += 1;

          startOfLine = endOfLine;
        }

        // EOF errors
        if (i == -1) {
          column = endOfLine;
          data = xml.substring(j);
        } else

        // start errors
        if (j === 0) {
          data = xml.substring(j, i);
        }

        // other errors
        else {
          column = i - startOfLine;
          data = (j == -1 ? xml.substring(i) : xml.substring(i, j + 1));
        }

        return {
          'data': data,
          'line': line,
          'column': column
        };
      }

      getContext = getParseContext;


      if (proxy) {
        elementProxy = Object.create({}, {
          'name': getter(function() {
            return elementName;
          }),
          'originalName': getter(function() {
            return _elementName;
          }),
          'attrs': getter(getAttrs),
          'ns': getter(function() {
            return nsMatrix;
          })
        });
      }

      // actual parse logic
      while (j !== -1) {

        if (xml.charCodeAt(j) === 60) { // "<"
          i = j;
        } else {
          i = xml.indexOf('<', j);
        }

        // parse end
        if (i === -1) {
          if (nodeStack.length) {
            return handleError('unexpected end of file');
          }

          if (j === 0) {
            return handleError('missing start tag');
          }

          if (j < xml.length) {
            if (xml.substring(j).trim()) {
              handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
            }
          }

          return;
        }

        // parse text
        if (j !== i) {

          if (nodeStack.length) {
            if (onText) {
              onText(xml.substring(j, i), decodeEntities, getContext);

              if (parseStop) {
                return;
              }
            }
          } else {
            if (xml.substring(j, i).trim()) {
              handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);

              if (parseStop) {
                return;
              }
            }
          }
        }

        w = xml.charCodeAt(i + 1);

        // parse comments + CDATA
        if (w === 33) { // "!"
          q = xml.charCodeAt(i + 2);

          // CDATA section
          if (q === 91 && xml.substr(i + 3, 6) === 'CDATA[') { // 91 == "["
            j = xml.indexOf(']]>', i);
            if (j === -1) {
              return handleError('unclosed cdata');
            }

            if (onCDATA) {
              onCDATA(xml.substring(i + 9, j), getContext);
              if (parseStop) {
                return;
              }
            }

            j += 3;
            continue;
          }

          // comment
          if (q === 45 && xml.charCodeAt(i + 3) === 45) { // 45 == "-"
            j = xml.indexOf('-->', i);
            if (j === -1) {
              return handleError('unclosed comment');
            }


            if (onComment) {
              onComment(xml.substring(i + 4, j), decodeEntities, getContext);
              if (parseStop) {
                return;
              }
            }

            j += 3;
            continue;
          }
        }

        // parse question <? ... ?>
        if (w === 63) { // "?"
          j = xml.indexOf('?>', i);
          if (j === -1) {
            return handleError('unclosed question');
          }

          if (onQuestion) {
            onQuestion(xml.substring(i, j + 2), getContext);
            if (parseStop) {
              return;
            }
          }

          j += 2;
          continue;
        }

        // find matching closing tag for attention or standard tags
        // for that we must skip through attribute values
        // (enclosed in single or double quotes)
        for (x = i + 1; ; x++) {
          v = xml.charCodeAt(x);
          if (isNaN(v)) {
            j = -1;
            return handleError('unclosed tag');
          }

          // [10] AttValue ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"
          // skips the quoted string
          // (double quotes) does not appear in a literal enclosed by (double quotes)
          // (single quote) does not appear in a literal enclosed by (single quote)
          if (v === 34) { //  '"'
            q = xml.indexOf('"', x + 1);
            x = q !== -1 ? q : x;
          } else if (v === 39) { // "'"
            q = xml.indexOf("'", x + 1);
            x = q !== -1 ? q : x;
          } else if (v === 62) { // '>'
            j = x;
            break;
          }
        }


        // parse attention <! ...>
        // previously comment and CDATA have already been parsed
        if (w === 33) { // "!"

          if (onAttention) {
            onAttention(xml.substring(i, j + 1), decodeEntities, getContext);
            if (parseStop) {
              return;
            }
          }

          j += 1;
          continue;
        }

        // don't process attributes;
        // there are none
        cachedAttrs = {};

        // if (xml.charCodeAt(i+1) === 47) { // </...
        if (w === 47) { // </...
          tagStart = false;
          tagEnd = true;

          if (!nodeStack.length) {
            return handleError('missing open tag');
          }

          // verify open <-> close tag match
          x = elementName = nodeStack.pop();
          q = i + 2 + x.length;

          if (xml.substring(i + 2, q) !== x) {
            return handleError('closing tag mismatch');
          }

          // verify chars in close tag
          for (; q < j; q++) {
            w = xml.charCodeAt(q);

            if (w === 32 || (w > 8 && w < 14)) { // \f\n\r\t\v space
              continue;
            }

            return handleError('close tag');
          }

        } else {
          if (xml.charCodeAt(j - 1) === 47) { // .../>
            x = elementName = xml.substring(i + 1, j - 1);

            tagStart = true;
            tagEnd = true;

          } else {
            x = elementName = xml.substring(i + 1, j);

            tagStart = true;
            tagEnd = false;
          }

          if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) { // char 95"_" 58":"
            return handleError('illegal first char nodeName');
          }

          for (q = 1, y = x.length; q < y; q++) {
            w = x.charCodeAt(q);

            if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {
              continue;
            }

            if (w === 32 || (w < 14 && w > 8)) { // \f\n\r\t\v space
              elementName = x.substring(0, q);

              // maybe there are attributes
              cachedAttrs = null;
              break;
            }

            return handleError('invalid nodeName');
          }

          if (!tagEnd) {
            nodeStack.push(elementName);
          }
        }

        if (isNamespace) {

          _nsMatrix = nsMatrix;

          if (tagStart) {

            // remember old namespace
            // unless we're self-closing
            if (!tagEnd) {
              nsMatrixStack.push(_nsMatrix);
            }

            if (cachedAttrs === null) {

              // quick check, whether there may be namespace
              // declarations on the node; if that is the case
              // we need to eagerly parse the node attributes
              if ((maybeNS = x.indexOf('xmlns', q) !== -1)) {
                attrsStart = q;
                attrsString = x;

                getAttrs();

                maybeNS = false;
              }
            }
          }

          _elementName = elementName;

          w = elementName.indexOf(':');
          if (w !== -1) {
            xmlns = nsMatrix[elementName.substring(0, w)];

            // prefix given; namespace must exist
            if (!xmlns) {
              return handleError('missing namespace on <' + _elementName + '>');
            }

            elementName = elementName.substr(w + 1);
          } else {
            xmlns = nsMatrix['xmlns'];

            // if no default namespace is defined,
            // we'll import the element as anonymous.
            //
            // it is up to users to correct that to the document defined
            // targetNamespace, or whatever their undersanding of the
            // XML spec mandates.
          }

          // adjust namespace prefixs as configured
          if (xmlns) {
            elementName = xmlns + ':' + elementName;
          }

        }

        if (tagStart) {
          attrsStart = q;
          attrsString = x;

          if (onOpenTag) {
            if (proxy) {
              onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);
            } else {
              onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);
            }

            if (parseStop) {
              return;
            }
          }

        }

        if (tagEnd) {

          if (onCloseTag) {
            onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);

            if (parseStop) {
              return;
            }
          }

          // restore old namespace
          if (isNamespace) {
            if (!tagStart) {
              nsMatrix = nsMatrixStack.pop();
            } else {
              nsMatrix = _nsMatrix;
            }
          }
        }

        j += 1;
      }
    } /** end parse */

  }

  function hasLowerCaseAlias(pkg) {
    return pkg.xml && pkg.xml.tagAlias === 'lowerCase';
  }

  var DEFAULT_NS_MAP = {
    'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
    'xml': 'http://www.w3.org/XML/1998/namespace'
  };

  var SERIALIZE_PROPERTY = 'property';

  function getSerialization(element) {
    return element.xml && element.xml.serialize;
  }

  function getSerializationType(element) {
    const type = getSerialization(element);

    return type !== SERIALIZE_PROPERTY && (type || null);
  }

  function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  function aliasToName(aliasNs, pkg) {

    if (!hasLowerCaseAlias(pkg)) {
      return aliasNs.name;
    }

    return aliasNs.prefix + ':' + capitalize(aliasNs.localName);
  }

  /**
   * Un-prefix a potentially prefixed type name.
   *
   * @param {NsName} nameNs
   * @param {Object} [pkg]
   *
   * @return {string}
   */
  function prefixedToName(nameNs, pkg) {

    var name = nameNs.name,
        localName = nameNs.localName;

    var typePrefix = pkg && pkg.xml && pkg.xml.typePrefix;

    if (typePrefix && localName.indexOf(typePrefix) === 0) {
      return nameNs.prefix + ':' + localName.slice(typePrefix.length);
    } else {
      return name;
    }
  }

  function normalizeTypeName(name, nsMap, model) {

    // normalize against actual NS
    const nameNs = parseName$1(name, nsMap.xmlns);

    const normalizedName = `${ nsMap[nameNs.prefix] || nameNs.prefix }:${ nameNs.localName }`;

    const normalizedNameNs = parseName$1(normalizedName);

    // determine actual type name, based on package-defined prefix
    var pkg = model.getPackage(normalizedNameNs.prefix);

    return prefixedToName(normalizedNameNs, pkg);
  }

  function error$1(message) {
    return new Error(message);
  }

  /**
   * Get the moddle descriptor for a given instance or type.
   *
   * @param  {ModdleElement|Function} element
   *
   * @return {Object} the moddle descriptor
   */
  function getModdleDescriptor(element) {
    return element.$descriptor;
  }


  /**
   * A parse context.
   *
   * @class
   *
   * @param {Object} options
   * @param {ElementHandler} options.rootHandler the root handler for parsing a document
   * @param {boolean} [options.lax=false] whether or not to ignore invalid elements
   */
  function Context$1(options) {

    /**
     * @property {ElementHandler} rootHandler
     */

    /**
     * @property {Boolean} lax
     */

    assign$1(this, options);

    this.elementsById = {};
    this.references = [];
    this.warnings = [];

    /**
     * Add an unresolved reference.
     *
     * @param {Object} reference
     */
    this.addReference = function(reference) {
      this.references.push(reference);
    };

    /**
     * Add a processed element.
     *
     * @param {ModdleElement} element
     */
    this.addElement = function(element) {

      if (!element) {
        throw error$1('expected element');
      }

      var elementsById = this.elementsById;

      var descriptor = getModdleDescriptor(element);

      var idProperty = descriptor.idProperty,
          id;

      if (idProperty) {
        id = element.get(idProperty.name);

        if (id) {

          // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
          if (!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(id)) {
            throw new Error('illegal ID <' + id + '>');
          }

          if (elementsById[id]) {
            throw error$1('duplicate ID <' + id + '>');
          }

          elementsById[id] = element;
        }
      }
    };

    /**
     * Add an import warning.
     *
     * @param {Object} warning
     * @param {String} warning.message
     * @param {Error} [warning.error]
     */
    this.addWarning = function(warning) {
      this.warnings.push(warning);
    };
  }

  function BaseHandler() {}

  BaseHandler.prototype.handleEnd = function() {};
  BaseHandler.prototype.handleText = function() {};
  BaseHandler.prototype.handleNode = function() {};


  /**
   * A simple pass through handler that does nothing except for
   * ignoring all input it receives.
   *
   * This is used to ignore unknown elements and
   * attributes.
   */
  function NoopHandler() { }

  NoopHandler.prototype = Object.create(BaseHandler.prototype);

  NoopHandler.prototype.handleNode = function() {
    return this;
  };

  function BodyHandler() {}

  BodyHandler.prototype = Object.create(BaseHandler.prototype);

  BodyHandler.prototype.handleText = function(text) {
    this.body = (this.body || '') + text;
  };

  function ReferenceHandler(property, context) {
    this.property = property;
    this.context = context;
  }

  ReferenceHandler.prototype = Object.create(BodyHandler.prototype);

  ReferenceHandler.prototype.handleNode = function(node) {

    if (this.element) {
      throw error$1('expected no sub nodes');
    } else {
      this.element = this.createReference(node);
    }

    return this;
  };

  ReferenceHandler.prototype.handleEnd = function() {
    this.element.id = this.body;
  };

  ReferenceHandler.prototype.createReference = function(node) {
    return {
      property: this.property.ns.name,
      id: ''
    };
  };

  function ValueHandler(propertyDesc, element) {
    this.element = element;
    this.propertyDesc = propertyDesc;
  }

  ValueHandler.prototype = Object.create(BodyHandler.prototype);

  ValueHandler.prototype.handleEnd = function() {

    var value = this.body || '',
        element = this.element,
        propertyDesc = this.propertyDesc;

    value = coerceType(propertyDesc.type, value);

    if (propertyDesc.isMany) {
      element.get(propertyDesc.name).push(value);
    } else {
      element.set(propertyDesc.name, value);
    }
  };


  function BaseElementHandler() {}

  BaseElementHandler.prototype = Object.create(BodyHandler.prototype);

  BaseElementHandler.prototype.handleNode = function(node) {
    var parser = this,
        element = this.element;

    if (!element) {
      element = this.element = this.createElement(node);

      this.context.addElement(element);
    } else {
      parser = this.handleChild(node);
    }

    return parser;
  };

  /**
   * @class Reader.ElementHandler
   *
   */
  function ElementHandler(model, typeName, context) {
    this.model = model;
    this.type = model.getType(typeName);
    this.context = context;
  }

  ElementHandler.prototype = Object.create(BaseElementHandler.prototype);

  ElementHandler.prototype.addReference = function(reference) {
    this.context.addReference(reference);
  };

  ElementHandler.prototype.handleText = function(text) {

    var element = this.element,
        descriptor = getModdleDescriptor(element),
        bodyProperty = descriptor.bodyProperty;

    if (!bodyProperty) {
      throw error$1('unexpected body text <' + text + '>');
    }

    BodyHandler.prototype.handleText.call(this, text);
  };

  ElementHandler.prototype.handleEnd = function() {

    var value = this.body,
        element = this.element,
        descriptor = getModdleDescriptor(element),
        bodyProperty = descriptor.bodyProperty;

    if (bodyProperty && value !== undefined) {
      value = coerceType(bodyProperty.type, value);
      element.set(bodyProperty.name, value);
    }
  };

  /**
   * Create an instance of the model from the given node.
   *
   * @param  {Element} node the xml node
   */
  ElementHandler.prototype.createElement = function(node) {
    var attributes = node.attributes,
        Type = this.type,
        descriptor = getModdleDescriptor(Type),
        context = this.context,
        instance = new Type({}),
        model = this.model,
        propNameNs;

    forEach$1(attributes, function(value, name) {

      var prop = descriptor.propertiesByName[name],
          values;

      if (prop && prop.isReference) {

        if (!prop.isMany) {
          context.addReference({
            element: instance,
            property: prop.ns.name,
            id: value
          });
        } else {

          // IDREFS: parse references as whitespace-separated list
          values = value.split(' ');

          forEach$1(values, function(v) {
            context.addReference({
              element: instance,
              property: prop.ns.name,
              id: v
            });
          });
        }

      } else {
        if (prop) {
          value = coerceType(prop.type, value);
        } else if (name === 'xmlns') {
          name = ':' + name;
        } else {
          propNameNs = parseName$1(name, descriptor.ns.prefix);

          // check whether attribute is defined in a well-known namespace
          // if that is the case we emit a warning to indicate potential misuse
          if (model.getPackage(propNameNs.prefix)) {

            context.addWarning({
              message: 'unknown attribute <' + name + '>',
              element: instance,
              property: name,
              value: value
            });
          }
        }

        instance.set(name, value);
      }
    });

    return instance;
  };

  ElementHandler.prototype.getPropertyForNode = function(node) {

    var name = node.name;
    var nameNs = parseName$1(name);

    var type = this.type,
        model = this.model,
        descriptor = getModdleDescriptor(type);

    var propertyName = nameNs.name,
        property = descriptor.propertiesByName[propertyName];

    // search for properties by name first

    if (property && !property.isAttr) {

      const serializationType = getSerializationType(property);

      if (serializationType) {
        const elementTypeName = node.attributes[serializationType];

        // type is optional, if it does not exists the
        // default type is assumed
        if (elementTypeName) {

          // convert the prefix used to the mapped form, but also
          // take possible type prefixes from XML
          // into account, i.e.: xsi:type="t{ActualType}",
          const normalizedTypeName = normalizeTypeName(elementTypeName, node.ns, model);

          const elementType = model.getType(normalizedTypeName);

          return assign$1({}, property, {
            effectiveType: getModdleDescriptor(elementType).name
          });
        }
      }

      // search for properties by name first
      return property;
    }

    var pkg = model.getPackage(nameNs.prefix);

    if (pkg) {
      const elementTypeName = aliasToName(nameNs, pkg);
      const elementType = model.getType(elementTypeName);

      // search for collection members later
      property = find$1(descriptor.properties, function(p) {
        return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);
      });

      if (property) {
        return assign$1({}, property, {
          effectiveType: getModdleDescriptor(elementType).name
        });
      }
    } else {

      // parse unknown element (maybe extension)
      property = find$1(descriptor.properties, function(p) {
        return !p.isReference && !p.isAttribute && p.type === 'Element';
      });

      if (property) {
        return property;
      }
    }

    throw error$1('unrecognized element <' + nameNs.name + '>');
  };

  ElementHandler.prototype.toString = function() {
    return 'ElementDescriptor[' + getModdleDescriptor(this.type).name + ']';
  };

  ElementHandler.prototype.valueHandler = function(propertyDesc, element) {
    return new ValueHandler(propertyDesc, element);
  };

  ElementHandler.prototype.referenceHandler = function(propertyDesc) {
    return new ReferenceHandler(propertyDesc, this.context);
  };

  ElementHandler.prototype.handler = function(type) {
    if (type === 'Element') {
      return new GenericElementHandler(this.model, type, this.context);
    } else {
      return new ElementHandler(this.model, type, this.context);
    }
  };

  /**
   * Handle the child element parsing
   *
   * @param  {Element} node the xml node
   */
  ElementHandler.prototype.handleChild = function(node) {
    var propertyDesc, type, element, childHandler;

    propertyDesc = this.getPropertyForNode(node);
    element = this.element;

    type = propertyDesc.effectiveType || propertyDesc.type;

    if (isSimple(type)) {
      return this.valueHandler(propertyDesc, element);
    }

    if (propertyDesc.isReference) {
      childHandler = this.referenceHandler(propertyDesc).handleNode(node);
    } else {
      childHandler = this.handler(type).handleNode(node);
    }

    var newElement = childHandler.element;

    // child handles may decide to skip elements
    // by not returning anything
    if (newElement !== undefined) {

      if (propertyDesc.isMany) {
        element.get(propertyDesc.name).push(newElement);
      } else {
        element.set(propertyDesc.name, newElement);
      }

      if (propertyDesc.isReference) {
        assign$1(newElement, {
          element: element
        });

        this.context.addReference(newElement);
      } else {

        // establish child -> parent relationship
        newElement.$parent = element;
      }
    }

    return childHandler;
  };

  /**
   * An element handler that performs special validation
   * to ensure the node it gets initialized with matches
   * the handlers type (namespace wise).
   *
   * @param {Moddle} model
   * @param {String} typeName
   * @param {Context} context
   */
  function RootElementHandler(model, typeName, context) {
    ElementHandler.call(this, model, typeName, context);
  }

  RootElementHandler.prototype = Object.create(ElementHandler.prototype);

  RootElementHandler.prototype.createElement = function(node) {

    var name = node.name,
        nameNs = parseName$1(name),
        model = this.model,
        type = this.type,
        pkg = model.getPackage(nameNs.prefix),
        typeName = pkg && aliasToName(nameNs, pkg) || name;

    // verify the correct namespace if we parse
    // the first element in the handler tree
    //
    // this ensures we don't mistakenly import wrong namespace elements
    if (!type.hasType(typeName)) {
      throw error$1('unexpected element <' + node.originalName + '>');
    }

    return ElementHandler.prototype.createElement.call(this, node);
  };


  function GenericElementHandler(model, typeName, context) {
    this.model = model;
    this.context = context;
  }

  GenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);

  GenericElementHandler.prototype.createElement = function(node) {

    var name = node.name,
        ns = parseName$1(name),
        prefix = ns.prefix,
        uri = node.ns[prefix + '$uri'],
        attributes = node.attributes;

    return this.model.createAny(name, uri, attributes);
  };

  GenericElementHandler.prototype.handleChild = function(node) {

    var handler = new GenericElementHandler(this.model, 'Element', this.context).handleNode(node),
        element = this.element;

    var newElement = handler.element,
        children;

    if (newElement !== undefined) {
      children = element.$children = element.$children || [];
      children.push(newElement);

      // establish child -> parent relationship
      newElement.$parent = element;
    }

    return handler;
  };

  GenericElementHandler.prototype.handleEnd = function() {
    if (this.body) {
      this.element.$body = this.body;
    }
  };

  /**
   * A reader for a meta-model
   *
   * @param {Object} options
   * @param {Model} options.model used to read xml files
   * @param {Boolean} options.lax whether to make parse errors warnings
   */
  function Reader(options) {

    if (options instanceof Moddle) {
      options = {
        model: options
      };
    }

    assign$1(this, { lax: false }, options);
  }

  /**
   * The fromXML result.
   *
   * @typedef {Object} ParseResult
   *
   * @property {ModdleElement} rootElement
   * @property {Array<Object>} references
   * @property {Array<Error>} warnings
   * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
   */

  /**
   * The fromXML result.
   *
   * @typedef {Error} ParseError
   *
   * @property {Array<Error>} warnings
   */

  /**
   * Parse the given XML into a moddle document tree.
   *
   * @param {String} xml
   * @param {ElementHandler|Object} options or rootHandler
   *
   * @returns {Promise<ParseResult, ParseError>}
   */
  Reader.prototype.fromXML = function(xml, options, done) {

    var rootHandler = options.rootHandler;

    if (options instanceof ElementHandler) {

      // root handler passed via (xml, { rootHandler: ElementHandler }, ...)
      rootHandler = options;
      options = {};
    } else {
      if (typeof options === 'string') {

        // rootHandler passed via (xml, 'someString', ...)
        rootHandler = this.handler(options);
        options = {};
      } else if (typeof rootHandler === 'string') {

        // rootHandler passed via (xml, { rootHandler: 'someString' }, ...)
        rootHandler = this.handler(rootHandler);
      }
    }

    var model = this.model,
        lax = this.lax;

    var context = new Context$1(assign$1({}, options, { rootHandler: rootHandler })),
        parser = new Parser$1({ proxy: true }),
        stack = createStack();

    rootHandler.context = context;

    // push root handler
    stack.push(rootHandler);


    /**
     * Handle error.
     *
     * @param  {Error} err
     * @param  {Function} getContext
     * @param  {boolean} lax
     *
     * @return {boolean} true if handled
     */
    function handleError(err, getContext, lax) {

      var ctx = getContext();

      var line = ctx.line,
          column = ctx.column,
          data = ctx.data;

      // we receive the full context data here,
      // for elements trim down the information
      // to the tag name, only
      if (data.charAt(0) === '<' && data.indexOf(' ') !== -1) {
        data = data.slice(0, data.indexOf(' ')) + '>';
      }

      var message =
        'unparsable content ' + (data ? data + ' ' : '') + 'detected\n\t' +
          'line: ' + line + '\n\t' +
          'column: ' + column + '\n\t' +
          'nested error: ' + err.message;

      if (lax) {
        context.addWarning({
          message: message,
          error: err
        });

        return true;
      } else {
        throw error$1(message);
      }
    }

    function handleWarning(err, getContext) {

      // just like handling errors in <lax=true> mode
      return handleError(err, getContext, true);
    }

    /**
     * Resolve collected references on parse end.
     */
    function resolveReferences() {

      var elementsById = context.elementsById;
      var references = context.references;

      var i, r;

      for (i = 0; (r = references[i]); i++) {
        var element = r.element;
        var reference = elementsById[r.id];
        var property = getModdleDescriptor(element).propertiesByName[r.property];

        if (!reference) {
          context.addWarning({
            message: 'unresolved reference <' + r.id + '>',
            element: r.element,
            property: r.property,
            value: r.id
          });
        }

        if (property.isMany) {
          var collection = element.get(property.name),
              idx = collection.indexOf(r);

          // we replace an existing place holder (idx != -1) or
          // append to the collection instead
          if (idx === -1) {
            idx = collection.length;
          }

          if (!reference) {

            // remove unresolvable reference
            collection.splice(idx, 1);
          } else {

            // add or update reference in collection
            collection[idx] = reference;
          }
        } else {
          element.set(property.name, reference);
        }
      }
    }

    function handleClose() {
      stack.pop().handleEnd();
    }

    var PREAMBLE_START_PATTERN = /^<\?xml /i;

    var ENCODING_PATTERN = / encoding="([^"]+)"/i;

    var UTF_8_PATTERN = /^utf-8$/i;

    function handleQuestion(question) {

      if (!PREAMBLE_START_PATTERN.test(question)) {
        return;
      }

      var match = ENCODING_PATTERN.exec(question);
      var encoding = match && match[1];

      if (!encoding || UTF_8_PATTERN.test(encoding)) {
        return;
      }

      context.addWarning({
        message:
          'unsupported document encoding <' + encoding + '>, ' +
          'falling back to UTF-8'
      });
    }

    function handleOpen(node, getContext) {
      var handler = stack.peek();

      try {
        stack.push(handler.handleNode(node));
      } catch (err) {

        if (handleError(err, getContext, lax)) {
          stack.push(new NoopHandler());
        }
      }
    }

    function handleCData(text, getContext) {

      try {
        stack.peek().handleText(text);
      } catch (err) {
        handleWarning(err, getContext);
      }
    }

    function handleText(text, getContext) {

      // strip whitespace only nodes, i.e. before
      // <!CDATA[ ... ]> sections and in between tags

      if (!text.trim()) {
        return;
      }

      handleCData(text, getContext);
    }

    var uriMap = model.getPackages().reduce(function(uriMap, p) {
      uriMap[p.uri] = p.prefix;

      return uriMap;
    }, Object.entries(DEFAULT_NS_MAP).reduce(function(map, [ prefix, url ]) {
      map[url] = prefix;

      return map;
    }, model.config && model.config.nsMap || {}));

    parser
      .ns(uriMap)
      .on('openTag', function(obj, decodeStr, selfClosing, getContext) {

        // gracefully handle unparsable attributes (attrs=false)
        var attrs = obj.attrs || {};

        var decodedAttrs = Object.keys(attrs).reduce(function(d, key) {
          var value = decodeStr(attrs[key]);

          d[key] = value;

          return d;
        }, {});

        var node = {
          name: obj.name,
          originalName: obj.originalName,
          attributes: decodedAttrs,
          ns: obj.ns
        };

        handleOpen(node, getContext);
      })
      .on('question', handleQuestion)
      .on('closeTag', handleClose)
      .on('cdata', handleCData)
      .on('text', function(text, decodeEntities, getContext) {
        handleText(decodeEntities(text), getContext);
      })
      .on('error', handleError)
      .on('warn', handleWarning);

    // async XML parsing to make sure the execution environment
    // (node or brower) is kept responsive and that certain optimization
    // strategies can kick in.
    return new Promise(function(resolve, reject) {

      var err;

      try {
        parser.parse(xml);

        resolveReferences();
      } catch (e) {
        err = e;
      }

      var rootElement = rootHandler.element;

      if (!err && !rootElement) {
        err = error$1('failed to parse document as <' + rootHandler.type.$descriptor.name + '>');
      }

      var warnings = context.warnings;
      var references = context.references;
      var elementsById = context.elementsById;

      if (err) {
        err.warnings = warnings;

        return reject(err);
      } else {
        return resolve({
          rootElement: rootElement,
          elementsById: elementsById,
          references: references,
          warnings: warnings
        });
      }
    });
  };

  Reader.prototype.handler = function(name) {
    return new RootElementHandler(this.model, name);
  };


  // helpers //////////////////////////

  function createStack() {
    var stack = [];

    Object.defineProperty(stack, 'peek', {
      value: function() {
        return this[this.length - 1];
      }
    });

    return stack;
  }

  var XML_PREAMBLE = '<?xml version="1.0" encoding="UTF-8"?>\n';

  var ESCAPE_ATTR_CHARS = /<|>|'|"|&|\n\r|\n/g;
  var ESCAPE_CHARS = /<|>|&/g;


  function Namespaces(parent) {

    this.prefixMap = {};
    this.uriMap = {};
    this.used = {};

    this.wellknown = [];
    this.custom = [];
    this.parent = parent;

    this.defaultPrefixMap = parent && parent.defaultPrefixMap || {};
  }

  Namespaces.prototype.mapDefaultPrefixes = function(defaultPrefixMap) {
    this.defaultPrefixMap = defaultPrefixMap;
  };

  Namespaces.prototype.defaultUriByPrefix = function(prefix) {
    return this.defaultPrefixMap[prefix];
  };

  Namespaces.prototype.byUri = function(uri) {
    return this.uriMap[uri] || (
      this.parent && this.parent.byUri(uri)
    );
  };

  Namespaces.prototype.add = function(ns, isWellknown) {

    this.uriMap[ns.uri] = ns;

    if (isWellknown) {
      this.wellknown.push(ns);
    } else {
      this.custom.push(ns);
    }

    this.mapPrefix(ns.prefix, ns.uri);
  };

  Namespaces.prototype.uriByPrefix = function(prefix) {
    return this.prefixMap[prefix || 'xmlns'] || (
      this.parent && this.parent.uriByPrefix(prefix)
    );
  };

  Namespaces.prototype.mapPrefix = function(prefix, uri) {
    this.prefixMap[prefix || 'xmlns'] = uri;
  };

  Namespaces.prototype.getNSKey = function(ns) {
    return (ns.prefix !== undefined) ? (ns.uri + '|' + ns.prefix) : ns.uri;
  };

  Namespaces.prototype.logUsed = function(ns) {

    var uri = ns.uri;
    var nsKey = this.getNSKey(ns);

    this.used[nsKey] = this.byUri(uri);

    // Inform parent recursively about the usage of this NS
    if (this.parent) {
      this.parent.logUsed(ns);
    }
  };

  Namespaces.prototype.getUsed = function(ns) {

    var allNs = [].concat(this.wellknown, this.custom);

    return allNs.filter(ns => {
      var nsKey = this.getNSKey(ns);

      return this.used[nsKey];
    });
  };


  function lower(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
  }

  function nameToAlias(name, pkg) {
    if (hasLowerCaseAlias(pkg)) {
      return lower(name);
    } else {
      return name;
    }
  }

  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }

  function nsName(ns) {
    if (isString(ns)) {
      return ns;
    } else {
      return (ns.prefix ? ns.prefix + ':' : '') + ns.localName;
    }
  }

  function getNsAttrs(namespaces) {

    return namespaces.getUsed().filter(function(ns) {

      // do not serialize built in <xml> namespace
      return ns.prefix !== 'xml';
    }).map(function(ns) {
      var name = 'xmlns' + (ns.prefix ? ':' + ns.prefix : '');
      return { name: name, value: ns.uri };
    });

  }

  function getElementNs(ns, descriptor) {
    if (descriptor.isGeneric) {
      return assign$1({ localName: descriptor.ns.localName }, ns);
    } else {
      return assign$1({ localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg) }, ns);
    }
  }

  function getPropertyNs(ns, descriptor) {
    return assign$1({ localName: descriptor.ns.localName }, ns);
  }

  function getSerializableProperties(element) {
    var descriptor = element.$descriptor;

    return filter(descriptor.properties, function(p) {
      var name = p.name;

      if (p.isVirtual) {
        return false;
      }

      // do not serialize defaults
      if (!has$1(element, name)) {
        return false;
      }

      var value = element[name];

      // do not serialize default equals
      if (value === p.default) {
        return false;
      }

      // do not serialize null properties
      if (value === null) {
        return false;
      }

      return p.isMany ? value.length : true;
    });
  }

  var ESCAPE_ATTR_MAP = {
    '\n': '#10',
    '\n\r': '#10',
    '"': '#34',
    '\'': '#39',
    '<': '#60',
    '>': '#62',
    '&': '#38'
  };

  var ESCAPE_MAP = {
    '<': 'lt',
    '>': 'gt',
    '&': 'amp'
  };

  function escape(str, charPattern, replaceMap) {

    // ensure we are handling strings here
    str = isString(str) ? str : '' + str;

    return str.replace(charPattern, function(s) {
      return '&' + replaceMap[s] + ';';
    });
  }

  /**
   * Escape a string attribute to not contain any bad values (line breaks, '"', ...)
   *
   * @param {String} str the string to escape
   * @return {String} the escaped string
   */
  function escapeAttr(str) {
    return escape(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);
  }

  function escapeBody(str) {
    return escape(str, ESCAPE_CHARS, ESCAPE_MAP);
  }

  function filterAttributes(props) {
    return filter(props, function(p) { return p.isAttr; });
  }

  function filterContained(props) {
    return filter(props, function(p) { return !p.isAttr; });
  }


  function ReferenceSerializer(tagName) {
    this.tagName = tagName;
  }

  ReferenceSerializer.prototype.build = function(element) {
    this.element = element;
    return this;
  };

  ReferenceSerializer.prototype.serializeTo = function(writer) {
    writer
      .appendIndent()
      .append('<' + this.tagName + '>' + this.element.id + '</' + this.tagName + '>')
      .appendNewLine();
  };

  function BodySerializer() {}

  BodySerializer.prototype.serializeValue =
  BodySerializer.prototype.serializeTo = function(writer) {
    writer.append(
      this.escape
        ? escapeBody(this.value)
        : this.value
    );
  };

  BodySerializer.prototype.build = function(prop, value) {
    this.value = value;

    if (prop.type === 'String' && value.search(ESCAPE_CHARS) !== -1) {
      this.escape = true;
    }

    return this;
  };

  function ValueSerializer(tagName) {
    this.tagName = tagName;
  }

  inherits(ValueSerializer, BodySerializer);

  ValueSerializer.prototype.serializeTo = function(writer) {

    writer
      .appendIndent()
      .append('<' + this.tagName + '>');

    this.serializeValue(writer);

    writer
      .append('</' + this.tagName + '>')
      .appendNewLine();
  };

  function ElementSerializer(parent, propertyDescriptor) {
    this.body = [];
    this.attrs = [];

    this.parent = parent;
    this.propertyDescriptor = propertyDescriptor;
  }

  ElementSerializer.prototype.build = function(element) {
    this.element = element;

    var elementDescriptor = element.$descriptor,
        propertyDescriptor = this.propertyDescriptor;

    var otherAttrs,
        properties;

    var isGeneric = elementDescriptor.isGeneric;

    if (isGeneric) {
      otherAttrs = this.parseGenericNsAttributes(element);
    } else {
      otherAttrs = this.parseNsAttributes(element);
    }

    if (propertyDescriptor) {
      this.ns = this.nsPropertyTagName(propertyDescriptor);
    } else {
      this.ns = this.nsTagName(elementDescriptor);
    }

    // compute tag name
    this.tagName = this.addTagName(this.ns);

    if (isGeneric) {
      this.parseGenericContainments(element);
    } else {
      properties = getSerializableProperties(element);

      this.parseAttributes(filterAttributes(properties));
      this.parseContainments(filterContained(properties));
    }

    this.parseGenericAttributes(element, otherAttrs);

    return this;
  };

  ElementSerializer.prototype.nsTagName = function(descriptor) {
    var effectiveNs = this.logNamespaceUsed(descriptor.ns);
    return getElementNs(effectiveNs, descriptor);
  };

  ElementSerializer.prototype.nsPropertyTagName = function(descriptor) {
    var effectiveNs = this.logNamespaceUsed(descriptor.ns);
    return getPropertyNs(effectiveNs, descriptor);
  };

  ElementSerializer.prototype.isLocalNs = function(ns) {
    return ns.uri === this.ns.uri;
  };

  /**
   * Get the actual ns attribute name for the given element.
   *
   * @param {Object} element
   * @param {Boolean} [element.inherited=false]
   *
   * @return {Object} nsName
   */
  ElementSerializer.prototype.nsAttributeName = function(element) {

    var ns;

    if (isString(element)) {
      ns = parseName$1(element);
    } else {
      ns = element.ns;
    }

    // return just local name for inherited attributes
    if (element.inherited) {
      return { localName: ns.localName };
    }

    // parse + log effective ns
    var effectiveNs = this.logNamespaceUsed(ns);

    // LOG ACTUAL namespace use
    this.getNamespaces().logUsed(effectiveNs);

    // strip prefix if same namespace like parent
    if (this.isLocalNs(effectiveNs)) {
      return { localName: ns.localName };
    } else {
      return assign$1({ localName: ns.localName }, effectiveNs);
    }
  };

  ElementSerializer.prototype.parseGenericNsAttributes = function(element) {

    return Object.entries(element).filter(
      ([ key, value ]) => !key.startsWith('$') && this.parseNsAttribute(element, key, value)
    ).map(
      ([ key, value ]) => ({ name: key, value: value })
    );
  };

  ElementSerializer.prototype.parseGenericContainments = function(element) {
    var body = element.$body;

    if (body) {
      this.body.push(new BodySerializer().build({ type: 'String' }, body));
    }

    var children = element.$children;

    if (children) {
      forEach$1(children, child => {
        this.body.push(new ElementSerializer(this).build(child));
      });
    }
  };

  ElementSerializer.prototype.parseNsAttribute = function(element, name, value) {
    var model = element.$model;

    var nameNs = parseName$1(name);

    var ns;

    // parse xmlns:foo="http://foo.bar"
    if (nameNs.prefix === 'xmlns') {
      ns = { prefix: nameNs.localName, uri: value };
    }

    // parse xmlns="http://foo.bar"
    if (!nameNs.prefix && nameNs.localName === 'xmlns') {
      ns = { uri: value };
    }

    if (!ns) {
      return {
        name: name,
        value: value
      };
    }

    if (model && model.getPackage(value)) {

      // register well known namespace
      this.logNamespace(ns, true, true);
    } else {

      // log custom namespace directly as used
      var actualNs = this.logNamespaceUsed(ns, true);

      this.getNamespaces().logUsed(actualNs);
    }
  };


  /**
   * Parse namespaces and return a list of left over generic attributes
   *
   * @param  {Object} element
   * @return {Array<Object>}
   */
  ElementSerializer.prototype.parseNsAttributes = function(element) {
    var self = this;

    var genericAttrs = element.$attrs;

    var attributes = [];

    // parse namespace attributes first
    // and log them. push non namespace attributes to a list
    // and process them later
    forEach$1(genericAttrs, function(value, name) {

      var nonNsAttr = self.parseNsAttribute(element, name, value);

      if (nonNsAttr) {
        attributes.push(nonNsAttr);
      }
    });

    return attributes;
  };

  ElementSerializer.prototype.parseGenericAttributes = function(element, attributes) {

    var self = this;

    forEach$1(attributes, function(attr) {

      try {
        self.addAttribute(self.nsAttributeName(attr.name), attr.value);
      } catch (e) {

        // eslint-disable-next-line no-undef
        typeof console !== 'undefined' && console.warn(
          `missing namespace information for <${
          attr.name
        }=${ attr.value }> on`, element, e
        );
      }
    });
  };

  ElementSerializer.prototype.parseContainments = function(properties) {

    var self = this,
        body = this.body,
        element = this.element;

    forEach$1(properties, function(p) {
      var value = element.get(p.name),
          isReference = p.isReference,
          isMany = p.isMany;

      if (!isMany) {
        value = [ value ];
      }

      if (p.isBody) {
        body.push(new BodySerializer().build(p, value[0]));
      } else if (isSimple(p.type)) {
        forEach$1(value, function(v) {
          body.push(new ValueSerializer(self.addTagName(self.nsPropertyTagName(p))).build(p, v));
        });
      } else if (isReference) {
        forEach$1(value, function(v) {
          body.push(new ReferenceSerializer(self.addTagName(self.nsPropertyTagName(p))).build(v));
        });
      } else {

        // allow serialization via type
        // rather than element name
        var serialization = getSerialization(p);

        forEach$1(value, function(v) {
          var serializer;

          if (serialization) {
            if (serialization === SERIALIZE_PROPERTY) {
              serializer = new ElementSerializer(self, p);
            } else {
              serializer = new TypeSerializer(self, p, serialization);
            }
          } else {
            serializer = new ElementSerializer(self);
          }

          body.push(serializer.build(v));
        });
      }
    });
  };

  ElementSerializer.prototype.getNamespaces = function(local) {

    var namespaces = this.namespaces,
        parent = this.parent,
        parentNamespaces;

    if (!namespaces) {
      parentNamespaces = parent && parent.getNamespaces();

      if (local || !parentNamespaces) {
        this.namespaces = namespaces = new Namespaces(parentNamespaces);
      } else {
        namespaces = parentNamespaces;
      }
    }

    return namespaces;
  };

  ElementSerializer.prototype.logNamespace = function(ns, wellknown, local) {
    var namespaces = this.getNamespaces(local);

    var nsUri = ns.uri,
        nsPrefix = ns.prefix;

    var existing = namespaces.byUri(nsUri);

    if (!existing || local) {
      namespaces.add(ns, wellknown);
    }

    namespaces.mapPrefix(nsPrefix, nsUri);

    return ns;
  };

  ElementSerializer.prototype.logNamespaceUsed = function(ns, local) {
    var namespaces = this.getNamespaces(local);

    // ns may be
    //
    //   * prefix only
    //   * prefix:uri
    //   * localName only

    var prefix = ns.prefix,
        uri = ns.uri,
        newPrefix, idx,
        wellknownUri;

    // handle anonymous namespaces (elementForm=unqualified), cf. #23
    if (!prefix && !uri) {
      return { localName: ns.localName };
    }

    wellknownUri = namespaces.defaultUriByPrefix(prefix);

    uri = uri || wellknownUri || namespaces.uriByPrefix(prefix);

    if (!uri) {
      throw new Error('no namespace uri given for prefix <' + prefix + '>');
    }

    ns = namespaces.byUri(uri);

    // register new default prefix <xmlns> in local scope
    if (!ns && !prefix) {
      ns = this.logNamespace({ uri }, wellknownUri === uri, true);
    }

    if (!ns) {
      newPrefix = prefix;
      idx = 1;

      // find a prefix that is not mapped yet
      while (namespaces.uriByPrefix(newPrefix)) {
        newPrefix = prefix + '_' + idx++;
      }

      ns = this.logNamespace({ prefix: newPrefix, uri: uri }, wellknownUri === uri);
    }

    if (prefix) {
      namespaces.mapPrefix(prefix, uri);
    }

    return ns;
  };

  ElementSerializer.prototype.parseAttributes = function(properties) {
    var self = this,
        element = this.element;

    forEach$1(properties, function(p) {

      var value = element.get(p.name);

      if (p.isReference) {

        if (!p.isMany) {
          value = value.id;
        } else {
          var values = [];
          forEach$1(value, function(v) {
            values.push(v.id);
          });

          // IDREFS is a whitespace-separated list of references.
          value = values.join(' ');
        }

      }

      self.addAttribute(self.nsAttributeName(p), value);
    });
  };

  ElementSerializer.prototype.addTagName = function(nsTagName) {
    var actualNs = this.logNamespaceUsed(nsTagName);

    this.getNamespaces().logUsed(actualNs);

    return nsName(nsTagName);
  };

  ElementSerializer.prototype.addAttribute = function(name, value) {
    var attrs = this.attrs;

    if (isString(value)) {
      value = escapeAttr(value);
    }

    // de-duplicate attributes
    // https://github.com/bpmn-io/moddle-xml/issues/66
    var idx = findIndex(attrs, function(element) {
      return (
        element.name.localName === name.localName &&
        element.name.uri === name.uri &&
        element.name.prefix === name.prefix
      );
    });

    var attr = { name: name, value: value };

    if (idx !== -1) {
      attrs.splice(idx, 1, attr);
    } else {
      attrs.push(attr);
    }
  };

  ElementSerializer.prototype.serializeAttributes = function(writer) {
    var attrs = this.attrs,
        namespaces = this.namespaces;

    if (namespaces) {
      attrs = getNsAttrs(namespaces).concat(attrs);
    }

    forEach$1(attrs, function(a) {
      writer
        .append(' ')
        .append(nsName(a.name)).append('="').append(a.value).append('"');
    });
  };

  ElementSerializer.prototype.serializeTo = function(writer) {
    var firstBody = this.body[0],
        indent = firstBody && firstBody.constructor !== BodySerializer;

    writer
      .appendIndent()
      .append('<' + this.tagName);

    this.serializeAttributes(writer);

    writer.append(firstBody ? '>' : ' />');

    if (firstBody) {

      if (indent) {
        writer
          .appendNewLine()
          .indent();
      }

      forEach$1(this.body, function(b) {
        b.serializeTo(writer);
      });

      if (indent) {
        writer
          .unindent()
          .appendIndent();
      }

      writer.append('</' + this.tagName + '>');
    }

    writer.appendNewLine();
  };

  /**
   * A serializer for types that handles serialization of data types
   */
  function TypeSerializer(parent, propertyDescriptor, serialization) {
    ElementSerializer.call(this, parent, propertyDescriptor);

    this.serialization = serialization;
  }

  inherits(TypeSerializer, ElementSerializer);

  TypeSerializer.prototype.parseNsAttributes = function(element) {

    // extracted attributes with serialization attribute
    // <type=typeName> stripped; it may be later
    var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element).filter(
      attr => attr.name !== this.serialization
    );

    var descriptor = element.$descriptor;

    // only serialize <type=typeName> if necessary
    if (descriptor.name === this.propertyDescriptor.type) {
      return attributes;
    }

    var typeNs = this.typeNs = this.nsTagName(descriptor);
    this.getNamespaces().logUsed(this.typeNs);

    // add xsi:type attribute to represent the elements
    // actual type

    var pkg = element.$model.getPackage(typeNs.uri),
        typePrefix = (pkg.xml && pkg.xml.typePrefix) || '';

    this.addAttribute(
      this.nsAttributeName(this.serialization),
      (typeNs.prefix ? typeNs.prefix + ':' : '') + typePrefix + descriptor.ns.localName
    );

    return attributes;
  };

  TypeSerializer.prototype.isLocalNs = function(ns) {
    return ns.uri === (this.typeNs || this.ns).uri;
  };

  function SavingWriter() {
    this.value = '';

    this.write = function(str) {
      this.value += str;
    };
  }

  function FormatingWriter(out, format) {

    var indent = [ '' ];

    this.append = function(str) {
      out.write(str);

      return this;
    };

    this.appendNewLine = function() {
      if (format) {
        out.write('\n');
      }

      return this;
    };

    this.appendIndent = function() {
      if (format) {
        out.write(indent.join('  '));
      }

      return this;
    };

    this.indent = function() {
      indent.push('');
      return this;
    };

    this.unindent = function() {
      indent.pop();
      return this;
    };
  }

  /**
   * A writer for meta-model backed document trees
   *
   * @param {Object} options output options to pass into the writer
   */
  function Writer(options) {

    options = assign$1({ format: false, preamble: true }, options || {});

    function toXML(tree, writer) {
      var internalWriter = writer || new SavingWriter();
      var formatingWriter = new FormatingWriter(internalWriter, options.format);

      if (options.preamble) {
        formatingWriter.append(XML_PREAMBLE);
      }

      var serializer = new ElementSerializer();

      var model = tree.$model;

      serializer.getNamespaces().mapDefaultPrefixes(getDefaultPrefixMappings(model));

      serializer.build(tree).serializeTo(formatingWriter);

      if (!writer) {
        return internalWriter.value;
      }
    }

    return {
      toXML: toXML
    };
  }


  // helpers ///////////

  /**
   * @param {Moddle} model
   *
   * @return { Record<string, string> } map from prefix to URI
   */
  function getDefaultPrefixMappings(model) {

    const nsMap = model.config && model.config.nsMap || {};

    const prefixMap = {};

    // { prefix -> uri }
    for (const prefix in DEFAULT_NS_MAP) {
      prefixMap[prefix] = DEFAULT_NS_MAP[prefix];
    }

    // { uri -> prefix }
    for (const uri in nsMap) {
      const prefix = nsMap[uri];

      prefixMap[prefix] = uri;
    }

    for (const pkg of model.getPackages()) {
      prefixMap[pkg.prefix] = pkg.uri;
    }

    return prefixMap;
  }

  /**
   * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.
   *
   * @class BpmnModdle
   * @extends Moddle
   *
   * @param {Object|Array} packages to use for instantiating the model
   * @param {Object} [options] additional options to pass over
   */
  function BpmnModdle(packages, options) {
    Moddle.call(this, packages, options);
  }

  BpmnModdle.prototype = Object.create(Moddle.prototype);

  /**
   * The fromXML result.
   *
   * @typedef {Object} ParseResult
   *
   * @property {ModdleElement} rootElement
   * @property {Array<Object>} references
   * @property {Array<Error>} warnings
   * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
   */

  /**
   * The fromXML error.
   *
   * @typedef {Error} ParseError
   *
   * @property {Array<Error>} warnings
   */

  /**
   * Instantiates a BPMN model tree from a given xml string.
   *
   * @param {String}   xmlStr
   * @param {String}   [typeName='bpmn:Definitions'] name of the root element
   * @param {Object}   [options]  options to pass to the underlying reader
   *
   * @returns {Promise<ParseResult, ParseError>}
   */
  BpmnModdle.prototype.fromXML = function(xmlStr, typeName, options) {

    if (!isString(typeName)) {
      options = typeName;
      typeName = 'bpmn:Definitions';
    }

    var reader = new Reader(assign$1({ model: this, lax: true }, options));
    var rootHandler = reader.handler(typeName);

    return reader.fromXML(xmlStr, rootHandler);
  };


  /**
   * The toXML result.
   *
   * @typedef {Object} SerializationResult
   *
   * @property {String} xml
   */

  /**
   * Serializes a BPMN 2.0 object tree to XML.
   *
   * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`
   * @param {Object}   [options]  to pass to the underlying writer
   *
   * @returns {Promise<SerializationResult, Error>}
   */
  BpmnModdle.prototype.toXML = function(element, options) {

    var writer = new Writer(options);

    return new Promise(function(resolve, reject) {
      try {
        var result = writer.toXML(element);

        return resolve({
          xml: result
        });
      } catch (err) {
        return reject(err);
      }
    });
  };

  var name$5 = "BPMN20";
  var uri$5 = "http://www.omg.org/spec/BPMN/20100524/MODEL";
  var prefix$5 = "bpmn";
  var associations$5 = [
  ];
  var types$5 = [
  	{
  		name: "Interface",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "operations",
  				type: "Operation",
  				isMany: true
  			},
  			{
  				name: "implementationRef",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Operation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "inMessageRef",
  				type: "Message",
  				isReference: true
  			},
  			{
  				name: "outMessageRef",
  				type: "Message",
  				isReference: true
  			},
  			{
  				name: "errorRef",
  				type: "Error",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "implementationRef",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "EndPoint",
  		superClass: [
  			"RootElement"
  		]
  	},
  	{
  		name: "Auditing",
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "GlobalTask",
  		superClass: [
  			"CallableElement"
  		],
  		properties: [
  			{
  				name: "resources",
  				type: "ResourceRole",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "Monitoring",
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "Performer",
  		superClass: [
  			"ResourceRole"
  		]
  	},
  	{
  		name: "Process",
  		superClass: [
  			"FlowElementsContainer",
  			"CallableElement"
  		],
  		properties: [
  			{
  				name: "processType",
  				type: "ProcessType",
  				isAttr: true
  			},
  			{
  				name: "isClosed",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "auditing",
  				type: "Auditing"
  			},
  			{
  				name: "monitoring",
  				type: "Monitoring"
  			},
  			{
  				name: "properties",
  				type: "Property",
  				isMany: true
  			},
  			{
  				name: "laneSets",
  				isMany: true,
  				replaces: "FlowElementsContainer#laneSets",
  				type: "LaneSet"
  			},
  			{
  				name: "flowElements",
  				isMany: true,
  				replaces: "FlowElementsContainer#flowElements",
  				type: "FlowElement"
  			},
  			{
  				name: "artifacts",
  				type: "Artifact",
  				isMany: true
  			},
  			{
  				name: "resources",
  				type: "ResourceRole",
  				isMany: true
  			},
  			{
  				name: "correlationSubscriptions",
  				type: "CorrelationSubscription",
  				isMany: true
  			},
  			{
  				name: "supports",
  				type: "Process",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "definitionalCollaborationRef",
  				type: "Collaboration",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "isExecutable",
  				isAttr: true,
  				type: "Boolean"
  			}
  		]
  	},
  	{
  		name: "LaneSet",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "lanes",
  				type: "Lane",
  				isMany: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Lane",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "partitionElementRef",
  				type: "BaseElement",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "partitionElement",
  				type: "BaseElement"
  			},
  			{
  				name: "flowNodeRef",
  				type: "FlowNode",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "childLaneSet",
  				type: "LaneSet",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		]
  	},
  	{
  		name: "GlobalManualTask",
  		superClass: [
  			"GlobalTask"
  		]
  	},
  	{
  		name: "ManualTask",
  		superClass: [
  			"Task"
  		]
  	},
  	{
  		name: "UserTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "renderings",
  				type: "Rendering",
  				isMany: true
  			},
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Rendering",
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "HumanPerformer",
  		superClass: [
  			"Performer"
  		]
  	},
  	{
  		name: "PotentialOwner",
  		superClass: [
  			"HumanPerformer"
  		]
  	},
  	{
  		name: "GlobalUserTask",
  		superClass: [
  			"GlobalTask"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "renderings",
  				type: "Rendering",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "Gateway",
  		isAbstract: true,
  		superClass: [
  			"FlowNode"
  		],
  		properties: [
  			{
  				name: "gatewayDirection",
  				type: "GatewayDirection",
  				"default": "Unspecified",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "EventBasedGateway",
  		superClass: [
  			"Gateway"
  		],
  		properties: [
  			{
  				name: "instantiate",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "eventGatewayType",
  				type: "EventBasedGatewayType",
  				isAttr: true,
  				"default": "Exclusive"
  			}
  		]
  	},
  	{
  		name: "ComplexGateway",
  		superClass: [
  			"Gateway"
  		],
  		properties: [
  			{
  				name: "activationCondition",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "default",
  				type: "SequenceFlow",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ExclusiveGateway",
  		superClass: [
  			"Gateway"
  		],
  		properties: [
  			{
  				name: "default",
  				type: "SequenceFlow",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "InclusiveGateway",
  		superClass: [
  			"Gateway"
  		],
  		properties: [
  			{
  				name: "default",
  				type: "SequenceFlow",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ParallelGateway",
  		superClass: [
  			"Gateway"
  		]
  	},
  	{
  		name: "RootElement",
  		isAbstract: true,
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "Relationship",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "type",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "direction",
  				type: "RelationshipDirection",
  				isAttr: true
  			},
  			{
  				name: "source",
  				isMany: true,
  				isReference: true,
  				type: "Element"
  			},
  			{
  				name: "target",
  				isMany: true,
  				isReference: true,
  				type: "Element"
  			}
  		]
  	},
  	{
  		name: "BaseElement",
  		isAbstract: true,
  		properties: [
  			{
  				name: "id",
  				isAttr: true,
  				type: "String",
  				isId: true
  			},
  			{
  				name: "documentation",
  				type: "Documentation",
  				isMany: true
  			},
  			{
  				name: "extensionDefinitions",
  				type: "ExtensionDefinition",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "extensionElements",
  				type: "ExtensionElements"
  			}
  		]
  	},
  	{
  		name: "Extension",
  		properties: [
  			{
  				name: "mustUnderstand",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "definition",
  				type: "ExtensionDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ExtensionDefinition",
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "extensionAttributeDefinitions",
  				type: "ExtensionAttributeDefinition",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "ExtensionAttributeDefinition",
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "type",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isReference",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "extensionDefinition",
  				type: "ExtensionDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ExtensionElements",
  		properties: [
  			{
  				name: "valueRef",
  				isAttr: true,
  				isReference: true,
  				type: "Element"
  			},
  			{
  				name: "values",
  				type: "Element",
  				isMany: true
  			},
  			{
  				name: "extensionAttributeDefinition",
  				type: "ExtensionAttributeDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Documentation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "text",
  				type: "String",
  				isBody: true
  			},
  			{
  				name: "textFormat",
  				"default": "text/plain",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Event",
  		isAbstract: true,
  		superClass: [
  			"FlowNode",
  			"InteractionNode"
  		],
  		properties: [
  			{
  				name: "properties",
  				type: "Property",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "IntermediateCatchEvent",
  		superClass: [
  			"CatchEvent"
  		]
  	},
  	{
  		name: "IntermediateThrowEvent",
  		superClass: [
  			"ThrowEvent"
  		]
  	},
  	{
  		name: "EndEvent",
  		superClass: [
  			"ThrowEvent"
  		]
  	},
  	{
  		name: "StartEvent",
  		superClass: [
  			"CatchEvent"
  		],
  		properties: [
  			{
  				name: "isInterrupting",
  				"default": true,
  				isAttr: true,
  				type: "Boolean"
  			}
  		]
  	},
  	{
  		name: "ThrowEvent",
  		isAbstract: true,
  		superClass: [
  			"Event"
  		],
  		properties: [
  			{
  				name: "dataInputs",
  				type: "DataInput",
  				isMany: true
  			},
  			{
  				name: "dataInputAssociations",
  				type: "DataInputAssociation",
  				isMany: true
  			},
  			{
  				name: "inputSet",
  				type: "InputSet"
  			},
  			{
  				name: "eventDefinitions",
  				type: "EventDefinition",
  				isMany: true
  			},
  			{
  				name: "eventDefinitionRef",
  				type: "EventDefinition",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CatchEvent",
  		isAbstract: true,
  		superClass: [
  			"Event"
  		],
  		properties: [
  			{
  				name: "parallelMultiple",
  				isAttr: true,
  				type: "Boolean",
  				"default": false
  			},
  			{
  				name: "dataOutputs",
  				type: "DataOutput",
  				isMany: true
  			},
  			{
  				name: "dataOutputAssociations",
  				type: "DataOutputAssociation",
  				isMany: true
  			},
  			{
  				name: "outputSet",
  				type: "OutputSet"
  			},
  			{
  				name: "eventDefinitions",
  				type: "EventDefinition",
  				isMany: true
  			},
  			{
  				name: "eventDefinitionRef",
  				type: "EventDefinition",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "BoundaryEvent",
  		superClass: [
  			"CatchEvent"
  		],
  		properties: [
  			{
  				name: "cancelActivity",
  				"default": true,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "attachedToRef",
  				type: "Activity",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "EventDefinition",
  		isAbstract: true,
  		superClass: [
  			"RootElement"
  		]
  	},
  	{
  		name: "CancelEventDefinition",
  		superClass: [
  			"EventDefinition"
  		]
  	},
  	{
  		name: "ErrorEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "errorRef",
  				type: "Error",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "TerminateEventDefinition",
  		superClass: [
  			"EventDefinition"
  		]
  	},
  	{
  		name: "EscalationEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "escalationRef",
  				type: "Escalation",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Escalation",
  		properties: [
  			{
  				name: "structureRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "escalationCode",
  				isAttr: true,
  				type: "String"
  			}
  		],
  		superClass: [
  			"RootElement"
  		]
  	},
  	{
  		name: "CompensateEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "waitForCompletion",
  				isAttr: true,
  				type: "Boolean",
  				"default": true
  			},
  			{
  				name: "activityRef",
  				type: "Activity",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "TimerEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "timeDate",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "timeCycle",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "timeDuration",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		]
  	},
  	{
  		name: "LinkEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "target",
  				type: "LinkEventDefinition",
  				isReference: true
  			},
  			{
  				name: "source",
  				type: "LinkEventDefinition",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "MessageEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "messageRef",
  				type: "Message",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "operationRef",
  				type: "Operation",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ConditionalEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "condition",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		]
  	},
  	{
  		name: "SignalEventDefinition",
  		superClass: [
  			"EventDefinition"
  		],
  		properties: [
  			{
  				name: "signalRef",
  				type: "Signal",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Signal",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "structureRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ImplicitThrowEvent",
  		superClass: [
  			"ThrowEvent"
  		]
  	},
  	{
  		name: "DataState",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ItemAwareElement",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "itemSubjectRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "dataState",
  				type: "DataState"
  			}
  		]
  	},
  	{
  		name: "DataAssociation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "sourceRef",
  				type: "ItemAwareElement",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "targetRef",
  				type: "ItemAwareElement",
  				isReference: true
  			},
  			{
  				name: "transformation",
  				type: "FormalExpression",
  				xml: {
  					serialize: "property"
  				}
  			},
  			{
  				name: "assignment",
  				type: "Assignment",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "DataInput",
  		superClass: [
  			"ItemAwareElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isCollection",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "inputSetRef",
  				type: "InputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "inputSetWithOptional",
  				type: "InputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "inputSetWithWhileExecuting",
  				type: "InputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "DataOutput",
  		superClass: [
  			"ItemAwareElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isCollection",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "outputSetRef",
  				type: "OutputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "outputSetWithOptional",
  				type: "OutputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "outputSetWithWhileExecuting",
  				type: "OutputSet",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "InputSet",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "dataInputRefs",
  				type: "DataInput",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "optionalInputRefs",
  				type: "DataInput",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "whileExecutingInputRefs",
  				type: "DataInput",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "outputSetRefs",
  				type: "OutputSet",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "OutputSet",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "dataOutputRefs",
  				type: "DataOutput",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "inputSetRefs",
  				type: "InputSet",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "optionalOutputRefs",
  				type: "DataOutput",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "whileExecutingOutputRefs",
  				type: "DataOutput",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Property",
  		superClass: [
  			"ItemAwareElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "DataInputAssociation",
  		superClass: [
  			"DataAssociation"
  		]
  	},
  	{
  		name: "DataOutputAssociation",
  		superClass: [
  			"DataAssociation"
  		]
  	},
  	{
  		name: "InputOutputSpecification",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "dataInputs",
  				type: "DataInput",
  				isMany: true
  			},
  			{
  				name: "dataOutputs",
  				type: "DataOutput",
  				isMany: true
  			},
  			{
  				name: "inputSets",
  				type: "InputSet",
  				isMany: true
  			},
  			{
  				name: "outputSets",
  				type: "OutputSet",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "DataObject",
  		superClass: [
  			"FlowElement",
  			"ItemAwareElement"
  		],
  		properties: [
  			{
  				name: "isCollection",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			}
  		]
  	},
  	{
  		name: "InputOutputBinding",
  		properties: [
  			{
  				name: "inputDataRef",
  				type: "InputSet",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "outputDataRef",
  				type: "OutputSet",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "operationRef",
  				type: "Operation",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Assignment",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "from",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "to",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		]
  	},
  	{
  		name: "DataStore",
  		superClass: [
  			"RootElement",
  			"ItemAwareElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "capacity",
  				isAttr: true,
  				type: "Integer"
  			},
  			{
  				name: "isUnlimited",
  				"default": true,
  				isAttr: true,
  				type: "Boolean"
  			}
  		]
  	},
  	{
  		name: "DataStoreReference",
  		superClass: [
  			"ItemAwareElement",
  			"FlowElement"
  		],
  		properties: [
  			{
  				name: "dataStoreRef",
  				type: "DataStore",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "DataObjectReference",
  		superClass: [
  			"ItemAwareElement",
  			"FlowElement"
  		],
  		properties: [
  			{
  				name: "dataObjectRef",
  				type: "DataObject",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ConversationLink",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "sourceRef",
  				type: "InteractionNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "targetRef",
  				type: "InteractionNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ConversationAssociation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "innerConversationNodeRef",
  				type: "ConversationNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "outerConversationNodeRef",
  				type: "ConversationNode",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CallConversation",
  		superClass: [
  			"ConversationNode"
  		],
  		properties: [
  			{
  				name: "calledCollaborationRef",
  				type: "Collaboration",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "participantAssociations",
  				type: "ParticipantAssociation",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "Conversation",
  		superClass: [
  			"ConversationNode"
  		]
  	},
  	{
  		name: "SubConversation",
  		superClass: [
  			"ConversationNode"
  		],
  		properties: [
  			{
  				name: "conversationNodes",
  				type: "ConversationNode",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "ConversationNode",
  		isAbstract: true,
  		superClass: [
  			"InteractionNode",
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "participantRef",
  				type: "Participant",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "messageFlowRefs",
  				type: "MessageFlow",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "correlationKeys",
  				type: "CorrelationKey",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "GlobalConversation",
  		superClass: [
  			"Collaboration"
  		]
  	},
  	{
  		name: "PartnerEntity",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "participantRef",
  				type: "Participant",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "PartnerRole",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "participantRef",
  				type: "Participant",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CorrelationProperty",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "correlationPropertyRetrievalExpression",
  				type: "CorrelationPropertyRetrievalExpression",
  				isMany: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "type",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Error",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "structureRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "errorCode",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "CorrelationKey",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "correlationPropertyRef",
  				type: "CorrelationProperty",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Expression",
  		superClass: [
  			"BaseElement"
  		],
  		isAbstract: false,
  		properties: [
  			{
  				name: "body",
  				isBody: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "FormalExpression",
  		superClass: [
  			"Expression"
  		],
  		properties: [
  			{
  				name: "language",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "evaluatesToTypeRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Message",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "itemRef",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ItemDefinition",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "itemKind",
  				type: "ItemKind",
  				isAttr: true
  			},
  			{
  				name: "structureRef",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isCollection",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "import",
  				type: "Import",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "FlowElement",
  		isAbstract: true,
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "auditing",
  				type: "Auditing"
  			},
  			{
  				name: "monitoring",
  				type: "Monitoring"
  			},
  			{
  				name: "categoryValueRef",
  				type: "CategoryValue",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "SequenceFlow",
  		superClass: [
  			"FlowElement"
  		],
  		properties: [
  			{
  				name: "isImmediate",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "conditionExpression",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "sourceRef",
  				type: "FlowNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "targetRef",
  				type: "FlowNode",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "FlowElementsContainer",
  		isAbstract: true,
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "laneSets",
  				type: "LaneSet",
  				isMany: true
  			},
  			{
  				name: "flowElements",
  				type: "FlowElement",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "CallableElement",
  		isAbstract: true,
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "ioSpecification",
  				type: "InputOutputSpecification",
  				xml: {
  					serialize: "property"
  				}
  			},
  			{
  				name: "supportedInterfaceRef",
  				type: "Interface",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "ioBinding",
  				type: "InputOutputBinding",
  				isMany: true,
  				xml: {
  					serialize: "property"
  				}
  			}
  		]
  	},
  	{
  		name: "FlowNode",
  		isAbstract: true,
  		superClass: [
  			"FlowElement"
  		],
  		properties: [
  			{
  				name: "incoming",
  				type: "SequenceFlow",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "outgoing",
  				type: "SequenceFlow",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "lanes",
  				type: "Lane",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CorrelationPropertyRetrievalExpression",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "messagePath",
  				type: "FormalExpression"
  			},
  			{
  				name: "messageRef",
  				type: "Message",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CorrelationPropertyBinding",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "dataPath",
  				type: "FormalExpression"
  			},
  			{
  				name: "correlationPropertyRef",
  				type: "CorrelationProperty",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Resource",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "resourceParameters",
  				type: "ResourceParameter",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "ResourceParameter",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isRequired",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "type",
  				type: "ItemDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "CorrelationSubscription",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "correlationKeyRef",
  				type: "CorrelationKey",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "correlationPropertyBinding",
  				type: "CorrelationPropertyBinding",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "MessageFlow",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "sourceRef",
  				type: "InteractionNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "targetRef",
  				type: "InteractionNode",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "messageRef",
  				type: "Message",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "MessageFlowAssociation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "innerMessageFlowRef",
  				type: "MessageFlow",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "outerMessageFlowRef",
  				type: "MessageFlow",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "InteractionNode",
  		isAbstract: true,
  		properties: [
  			{
  				name: "incomingConversationLinks",
  				type: "ConversationLink",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "outgoingConversationLinks",
  				type: "ConversationLink",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Participant",
  		superClass: [
  			"InteractionNode",
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "interfaceRef",
  				type: "Interface",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "participantMultiplicity",
  				type: "ParticipantMultiplicity"
  			},
  			{
  				name: "endPointRefs",
  				type: "EndPoint",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "processRef",
  				type: "Process",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ParticipantAssociation",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "innerParticipantRef",
  				type: "Participant",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "outerParticipantRef",
  				type: "Participant",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ParticipantMultiplicity",
  		properties: [
  			{
  				name: "minimum",
  				"default": 0,
  				isAttr: true,
  				type: "Integer"
  			},
  			{
  				name: "maximum",
  				"default": 1,
  				isAttr: true,
  				type: "Integer"
  			}
  		],
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "Collaboration",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "isClosed",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "participants",
  				type: "Participant",
  				isMany: true
  			},
  			{
  				name: "messageFlows",
  				type: "MessageFlow",
  				isMany: true
  			},
  			{
  				name: "artifacts",
  				type: "Artifact",
  				isMany: true
  			},
  			{
  				name: "conversations",
  				type: "ConversationNode",
  				isMany: true
  			},
  			{
  				name: "conversationAssociations",
  				type: "ConversationAssociation"
  			},
  			{
  				name: "participantAssociations",
  				type: "ParticipantAssociation",
  				isMany: true
  			},
  			{
  				name: "messageFlowAssociations",
  				type: "MessageFlowAssociation",
  				isMany: true
  			},
  			{
  				name: "correlationKeys",
  				type: "CorrelationKey",
  				isMany: true
  			},
  			{
  				name: "choreographyRef",
  				type: "Choreography",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "conversationLinks",
  				type: "ConversationLink",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "ChoreographyActivity",
  		isAbstract: true,
  		superClass: [
  			"FlowNode"
  		],
  		properties: [
  			{
  				name: "participantRef",
  				type: "Participant",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "initiatingParticipantRef",
  				type: "Participant",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "correlationKeys",
  				type: "CorrelationKey",
  				isMany: true
  			},
  			{
  				name: "loopType",
  				type: "ChoreographyLoopType",
  				"default": "None",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "CallChoreography",
  		superClass: [
  			"ChoreographyActivity"
  		],
  		properties: [
  			{
  				name: "calledChoreographyRef",
  				type: "Choreography",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "participantAssociations",
  				type: "ParticipantAssociation",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "SubChoreography",
  		superClass: [
  			"ChoreographyActivity",
  			"FlowElementsContainer"
  		],
  		properties: [
  			{
  				name: "artifacts",
  				type: "Artifact",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "ChoreographyTask",
  		superClass: [
  			"ChoreographyActivity"
  		],
  		properties: [
  			{
  				name: "messageFlowRef",
  				type: "MessageFlow",
  				isMany: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Choreography",
  		superClass: [
  			"Collaboration",
  			"FlowElementsContainer"
  		]
  	},
  	{
  		name: "GlobalChoreographyTask",
  		superClass: [
  			"Choreography"
  		],
  		properties: [
  			{
  				name: "initiatingParticipantRef",
  				type: "Participant",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "TextAnnotation",
  		superClass: [
  			"Artifact"
  		],
  		properties: [
  			{
  				name: "text",
  				type: "String"
  			},
  			{
  				name: "textFormat",
  				"default": "text/plain",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Group",
  		superClass: [
  			"Artifact"
  		],
  		properties: [
  			{
  				name: "categoryValueRef",
  				type: "CategoryValue",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Association",
  		superClass: [
  			"Artifact"
  		],
  		properties: [
  			{
  				name: "associationDirection",
  				type: "AssociationDirection",
  				isAttr: true
  			},
  			{
  				name: "sourceRef",
  				type: "BaseElement",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "targetRef",
  				type: "BaseElement",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "Category",
  		superClass: [
  			"RootElement"
  		],
  		properties: [
  			{
  				name: "categoryValue",
  				type: "CategoryValue",
  				isMany: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Artifact",
  		isAbstract: true,
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "CategoryValue",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "categorizedFlowElements",
  				type: "FlowElement",
  				isMany: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "value",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Activity",
  		isAbstract: true,
  		superClass: [
  			"FlowNode"
  		],
  		properties: [
  			{
  				name: "isForCompensation",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "default",
  				type: "SequenceFlow",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "ioSpecification",
  				type: "InputOutputSpecification",
  				xml: {
  					serialize: "property"
  				}
  			},
  			{
  				name: "boundaryEventRefs",
  				type: "BoundaryEvent",
  				isMany: true,
  				isReference: true
  			},
  			{
  				name: "properties",
  				type: "Property",
  				isMany: true
  			},
  			{
  				name: "dataInputAssociations",
  				type: "DataInputAssociation",
  				isMany: true
  			},
  			{
  				name: "dataOutputAssociations",
  				type: "DataOutputAssociation",
  				isMany: true
  			},
  			{
  				name: "startQuantity",
  				"default": 1,
  				isAttr: true,
  				type: "Integer"
  			},
  			{
  				name: "resources",
  				type: "ResourceRole",
  				isMany: true
  			},
  			{
  				name: "completionQuantity",
  				"default": 1,
  				isAttr: true,
  				type: "Integer"
  			},
  			{
  				name: "loopCharacteristics",
  				type: "LoopCharacteristics"
  			}
  		]
  	},
  	{
  		name: "ServiceTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "operationRef",
  				type: "Operation",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "SubProcess",
  		superClass: [
  			"Activity",
  			"FlowElementsContainer",
  			"InteractionNode"
  		],
  		properties: [
  			{
  				name: "triggeredByEvent",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "artifacts",
  				type: "Artifact",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "LoopCharacteristics",
  		isAbstract: true,
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "MultiInstanceLoopCharacteristics",
  		superClass: [
  			"LoopCharacteristics"
  		],
  		properties: [
  			{
  				name: "isSequential",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "behavior",
  				type: "MultiInstanceBehavior",
  				"default": "All",
  				isAttr: true
  			},
  			{
  				name: "loopCardinality",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "loopDataInputRef",
  				type: "ItemAwareElement",
  				isReference: true
  			},
  			{
  				name: "loopDataOutputRef",
  				type: "ItemAwareElement",
  				isReference: true
  			},
  			{
  				name: "inputDataItem",
  				type: "DataInput",
  				xml: {
  					serialize: "property"
  				}
  			},
  			{
  				name: "outputDataItem",
  				type: "DataOutput",
  				xml: {
  					serialize: "property"
  				}
  			},
  			{
  				name: "complexBehaviorDefinition",
  				type: "ComplexBehaviorDefinition",
  				isMany: true
  			},
  			{
  				name: "completionCondition",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "oneBehaviorEventRef",
  				type: "EventDefinition",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "noneBehaviorEventRef",
  				type: "EventDefinition",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "StandardLoopCharacteristics",
  		superClass: [
  			"LoopCharacteristics"
  		],
  		properties: [
  			{
  				name: "testBefore",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "loopCondition",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "loopMaximum",
  				type: "Integer",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "CallActivity",
  		superClass: [
  			"Activity",
  			"InteractionNode"
  		],
  		properties: [
  			{
  				name: "calledElement",
  				type: "String",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "Task",
  		superClass: [
  			"Activity",
  			"InteractionNode"
  		]
  	},
  	{
  		name: "SendTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "operationRef",
  				type: "Operation",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "messageRef",
  				type: "Message",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ReceiveTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "instantiate",
  				"default": false,
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "operationRef",
  				type: "Operation",
  				isAttr: true,
  				isReference: true
  			},
  			{
  				name: "messageRef",
  				type: "Message",
  				isAttr: true,
  				isReference: true
  			}
  		]
  	},
  	{
  		name: "ScriptTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "scriptFormat",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "script",
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "BusinessRuleTask",
  		superClass: [
  			"Task"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "AdHocSubProcess",
  		superClass: [
  			"SubProcess"
  		],
  		properties: [
  			{
  				name: "completionCondition",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "ordering",
  				type: "AdHocOrdering",
  				isAttr: true
  			},
  			{
  				name: "cancelRemainingInstances",
  				"default": true,
  				isAttr: true,
  				type: "Boolean"
  			}
  		]
  	},
  	{
  		name: "Transaction",
  		superClass: [
  			"SubProcess"
  		],
  		properties: [
  			{
  				name: "protocol",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "method",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "GlobalScriptTask",
  		superClass: [
  			"GlobalTask"
  		],
  		properties: [
  			{
  				name: "scriptLanguage",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "script",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "GlobalBusinessRuleTask",
  		superClass: [
  			"GlobalTask"
  		],
  		properties: [
  			{
  				name: "implementation",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ComplexBehaviorDefinition",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "condition",
  				type: "FormalExpression"
  			},
  			{
  				name: "event",
  				type: "ImplicitThrowEvent"
  			}
  		]
  	},
  	{
  		name: "ResourceRole",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "resourceRef",
  				type: "Resource",
  				isReference: true
  			},
  			{
  				name: "resourceParameterBindings",
  				type: "ResourceParameterBinding",
  				isMany: true
  			},
  			{
  				name: "resourceAssignmentExpression",
  				type: "ResourceAssignmentExpression"
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ResourceParameterBinding",
  		properties: [
  			{
  				name: "expression",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			},
  			{
  				name: "parameterRef",
  				type: "ResourceParameter",
  				isAttr: true,
  				isReference: true
  			}
  		],
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "ResourceAssignmentExpression",
  		properties: [
  			{
  				name: "expression",
  				type: "Expression",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		],
  		superClass: [
  			"BaseElement"
  		]
  	},
  	{
  		name: "Import",
  		properties: [
  			{
  				name: "importType",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "location",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "namespace",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Definitions",
  		superClass: [
  			"BaseElement"
  		],
  		properties: [
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "targetNamespace",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "expressionLanguage",
  				"default": "http://www.w3.org/1999/XPath",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "typeLanguage",
  				"default": "http://www.w3.org/2001/XMLSchema",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "imports",
  				type: "Import",
  				isMany: true
  			},
  			{
  				name: "extensions",
  				type: "Extension",
  				isMany: true
  			},
  			{
  				name: "rootElements",
  				type: "RootElement",
  				isMany: true
  			},
  			{
  				name: "diagrams",
  				isMany: true,
  				type: "bpmndi:BPMNDiagram"
  			},
  			{
  				name: "exporter",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "relationships",
  				type: "Relationship",
  				isMany: true
  			},
  			{
  				name: "exporterVersion",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	}
  ];
  var enumerations$3 = [
  	{
  		name: "ProcessType",
  		literalValues: [
  			{
  				name: "None"
  			},
  			{
  				name: "Public"
  			},
  			{
  				name: "Private"
  			}
  		]
  	},
  	{
  		name: "GatewayDirection",
  		literalValues: [
  			{
  				name: "Unspecified"
  			},
  			{
  				name: "Converging"
  			},
  			{
  				name: "Diverging"
  			},
  			{
  				name: "Mixed"
  			}
  		]
  	},
  	{
  		name: "EventBasedGatewayType",
  		literalValues: [
  			{
  				name: "Parallel"
  			},
  			{
  				name: "Exclusive"
  			}
  		]
  	},
  	{
  		name: "RelationshipDirection",
  		literalValues: [
  			{
  				name: "None"
  			},
  			{
  				name: "Forward"
  			},
  			{
  				name: "Backward"
  			},
  			{
  				name: "Both"
  			}
  		]
  	},
  	{
  		name: "ItemKind",
  		literalValues: [
  			{
  				name: "Physical"
  			},
  			{
  				name: "Information"
  			}
  		]
  	},
  	{
  		name: "ChoreographyLoopType",
  		literalValues: [
  			{
  				name: "None"
  			},
  			{
  				name: "Standard"
  			},
  			{
  				name: "MultiInstanceSequential"
  			},
  			{
  				name: "MultiInstanceParallel"
  			}
  		]
  	},
  	{
  		name: "AssociationDirection",
  		literalValues: [
  			{
  				name: "None"
  			},
  			{
  				name: "One"
  			},
  			{
  				name: "Both"
  			}
  		]
  	},
  	{
  		name: "MultiInstanceBehavior",
  		literalValues: [
  			{
  				name: "None"
  			},
  			{
  				name: "One"
  			},
  			{
  				name: "All"
  			},
  			{
  				name: "Complex"
  			}
  		]
  	},
  	{
  		name: "AdHocOrdering",
  		literalValues: [
  			{
  				name: "Parallel"
  			},
  			{
  				name: "Sequential"
  			}
  		]
  	}
  ];
  var xml$1 = {
  	tagAlias: "lowerCase",
  	typePrefix: "t"
  };
  var BpmnPackage = {
  	name: name$5,
  	uri: uri$5,
  	prefix: prefix$5,
  	associations: associations$5,
  	types: types$5,
  	enumerations: enumerations$3,
  	xml: xml$1
  };

  var name$4 = "BPMNDI";
  var uri$4 = "http://www.omg.org/spec/BPMN/20100524/DI";
  var prefix$4 = "bpmndi";
  var types$4 = [
  	{
  		name: "BPMNDiagram",
  		properties: [
  			{
  				name: "plane",
  				type: "BPMNPlane",
  				redefines: "di:Diagram#rootElement"
  			},
  			{
  				name: "labelStyle",
  				type: "BPMNLabelStyle",
  				isMany: true
  			}
  		],
  		superClass: [
  			"di:Diagram"
  		]
  	},
  	{
  		name: "BPMNPlane",
  		properties: [
  			{
  				name: "bpmnElement",
  				isAttr: true,
  				isReference: true,
  				type: "bpmn:BaseElement",
  				redefines: "di:DiagramElement#modelElement"
  			}
  		],
  		superClass: [
  			"di:Plane"
  		]
  	},
  	{
  		name: "BPMNShape",
  		properties: [
  			{
  				name: "bpmnElement",
  				isAttr: true,
  				isReference: true,
  				type: "bpmn:BaseElement",
  				redefines: "di:DiagramElement#modelElement"
  			},
  			{
  				name: "isHorizontal",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "isExpanded",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "isMarkerVisible",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "label",
  				type: "BPMNLabel"
  			},
  			{
  				name: "isMessageVisible",
  				isAttr: true,
  				type: "Boolean"
  			},
  			{
  				name: "participantBandKind",
  				type: "ParticipantBandKind",
  				isAttr: true
  			},
  			{
  				name: "choreographyActivityShape",
  				type: "BPMNShape",
  				isAttr: true,
  				isReference: true
  			}
  		],
  		superClass: [
  			"di:LabeledShape"
  		]
  	},
  	{
  		name: "BPMNEdge",
  		properties: [
  			{
  				name: "label",
  				type: "BPMNLabel"
  			},
  			{
  				name: "bpmnElement",
  				isAttr: true,
  				isReference: true,
  				type: "bpmn:BaseElement",
  				redefines: "di:DiagramElement#modelElement"
  			},
  			{
  				name: "sourceElement",
  				isAttr: true,
  				isReference: true,
  				type: "di:DiagramElement",
  				redefines: "di:Edge#source"
  			},
  			{
  				name: "targetElement",
  				isAttr: true,
  				isReference: true,
  				type: "di:DiagramElement",
  				redefines: "di:Edge#target"
  			},
  			{
  				name: "messageVisibleKind",
  				type: "MessageVisibleKind",
  				isAttr: true,
  				"default": "initiating"
  			}
  		],
  		superClass: [
  			"di:LabeledEdge"
  		]
  	},
  	{
  		name: "BPMNLabel",
  		properties: [
  			{
  				name: "labelStyle",
  				type: "BPMNLabelStyle",
  				isAttr: true,
  				isReference: true,
  				redefines: "di:DiagramElement#style"
  			}
  		],
  		superClass: [
  			"di:Label"
  		]
  	},
  	{
  		name: "BPMNLabelStyle",
  		properties: [
  			{
  				name: "font",
  				type: "dc:Font"
  			}
  		],
  		superClass: [
  			"di:Style"
  		]
  	}
  ];
  var enumerations$2 = [
  	{
  		name: "ParticipantBandKind",
  		literalValues: [
  			{
  				name: "top_initiating"
  			},
  			{
  				name: "middle_initiating"
  			},
  			{
  				name: "bottom_initiating"
  			},
  			{
  				name: "top_non_initiating"
  			},
  			{
  				name: "middle_non_initiating"
  			},
  			{
  				name: "bottom_non_initiating"
  			}
  		]
  	},
  	{
  		name: "MessageVisibleKind",
  		literalValues: [
  			{
  				name: "initiating"
  			},
  			{
  				name: "non_initiating"
  			}
  		]
  	}
  ];
  var associations$4 = [
  ];
  var BpmnDiPackage = {
  	name: name$4,
  	uri: uri$4,
  	prefix: prefix$4,
  	types: types$4,
  	enumerations: enumerations$2,
  	associations: associations$4
  };

  var name$3 = "DC";
  var uri$3 = "http://www.omg.org/spec/DD/20100524/DC";
  var prefix$3 = "dc";
  var types$3 = [
  	{
  		name: "Boolean"
  	},
  	{
  		name: "Integer"
  	},
  	{
  		name: "Real"
  	},
  	{
  		name: "String"
  	},
  	{
  		name: "Font",
  		properties: [
  			{
  				name: "name",
  				type: "String",
  				isAttr: true
  			},
  			{
  				name: "size",
  				type: "Real",
  				isAttr: true
  			},
  			{
  				name: "isBold",
  				type: "Boolean",
  				isAttr: true
  			},
  			{
  				name: "isItalic",
  				type: "Boolean",
  				isAttr: true
  			},
  			{
  				name: "isUnderline",
  				type: "Boolean",
  				isAttr: true
  			},
  			{
  				name: "isStrikeThrough",
  				type: "Boolean",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "Point",
  		properties: [
  			{
  				name: "x",
  				type: "Real",
  				"default": "0",
  				isAttr: true
  			},
  			{
  				name: "y",
  				type: "Real",
  				"default": "0",
  				isAttr: true
  			}
  		]
  	},
  	{
  		name: "Bounds",
  		properties: [
  			{
  				name: "x",
  				type: "Real",
  				"default": "0",
  				isAttr: true
  			},
  			{
  				name: "y",
  				type: "Real",
  				"default": "0",
  				isAttr: true
  			},
  			{
  				name: "width",
  				type: "Real",
  				isAttr: true
  			},
  			{
  				name: "height",
  				type: "Real",
  				isAttr: true
  			}
  		]
  	}
  ];
  var associations$3 = [
  ];
  var DcPackage = {
  	name: name$3,
  	uri: uri$3,
  	prefix: prefix$3,
  	types: types$3,
  	associations: associations$3
  };

  var name$2 = "DI";
  var uri$2 = "http://www.omg.org/spec/DD/20100524/DI";
  var prefix$2 = "di";
  var types$2 = [
  	{
  		name: "DiagramElement",
  		isAbstract: true,
  		properties: [
  			{
  				name: "id",
  				isAttr: true,
  				isId: true,
  				type: "String"
  			},
  			{
  				name: "extension",
  				type: "Extension"
  			},
  			{
  				name: "owningDiagram",
  				type: "Diagram",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "owningElement",
  				type: "DiagramElement",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "modelElement",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true,
  				type: "Element"
  			},
  			{
  				name: "style",
  				type: "Style",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "ownedElement",
  				type: "DiagramElement",
  				isReadOnly: true,
  				isMany: true,
  				isVirtual: true
  			}
  		]
  	},
  	{
  		name: "Node",
  		isAbstract: true,
  		superClass: [
  			"DiagramElement"
  		]
  	},
  	{
  		name: "Edge",
  		isAbstract: true,
  		superClass: [
  			"DiagramElement"
  		],
  		properties: [
  			{
  				name: "source",
  				type: "DiagramElement",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "target",
  				type: "DiagramElement",
  				isReadOnly: true,
  				isVirtual: true,
  				isReference: true
  			},
  			{
  				name: "waypoint",
  				isUnique: false,
  				isMany: true,
  				type: "dc:Point",
  				xml: {
  					serialize: "xsi:type"
  				}
  			}
  		]
  	},
  	{
  		name: "Diagram",
  		isAbstract: true,
  		properties: [
  			{
  				name: "id",
  				isAttr: true,
  				isId: true,
  				type: "String"
  			},
  			{
  				name: "rootElement",
  				type: "DiagramElement",
  				isReadOnly: true,
  				isVirtual: true
  			},
  			{
  				name: "name",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "documentation",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "resolution",
  				isAttr: true,
  				type: "Real"
  			},
  			{
  				name: "ownedStyle",
  				type: "Style",
  				isReadOnly: true,
  				isMany: true,
  				isVirtual: true
  			}
  		]
  	},
  	{
  		name: "Shape",
  		isAbstract: true,
  		superClass: [
  			"Node"
  		],
  		properties: [
  			{
  				name: "bounds",
  				type: "dc:Bounds"
  			}
  		]
  	},
  	{
  		name: "Plane",
  		isAbstract: true,
  		superClass: [
  			"Node"
  		],
  		properties: [
  			{
  				name: "planeElement",
  				type: "DiagramElement",
  				subsettedProperty: "DiagramElement-ownedElement",
  				isMany: true
  			}
  		]
  	},
  	{
  		name: "LabeledEdge",
  		isAbstract: true,
  		superClass: [
  			"Edge"
  		],
  		properties: [
  			{
  				name: "ownedLabel",
  				type: "Label",
  				isReadOnly: true,
  				subsettedProperty: "DiagramElement-ownedElement",
  				isMany: true,
  				isVirtual: true
  			}
  		]
  	},
  	{
  		name: "LabeledShape",
  		isAbstract: true,
  		superClass: [
  			"Shape"
  		],
  		properties: [
  			{
  				name: "ownedLabel",
  				type: "Label",
  				isReadOnly: true,
  				subsettedProperty: "DiagramElement-ownedElement",
  				isMany: true,
  				isVirtual: true
  			}
  		]
  	},
  	{
  		name: "Label",
  		isAbstract: true,
  		superClass: [
  			"Node"
  		],
  		properties: [
  			{
  				name: "bounds",
  				type: "dc:Bounds"
  			}
  		]
  	},
  	{
  		name: "Style",
  		isAbstract: true,
  		properties: [
  			{
  				name: "id",
  				isAttr: true,
  				isId: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "Extension",
  		properties: [
  			{
  				name: "values",
  				isMany: true,
  				type: "Element"
  			}
  		]
  	}
  ];
  var associations$2 = [
  ];
  var xml = {
  	tagAlias: "lowerCase"
  };
  var DiPackage = {
  	name: name$2,
  	uri: uri$2,
  	prefix: prefix$2,
  	types: types$2,
  	associations: associations$2,
  	xml: xml
  };

  var name$1 = "bpmn.io colors for BPMN";
  var uri$1 = "http://bpmn.io/schema/bpmn/biocolor/1.0";
  var prefix$1 = "bioc";
  var types$1 = [
  	{
  		name: "ColoredShape",
  		"extends": [
  			"bpmndi:BPMNShape"
  		],
  		properties: [
  			{
  				name: "stroke",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "fill",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ColoredEdge",
  		"extends": [
  			"bpmndi:BPMNEdge"
  		],
  		properties: [
  			{
  				name: "stroke",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "fill",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	}
  ];
  var enumerations$1 = [
  ];
  var associations$1 = [
  ];
  var BiocPackage = {
  	name: name$1,
  	uri: uri$1,
  	prefix: prefix$1,
  	types: types$1,
  	enumerations: enumerations$1,
  	associations: associations$1
  };

  var name$6 = "BPMN in Color";
  var uri = "http://www.omg.org/spec/BPMN/non-normative/color/1.0";
  var prefix = "color";
  var types$6 = [
  	{
  		name: "ColoredLabel",
  		"extends": [
  			"bpmndi:BPMNLabel"
  		],
  		properties: [
  			{
  				name: "color",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ColoredShape",
  		"extends": [
  			"bpmndi:BPMNShape"
  		],
  		properties: [
  			{
  				name: "background-color",
  				isAttr: true,
  				type: "String"
  			},
  			{
  				name: "border-color",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	},
  	{
  		name: "ColoredEdge",
  		"extends": [
  			"bpmndi:BPMNEdge"
  		],
  		properties: [
  			{
  				name: "border-color",
  				isAttr: true,
  				type: "String"
  			}
  		]
  	}
  ];
  var enumerations = [
  ];
  var associations = [
  ];
  var BpmnInColorPackage = {
  	name: name$6,
  	uri: uri,
  	prefix: prefix,
  	types: types$6,
  	enumerations: enumerations,
  	associations: associations
  };

  const packages = {
    bpmn: BpmnPackage,
    bpmndi: BpmnDiPackage,
    dc: DcPackage,
    di: DiPackage,
    bioc: BiocPackage,
    color: BpmnInColorPackage
  };

  function SimpleBpmnModdle(additionalPackages, options) {
    const pks = assign$1({}, packages, additionalPackages);

    return new BpmnModdle(pks, options);
  }

  /**
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */


  // TODO(nikku): remove with future bpmn-js version

  var DI_ERROR_MESSAGE = 'Tried to access di from the businessObject. The di is available through the diagram element only. For more information, see https://github.com/bpmn-io/bpmn-js/issues/1472';

  /**
   * @private
   *
   * @param {ModdleElement} businessObject
   */
  function ensureCompatDiRef(businessObject) {

    // bpmnElement can have multiple independent DIs
    if (!has$1(businessObject, 'di')) {
      Object.defineProperty(businessObject, 'di', {
        enumerable: false,
        get: function() {
          throw new Error(DI_ERROR_MESSAGE);
        }
      });
    }
  }

  /**
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   */

  /**
   * Returns true if an element is of the given meta-model type.
   *
   * @param {ModdleElement} element
   * @param {string} type
   *
   * @return {boolean}
   */
  function is(element, type) {
    return element.$instanceOf(type);
  }


  /**
   * Find a suitable display candidate for definitions where the DI does not
   * correctly specify one.
   *
   * @param {ModdleElement} definitions
   *
   * @return {ModdleElement}
   */
  function findDisplayCandidate(definitions) {
    return find$1(definitions.rootElements, function(e) {
      return is(e, 'bpmn:Process') || is(e, 'bpmn:Collaboration');
    });
  }

  /**
   * @param {Record<'element' | 'root' | 'error', Function>} handler
   */
  function BpmnTreeWalker(handler) {

    // list of containers already walked
    var handledElements = {};

    // list of elements to handle deferred to ensure
    // prerequisites are drawn
    var deferred = [];

    var diMap = {};

    // Helpers //////////////////////

    function contextual(fn, ctx) {
      return function(e) {
        fn(e, ctx);
      };
    }

    function handled(element) {
      handledElements[element.id] = element;
    }

    function isHandled(element) {
      return handledElements[element.id];
    }

    function visit(element, ctx) {

      var gfx = element.gfx;

      // avoid multiple rendering of elements
      if (gfx) {
        throw new Error(
          `already rendered ${ elementToString(element) }`
        );
      }

      // call handler
      return handler.element(element, diMap[element.id], ctx);
    }

    function visitRoot(element, diagram) {
      return handler.root(element, diMap[element.id], diagram);
    }

    function visitIfDi(element, ctx) {

      try {
        var gfx = diMap[element.id] && visit(element, ctx);

        handled(element);

        return gfx;
      } catch (error) {
        logError(error.message, { element, error });

        console.error(`failed to import ${ elementToString(element) }`, error);
      }
    }

    function logError(message, context) {
      handler.error(message, context);
    }

    // DI handling //////////////////////

    var registerDi = this.registerDi = function registerDi(di) {
      var bpmnElement = di.bpmnElement;

      if (bpmnElement) {
        if (diMap[bpmnElement.id]) {
          logError(
            `multiple DI elements defined for ${ elementToString(bpmnElement) }`,
            { element: bpmnElement }
          );
        } else {
          diMap[bpmnElement.id] = di;

          ensureCompatDiRef(bpmnElement);
        }
      } else {
        logError(
          `no bpmnElement referenced in ${ elementToString(di) }`,
          { element: di }
        );
      }
    };

    function handleDiagram(diagram) {
      handlePlane(diagram.plane);
    }

    function handlePlane(plane) {
      registerDi(plane);

      forEach$1(plane.planeElement, handlePlaneElement);
    }

    function handlePlaneElement(planeElement) {
      registerDi(planeElement);
    }


    // Semantic handling //////////////////////

    /**
     * Handle definitions and return the rendered diagram (if any).
     *
     * @param {ModdleElement} definitions to walk and import
     * @param {ModdleElement} [diagram] specific diagram to import and display
     *
     * @throws {Error} if no diagram to display could be found
     */
    this.handleDefinitions = function handleDefinitions(definitions, diagram) {

      // make sure we walk the correct bpmnElement

      var diagrams = definitions.diagrams;

      if (diagram && diagrams.indexOf(diagram) === -1) {
        throw new Error('diagram not part of <bpmn:Definitions />');
      }

      if (!diagram && diagrams && diagrams.length) {
        diagram = diagrams[0];
      }

      // no diagram -> nothing to import
      if (!diagram) {
        throw new Error('no diagram to display');
      }

      // load DI from selected diagram only
      diMap = {};
      handleDiagram(diagram);


      var plane = diagram.plane;

      if (!plane) {
        throw new Error(
          `no plane for ${ elementToString(diagram) }`
        );
      }

      var rootElement = plane.bpmnElement;

      // ensure we default to a suitable display candidate (process or collaboration),
      // even if non is specified in DI
      if (!rootElement) {
        rootElement = findDisplayCandidate(definitions);

        if (!rootElement) {
          throw new Error('no process or collaboration to display');
        } else {

          logError(
            `correcting missing bpmnElement on ${ elementToString(plane) } to ${ elementToString(rootElement) }`
          );

          // correct DI on the fly
          plane.bpmnElement = rootElement;
          registerDi(plane);
        }
      }


      var ctx = visitRoot(rootElement, plane);

      if (is(rootElement, 'bpmn:Process') || is(rootElement, 'bpmn:SubProcess')) {
        handleProcess(rootElement, ctx);
      } else if (is(rootElement, 'bpmn:Collaboration')) {
        handleCollaboration(rootElement, ctx);

        // force drawing of everything not yet drawn that is part of the target DI
        handleUnhandledProcesses(definitions.rootElements, ctx);
      } else {
        throw new Error(
          `unsupported bpmnElement for ${ elementToString(plane) }: ${ elementToString(rootElement) }`
        );
      }

      // handle all deferred elements
      handleDeferred(deferred);
    };

    var handleDeferred = this.handleDeferred = function handleDeferred() {

      var fn;

      // drain deferred until empty
      while (deferred.length) {
        fn = deferred.shift();

        fn();
      }
    };

    function handleProcess(process, context) {
      handleFlowElementsContainer(process, context);
      handleIoSpecification(process.ioSpecification, context);

      handleArtifacts(process.artifacts, context);

      // log process handled
      handled(process);
    }

    function handleUnhandledProcesses(rootElements, ctx) {

      // walk through all processes that have not yet been drawn and draw them
      // if they contain lanes with DI information.
      // we do this to pass the free-floating lane test cases in the MIWG test suite
      var processes = filter(rootElements, function(e) {
        return !isHandled(e) && is(e, 'bpmn:Process') && e.laneSets;
      });

      processes.forEach(contextual(handleProcess, ctx));
    }

    function handleMessageFlow(messageFlow, context) {
      visitIfDi(messageFlow, context);
    }

    function handleMessageFlows(messageFlows, context) {
      forEach$1(messageFlows, contextual(handleMessageFlow, context));
    }

    function handleDataAssociation(association, context) {
      visitIfDi(association, context);
    }

    function handleDataInput(dataInput, context) {
      visitIfDi(dataInput, context);
    }

    function handleDataOutput(dataOutput, context) {
      visitIfDi(dataOutput, context);
    }

    function handleArtifact(artifact, context) {

      // bpmn:TextAnnotation
      // bpmn:Group
      // bpmn:Association

      visitIfDi(artifact, context);
    }

    function handleArtifacts(artifacts, context) {

      forEach$1(artifacts, function(e) {
        if (is(e, 'bpmn:Association')) {
          deferred.push(function() {
            handleArtifact(e, context);
          });
        } else {
          handleArtifact(e, context);
        }
      });
    }

    function handleIoSpecification(ioSpecification, context) {

      if (!ioSpecification) {
        return;
      }

      forEach$1(ioSpecification.dataInputs, contextual(handleDataInput, context));
      forEach$1(ioSpecification.dataOutputs, contextual(handleDataOutput, context));
    }

    var handleSubProcess = this.handleSubProcess = function handleSubProcess(subProcess, context) {
      handleFlowElementsContainer(subProcess, context);
      handleArtifacts(subProcess.artifacts, context);
    };

    function handleFlowNode(flowNode, context) {
      var childCtx = visitIfDi(flowNode, context);

      if (is(flowNode, 'bpmn:SubProcess')) {
        handleSubProcess(flowNode, childCtx || context);
      }

      if (is(flowNode, 'bpmn:Activity')) {
        handleIoSpecification(flowNode.ioSpecification, context);
      }

      // defer handling of associations
      // affected types:
      //
      //   * bpmn:Activity
      //   * bpmn:ThrowEvent
      //   * bpmn:CatchEvent
      //
      deferred.push(function() {
        forEach$1(flowNode.dataInputAssociations, contextual(handleDataAssociation, context));
        forEach$1(flowNode.dataOutputAssociations, contextual(handleDataAssociation, context));
      });
    }

    function handleSequenceFlow(sequenceFlow, context) {
      visitIfDi(sequenceFlow, context);
    }

    function handleDataElement(dataObject, context) {
      visitIfDi(dataObject, context);
    }

    function handleLane(lane, context) {

      deferred.push(function() {

        var newContext = visitIfDi(lane, context);

        if (lane.childLaneSet) {
          handleLaneSet(lane.childLaneSet, newContext || context);
        }

        wireFlowNodeRefs(lane);
      });
    }

    function handleLaneSet(laneSet, context) {
      forEach$1(laneSet.lanes, contextual(handleLane, context));
    }

    function handleLaneSets(laneSets, context) {
      forEach$1(laneSets, contextual(handleLaneSet, context));
    }

    function handleFlowElementsContainer(container, context) {
      handleFlowElements(container.flowElements, context);

      if (container.laneSets) {
        handleLaneSets(container.laneSets, context);
      }
    }

    function handleFlowElements(flowElements, context) {
      forEach$1(flowElements, function(flowElement) {
        if (is(flowElement, 'bpmn:SequenceFlow')) {
          deferred.push(function() {
            handleSequenceFlow(flowElement, context);
          });
        } else if (is(flowElement, 'bpmn:BoundaryEvent')) {
          deferred.unshift(function() {
            handleFlowNode(flowElement, context);
          });
        } else if (is(flowElement, 'bpmn:FlowNode')) {
          handleFlowNode(flowElement, context);
        } else if (is(flowElement, 'bpmn:DataObject')) ; else if (is(flowElement, 'bpmn:DataStoreReference')) {
          handleDataElement(flowElement, context);
        } else if (is(flowElement, 'bpmn:DataObjectReference')) {
          handleDataElement(flowElement, context);
        } else {
          logError(
            `unrecognized flowElement ${ elementToString(flowElement) } in context ${ elementToString(context && context.businessObject) }`,
            {
              element: flowElement,
              context
            }
          );
        }
      });
    }

    function handleParticipant(participant, context) {
      var newCtx = visitIfDi(participant, context);

      var process = participant.processRef;
      if (process) {
        handleProcess(process, newCtx || context);
      }
    }

    function handleCollaboration(collaboration, context) {

      forEach$1(collaboration.participants, contextual(handleParticipant, context));

      deferred.push(function() {
        handleMessageFlows(collaboration.messageFlows, context);
      });

      handleArtifacts(collaboration.artifacts, context);
    }


    function wireFlowNodeRefs(lane) {

      // wire the virtual flowNodeRefs <-> relationship
      forEach$1(lane.flowNodeRef, function(flowNode) {
        var lanes = flowNode.get('lanes');

        if (lanes) {
          lanes.push(lane);
        }
      });
    }
  }

  /**
   * @typedef {import('../model/Types').ModdleElement} ModdleElement
   *
   * @typedef { {
   *   warnings: string[];
   * } } ImportBPMNDiagramResult
   *
   * @typedef {ImportBPMNDiagramResult & Error} ImportBPMNDiagramError
   */

  /**
   * Import the definitions into a diagram.
   *
   * Errors and warnings are reported through the specified callback.
   *
   * @param {ModdleElement} diagram
   * @param {ModdleElement} definitions
   * @param {ModdleElement} [bpmnDiagram] The diagram to be rendered (if not
   * provided, the first one will be rendered).
   *
   * @return {Promise<ImportBPMNDiagramResult>}
   */
  function importBpmnDiagram(diagram, definitions, bpmnDiagram) {

    var importer,
        eventBus,
        canvas;

    var error,
        warnings = [];

    /**
     * Walk the diagram semantically, importing (=drawing)
     * all elements you encounter.
     *
     * @param {ModdleElement} definitions
     * @param {ModdleElement} bpmnDiagram
     */
    function render(definitions, bpmnDiagram) {

      var visitor = {

        root: function(element, di) {
          return importer.add(element, di);
        },

        element: function(element, di, parentShape) {
          return importer.add(element, di, parentShape);
        },

        error: function(message, context) {
          warnings.push({ message: message, context: context });
        }
      };

      var walker = new BpmnTreeWalker(visitor);


      bpmnDiagram = bpmnDiagram || (definitions.diagrams && definitions.diagrams[0]);

      var diagramsToImport = getDiagramsToImport(definitions, bpmnDiagram);

      if (!diagramsToImport) {
        throw new Error('no diagram to display');
      }

      // traverse BPMN 2.0 document model,
      // starting at definitions
      forEach$1(diagramsToImport, function(diagram) {
        walker.handleDefinitions(definitions, diagram);
      });

      var rootId = bpmnDiagram.plane.bpmnElement.id;

      // we do need to account for different ways we create root elements
      // each nested imported <root> do have the `_plane` suffix, while
      // the root <root> is found under the business object ID
      canvas.setRootElement(
        canvas.findRoot(rootId + '_plane') || canvas.findRoot(rootId)
      );
    }

    return new Promise(function(resolve, reject) {
      try {
        importer = diagram.get('bpmnImporter');
        eventBus = diagram.get('eventBus');
        canvas = diagram.get('canvas');

        eventBus.fire('import.render.start', { definitions: definitions });

        render(definitions, bpmnDiagram);

        eventBus.fire('import.render.complete', {
          error: error,
          warnings: warnings
        });

        return resolve({ warnings: warnings });
      } catch (e) {

        e.warnings = warnings;
        return reject(e);
      }
    });
  }

  /**
   * Returns all diagrams in the same hierarchy as the requested diagram.
   * Includes all parent and sub process diagrams.
   *
   * @param {ModdleElement} definitions
   * @param {ModdleElement} bpmnDiagram
   *
   * @return {ModdleElement[]}
   */
  function getDiagramsToImport(definitions, bpmnDiagram) {
    if (!bpmnDiagram || !bpmnDiagram.plane) {
      return;
    }

    var bpmnElement = bpmnDiagram.plane.bpmnElement,
        rootElement = bpmnElement;

    if (!is$1(bpmnElement, 'bpmn:Process') && !is$1(bpmnElement, 'bpmn:Collaboration')) {
      rootElement = findRootProcess(bpmnElement);
    }

    // in case the process is part of a collaboration, the plane references the
    // collaboration, not the process
    var collaboration;

    if (is$1(rootElement, 'bpmn:Collaboration')) {
      collaboration = rootElement;
    } else {
      collaboration = find$1(definitions.rootElements, function(element) {
        if (!is$1(element, 'bpmn:Collaboration')) {
          return;
        }

        return find$1(element.participants, function(participant) {
          return participant.processRef === rootElement;
        });
      });
    }

    var rootElements = [ rootElement ];

    // all collaboration processes can contain sub-diagrams
    if (collaboration) {
      rootElements = map$1(collaboration.participants, function(participant) {
        return participant.processRef;
      });

      rootElements.push(collaboration);
    }

    var allChildren = selfAndAllFlowElements(rootElements);

    // if we have multiple diagrams referencing the same element, we
    // use the first in the file
    var diagramsToImport = [ bpmnDiagram ];
    var handledElements = [ bpmnElement ];

    forEach$1(definitions.diagrams, function(diagram) {

      if (!diagram.plane) {
        return;
      }

      var businessObject = diagram.plane.bpmnElement;

      if (
        allChildren.indexOf(businessObject) !== -1 &&
        handledElements.indexOf(businessObject) === -1
      ) {
        diagramsToImport.push(diagram);
        handledElements.push(businessObject);
      }
    });


    return diagramsToImport;
  }

  function selfAndAllFlowElements(elements) {
    var result = [];

    forEach$1(elements, function(element) {
      if (!element) {
        return;
      }

      result.push(element);

      result = result.concat(selfAndAllFlowElements(element.flowElements));
    });

    return result;
  }

  function findRootProcess(element) {
    var parent = element;

    while (parent) {
      if (is$1(parent, 'bpmn:Process')) {
        return parent;
      }

      parent = parent.$parent;
    }
  }

  /**
   * This file must not be changed or exchanged.
   *
   * @see http://bpmn.io/license for more information.
   */



  // inlined ../../resources/logo.svg
  var BPMNIO_LOGO_SVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.02 5.57" width="53" height="21"><path fill="currentColor" d="M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"/><path fill="currentColor" d="M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"/></svg>';

  var BPMNIO_IMG = BPMNIO_LOGO_SVG;

  var LOGO_STYLES = {
    verticalAlign: 'middle'
  };

  var LINK_STYLES = {
    'color': '#404040'
  };

  var LIGHTBOX_STYLES = {
    'zIndex': '1001',
    'position': 'fixed',
    'top': '0',
    'left': '0',
    'right': '0',
    'bottom': '0'
  };

  var BACKDROP_STYLES = {
    'width': '100%',
    'height': '100%',
    'background': 'rgba(40,40,40,0.2)'
  };

  var NOTICE_STYLES = {
    'position': 'absolute',
    'left': '50%',
    'top': '40%',
    'transform': 'translate(-50%)',
    'width': '260px',
    'padding': '10px',
    'background': 'white',
    'boxShadow': '0 1px 4px rgba(0,0,0,0.3)',
    'fontFamily': 'Helvetica, Arial, sans-serif',
    'fontSize': '14px',
    'display': 'flex',
    'lineHeight': '1.3'
  };

  var LIGHTBOX_MARKUP =
    '<div class="bjs-powered-by-lightbox">' +
      '<div class="backdrop"></div>' +
      '<div class="notice">' +
        '<a href="https://bpmn.io" target="_blank" rel="noopener" class="link">' +
          BPMNIO_IMG +
        '</a>' +
        '<span>' +
          'Web-based tooling for BPMN, DMN and forms ' +
          'powered by <a href="https://bpmn.io" target="_blank" rel="noopener">bpmn.io</a>.' +
        '</span>' +
      '</div>' +
    '</div>';


  var lightbox;

  function createLightbox() {
    lightbox = domify$1(LIGHTBOX_MARKUP);

    assign(lightbox, LIGHTBOX_STYLES);
    assign(query('svg', lightbox), LOGO_STYLES);
    assign(query('.backdrop', lightbox), BACKDROP_STYLES);
    assign(query('.notice', lightbox), NOTICE_STYLES);
    assign(query('.link', lightbox), LINK_STYLES, {
      'margin': '15px 20px 15px 10px',
      'alignSelf': 'center'
    });
  }

  function open() {

    if (!lightbox) {
      createLightbox();

      delegate.bind(lightbox, '.backdrop', 'click', function(event) {
        document.body.removeChild(lightbox);
      });
    }

    document.body.appendChild(lightbox);
  }

  /**
   * The code in the <project-logo></project-logo> area
   * must not be changed.
   *
   * @see http://bpmn.io/license for more information.
   */

  /**
   * @template T
   *
   * @typedef { import('diagram-js/lib/core/EventBus').default<T> } EventBus
   */

  /**
   * @template T
   *
   * @typedef {import('diagram-js/lib/core/EventBus').EventBusEventCallback<T>} EventBusEventCallback
   */

  /**
   * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration
   *
   * @typedef {import('./model/Types').Moddle} Moddle
   * @typedef {import('./model/Types').ModdleElement} ModdleElement
   * @typedef {import('./model/Types').ModdleExtension} ModdleExtension
   *
   * @typedef { {
   *   width?: number|string;
   *   height?: number|string;
   *   position?: string;
   *   container?: string|HTMLElement;
   *   moddleExtensions?: ModdleExtensions;
   *   additionalModules?: ModuleDeclaration[];
   * } & Record<string, any> } BaseViewerOptions
   *
   * @typedef {Record<string, ModdleElement>} ModdleElementsById
   *
   * @typedef { {
   *   [key: string]: ModdleExtension;
   * } } ModdleExtensions
   *
   * @typedef { {
   *   warnings: string[];
   * } } ImportXMLResult
   *
   * @typedef {ImportXMLResult & Error} ImportXMLError
   *
   * @typedef {ImportXMLResult} ImportDefinitionsResult
   *
   * @typedef {ImportXMLError} ImportDefinitionsError
   *
   * @typedef {ImportXMLResult} OpenResult
   *
   * @typedef {ImportXMLError} OpenError
   *
   * @typedef { {
   *   format?: boolean;
   *   preamble?: boolean;
   * } } SaveXMLOptions
   *
   * @typedef { {
   *   xml?: string;
   *   error?: Error;
   * } } SaveXMLResult
   *
   * @typedef { {
   *   svg: string;
   * } } SaveSVGResult
   *
   * @typedef { {
   *   xml: string;
   * } } ImportParseStartEvent
   *
   * @typedef { {
   *   error?: ImportXMLError;
   *   definitions?: ModdleElement;
   *   elementsById?: ModdleElementsById;
   *   references?: ModdleElement[];
   *   warnings: string[];
   * } } ImportParseCompleteEvent
   *
   * @typedef { {
   *   error?: ImportXMLError;
   *   warnings: string[];
   * } } ImportDoneEvent
   *
   * @typedef { {
   *   definitions: ModdleElement;
   * } } SaveXMLStartEvent
   *
   * @typedef {SaveXMLResult} SaveXMLDoneEvent
   *
   * @typedef { {
   *   error?: Error;
   *   svg: string;
   * } } SaveSVGDoneEvent
   */

  /**
   * @template Type
   *
   * @typedef { Type extends { eventBus: EventBus<infer X> } ? X : never } EventMap
   */

  /**
   * A base viewer for BPMN 2.0 diagrams.
   *
   * Have a look at {@link bpmn-js/lib/Viewer}, {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for
   * bundles that include actual features.
   *
   * @template [ServiceMap=null]
   *
   * @extends Diagram<ServiceMap>
   *
   * @param {BaseViewerOptions} [options] The options to configure the viewer.
   */
  function BaseViewer(options) {

    /**
     * @type {BaseViewerOptions}
     */
    options = assign$1({}, DEFAULT_OPTIONS, options);

    /**
     * @type {Moddle}
     */
    this._moddle = this._createModdle(options);

    /**
     * @type {HTMLElement}
     */
    this._container = this._createContainer(options);

    this._init(this._container, this._moddle, options);

    /* <project-logo> */

    addProjectLogo(this._container);

    /* </project-logo> */
  }

  e$3(BaseViewer, Diagram);

  /**
   * Parse and render a BPMN 2.0 diagram.
   *
   * Once finished the viewer reports back the result to the
   * provided callback function with (err, warnings).
   *
   * ## Life-Cycle Events
   *
   * During import the viewer will fire life-cycle events:
   *
   *   * import.parse.start (about to read model from XML)
   *   * import.parse.complete (model read; may have worked or not)
   *   * import.render.start (graphical import start)
   *   * import.render.complete (graphical import finished)
   *   * import.done (everything done)
   *
   * You can use these events to hook into the life-cycle.
   *
   * @throws {ImportXMLError} An error thrown during the import of the XML.
   *
   * @fires BaseViewer#ImportParseStartEvent
   * @fires BaseViewer#ImportParseCompleteEvent
   * @fires Importer#ImportRenderStartEvent
   * @fires Importer#ImportRenderCompleteEvent
   * @fires BaseViewer#ImportDoneEvent
   *
   * @param {string} xml The BPMN 2.0 XML to be imported.
   * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or Id of the BPMN diagram to open.
   *
   * @return {Promise<ImportXMLResult>} A promise resolving with warnings that were produced during the import.
   */
  BaseViewer.prototype.importXML = async function importXML(xml, bpmnDiagram) {

    const self = this;

    function ParseCompleteEvent(data) {
      return self.get('eventBus').createEvent(data);
    }

    let aggregatedWarnings = [];
    try {

      // hook in pre-parse listeners +
      // allow xml manipulation

      /**
       * A `import.parse.start` event.
       *
       * @event BaseViewer#ImportParseStartEvent
       * @type {ImportParseStartEvent}
       */
      xml = this._emit('import.parse.start', { xml: xml }) || xml;

      let parseResult;
      try {
        parseResult = await this._moddle.fromXML(xml, 'bpmn:Definitions');
      } catch (error) {
        this._emit('import.parse.complete', {
          error
        });

        throw error;
      }

      let definitions = parseResult.rootElement;
      const references = parseResult.references;
      const parseWarnings = parseResult.warnings;
      const elementsById = parseResult.elementsById;

      aggregatedWarnings = aggregatedWarnings.concat(parseWarnings);

      // hook in post parse listeners +
      // allow definitions manipulation

      /**
       * A `import.parse.complete` event.
       *
       * @event BaseViewer#ImportParseCompleteEvent
       * @type {ImportParseCompleteEvent}
       */
      definitions = this._emit('import.parse.complete', ParseCompleteEvent({
        error: null,
        definitions: definitions,
        elementsById: elementsById,
        references: references,
        warnings: aggregatedWarnings
      })) || definitions;

      const importResult = await this.importDefinitions(definitions, bpmnDiagram);

      aggregatedWarnings = aggregatedWarnings.concat(importResult.warnings);

      /**
       * A `import.parse.complete` event.
       *
       * @event BaseViewer#ImportDoneEvent
       * @type {ImportDoneEvent}
       */
      this._emit('import.done', { error: null, warnings: aggregatedWarnings });

      return { warnings: aggregatedWarnings };
    } catch (err) {
      let error = err;
      aggregatedWarnings = aggregatedWarnings.concat(error.warnings || []);
      addWarningsToError(error, aggregatedWarnings);

      error = checkValidationError(error);

      this._emit('import.done', { error, warnings: error.warnings });

      throw error;
    }
  };


  /**
   * Import parsed definitions and render a BPMN 2.0 diagram.
   *
   * Once finished the viewer reports back the result to the
   * provided callback function with (err, warnings).
   *
   * ## Life-Cycle Events
   *
   * During import the viewer will fire life-cycle events:
   *
   *   * import.render.start (graphical import start)
   *   * import.render.complete (graphical import finished)
   *
   * You can use these events to hook into the life-cycle.
   *
   * @throws {ImportDefinitionsError} An error thrown during the import of the definitions.
   *
   * @param {ModdleElement} definitions The definitions.
   * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or ID of the BPMN diagram to open.
   *
   * @return {Promise<ImportDefinitionsResult>} A promise resolving with warnings that were produced during the import.
   */
  BaseViewer.prototype.importDefinitions = async function importDefinitions(definitions, bpmnDiagram) {
    this._setDefinitions(definitions);
    const result = await this.open(bpmnDiagram);

    return { warnings: result.warnings };
  };


  /**
   * Open diagram of previously imported XML.
   *
   * Once finished the viewer reports back the result to the
   * provided callback function with (err, warnings).
   *
   * ## Life-Cycle Events
   *
   * During switch the viewer will fire life-cycle events:
   *
   *   * import.render.start (graphical import start)
   *   * import.render.complete (graphical import finished)
   *
   * You can use these events to hook into the life-cycle.
   *
   * @throws {OpenError} An error thrown during opening.
   *
   * @param {ModdleElement|string} bpmnDiagramOrId The diagram or Id of the BPMN diagram to open.
   *
   * @return {Promise<OpenResult>} A promise resolving with warnings that were produced during opening.
   */
  BaseViewer.prototype.open = async function open(bpmnDiagramOrId) {

    const definitions = this._definitions;
    let bpmnDiagram = bpmnDiagramOrId;

    if (!definitions) {
      const error = new Error('no XML imported');
      addWarningsToError(error, []);

      throw error;
    }

    if (typeof bpmnDiagramOrId === 'string') {
      bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);

      if (!bpmnDiagram) {
        const error = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');
        addWarningsToError(error, []);

        throw error;
      }
    }

    // clear existing rendered diagram
    // catch synchronous exceptions during #clear()
    try {
      this.clear();
    } catch (error) {
      addWarningsToError(error, []);

      throw error;
    }

    // perform graphical import
    const { warnings } = await importBpmnDiagram(this, definitions, bpmnDiagram);

    return { warnings };
  };

  /**
   * Export the currently displayed BPMN 2.0 diagram as
   * a BPMN 2.0 XML document.
   *
   * ## Life-Cycle Events
   *
   * During XML saving the viewer will fire life-cycle events:
   *
   *   * saveXML.start (before serialization)
   *   * saveXML.serialized (after xml generation)
   *   * saveXML.done (everything done)
   *
   * You can use these events to hook into the life-cycle.
   *
   * @throws {Error} An error thrown during export.
   *
   * @fires BaseViewer#SaveXMLStart
   * @fires BaseViewer#SaveXMLDone
   *
   * @param {SaveXMLOptions} [options] The options.
   *
   * @return {Promise<SaveXMLResult>} A promise resolving with the XML.
   */
  BaseViewer.prototype.saveXML = async function saveXML(options) {

    options = options || {};

    let definitions = this._definitions,
        error, xml;

    try {
      if (!definitions) {
        throw new Error('no definitions loaded');
      }

      // allow to fiddle around with definitions

      /**
       * A `saveXML.start` event.
       *
       * @event BaseViewer#SaveXMLStartEvent
       * @type {SaveXMLStartEvent}
       */
      definitions = this._emit('saveXML.start', {
        definitions
      }) || definitions;

      const result = await this._moddle.toXML(definitions, options);
      xml = result.xml;

      xml = this._emit('saveXML.serialized', {
        xml
      }) || xml;
    } catch (err) {
      error = err;
    }

    const result = error ? { error } : { xml };

    /**
     * A `saveXML.done` event.
     *
     * @event BaseViewer#SaveXMLDoneEvent
     * @type {SaveXMLDoneEvent}
     */
    this._emit('saveXML.done', result);

    if (error) {
      throw error;
    }

    return result;
  };


  /**
   * Export the currently displayed BPMN 2.0 diagram as
   * an SVG image.
   *
   * ## Life-Cycle Events
   *
   * During SVG saving the viewer will fire life-cycle events:
   *
   *   * saveSVG.start (before serialization)
   *   * saveSVG.done (everything done)
   *
   * You can use these events to hook into the life-cycle.
   *
   * @throws {Error} An error thrown during export.
   *
   * @fires BaseViewer#SaveSVGDone
   *
   * @return {Promise<SaveSVGResult>} A promise resolving with the SVG.
   */
  BaseViewer.prototype.saveSVG = async function saveSVG() {
    this._emit('saveSVG.start');

    let svg, err;

    try {
      const canvas = this.get('canvas');

      const contentNode = canvas.getActiveLayer(),
            defsNode = query(':scope > defs', canvas._svg);

      const contents = innerSVG(contentNode),
            defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';

      const bbox = contentNode.getBBox();

      svg =
        '<?xml version="1.0" encoding="utf-8"?>\n' +
        '<!-- created with bpmn-js / http://bpmn.io -->\n' +
        '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' +
        'width="' + bbox.width + '" height="' + bbox.height + '" ' +
        'viewBox="' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '" version="1.1">' +
        defs + contents +
        '</svg>';
    } catch (e) {
      err = e;
    }

    /**
     * A `saveSVG.done` event.
     *
     * @event BaseViewer#SaveSVGDoneEvent
     * @type {SaveSVGDoneEvent}
     */
    this._emit('saveSVG.done', {
      error: err,
      svg: svg
    });

    if (err) {
      throw err;
    }

    return { svg };
  };

  BaseViewer.prototype._setDefinitions = function(definitions) {
    this._definitions = definitions;
  };

  /**
   * Return modules to instantiate with.
   *
   * @return {ModuleDeclaration[]} The modules.
   */
  BaseViewer.prototype.getModules = function() {
    return this._modules;
  };

  /**
   * Remove all drawn elements from the viewer.
   *
   * After calling this method the viewer can still be reused for opening another
   * diagram.
   */
  BaseViewer.prototype.clear = function() {
    if (!this.getDefinitions()) {

      // no diagram to clear
      return;
    }

    // remove drawn elements
    Diagram.prototype.clear.call(this);
  };

  /**
   * Destroy the viewer instance and remove all its remainders from the document
   * tree.
   */
  BaseViewer.prototype.destroy = function() {

    // diagram destroy
    Diagram.prototype.destroy.call(this);

    // dom detach
    remove$2(this._container);
  };

  /**
   * @overlord
   *
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @template T
   *
   * @param {string|string[]} events The event(s) to listen to.
   * @param {number} [priority] The priority with which to listen.
   * @param {EventBusEventCallback<T>} callback The callback.
   * @param {any} [that] Value of `this` the callback will be called with.
   */
  /**
   * Register an event listener for events with the given name.
   *
   * The callback will be invoked with `event, ...additionalArguments`
   * that have been passed to {@link EventBus#fire}.
   *
   * Returning false from a listener will prevent the events default action
   * (if any is specified). To stop an event from being processed further in
   * other listeners execute {@link Event#stopPropagation}.
   *
   * Returning anything but `undefined` from a listener will stop the listener propagation.
   *
   * @template {keyof EventMap<ServiceMap>} EventName
   *
   * @param {EventName} events to subscribe to
   * @param {number} [priority=1000] listen priority
   * @param {EventBusEventCallback<(EventMap<ServiceMap>)[EventName]>} callback
   * @param {any} [that] callback context
   */
  BaseViewer.prototype.on = function(events, priority, callback, that) {
    return this.get('eventBus').on(events, priority, callback, that);
  };

  /**
   * Remove an event listener.
   *
   * @param {string|string[]} events The event(s).
   * @param {Function} [callback] The callback.
   */
  BaseViewer.prototype.off = function(events, callback) {
    this.get('eventBus').off(events, callback);
  };

  /**
   * Attach the viewer to an HTML element.
   *
   * @param {HTMLElement} parentNode The parent node to attach to.
   */
  BaseViewer.prototype.attachTo = function(parentNode) {

    if (!parentNode) {
      throw new Error('parentNode required');
    }

    // ensure we detach from the
    // previous, old parent
    this.detach();

    // unwrap jQuery if provided
    if (parentNode.get && parentNode.constructor.prototype.jquery) {
      parentNode = parentNode.get(0);
    }

    if (typeof parentNode === 'string') {
      parentNode = query(parentNode);
    }

    parentNode.appendChild(this._container);

    this._emit('attach', {});

    this.get('canvas').resized();
  };

  /**
   * Get the definitions model element.
   *
   * @return {ModdleElement} The definitions model element.
   */
  BaseViewer.prototype.getDefinitions = function() {
    return this._definitions;
  };

  /**
   * Detach the viewer.
   *
   * @fires BaseViewer#DetachEvent
   */
  BaseViewer.prototype.detach = function() {

    const container = this._container,
          parentNode = container.parentNode;

    if (!parentNode) {
      return;
    }

    /**
     * A `detach` event.
     *
     * @event BaseViewer#DetachEvent
     * @type {Object}
     */
    this._emit('detach', {});

    parentNode.removeChild(container);
  };

  BaseViewer.prototype._init = function(container, moddle, options) {

    const baseModules = options.modules || this.getModules(options),
          additionalModules = options.additionalModules || [],
          staticModules = [
            {
              bpmnjs: [ 'value', this ],
              moddle: [ 'value', moddle ]
            }
          ];

    const diagramModules = [].concat(staticModules, baseModules, additionalModules);

    const diagramOptions = assign$1(omit(options, [ 'additionalModules' ]), {
      canvas: assign$1({}, options.canvas, { container: container }),
      modules: diagramModules
    });

    // invoke diagram constructor
    Diagram.call(this, diagramOptions);

    if (options && options.container) {
      this.attachTo(options.container);
    }
  };

  /**
   * Emit an event on the underlying {@link EventBus}
   *
   * @param  {string} type
   * @param  {Object} event
   *
   * @return {Object} The return value after calling all event listeners.
   */
  BaseViewer.prototype._emit = function(type, event) {
    return this.get('eventBus').fire(type, event);
  };

  /**
   * @param {BaseViewerOptions} options
   *
   * @return {HTMLElement}
   */
  BaseViewer.prototype._createContainer = function(options) {

    const container = domify$1('<div class="bjs-container"></div>');

    assign(container, {
      width: ensureUnit(options.width),
      height: ensureUnit(options.height),
      position: options.position
    });

    return container;
  };

  /**
   * @param {BaseViewerOptions} options
   *
   * @return {Moddle}
   */
  BaseViewer.prototype._createModdle = function(options) {
    const moddleOptions = assign$1({}, this._moddleExtensions, options.moddleExtensions);

    return new SimpleBpmnModdle(moddleOptions);
  };

  BaseViewer.prototype._modules = [];

  // helpers ///////////////

  function addWarningsToError(err, warningsAry) {
    err.warnings = warningsAry;
    return err;
  }

  function checkValidationError(err) {

    // check if we can help the user by indicating wrong BPMN 2.0 xml
    // (in case he or the exporting tool did not get that right)

    const pattern = /unparsable content <([^>]+)> detected([\s\S]*)$/;
    const match = pattern.exec(err.message);

    if (match) {
      err.message =
        'unparsable content <' + match[1] + '> detected; ' +
        'this may indicate an invalid BPMN 2.0 diagram file' + match[2];
    }

    return err;
  }

  const DEFAULT_OPTIONS = {
    width: '100%',
    height: '100%',
    position: 'relative'
  };


  /**
   * Ensure the passed argument is a proper unit (defaulting to px)
   */
  function ensureUnit(val) {
    return val + (isNumber(val) ? 'px' : '');
  }


  /**
   * Find BPMNDiagram in definitions by ID
   *
   * @param {ModdleElement<Definitions>} definitions
   * @param {string} diagramId
   *
   * @return {ModdleElement<BPMNDiagram>|null}
   */
  function findBPMNDiagram(definitions, diagramId) {
    if (!diagramId) {
      return null;
    }

    return find$1(definitions.diagrams, function(element) {
      return element.id === diagramId;
    }) || null;
  }

  /**
   * Adds the project logo to the diagram container as
   * required by the bpmn.io license.
   *
   * @see http://bpmn.io/license
   *
   * @param {Element} container
   */
  function addProjectLogo(container) {
    const img = BPMNIO_IMG;

    const linkMarkup =
      '<a href="http://bpmn.io" ' +
      'target="_blank" ' +
      'class="bjs-powered-by" ' +
      'title="Powered by bpmn.io" ' +
      '>' +
      img +
      '</a>';

    const linkElement = domify$1(linkMarkup);

    assign(query('svg', linkElement), LOGO_STYLES);
    assign(linkElement, LINK_STYLES, {
      position: 'absolute',
      bottom: '15px',
      right: '15px',
      zIndex: '100'
    });

    container.appendChild(linkElement);

    event.bind(linkElement, 'click', function(event) {
      open();

      event.preventDefault();
    });
  }

  /* </project-logo> */

  /**
   * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions
   */

  /**
   * A viewer for BPMN 2.0 diagrams.
   *
   * Have a look at {@link bpmn-js/lib/NavigatedViewer} or {@link bpmn-js/lib/Modeler} for bundles that include
   * additional features.
   *
   *
   * ## Extending the Viewer
   *
   * In order to extend the viewer pass extension modules to bootstrap via the
   * `additionalModules` option. An extension module is an object that exposes
   * named services.
   *
   * The following example depicts the integration of a simple
   * logging component that integrates with interaction events:
   *
   *
   * ```javascript
   *
   * // logging component
   * function InteractionLogger(eventBus) {
   *   eventBus.on('element.hover', function(event) {
   *     console.log()
   *   })
   * }
   *
   * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
   *
   * // extension module
   * var extensionModule = {
   *   __init__: [ 'interactionLogger' ],
   *   interactionLogger: [ 'type', InteractionLogger ]
   * };
   *
   * // extend the viewer
   * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });
   * bpmnViewer.importXML(...);
   * ```
   *
   * @template [ServiceMap=null]
   *
   * @extends BaseViewer<ServiceMap>
   *
   * @param {BaseViewerOptions} [options] The options to configure the viewer.
   */
  function Viewer(options) {
    BaseViewer.call(this, options);
  }

  e$3(Viewer, BaseViewer);

  // modules the viewer is composed of
  Viewer.prototype._modules = [
    CoreModule$1,
    DrilldownModdule,
    OverlaysModule,
    SelectionModule,
    TranslateModule
  ];

  // default moddle extensions the viewer is composed of
  Viewer.prototype._moddleExtensions = {};

  /**
   * @typedef {import('./BaseViewer').BaseViewerOptions} BaseViewerOptions
   * @typedef {import('./BaseViewer').ModdleElementsById} ModdleElementsById
   *
   * @typedef {import('./model/Types').ModdleElement} ModdleElement
   */

  /**
   * A base modeler for BPMN 2.0 diagrams.
   *
   * See {@link bpmn-js/lib/Modeler} for a fully-featured modeler.
   *
   * @template [ServiceMap=null]
   *
   * @extends BaseViewer<ServiceMap>
   *
   * @param {BaseViewerOptions} [options] The options to configure the modeler.
   */
  function BaseModeler(options) {
    BaseViewer.call(this, options);

    // hook ID collection into the modeler
    this.on('import.parse.complete', function(event) {
      if (!event.error) {
        this._collectIds(event.definitions, event.elementsById);
      }
    }, this);

    this.on('diagram.destroy', function() {
      this.get('moddle').ids.clear();
    }, this);
  }

  e$3(BaseModeler, BaseViewer);


  /**
   * Create a moddle instance, attaching IDs to it.
   *
   * @param {BaseViewerOptions} options
   *
   * @return {Moddle}
   */
  BaseModeler.prototype._createModdle = function(options) {
    var moddle = BaseViewer.prototype._createModdle.call(this, options);

    // attach ids to moddle to be able to track and validated ids in the BPMN 2.0
    // XML document tree
    moddle.ids = new Ids$1([ 32, 36, 1 ]);

    return moddle;
  };

  /**
   * Collect IDs processed during parsing of the definitions object.
   *
   * @param {ModdleElement} definitions
   * @param {ModdleElementsById} elementsById
   */
  BaseModeler.prototype._collectIds = function(definitions, elementsById) {

    var moddle = definitions.$model,
        ids = moddle.ids,
        id;

    // remove references from previous import
    ids.clear();

    for (id in elementsById) {
      ids.claim(id, elementsById[ id ]);
    }
  };

  var KEYS_COPY = [ 'c', 'C' ];
  var KEYS_PASTE = [ 'v', 'V' ];
  var KEYS_REDO = [ 'y', 'Y' ];
  var KEYS_UNDO = [ 'z', 'Z' ];

  /**
   * Returns true if event was triggered with any modifier
   * @param {KeyboardEvent} event
   */
  function hasModifier(event) {
    return (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey);
  }

  /**
   * @param {KeyboardEvent} event
   * @return {boolean}
   */
  function isCmd(event) {

    // ensure we don't react to AltGr
    // (mapped to CTRL + ALT)
    if (event.altKey) {
      return false;
    }

    return event.ctrlKey || event.metaKey;
  }

  /**
   * Checks if key pressed is one of provided keys.
   *
   * @param {string|string[]} keys
   * @param {KeyboardEvent} event
   * @return {boolean}
   */
  function isKey(keys, event) {
    keys = isArray$3(keys) ? keys : [ keys ];

    return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isShift(event) {
    return event.shiftKey;
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isCopy(event) {
    return isCmd(event) && isKey(KEYS_COPY, event);
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isPaste(event) {
    return isCmd(event) && isKey(KEYS_PASTE, event);
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isUndo(event) {
    return isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event);
  }

  /**
   * @param {KeyboardEvent} event
   */
  function isRedo(event) {
    return isCmd(event) && (
      isKey(KEYS_REDO, event) || (
        isKey(KEYS_UNDO, event) && isShift(event)
      )
    );
  }

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {({ keyEvent: KeyboardEvent }) => any} Listener
   */

  var KEYDOWN_EVENT = 'keyboard.keydown',
      KEYUP_EVENT = 'keyboard.keyup';

  var DEFAULT_PRIORITY$5 = 1000;

  var compatMessage = 'Keyboard binding is now implicit; explicit binding to an element got removed. For more information, see https://github.com/bpmn-io/diagram-js/issues/661';


  /**
   * A keyboard abstraction that may be activated and
   * deactivated by users at will, consuming global key events
   * and triggering diagram actions.
   *
   * For keys pressed down, keyboard fires `keyboard.keydown` event.
   * The event context contains one field which is `KeyboardEvent` event.
   *
   * The implementation fires the following key events that allow
   * other components to hook into key handling:
   *
   *  - keyboard.bind
   *  - keyboard.unbind
   *  - keyboard.init
   *  - keyboard.destroy
   *
   * All events contain one field which is node.
   *
   * Specify the initial keyboard binding state via the
   * `keyboard.bind=true|false` configuration option.
   *
   * @param {Object} config
   * @param {boolean} [config.bind]
   * @param {EventBus} eventBus
   */
  function Keyboard(config, eventBus) {
    var self = this;

    this._config = config = config || {};

    this._eventBus = eventBus;

    this._keydownHandler = this._keydownHandler.bind(this);
    this._keyupHandler = this._keyupHandler.bind(this);

    // properly clean dom registrations
    eventBus.on('diagram.destroy', function() {
      self._fire('destroy');

      self.unbind();
    });

    if (config.bindTo) {
      console.error('unsupported configuration <keyboard.bindTo>', new Error(compatMessage));
    }

    var bind = config && config.bind !== false;

    eventBus.on('canvas.init', function(event) {
      self._target = event.svg;

      if (bind) {
        self.bind();
      }

      self._fire('init');
    });

  }

  Keyboard.$inject = [
    'config.keyboard',
    'eventBus'
  ];

  Keyboard.prototype._keydownHandler = function(event) {
    this._keyHandler(event, KEYDOWN_EVENT);
  };

  Keyboard.prototype._keyupHandler = function(event) {
    this._keyHandler(event, KEYUP_EVENT);
  };

  Keyboard.prototype._keyHandler = function(event, type) {
    var eventBusResult;

    if (this._isEventIgnored(event)) {
      return;
    }

    var context = {
      keyEvent: event
    };

    eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);

    if (eventBusResult) {
      event.preventDefault();
    }
  };

  Keyboard.prototype._isEventIgnored = function(event) {
    return false;
  };

  /**
   * Bind keyboard events to the given DOM node.
   *
   * @overlord
   * @deprecated No longer in use since version 15.0.0.
   *
   * @param {EventTarget} node
   */
  /**
   * Bind keyboard events to the canvas node.
   */
  Keyboard.prototype.bind = function(node) {

    // legacy <node> argument provided
    if (node) {
      console.error('unsupported argument <node>', new Error(compatMessage));
    }

    // make sure that the keyboard is only bound once to the DOM
    this.unbind();

    node = this._node = this._target;

    // bind key events
    event.bind(node, 'keydown', this._keydownHandler);
    event.bind(node, 'keyup', this._keyupHandler);

    this._fire('bind');
  };

  /**
   * @return {EventTarget}
   */
  Keyboard.prototype.getBinding = function() {
    return this._node;
  };

  Keyboard.prototype.unbind = function() {
    var node = this._node;

    if (node) {
      this._fire('unbind');

      // unbind key events
      event.unbind(node, 'keydown', this._keydownHandler);
      event.unbind(node, 'keyup', this._keyupHandler);
    }

    this._node = null;
  };

  /**
   * @param {string} event
   */
  Keyboard.prototype._fire = function(event) {
    this._eventBus.fire('keyboard.' + event, { node: this._node });
  };

  /**
   * Add a listener function that is notified with `KeyboardEvent` whenever
   * the keyboard is bound and the user presses a key. If no priority is
   * provided, the default value of 1000 is used.
   *
   * @param {number} [priority]
   * @param {Listener} listener
   * @param {string} [type='keyboard.keydown']
   */
  Keyboard.prototype.addListener = function(priority, listener, type) {
    if (isFunction(priority)) {
      type = listener;
      listener = priority;
      priority = DEFAULT_PRIORITY$5;
    }

    this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);
  };

  /**
   * Remove a listener function.
   *
   * @param {Listener} listener
   * @param {string} [type='keyboard.keydown']
   */
  Keyboard.prototype.removeListener = function(listener, type) {
    this._eventBus.off(type || KEYDOWN_EVENT, listener);
  };

  Keyboard.prototype.hasModifier = hasModifier;
  Keyboard.prototype.isCmd = isCmd;
  Keyboard.prototype.isShift = isShift;
  Keyboard.prototype.isKey = isKey;

  var LOW_PRIORITY$o = 500;


  /**
   * Adds default keyboard bindings.
   *
   * This does not pull in any features will bind only actions that
   * have previously been registered against the editorActions component.
   *
   * @param {EventBus} eventBus
   * @param {Keyboard} keyboard
   */
  function KeyboardBindings(eventBus, keyboard) {

    var self = this;

    eventBus.on('editorActions.init', LOW_PRIORITY$o, function(event) {

      var editorActions = event.editorActions;

      self.registerBindings(keyboard, editorActions);
    });
  }

  KeyboardBindings.$inject = [
    'eventBus',
    'keyboard'
  ];


  /**
   * Register available keyboard bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  KeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {

    /**
     * Add keyboard binding if respective editor action
     * is registered.
     *
     * @param {string} action name
     * @param {Function} fn that implements the key binding
     */
    function addListener(action, fn) {

      if (editorActions.isRegistered(action)) {
        keyboard.addListener(fn);
      }
    }


    // undo
    // (CTRL|CMD) + Z
    addListener('undo', function(context) {

      var event = context.keyEvent;

      if (isUndo(event)) {
        editorActions.trigger('undo');

        return true;
      }
    });

    // redo
    // CTRL + Y
    // CMD + SHIFT + Z
    addListener('redo', function(context) {

      var event = context.keyEvent;

      if (isRedo(event)) {
        editorActions.trigger('redo');

        return true;
      }
    });

    // copy
    // CTRL/CMD + C
    addListener('copy', function(context) {

      var event = context.keyEvent;

      if (isCopy(event)) {
        editorActions.trigger('copy');

        return true;
      }
    });

    // paste
    // CTRL/CMD + V
    addListener('paste', function(context) {

      var event = context.keyEvent;

      if (isPaste(event)) {
        editorActions.trigger('paste');

        return true;
      }
    });

    // zoom in one step
    // CTRL/CMD + +
    addListener('stepZoom', function(context) {

      var event = context.keyEvent;

      // quirk: it has to be triggered by `=` as well to work on international keyboard layout
      // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754
      if (isKey([ '+', 'Add', '=' ], event) && isCmd(event)) {
        editorActions.trigger('stepZoom', { value: 1 });

        return true;
      }
    });

    // zoom out one step
    // CTRL + -
    addListener('stepZoom', function(context) {

      var event = context.keyEvent;

      if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {
        editorActions.trigger('stepZoom', { value: -1 });

        return true;
      }
    });

    // zoom to the default level
    // CTRL + 0
    addListener('zoom', function(context) {

      var event = context.keyEvent;

      if (isKey('0', event) && isCmd(event)) {
        editorActions.trigger('zoom', { value: 1 });

        return true;
      }
    });

    // delete selected element
    // DEL
    addListener('removeSelection', function(context) {

      var event = context.keyEvent;

      if (isKey([ 'Backspace', 'Delete', 'Del' ], event)) {
        editorActions.trigger('removeSelection');

        return true;
      }
    });
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var KeyboardModule$1 = {
    __init__: [ 'keyboard', 'keyboardBindings' ],
    keyboard: [ 'type', Keyboard ],
    keyboardBindings: [ 'type', KeyboardBindings ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../features/keyboard/Keyboard').default} Keyboard
   */

  var DEFAULT_CONFIG$1 = {
    moveSpeed: 50,
    moveSpeedAccelerated: 200
  };


  /**
   * A feature that allows users to move the canvas using the keyboard.
   *
   * @param {Object} config
   * @param {number} [config.moveSpeed=50]
   * @param {number} [config.moveSpeedAccelerated=200]
   * @param {Keyboard} keyboard
   * @param {Canvas} canvas
   */
  function KeyboardMove(
      config,
      keyboard,
      canvas
  ) {

    var self = this;

    this._config = assign$1({}, DEFAULT_CONFIG$1, config || {});

    keyboard.addListener(arrowsListener);


    function arrowsListener(context) {

      var event = context.keyEvent,
          config = self._config;

      if (!keyboard.isCmd(event)) {
        return;
      }

      if (keyboard.isKey([
        'ArrowLeft', 'Left',
        'ArrowUp', 'Up',
        'ArrowDown', 'Down',
        'ArrowRight', 'Right'
      ], event)) {

        var speed = (
          keyboard.isShift(event) ?
            config.moveSpeedAccelerated :
            config.moveSpeed
        );

        var direction;

        switch (event.key) {
        case 'ArrowLeft':
        case 'Left':
          direction = 'left';
          break;
        case 'ArrowUp':
        case 'Up':
          direction = 'up';
          break;
        case 'ArrowRight':
        case 'Right':
          direction = 'right';
          break;
        case 'ArrowDown':
        case 'Down':
          direction = 'down';
          break;
        }

        self.moveCanvas({
          speed: speed,
          direction: direction
        });

        return true;
      }
    }

    /**
     * @param {{
     *   direction: 'up' | 'down' | 'left' | 'right';
     *   speed: number;
     * }} options
     */
    this.moveCanvas = function(options) {

      var dx = 0,
          dy = 0,
          speed = options.speed;

      var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);

      switch (options.direction) {
      case 'left': // Left
        dx = actualSpeed;
        break;
      case 'up': // Up
        dy = actualSpeed;
        break;
      case 'right': // Right
        dx = -actualSpeed;
        break;
      case 'down': // Down
        dy = -actualSpeed;
        break;
      }

      canvas.scroll({
        dx: dx,
        dy: dy
      });
    };

  }


  KeyboardMove.$inject = [
    'config.keyboardMove',
    'keyboard',
    'canvas'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var KeyboardMoveModule = {
    __depends__: [
      KeyboardModule$1
    ],
    __init__: [ 'keyboardMove' ],
    keyboardMove: [ 'type', KeyboardMove ]
  };

  var CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;

  /**
   * @param {string} mode
   */
  function set(mode) {
    var classes$1 = classes(document.body);

    classes$1.removeMatching(CURSOR_CLS_PATTERN);

    if (mode) {
      classes$1.add('djs-cursor-' + mode);
    }
  }

  function unset() {
    set(null);
  }

  /**
   * @typedef {import('../core/EventBus').default} EventBus
   */

  var TRAP_PRIORITY = 5000;

  /**
   * Installs a click trap that prevents a ghost click following a dragging operation.
   *
   * @param {EventBus} eventBus
   * @param {string} [eventName='element.click']
   *
   * @return {() => void} a function to immediately remove the installed trap.
   */
  function install(eventBus, eventName) {

    eventName = eventName || 'element.click';

    function trap() {
      return false;
    }

    eventBus.once(eventName, TRAP_PRIORITY, trap);

    return function() {
      eventBus.off(eventName, trap);
    };
  }

  /**
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   */

  /**
   * @param {Rect} bounds
   * @return {Point}
   */
  function center(bounds) {
    return {
      x: bounds.x + (bounds.width / 2),
      y: bounds.y + (bounds.height / 2)
    };
  }


  /**
   * @param {Point} a
   * @param {Point} b
   * @return {Point}
   */
  function delta(a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  }

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var THRESHOLD$1 = 15;


  /**
   * Move the canvas via mouse.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function MoveCanvas(eventBus, canvas) {

    var context;

    function handleMousedown(event) {
      return handleStart(event.originalEvent);
    }

    // listen for move on element mouse down;
    // allow others to hook into the event before us though
    // (dragging / element moving will do this)
    eventBus.on('canvas.focus.changed', function(event) {
      if (event.focused) {
        eventBus.on('element.mousedown', 500, handleMousedown);
      } else {
        eventBus.off('element.mousedown', handleMousedown);
      }
    });


    function handleMove(event) {

      var start = context.start,
          button = context.button,
          position = toPoint(event),
          delta$1 = delta(position, start);

      if (!context.dragging && length(delta$1) > THRESHOLD$1) {
        context.dragging = true;

        if (button === 0) {
          install(eventBus);
        }

        set('grab');
      }

      if (context.dragging) {

        var lastPosition = context.last || context.start;

        delta$1 = delta(position, lastPosition);

        canvas.scroll({
          dx: delta$1.x,
          dy: delta$1.y
        });

        context.last = position;
      }

      // prevent select
      event.preventDefault();
    }


    function handleEnd(event$1) {
      event.unbind(document, 'mousemove', handleMove);
      event.unbind(document, 'mouseup', handleEnd);

      context = null;

      unset();
    }

    function handleStart(event$1) {

      // event is already handled by '.djs-draggable'
      if (closest(event$1.target, '.djs-draggable')) {
        return;
      }

      var button = event$1.button;

      // reject right mouse button or modifier key
      if (button >= 2 || event$1.ctrlKey || event$1.shiftKey || event$1.altKey) {
        return;
      }

      context = {
        button: button,
        start: toPoint(event$1)
      };

      event.bind(document, 'mousemove', handleMove);
      event.bind(document, 'mouseup', handleEnd);

      // we've handled the event
      return true;
    }

    this.isActive = function() {
      return !!context;
    };

  }


  MoveCanvas.$inject = [
    'eventBus',
    'canvas'
  ];



  // helpers ///////

  function length(point) {
    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var MoveCanvasModule = {
    __init__: [ 'moveCanvas' ],
    moveCanvas: [ 'type', MoveCanvas ]
  };

  /**
   * Get the logarithm of x with base 10.
   *
   * @param {number} x
   */
  function log10(x) {
    return Math.log(x) / Math.log(10);
  }

  /**
   * Get step size for given range and number of steps.
   *
   * @param {Object} range
   * @param {number} range.min
   * @param {number} range.max
   * @param {number} steps
   */
  function getStepSize(range, steps) {

    var minLinearRange = log10(range.min),
        maxLinearRange = log10(range.max);

    var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);

    return absoluteLinearRange / steps;
  }

  /**
   * @param {Object} range
   * @param {number} range.min
   * @param {number} range.max
   * @param {number} scale
   */
  function cap(range, scale) {
    return Math.max(range.min, Math.min(range.max, scale));
  }

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').ScrollDelta} ScrollDelta
   */

  var sign = Math.sign || function(n) {
    return n >= 0 ? 1 : -1;
  };

  var RANGE = { min: 0.2, max: 4 },
      NUM_STEPS = 10;

  var DELTA_THRESHOLD = 0.1;

  var DEFAULT_SCALE = 0.75;

  /**
   * An implementation of zooming and scrolling within the
   * {@link Canvas} via the mouse wheel.
   *
   * Mouse wheel zooming / scrolling may be disabled using
   * the {@link toggle(enabled)} method.
   *
   * @param {Object} [config]
   * @param {boolean} [config.enabled=true] default enabled state
   * @param {number} [config.scale=.75] scroll sensivity
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function ZoomScroll(config, eventBus, canvas) {

    config = config || {};

    this._enabled = false;

    this._canvas = canvas;
    this._container = canvas._container;

    this._handleWheel = bind$2(this._handleWheel, this);

    this._totalDelta = 0;
    this._scale = config.scale || DEFAULT_SCALE;

    var self = this;

    eventBus.on('canvas.focus.changed', function(event) {
      self._init(event.focused && config.enabled !== false);
    });
  }

  ZoomScroll.$inject = [
    'config.zoomScroll',
    'eventBus',
    'canvas'
  ];

  /**
   * @param {ScrollDelta} delta
   */
  ZoomScroll.prototype.scroll = function scroll(delta) {
    this._canvas.scroll(delta);
  };


  ZoomScroll.prototype.reset = function reset() {
    this._canvas.zoom('fit-viewport');
  };

  /**
   * Zoom depending on delta.
   *
   * @param {number} delta
   * @param {Point} position
   */
  ZoomScroll.prototype.zoom = function zoom(delta, position) {

    // zoom with half the step size of stepZoom
    var stepSize = getStepSize(RANGE, NUM_STEPS * 2);

    // add until threshold reached
    this._totalDelta += delta;

    if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {
      this._zoom(delta, position, stepSize);

      // reset
      this._totalDelta = 0;
    }
  };


  ZoomScroll.prototype._handleWheel = function handleWheel(event) {

    if (!this._canvas.isFocused()) {
      return;
    }

    var element = this._container;

    event.preventDefault();

    // pinch to zoom is mapped to wheel + ctrlKey = true
    // in modern browsers (!)

    var isZoom = event.ctrlKey || (isMac() && event.metaKey);

    var isHorizontalScroll = event.shiftKey;

    var factor = -1 * this._scale,
        delta;

    if (isZoom) {
      factor *= event.deltaMode === 0 ? 0.020 : 0.32;
    } else {
      factor *= event.deltaMode === 0 ? 1.0 : 16.0;
    }

    if (isZoom) {
      var elementRect = element.getBoundingClientRect();

      var offset = {
        x: event.clientX - elementRect.left,
        y: event.clientY - elementRect.top
      };

      delta = (
        Math.sqrt(
          Math.pow(event.deltaY, 2) +
          Math.pow(event.deltaX, 2)
        ) * sign(event.deltaY) * factor
      );

      // zoom in relative to diagram {x,y} coordinates
      this.zoom(delta, offset);
    } else {

      if (isHorizontalScroll) {
        delta = {
          dx: factor * event.deltaY,
          dy: 0
        };
      } else {
        delta = {
          dx: factor * event.deltaX,
          dy: factor * event.deltaY
        };
      }

      this.scroll(delta);
    }
  };

  /**
   * Zoom with fixed step size.
   *
   * @param {number} delta Zoom delta (1 for zooming in, -1 for zooming out).
   * @param {Point} [position]
   */
  ZoomScroll.prototype.stepZoom = function stepZoom(delta, position) {

    var stepSize = getStepSize(RANGE, NUM_STEPS);

    this._zoom(delta, position, stepSize);
  };


  /**
   * Zoom in/out given a step size.
   *
   * @param {number} delta
   * @param {Point} [position]
   * @param {number} stepSize
   */
  ZoomScroll.prototype._zoom = function(delta, position, stepSize) {
    var canvas = this._canvas;

    var direction = delta > 0 ? 1 : -1;

    var currentLinearZoomLevel = log10(canvas.zoom());

    // snap to a proximate zoom step
    var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;

    // increase or decrease one zoom step in the given direction
    newLinearZoomLevel += stepSize * direction;

    // calculate the absolute logarithmic zoom level based on the linear zoom level
    // (e.g. 2 for an absolute x2 zoom)
    var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);

    canvas.zoom(cap(RANGE, newLogZoomLevel), position);
  };


  /**
   * Toggle the zoom scroll ability via mouse wheel.
   *
   * @param {boolean} [newEnabled] new enabled state
   */
  ZoomScroll.prototype.toggle = function toggle(newEnabled) {

    var element = this._container;
    var handleWheel = this._handleWheel;

    var oldEnabled = this._enabled;

    if (typeof newEnabled === 'undefined') {
      newEnabled = !oldEnabled;
    }

    // only react on actual changes
    if (oldEnabled !== newEnabled) {

      // add or remove wheel listener based on
      // changed enabled state
      event[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);
    }

    this._enabled = newEnabled;

    return newEnabled;
  };


  ZoomScroll.prototype._init = function(newEnabled) {
    this.toggle(newEnabled);
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ZoomScrollModule = {
    __init__: [ 'zoomScroll' ],
    zoomScroll: [ 'type', ZoomScroll ]
  };

  /**
   * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions
   */

  /**
   * A viewer with mouse and keyboard navigation features.
   *
   * @template [ServiceMap=null]
   *
   * @extends Viewer<ServiceMap>
   *
   * @param {BaseViewerOptions} [options]
   */
  function NavigatedViewer(options) {
    Viewer.call(this, options);
  }

  e$3(NavigatedViewer, Viewer);


  NavigatedViewer.prototype._navigationModules = [
    KeyboardMoveModule,
    MoveCanvasModule,
    ZoomScrollModule
  ];

  NavigatedViewer.prototype._modules = [].concat(
    Viewer.prototype._modules,
    NavigatedViewer.prototype._navigationModules
  );

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').Dimension} Dimension
   *
   * @typedef { 'top' | 'right' | 'bottom' | 'left' | 'center' | 'middle' } Alignment
   */

  function last$1(arr) {
    return arr && arr[arr.length - 1];
  }

  function sortTopOrMiddle(element) {
    return element.y;
  }

  function sortLeftOrCenter(element) {
    return element.x;
  }

  /**
   * Sorting functions for different alignments.
   *
   * @type {Record<string, Function>}
   */
  var ALIGNMENT_SORTING = {
    left: sortLeftOrCenter,
    center: sortLeftOrCenter,
    right: function(element) {
      return element.x + element.width;
    },
    top: sortTopOrMiddle,
    middle: sortTopOrMiddle,
    bottom: function(element) {
      return element.y + element.height;
    }
  };

  /**
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function AlignElements$1(modeling, rules) {
    this._modeling = modeling;
    this._rules = rules;
  }

  AlignElements$1.$inject = [ 'modeling', 'rules' ];


  /**
   * Get relevant axis and dimension for given alignment.
   *
   * @param {Alignment} type
   *
   * @return { {
   *   axis: Axis;
   *   dimension: Dimension;
   * } }
   */
  AlignElements$1.prototype._getOrientationDetails = function(type) {
    var vertical = [ 'top', 'bottom', 'middle' ],
        axis = 'x',
        dimension = 'width';

    if (vertical.indexOf(type) !== -1) {
      axis = 'y';
      dimension = 'height';
    }

    return {
      axis: axis,
      dimension: dimension
    };
  };

  AlignElements$1.prototype._isType = function(type, types) {
    return types.indexOf(type) !== -1;
  };

  /**
   * Get point on relevant axis for given alignment.
   *
   * @param {Alignment} type
   * @param {Element[]} sortedElements
   *
   * @return {Partial<Record<Alignment, number>>}
   */
  AlignElements$1.prototype._alignmentPosition = function(type, sortedElements) {
    var orientation = this._getOrientationDetails(type),
        axis = orientation.axis,
        dimension = orientation.dimension,
        alignment = {},
        centers = {},
        hasSharedCenters = false,
        centeredElements,
        firstElement,
        lastElement;

    function getMiddleOrTop(first, last) {
      return Math.round((first[axis] + last[axis] + last[dimension]) / 2);
    }

    if (this._isType(type, [ 'left', 'top' ])) {
      alignment[type] = sortedElements[0][axis];

    } else if (this._isType(type, [ 'right', 'bottom' ])) {
      lastElement = last$1(sortedElements);

      alignment[type] = lastElement[axis] + lastElement[dimension];

    } else if (this._isType(type, [ 'center', 'middle' ])) {

      // check if there is a center shared by more than one shape
      // if not, just take the middle of the range
      forEach$1(sortedElements, function(element) {
        var center = element[axis] + Math.round(element[dimension] / 2);

        if (centers[center]) {
          centers[center].elements.push(element);
        } else {
          centers[center] = {
            elements: [ element ],
            center: center
          };
        }
      });

      centeredElements = sortBy(centers, function(center) {
        if (center.elements.length > 1) {
          hasSharedCenters = true;
        }

        return center.elements.length;
      });

      if (hasSharedCenters) {
        alignment[type] = last$1(centeredElements).center;

        return alignment;
      }

      firstElement = sortedElements[0];

      sortedElements = sortBy(sortedElements, function(element) {
        return element[axis] + element[dimension];
      });

      lastElement = last$1(sortedElements);

      alignment[type] = getMiddleOrTop(firstElement, lastElement);
    }

    return alignment;
  };

  /**
   * Align elements on relevant axis for given alignment.
   *
   * @param {Element[]} elements
   * @param {Alignment} type
   */
  AlignElements$1.prototype.trigger = function(elements, type) {
    var modeling = this._modeling,
        allowed;

    // filter out elements which cannot be aligned
    var filteredElements = filter(elements, function(element) {
      return !(element.waypoints || element.host || element.labelTarget);
    });

    // filter out elements via rules
    allowed = this._rules.allowed('elements.align', { elements: filteredElements });
    if (isArray$3(allowed)) {
      filteredElements = allowed;
    }

    if (filteredElements.length < 2 || !allowed) {
      return;
    }

    var sortFn = ALIGNMENT_SORTING[type];

    var sortedElements = sortBy(filteredElements, sortFn);

    var alignment = this._alignmentPosition(type, sortedElements);

    modeling.alignElements(sortedElements, alignment);
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var AlignElementsModule$1 = {
    __init__: [ 'alignElements' ],
    alignElements: [ 'type', AlignElements$1 ]
  };

  const Ids = new IdGenerator();


  /**
   * @typedef { {
   *   promise: Promise<unknown>,
   *   executionId: number
   * } } ScheduledTask
   */

  /**
   * A utility that allows you to schedule async tasks.
   *
   * @class
   * @constructor
   *
   * @param { import('../core/EventBus').default } eventBus
   */
  function Scheduler(eventBus) {

    /**
     * @type { Record<string, ScheduledTask> }
     */
    this._scheduled = {};

    eventBus.on('diagram.destroy', () => {
      Object.keys(this._scheduled).forEach(id => {
        this.cancel(id);
      });
    });
  }

  Scheduler.$inject = [ 'eventBus' ];

  /**
   * Schedule execution of a task in the next tick.
   *
   * Call with an id to ensure only the latest call will be executed.
   *
   * @template T

   * @param {(...args: any[]) => T} taskFn function to be executed
   * @param {string} [id] identifying the task to ensure uniqueness
   *
   * @return Promise<T> result of the executed task
   */
  Scheduler.prototype.schedule = function(taskFn, id = Ids.next()) {

    this.cancel(id);

    const newScheduled = this._schedule(taskFn, id);

    this._scheduled[id] = newScheduled;

    return newScheduled.promise;
  };

  Scheduler.prototype._schedule = function(taskFn, id) {

    const deferred = defer();

    const executionId = setTimeout(() => {

      try {
        this._scheduled[id] = null;

        try {
          deferred.resolve(taskFn());
        } catch (error) {
          deferred.reject(error);
        }
      } catch (error) {
        console.error('Scheduler#_schedule execution failed', error);
      }
    });

    return {
      executionId,
      promise: deferred.promise
    };
  };

  /**
   * Cancel a previously scheduled task.
   *
   * @param {string} id
   */
  Scheduler.prototype.cancel = function(id) {

    const scheduled = this._scheduled[id];

    if (scheduled) {
      this._cancel(scheduled);

      this._scheduled[id] = null;
    }
  };

  Scheduler.prototype._cancel = function(scheduled) {
    clearTimeout(scheduled.executionId);
  };

  /**
   * @return { {
   *   promise: Promise,
   *   resolve: Function,
   *   reject: Function
   * } }
   */
  function defer() {

    const deferred = {};

    deferred.promise = new Promise((resolve, reject) => {
      deferred.resolve = resolve;
      deferred.reject = reject;
    });

    return deferred;
  }

  var SchedulerModule = {
    scheduler: [ 'type', Scheduler ]
  };

  var MARKER_HIDDEN$1 = 'djs-element-hidden';

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../util/Types').Rect} Rect
   * @typedef {import('../../util/Types').RectTRBL} RectTRBL
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../scheduler/Scheduler').default} Scheduler
   *
   * @typedef {import('./ContextPadProvider').default} ContextPadProvider
   * @typedef {import('./ContextPadProvider').ContextPadEntries} ContextPadEntries
   *
   */

  /**
   * @template {Element} [ElementType=Element]
   *
   * @typedef {ElementType|ElementType[]} ContextPadTarget
   */

  var entrySelector = '.entry';

  var DEFAULT_PRIORITY$4 = 1000;
  var CONTEXT_PAD_MARGIN = 8;
  var HOVER_DELAY = 300;

  /**
   * A context pad that displays element specific, contextual actions next
   * to a diagram element.
   *
   * @param {Canvas} canvas
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Scheduler} scheduler
   */
  function ContextPad(canvas, elementRegistry, eventBus, scheduler) {

    this._canvas = canvas;
    this._elementRegistry = elementRegistry;
    this._eventBus = eventBus;
    this._scheduler = scheduler;

    this._current = null;

    this._init();
  }

  ContextPad.$inject = [
    'canvas',
    'elementRegistry',
    'eventBus',
    'scheduler'
  ];


  /**
   * Registers events needed for interaction with other components.
   */
  ContextPad.prototype._init = function() {
    var self = this;

    this._eventBus.on('selection.changed', function(event) {

      var selection = event.newSelection;

      var target = selection.length
        ? selection.length === 1
          ? selection[0]
          : selection
        : null;

      if (target) {
        self.open(target, true);
      } else {
        self.close();
      }
    });

    this._eventBus.on('elements.changed', function(event) {
      var elements = event.elements,
          current = self._current;

      if (!current) {
        return;
      }

      var target = current.target;

      var targets = isArray$3(target) ? target : [ target ];

      var targetsChanged = targets.filter(function(element) {
        return elements.includes(element);
      });

      if (targetsChanged.length) {

        // (1) close
        self.close();

        var targetsNew = targets.filter(function(element) {
          return self._elementRegistry.get(element.id);
        });

        if (targetsNew.length) {

          // (2) re-open with new targets being all previous targets that still
          // exist
          self._updateAndOpen(targetsNew.length > 1 ? targetsNew : targetsNew[ 0 ]);
        }
      }
    });

    this._eventBus.on('canvas.viewbox.changed', function() {
      self._updatePosition();
    });

    this._eventBus.on('element.marker.update', function(event) {
      if (!self.isOpen()) {
        return;
      }

      var element = event.element;

      var current = self._current;

      var targets = isArray$3(current.target) ? current.target : [ current.target ];

      if (!targets.includes(element)) {
        return;
      }

      self._updateVisibility();
    });

    this._container = this._createContainer();
  };

  ContextPad.prototype._createContainer = function() {
    var container = domify$1('<div class="djs-context-pad-parent"></div>');

    this._canvas.getContainer().appendChild(container);

    return container;
  };

  /**
   * @overlord
   *
   * Register a context pad provider with the default priority. See
   * {@link ContextPadProvider} for examples.
   *
   * @param {ContextPadProvider} provider
   */

  /**
   * Register a context pad provider with the given priority. See
   * {@link ContextPadProvider} for examples.
   *
   * @param {number} priority
   * @param {ContextPadProvider} provider
   */
  ContextPad.prototype.registerProvider = function(priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$4;
    }

    this._eventBus.on('contextPad.getProviders', priority, function(event) {
      event.providers.push(provider);
    });
  };


  /**
   * Get context pad entries for given elements.
   *
   * @param {ContextPadTarget} target
   *
   * @return {ContextPadEntries} list of entries
   */
  ContextPad.prototype.getEntries = function(target) {
    var providers = this._getProviders();

    var provideFn = isArray$3(target)
      ? 'getMultiElementContextPadEntries'
      : 'getContextPadEntries';

    var entries = {};

    // loop through all providers and their entries.
    // group entries by id so that overriding an entry is possible
    forEach$1(providers, function(provider) {

      if (!isFunction(provider[provideFn])) {
        return;
      }

      var entriesOrUpdater = provider[provideFn](target);

      if (isFunction(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$1(entriesOrUpdater, function(entry, id) {
          entries[id] = entry;
        });
      }
    });

    return entries;
  };


  /**
   * Trigger context pad via DOM event.
   *
   * The entry to trigger is determined by the target element.
   *
   * @param {string} action
   * @param {Event} event
   * @param {boolean} [autoActivate=false]
   */
  ContextPad.prototype.trigger = function(action, event, autoActivate) {
    var self = this;

    var entry,
        originalEvent,
        button = event.delegateTarget || event.target;

    if (!button) {
      return event.preventDefault();
    }

    entry = attr(button, 'data-action');
    originalEvent = event.originalEvent || event;

    if (action === 'mouseover') {
      this._timeout = setTimeout(function() {
        self._mouseout = self.triggerEntry(entry, 'hover', originalEvent, autoActivate);
      }, HOVER_DELAY);

      return;
    } else if (action === 'mouseout') {
      clearTimeout(this._timeout);

      if (this._mouseout) {
        this._mouseout();

        this._mouseout = null;
      }

      return;
    }

    return this.triggerEntry(entry, action, originalEvent, autoActivate);
  };

  /**
   * Trigger action on context pad entry entry, e.g. click, mouseover or mouseout.
   *
   * @param {string} entryId
   * @param {string} action
   * @param {Event} event
   * @param {boolean} [autoActivate=false]
   */
  ContextPad.prototype.triggerEntry = function(entryId, action, event, autoActivate) {

    if (!this.isShown()) {
      return;
    }

    var target = this._current.target,
        entries = this._current.entries;

    var entry = entries[entryId];

    if (!entry) {
      return;
    }

    var handler = entry.action;

    if (this._eventBus.fire('contextPad.trigger', { entry, event }) === false) {
      return;
    }

    // simple action (via callback function)
    if (isFunction(handler)) {
      if (action === 'click') {
        return handler(event, target, autoActivate);
      }
    } else {
      if (handler[action]) {
        return handler[action](event, target, autoActivate);
      }
    }

    // silence other actions
    event.preventDefault();
  };


  /**
   * Open the context pad for given elements.
   *
   * @param {ContextPadTarget} target
   * @param {boolean} [force=false] - Force re-opening context pad.
   */
  ContextPad.prototype.open = function(target, force) {
    if (!force && this.isOpen(target)) {
      return;
    }

    this.close();

    this._updateAndOpen(target);
  };

  ContextPad.prototype._getProviders = function() {

    var event = this._eventBus.createEvent({
      type: 'contextPad.getProviders',
      providers: []
    });

    this._eventBus.fire(event);

    return event.providers;
  };


  /**
   * @param {ContextPadTarget} target
   */
  ContextPad.prototype._updateAndOpen = function(target) {
    var entries = this.getEntries(target),
        html = this._createHtml(target),
        image;

    forEach$1(entries, function(entry, id) {
      var grouping = entry.group || 'default',
          control = domify$1(entry.html || '<div class="entry" draggable="true"></div>'),
          container;

      attr(control, 'data-action', id);

      container = query('[data-group=' + escapeCSS(grouping) + ']', html);
      if (!container) {
        container = domify$1('<div class="group"></div>');
        attr(container, 'data-group', grouping);

        html.appendChild(container);
      }

      container.appendChild(control);

      if (entry.className) {
        addClasses$1(control, entry.className);
      }

      if (entry.title) {
        attr(control, 'title', entry.title);
      }

      if (entry.imageUrl) {
        image = domify$1('<img>');
        attr(image, 'src', entry.imageUrl);
        image.style.width = '100%';
        image.style.height = '100%';

        control.appendChild(image);
      }
    });

    classes(html).add('open');

    this._current = {
      entries,
      html,
      target,
    };

    this._updatePosition();

    this._updateVisibility();

    this._eventBus.fire('contextPad.open', { current: this._current });
  };

  /**
   * @param {ContextPadTarget} target
   *
   * @return {HTMLElement}
   */
  ContextPad.prototype._createHtml = function(target) {
    var self = this;

    var html = domify$1('<div class="djs-context-pad"></div>');

    delegate.bind(html, entrySelector, 'click', function(event) {
      self.trigger('click', event);
    });

    delegate.bind(html, entrySelector, 'dragstart', function(event) {
      self.trigger('dragstart', event);
    });

    delegate.bind(html, entrySelector, 'mouseover', function(event) {
      self.trigger('mouseover', event);
    });

    delegate.bind(html, entrySelector, 'mouseout', function(event) {
      self.trigger('mouseout', event);
    });

    // stop propagation of mouse events
    event.bind(html, 'mousedown', function(event) {
      event.stopPropagation();
    });

    this._container.appendChild(html);

    this._eventBus.fire('contextPad.create', {
      target: target,
      pad: html
    });

    return html;
  };

  /**
   * @param {ContextPadTarget} target
   *
   * @return { { html: HTMLElement } }
   */
  ContextPad.prototype.getPad = function(target) {
    console.warn(new Error('ContextPad#getPad is deprecated and will be removed in future library versions, cf. https://github.com/bpmn-io/diagram-js/pull/888'));

    let html;

    if (this.isOpen() && targetsEqual(this._current.target, target)) {
      html = this._current.html;
    } else {
      html = this._createHtml(target);
    }

    return { html };
  };


  /**
   * Close the context pad
   */
  ContextPad.prototype.close = function() {
    if (!this.isOpen()) {
      return;
    }

    clearTimeout(this._timeout);

    this._container.innerHTML = '';

    this._eventBus.fire('contextPad.close', { current: this._current });

    this._current = null;
  };

  /**
   * Check if pad is open.
   *
   * If target is provided, check if it is opened
   * for the given target (single or multiple elements).
   *
   * @param {ContextPadTarget} [target]
   * @return {boolean}
   */
  ContextPad.prototype.isOpen = function(target) {
    var current = this._current;

    if (!current) {
      return false;
    }

    // basic no-args is open check
    if (!target) {
      return true;
    }

    var currentTarget = current.target;

    // strict handling of single vs. multi-selection
    if (isArray$3(target) !== isArray$3(currentTarget)) {
      return false;
    }

    if (isArray$3(target)) {
      return (
        target.length === currentTarget.length &&
        every(target, function(element) {
          return currentTarget.includes(element);
        })
      );
    } else {
      return currentTarget === target;
    }
  };


  /**
   * Check if pad is open and not hidden.
   *
   * @return {boolean}
   */
  ContextPad.prototype.isShown = function() {
    return this.isOpen() && classes(this._current.html).has('open');
  };

  /**
   * Show context pad.
   */
  ContextPad.prototype.show = function() {
    if (!this.isOpen()) {
      return;
    }

    classes(this._current.html).add('open');

    this._updatePosition();

    this._eventBus.fire('contextPad.show', { current: this._current });
  };

  /**
   * Hide context pad.
   */
  ContextPad.prototype.hide = function() {
    if (!this.isOpen()) {
      return;
    }

    classes(this._current.html).remove('open');

    this._eventBus.fire('contextPad.hide', { current: this._current });
  };

  /**
   * Get context pad position.
   *
   * If target is connection context pad will be positioned at connection end.
   *
   * If multiple targets context pad will be placed at top right corner bounding
   * box.
   *
   * @param {ContextPadTarget} target
   *
   * @return {RectTRBL & { x: number, y: number }}
   */
  ContextPad.prototype._getPosition = function(target) {
    if (!isArray$3(target) && isConnection(target)) {
      var viewbox = this._canvas.viewbox();

      var lastWaypoint = getLastWaypoint(target);

      var x = lastWaypoint.x * viewbox.scale - viewbox.x * viewbox.scale,
          y = lastWaypoint.y * viewbox.scale - viewbox.y * viewbox.scale;

      return {
        left: x + CONTEXT_PAD_MARGIN * this._canvas.zoom(),
        top: y
      };
    }

    var container = this._canvas.getContainer();

    var containerBounds = container.getBoundingClientRect();

    var targetBounds = this._getTargetBounds(target);

    return {
      left: targetBounds.right - containerBounds.left + CONTEXT_PAD_MARGIN * this._canvas.zoom(),
      top: targetBounds.top - containerBounds.top
    };
  };

  /**
   * Update context pad position.
   */
  ContextPad.prototype._updatePosition = function() {

    const updateFn = () => {
      if (!this.isOpen()) {
        return;
      }

      var html = this._current.html;

      var position = this._getPosition(this._current.target);

      if ('x' in position && 'y' in position) {
        html.style.left = position.x + 'px';
        html.style.top = position.y + 'px';
      } else {
        [
          'top',
          'right',
          'bottom',
          'left'
        ].forEach(function(key) {
          if (key in position) {
            html.style[ key ] = position[ key ] + 'px';
          }
        });
      }
    };

    this._scheduler.schedule(updateFn, 'ContextPad#_updatePosition');
  };

  /**
   * Update context pad visibility. Hide if any of the target elements is hidden
   * using the `djs-element-hidden` or `djs-label-hidden` markers.
   */
  ContextPad.prototype._updateVisibility = function() {

    const updateFn = () => {
      if (!this.isOpen()) {
        return;
      }

      var self = this;

      var target = this._current.target;

      var targets = isArray$3(target) ? target : [ target ];

      var isHidden = targets.some(function(target) {
        return self._canvas.hasMarker(target, MARKER_HIDDEN$1);
      });

      if (isHidden) {
        self.hide();
      } else {
        self.show();
      }
    };

    this._scheduler.schedule(updateFn, 'ContextPad#_updateVisibility');
  };

  /**
   * Get bounding client rect of target element(s).
   *
   * @param {ContextPadTarget} target
   *
   * @returns {Rect & RectTRBL}
   */
  ContextPad.prototype._getTargetBounds = function(target) {
    var self = this;

    var elements = isArray$3(target) ? target : [ target ];

    var elementsGfx = elements.map(function(element) {
      return self._canvas.getGraphics(element);
    });

    return elementsGfx.reduce(function(bounds, elementGfx) {
      const elementBounds = elementGfx.getBoundingClientRect();

      bounds.top = Math.min(bounds.top, elementBounds.top);
      bounds.right = Math.max(bounds.right, elementBounds.right);
      bounds.bottom = Math.max(bounds.bottom, elementBounds.bottom);
      bounds.left = Math.min(bounds.left, elementBounds.left);

      bounds.x = bounds.left;
      bounds.y = bounds.top;

      bounds.width = bounds.right - bounds.left;
      bounds.height = bounds.bottom - bounds.top;

      return bounds;
    }, {
      top: Infinity,
      right: -Infinity,
      bottom: -Infinity,
      left: Infinity
    });
  };

  // helpers //////////

  function addClasses$1(element, classNames) {
    var classes$1 = classes(element);

    classNames = isArray$3(classNames) ? classNames : classNames.split(/\s+/g);

    classNames.forEach(function(cls) {
      classes$1.add(cls);
    });
  }

  function getLastWaypoint(connection) {
    return connection.waypoints[connection.waypoints.length - 1];
  }

  /**
   * @param {ContextPadTarget} target
   * @param {ContextPadTarget} otherTarget
   *
   * @return {boolean}
   */
  function targetsEqual(target, otherTarget) {
    target = isArray$3(target) ? target : [ target ];
    otherTarget = isArray$3(otherTarget) ? otherTarget : [ otherTarget ];

    return target.length === otherTarget.length
      && every(target, function(element) {
        return otherTarget.includes(element);
      });
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ContextPadModule$1 = {
    __depends__: [
      InteractionEventsModule$1,
      SchedulerModule,
      OverlaysModule
    ],
    contextPad: [ 'type', ContextPad ]
  };

  var n$1,l$1,u$2,i$2,r$2,o$1,e$2,f$2,c$1,s$1,a$1,h$1,p$1={},v$1=[],y$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,d$1=Array.isArray;function w$1(n,l){for(var u in l)n[u]=l[u];return n}function g$1(n){n&&n.parentNode&&n.parentNode.removeChild(n);}function _$1(l,u,t){var i,r,o,e={};for(o in u)"key"==o?i=u[o]:"ref"==o?r=u[o]:e[o]=u[o];if(arguments.length>2&&(e.children=arguments.length>3?n$1.call(arguments,2):t),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps) void 0===e[o]&&(e[o]=l.defaultProps[o]);return m$2(l,e,i,r,null)}function m$2(n,t,i,r,o){var e={type:n,props:t,key:i,ref:r,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:null==o?++u$2:o,__i:-1,__u:0};return null==o&&null!=l$1.vnode&&l$1.vnode(e),e}function k$1(n){return n.children}function x$1(n,l){this.props=n,this.context=l;}function S(n,l){if(null==l)return n.__?S(n.__,n.__i+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?S(n):null}function C$2(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return C$2(n)}}function M(n){(!n.__d&&(n.__d=true)&&i$2.push(n)&&!$$1.__r++||r$2!==l$1.debounceRendering)&&((r$2=l$1.debounceRendering)||o$1)($$1);}function $$1(){for(var n,u,t,r,o,f,c,s=1;i$2.length;)i$2.length>s&&i$2.sort(e$2),n=i$2.shift(),s=i$2.length,n.__d&&(t=void 0,o=(r=(u=n).__v).__e,f=[],c=[],u.__P&&((t=w$1({},r)).__v=r.__v+1,l$1.vnode&&l$1.vnode(t),j$2(u.__P,t,r,u.__n,u.__P.namespaceURI,32&r.__u?[o]:null,f,null==o?S(r):o,!!(32&r.__u),c),t.__v=r.__v,t.__.__k[t.__i]=t,z$1(f,t,c),t.__e!=o&&C$2(t)));$$1.__r=0;}function I(n,l,u,t,i,r,o,e,f,c,s){var a,h,y,d,w,g,_=t&&t.__k||v$1,m=l.length;for(f=P$1(u,l,_,f,m),a=0;a<m;a++)null!=(y=u.__k[a])&&(h=-1===y.__i?p$1:_[y.__i]||p$1,y.__i=a,g=j$2(n,y,h,i,r,o,e,f,c,s),d=y.__e,y.ref&&h.ref!=y.ref&&(h.ref&&V$1(h.ref,null,y),s.push(y.ref,y.__c||d,y)),null==w&&null!=d&&(w=d),4&y.__u||h.__k===y.__k?f=A$2(y,f,n):"function"==typeof y.type&&void 0!==g?f=g:d&&(f=d.nextSibling),y.__u&=-7);return u.__e=w,f}function P$1(n,l,u,t,i){var r,o,e,f,c,s=u.length,a=s,h=0;for(n.__k=new Array(i),r=0;r<i;r++)null!=(o=l[r])&&"boolean"!=typeof o&&"function"!=typeof o?(f=r+h,(o=n.__k[r]="string"==typeof o||"number"==typeof o||"bigint"==typeof o||o.constructor==String?m$2(null,o,null,null,null):d$1(o)?m$2(k$1,{children:o},null,null,null):void 0===o.constructor&&o.__b>0?m$2(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o).__=n,o.__b=n.__b+1,e=null,-1!==(c=o.__i=L(o,u,f,a))&&(a--,(e=u[c])&&(e.__u|=2)),null==e||null===e.__v?(-1==c&&h--,"function"!=typeof o.type&&(o.__u|=4)):c!=f&&(c==f-1?h--:c==f+1?h++:(c>f?h--:h++,o.__u|=4))):n.__k[r]=null;if(a)for(r=0;r<s;r++)null!=(e=u[r])&&0==(2&e.__u)&&(e.__e==t&&(t=S(e)),q$2(e,e));return t}function A$2(n,l,u){var t,i;if("function"==typeof n.type){for(t=n.__k,i=0;t&&i<t.length;i++)t[i]&&(t[i].__=n,l=A$2(t[i],l,u));return l}n.__e!=l&&(l&&n.type&&!u.contains(l)&&(l=S(n)),u.insertBefore(n.__e,l||null),l=n.__e);do{l=l&&l.nextSibling;}while(null!=l&&8==l.nodeType);return l}function H$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(d$1(n)?n.some(function(n){H$1(n,l);}):l.push(n)),l}function L(n,l,u,t){var i,r,o=n.key,e=n.type,f=l[u];if(null===f||f&&o==f.key&&e===f.type&&0==(2&f.__u))return u;if(t>(null!=f&&0==(2&f.__u)?1:0))for(i=u-1,r=u+1;i>=0||r<l.length;){if(i>=0){if((f=l[i])&&0==(2&f.__u)&&o==f.key&&e===f.type)return i;i--;}if(r<l.length){if((f=l[r])&&0==(2&f.__u)&&o==f.key&&e===f.type)return r;r++;}}return  -1}function T$2(n,l,u){"-"==l[0]?n.setProperty(l,null==u?"":u):n[l]=null==u?"":"number"!=typeof u||y$1.test(l)?u:u+"px";}function F$1(n,l,u,t,i){var r;n:if("style"==l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof t&&(n.style.cssText=t=""),t)for(l in t)u&&l in u||T$2(n.style,l,"");if(u)for(l in u)t&&u[l]===t[l]||T$2(n.style,l,u[l]);}else if("o"==l[0]&&"n"==l[1])r=l!=(l=l.replace(f$2,"$1")),l=l.toLowerCase()in n||"onFocusOut"==l||"onFocusIn"==l?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?t?u.u=t.u:(u.u=c$1,n.addEventListener(l,r?a$1:s$1,r)):n.removeEventListener(l,r?a$1:s$1,r);else {if("http://www.w3.org/2000/svg"==i)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!=l&&"height"!=l&&"href"!=l&&"list"!=l&&"form"!=l&&"tabIndex"!=l&&"download"!=l&&"rowSpan"!=l&&"colSpan"!=l&&"role"!=l&&"popover"!=l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null==u||false===u&&"-"!=l[4]?n.removeAttribute(l):n.setAttribute(l,"popover"==l&&1==u?"":u));}}function O(n){return function(u){if(this.l){var t=this.l[u.type+n];if(null==u.t)u.t=c$1++;else if(u.t<t.u)return;return t(l$1.event?l$1.event(u):u)}}}function j$2(n,u,t,i,r,o,e,f,c,s){var a,h,p,v,y,_,m,b,S,C,M,$,P,A,H,L,T,F,O=u.type;if(void 0!==u.constructor)return null;128&t.__u&&(c=!!(32&t.__u),o=[f=u.__e=t.__e]),(a=l$1.__b)&&a(u);n:if("function"==typeof O)try{if(b=u.props,S="prototype"in O&&O.prototype.render,C=(a=O.contextType)&&i[a.__c],M=a?C?C.props.value:a.__:i,t.__c?m=(h=u.__c=t.__c).__=h.__E:(S?u.__c=h=new O(b,M):(u.__c=h=new x$1(b,M),h.constructor=O,h.render=B$2),C&&C.sub(h),h.props=b,h.state||(h.state={}),h.context=M,h.__n=i,p=h.__d=!0,h.__h=[],h._sb=[]),S&&null==h.__s&&(h.__s=h.state),S&&null!=O.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=w$1({},h.__s)),w$1(h.__s,O.getDerivedStateFromProps(b,h.__s))),v=h.props,y=h.state,h.__v=u,p)S&&null==O.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),S&&null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(S&&null==O.getDerivedStateFromProps&&b!==v&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(b,M),!h.__e&&(null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(b,h.__s,M)||u.__v==t.__v)){for(u.__v!=t.__v&&(h.props=b,h.state=h.__s,h.__d=!1),u.__e=t.__e,u.__k=t.__k,u.__k.some(function(n){n&&(n.__=u);}),$=0;$<h._sb.length;$++)h.__h.push(h._sb[$]);h._sb=[],h.__h.length&&e.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(b,h.__s,M),S&&null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(v,y,_);});}if(h.context=M,h.props=b,h.__P=n,h.__e=!1,P=l$1.__r,A=0,S){for(h.state=h.__s,h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++)h.__h.push(h._sb[H]);h._sb=[];}else do{h.__d=!1,P&&P(u),a=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++A<25);h.state=h.__s,null!=h.getChildContext&&(i=w$1(w$1({},i),h.getChildContext())),S&&!p&&null!=h.getSnapshotBeforeUpdate&&(_=h.getSnapshotBeforeUpdate(v,y)),T=(L=null!=a&&a.type===k$1&&null==a.key)?a.props.children:a,L&&(a.props.children=null),f=I(n,d$1(T)?T:[T],u,t,i,r,o,e,f,c,s),h.base=u.__e,u.__u&=-161,h.__h.length&&e.push(h),m&&(h.__E=h.__=null);}catch(n){if(u.__v=null,c||null!=o)if(n.then){for(u.__u|=c?160:128;f&&8==f.nodeType&&f.nextSibling;)f=f.nextSibling;o[o.indexOf(f)]=null,u.__e=f;}else for(F=o.length;F--;)g$1(o[F]);else u.__e=t.__e,u.__k=t.__k;l$1.__e(n,u,t);}else null==o&&u.__v==t.__v?(u.__k=t.__k,u.__e=t.__e):f=u.__e=N$1(t.__e,u,t,i,r,o,e,c,s);return (a=l$1.diffed)&&a(u),128&u.__u?void 0:f}function z$1(n,u,t){for(var i=0;i<t.length;i++)V$1(t[i],t[++i],t[++i]);l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function N$1(u,t,i,r,o,e,f,c,s){var a,h,v,y,w,_,m,b=i.props,k=t.props,x=t.type;if("svg"==x?o="http://www.w3.org/2000/svg":"math"==x?o="http://www.w3.org/1998/Math/MathML":o||(o="http://www.w3.org/1999/xhtml"),null!=e)for(a=0;a<e.length;a++)if((w=e[a])&&"setAttribute"in w==!!x&&(x?w.localName==x:3==w.nodeType)){u=w,e[a]=null;break}if(null==u){if(null==x)return document.createTextNode(k);u=document.createElementNS(o,x,k.is&&k),c&&(l$1.__m&&l$1.__m(t,e),c=false),e=null;}if(null===x)b===k||c&&u.data===k||(u.data=k);else {if(e=e&&n$1.call(u.childNodes),b=i.props||p$1,!c&&null!=e)for(b={},a=0;a<u.attributes.length;a++)b[(w=u.attributes[a]).name]=w.value;for(a in b)if(w=b[a],"children"==a);else if("dangerouslySetInnerHTML"==a)v=w;else if(!(a in k)){if("value"==a&&"defaultValue"in k||"checked"==a&&"defaultChecked"in k)continue;F$1(u,a,null,w,o);}for(a in k)w=k[a],"children"==a?y=w:"dangerouslySetInnerHTML"==a?h=w:"value"==a?_=w:"checked"==a?m=w:c&&"function"!=typeof w||b[a]===w||F$1(u,a,w,b[a],o);if(h)c||v&&(h.__html===v.__html||h.__html===u.innerHTML)||(u.innerHTML=h.__html),t.__k=[];else if(v&&(u.innerHTML=""),I("template"===t.type?u.content:u,d$1(y)?y:[y],t,i,r,"foreignObject"==x?"http://www.w3.org/1999/xhtml":o,e,f,e?e[0]:i.__k&&S(i,0),c,s),null!=e)for(a=e.length;a--;)g$1(e[a]);c||(a="value","progress"==x&&null==_?u.removeAttribute("value"):void 0!==_&&(_!==u[a]||"progress"==x&&!_||"option"==x&&_!==b[a])&&F$1(u,a,_,b[a],o),a="checked",void 0!==m&&m!==u[a]&&F$1(u,a,m,b[a],o));}return u}function V$1(n,u,t){try{if("function"==typeof n){var i="function"==typeof n.__u;i&&n.__u(),i&&null==u||(n.__u=n(u));}else n.current=u;}catch(n){l$1.__e(n,t);}}function q$2(n,u,t){var i,r;if(l$1.unmount&&l$1.unmount(n),(i=n.ref)&&(i.current&&i.current!==n.__e||V$1(i,null,u)),null!=(i=n.__c)){if(i.componentWillUnmount)try{i.componentWillUnmount();}catch(n){l$1.__e(n,u);}i.base=i.__P=null;}if(i=n.__k)for(r=0;r<i.length;r++)i[r]&&q$2(i[r],u,t||"function"!=typeof n.type);t||g$1(n.__e),n.__c=n.__=n.__e=void 0;}function B$2(n,l,u){return this.constructor(n,u)}function D$2(u,t,i){var r,o,e,f;t==document&&(t=document.documentElement),l$1.__&&l$1.__(u,t),o=(r="function"=="undefined")?null:t.__k,e=[],f=[],j$2(t,u=(t).__k=_$1(k$1,null,[u]),o||p$1,p$1,t.namespaceURI,o?null:t.firstChild?n$1.call(t.childNodes):null,e,o?o.__e:t.firstChild,r,f),z$1(e,u,f);}function J$1(n){function l(n){var u,t;return this.getChildContext||(u=new Set,(t={})[l.__c]=this,this.getChildContext=function(){return t},this.componentWillUnmount=function(){u=null;},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.forEach(function(n){n.__e=true,M(n);});},this.sub=function(n){u.add(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u&&u.delete(n),l&&l.call(n);};}),n.children}return l.__c="__cC"+h$1++,l.__=n,l.Provider=l.__l=(l.Consumer=function(n,l){return n.children(l)}).contextType=l,l}n$1=v$1.slice,l$1={__e:function(n,l,u,t){for(var i,r,o;l=l.__;)if((i=l.__c)&&!i.__)try{if((r=i.constructor)&&null!=r.getDerivedStateFromError&&(i.setState(r.getDerivedStateFromError(n)),o=i.__d),null!=i.componentDidCatch&&(i.componentDidCatch(n,t||{}),o=i.__d),o)return i.__E=i}catch(l){n=l;}throw n}},u$2=0,x$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=w$1({},this.state),"function"==typeof n&&(n=n(w$1({},u),this.props)),n&&w$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),M(this));},x$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=true,n&&this.__h.push(n),M(this));},x$1.prototype.render=k$1,i$2=[],o$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,e$2=function(n,l){return n.__v.__b-l.__v.__b},$$1.__r=0,f$2=/(PointerCapture)$|Capture$/i,c$1=0,s$1=O(false),a$1=O(true),h$1=0;

  var n=function(t,s,r,e){var u;s[0]=0;for(var h=1;h<s.length;h++){var p=s[h++],a=s[h]?(s[0]|=p?1:2,r[s[h++]]):s[++h];3===p?e[0]=a:4===p?e[1]=Object.assign(e[1]||{},a):5===p?(e[1]=e[1]||{})[s[++h]]=a:6===p?e[1][s[++h]]+=a+"":p?(u=t.apply(a,n(t,a,r,["",null])),e.push(u),a[0]?s[0]|=2:(s[h-2]=0,s[h]=u)):e.push(a);}return e},t$2=new Map;function e$1(s){var r=t$2.get(this);return r||(r=new Map,t$2.set(this,r)),(r=n(this,r.get(s)||(r.set(s,r=function(n){for(var t,s,r=1,e="",u="",h=[0],p=function(n){1===r&&(n||(e=e.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?h.push(0,n,e):3===r&&(n||e)?(h.push(3,n,e),r=2):2===r&&"..."===e&&n?h.push(4,n,0):2===r&&e&&!n?h.push(5,0,true,e):r>=5&&((e||!n&&5===r)&&(h.push(r,0,e,s),r=6),n&&(h.push(r,n,0,s),r=6)),e="";},a=0;a<n.length;a++){a&&(1===r&&p(),p(a));for(var l=0;l<n[a].length;l++)t=n[a][l],1===r?"<"===t?(p(),h=[h],r=3):e+=t:4===r?"--"===e&&">"===t?(r=1,e=""):e=t+e[0]:u?t===u?u="":e+=t:'"'===t||"'"===t?u=t:">"===t?(p(),r=1):r&&("="===t?(r=5,s=e,e=""):"/"===t&&(r<5||">"===n[a][l+1])?(p(),3===r&&(h=h[0]),r=h,(h=h[0]).push(2,0,r),r=0):" "===t||"\t"===t||"\n"===t||"\r"===t?(p(),r=2):e+=t),3===r&&"!--"===e&&(r=4,h=h[0]);}return p(),h}(s)),r),arguments,[])).length>1?r:r[0]}

  var m$1=e$1.bind(_$1);

  var t$1,r$1,u$1,i$1,o=0,f$1=[],c=l$1,e=c.__b,a=c.__r,v=c.diffed,l=c.__c,m=c.unmount,s=c.__;function p(n,t){c.__h&&c.__h(r$1,n,o||t),o=0;var u=r$1.__H||(r$1.__H={__:[],__h:[]});return n>=u.__.length&&u.__.push({}),u.__[n]}function d(n){return o=1,h(D$1,n)}function h(n,u,i){var o=p(t$1++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):D$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$1,!r$1.__f)){var f=function(n,t,r){if(!o.__c.__H)return  true;var u=o.__c.__H.__.filter(function(n){return !!n.__c});if(u.every(function(n){return !n.__N}))return !c||c.call(this,n,t,r);var i=o.__c.props!==n;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=true);}}),c&&c.call(this,n,t,r)||i};r$1.__f=true;var c=r$1.shouldComponentUpdate,e=r$1.componentWillUpdate;r$1.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u;}e&&e.call(this,n,t,r);},r$1.shouldComponentUpdate=f;}return o.__N||o.__}function y(n,u){var i=p(t$1++,3);!c.__s&&C$1(i.__H,u)&&(i.__=n,i.u=u,r$1.__H.__h.push(i));}function _(n,u){var i=p(t$1++,4);!c.__s&&C$1(i.__H,u)&&(i.__=n,i.u=u,r$1.__h.push(i));}function A$1(n){return o=5,T$1(function(){return {current:n}},[])}function T$1(n,r){var u=p(t$1++,7);return C$1(u.__H,r)&&(u.__=n(),u.__H=r,u.__h=n),u.__}function q$1(n,t){return o=8,T$1(function(){return n},t)}function x(n){var u=r$1.context[n.__c],i=p(t$1++,9);return i.c=n,u?(null==i.__&&(i.__=true,u.sub(r$1)),u.props.value):n.__}function j$1(){for(var n;n=f$1.shift();)if(n.__P&&n.__H)try{n.__H.__h.forEach(z),n.__H.__h.forEach(B$1),n.__H.__h=[];}catch(t){n.__H.__h=[],c.__e(t,n.__v);}}c.__b=function(n){r$1=null,e&&e(n);},c.__=function(n,t){n&&t.__k&&t.__k.__m&&(n.__m=t.__k.__m),s&&s(n,t);},c.__r=function(n){a&&a(n),t$1=0;var i=(r$1=n.__c).__H;i&&(u$1===r$1?(i.__h=[],r$1.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.u=n.__N=void 0;})):(i.__h.forEach(z),i.__h.forEach(B$1),i.__h=[],t$1=0)),u$1=r$1;},c.diffed=function(n){v&&v(n);var t=n.__c;t&&t.__H&&(t.__H.__h.length&&(1!==f$1.push(t)&&i$1===c.requestAnimationFrame||((i$1=c.requestAnimationFrame)||w)(j$1)),t.__H.__.forEach(function(n){n.u&&(n.__H=n.u),n.u=void 0;})),u$1=r$1=null;},c.__c=function(n,t){t.some(function(n){try{n.__h.forEach(z),n.__h=n.__h.filter(function(n){return !n.__||B$1(n)});}catch(r){t.some(function(n){n.__h&&(n.__h=[]);}),t=[],c.__e(r,n.__v);}}),l&&l(n,t);},c.unmount=function(n){m&&m(n);var t,r=n.__c;r&&r.__H&&(r.__H.__.forEach(function(n){try{z(n);}catch(n){t=n;}}),r.__H=void 0,t&&c.__e(t,r.__v));};var k="function"==typeof requestAnimationFrame;function w(n){var t,r=function(){clearTimeout(u),k&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);k&&(t=requestAnimationFrame(r));}function z(n){var t=r$1,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$1=t;}function B$1(n){var t=r$1;n.__c=n.__(),r$1=t;}function C$1(n,t){return !n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function D$1(n,t){return "function"==typeof t?t(n):t}

  function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

  /**
   * @typedef {import('./PopupMenuProvider').PopupMenuHeaderEntry} PopupMenuHeaderEntry
   */

  /**
   * Component that renders a popup menu header.
   *
   * @param {Object} props
   * @param {PopupMenuHeaderEntry[]} props.headerEntries
   * @param {PopupMenuHeaderEntry} props.selectedEntry
   * @param {(event: MouseEvent, entry: PopupMenuHeaderEntry) => void} props.onSelect
   * @param {(entry: PopupMenuHeaderEntry | null) => void} props.setSelectedEntry
   * @param {string} props.title
   */
  function PopupMenuHeader(props) {
    const {
      headerEntries,
      onSelect,
      selectedEntry,
      setSelectedEntry,
      title
    } = props;

    const groups = T$1(() => groupEntries$1(headerEntries), [ headerEntries ]);

    return m$1`
    <div class="djs-popup-header">
      <h3 class="djs-popup-title" title=${ title }>${ title }</h3>
      ${ groups.map((group) => m$1`
        <ul key=${ group.id } class="djs-popup-header-group" data-header-group=${ group.id }>

          ${ group.entries.map(entry => m$1`
            <li key=${ entry.id }>
              <${ entry.action ? 'button' : 'span' }
                class=${ getHeaderClasses(entry, entry === selectedEntry) }
                onClick=${ event => entry.action && onSelect(event, entry) }
                title=${ entry.title || entry.label }
                data-id=${ entry.id }
                onMouseEnter=${ () => entry.action && setSelectedEntry(entry) }
                onMouseLeave=${ () => entry.action && setSelectedEntry(null) }
                onFocus=${ () => entry.action && setSelectedEntry(entry) }
                onBlur=${ () => entry.action && setSelectedEntry(null) }
              >
                ${(entry.imageUrl && m$1`<img class="djs-popup-entry-icon" src=${ entry.imageUrl } alt="" />`) ||
                (entry.imageHtml && m$1`<div class="djs-popup-entry-icon" dangerouslySetInnerHTML=${ { __html: entry.imageHtml } } />`)}
                ${ entry.label ? m$1`
                  <span class="djs-popup-label">${ entry.label }</span>
                ` : null }
              </${ entry.action ? 'button' : 'span' }>
            </li>
          `) }
        </ul>
      `) }
    </div>
  `;
  }


  // helpers
  function groupEntries$1(entries) {
    return entries.reduce((groups, entry) => {
      const groupId = entry.group || 'default';

      const group = groups.find(group => group.id === groupId);

      if (group) {
        group.entries.push(entry);
      } else {
        groups.push({
          id: groupId,
          entries: [ entry ]
        });
      }

      return groups;
    }, []);
  }

  function getHeaderClasses(entry, selected) {
    return clsx(
      'entry',
      entry.className,
      entry.active ? 'active' : '',
      entry.disabled ? 'disabled' : '',
      selected ? 'selected' : ''
    );
  }

  /**
   * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry
   */

  /**
   * Component that renders a popup menu entry.
   *
   * @param {Object} props
   * @param {string} props.key
   * @param {PopupMenuEntry} props.entry
   * @param {boolean} props.selected
   * @param {(event: MouseEvent) => void} props.onMouseEnter
   * @param {(event: MouseEvent) => void} props.onMouseLeave
   * @param {(event: MouseEvent, entry?: PopupMenuEntry, action?: string) => void} props.onAction
   */
  function PopupMenuItem(props) {
    const {
      entry,
      selected,
      onMouseEnter,
      onMouseLeave,
      onAction
    } = props;

    return m$1`
    <li
      class=${ clsx('entry', { selected }) }
      data-id=${ entry.id }
      title=${ entry.title || entry.label }
      tabIndex="0"
      onClick=${ onAction }
      onFocus=${ onMouseEnter }
      onBlur=${ onMouseLeave }
      onMouseEnter=${ onMouseEnter }
      onMouseLeave=${ onMouseLeave }
      onDragStart=${ (event) => onAction(event, entry, 'dragstart') }
      draggable=${ true }
    >
      <div class="djs-popup-entry-content">
        <span
          class=${ clsx('djs-popup-entry-name', entry.className) }
        >
          ${(entry.imageUrl && m$1`<img class="djs-popup-entry-icon" src=${ entry.imageUrl } alt="" />`) ||
            (entry.imageHtml && m$1`<div class="djs-popup-entry-icon" dangerouslySetInnerHTML=${ { __html: entry.imageHtml } } />`)}

          ${ entry.label ? m$1`
            <span class="djs-popup-label">
              ${ entry.label }
            </span>
          ` : null }
        </span>
        ${ entry.description && m$1`
          <span
            class="djs-popup-entry-description"
            title=${ entry.description }
          >
            ${ entry.description }
          </span>
        ` }
      </div>
      ${ entry.documentationRef && m$1`
        <div class="djs-popup-entry-docs">
          <a
            href="${ entry.documentationRef }"
            onClick=${ (event) => event.stopPropagation() }
            title="Open element documentation"
            target="_blank"
            rel="noopener"
          >
            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M10.6368 10.6375V5.91761H11.9995V10.6382C11.9995 10.9973 11.8623 11.3141 11.5878 11.5885C11.3134 11.863 10.9966 12.0002 10.6375 12.0002H1.36266C0.982345 12.0002 0.660159 11.8681 0.396102 11.6041C0.132044 11.34 1.52588e-05 11.0178 1.52588e-05 10.6375V1.36267C1.52588e-05 0.98236 0.132044 0.660173 0.396102 0.396116C0.660159 0.132058 0.982345 2.95639e-05 1.36266 2.95639e-05H5.91624V1.36267H1.36266V10.6375H10.6368ZM12 0H7.2794L7.27873 1.36197H9.68701L3.06507 7.98391L4.01541 8.93425L10.6373 2.31231V4.72059H12V0Z" fill="#818798"/>
            </svg>
          </a>
        </div>
      ` }
    </li>
  `;
  }

  /**
   * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry
   */

  /**
   * Component that renders a popup menu entry list.
   *
   * @param {Object} props
   * @param {PopupMenuEntry[]} props.entries
   * @param {PopupMenuEntry} props.selectedEntry
   * @param {(entry: PopupMenuEntry | null) => void} props.setSelectedEntry
   */
  function PopupMenuList(props) {
    const {
      selectedEntry,
      setSelectedEntry,
      entries,
      ...restProps
    } = props;

    const resultsRef = A$1();

    const groups = T$1(() => groupEntries(entries), [ entries ]);

    // scroll to selected result
    _(() => {
      const containerEl = resultsRef.current;

      if (!containerEl)
        return;

      const selectedEl = containerEl.querySelector('.selected');

      if (selectedEl) {
        scrollIntoView$2(selectedEl);
      }
    }, [ selectedEntry ]);

    return m$1`
    <div class="djs-popup-results" ref=${ resultsRef }>
      ${ groups.map(group => m$1`
        ${ group.name && m$1`
          <div key=${ group.id } class="entry-header" title=${ group.name }>
            ${ group.name }
          </div>
        ` }
        <ul class="djs-popup-group" data-group=${ group.id }>
          ${ group.entries.map(entry => m$1`
            <${PopupMenuItem}
              key=${ entry.id }
              entry=${ entry }
              selected=${ entry === selectedEntry }
              onMouseEnter=${ () => setSelectedEntry(entry) }
              onMouseLeave=${ () => setSelectedEntry(null) }
              ...${ restProps }
            />
          `) }
        </ul>
      `) }
    </div>
  `;
  }


  // helpers
  function groupEntries(entries) {
    const groups = [];

    const getGroup = group => groups.find(elem => group.id === elem.id);

    const containsGroup = group => !!getGroup(group);

    // legacy support for provider built for the old popUp menu
    const formatGroup = group =>
      typeof group === 'string' ? { id: group } : group;

    entries.forEach(entry => {

      // assume a default group when none is provided
      const group = entry.group ? formatGroup(entry.group) : { id: 'default' };

      if (!containsGroup(group)) {
        groups.push({ ...group, entries: [ entry ] });
      } else {
        getGroup(group).entries.push(entry);
      }
    });

    return groups;
  }

  // helpers ////////////////

  function scrollIntoView$2(el) {
    if (typeof el.scrollIntoViewIfNeeded === 'function') {
      el.scrollIntoViewIfNeeded();
    } else {
      el.scrollIntoView({
        scrollMode: 'if-needed',
        block: 'nearest'
      });
    }
  }

  /**
   * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry
   * @typedef {import('./PopupMenuProvider').PopupMenuHeaderEntry} PopupMenuHeaderEntry
   * @typedef {import('./PopupMenuProvider').PopupMenuEmptyPlaceholderProvider | import('./PopupMenuProvider').PopupMenuEmptyPlaceholder} PopupMenuEmptyPlaceholder
   *
   * @typedef {import('../search/search').default} search
   *
   * @typedef {import('../../util/Types').Point} Point
   */

  /**
   * A component that renders the popup menus.
   *
   * @param {Object} props
   * @param {() => void} props.onClose
   * @param {() => void} props.onSelect
   * @param {(element: HTMLElement) => Point} props.position
   * @param {string} props.className
   * @param {PopupMenuEntry[]} props.entries
   * @param {PopupMenuHeaderEntry[]} props.headerEntries
   * @param {number} props.scale
   * @param {string} [props.title]
   * @param {boolean} [props.search]
   * @param {PopupMenuEmptyPlaceholder} [props.emptyPlaceholder]
   * @param {number} [props.width]
   * @param {search} props.searchFn
   */
  function PopupMenuComponent(props) {
    const {
      onClose,
      onSelect,
      className,
      headerEntries,
      position,
      title,
      width,
      scale,
      search,
      emptyPlaceholder,
      searchFn,
      entries: originalEntries,
      onOpened,
      onClosed
    } = props;

    const searchable = T$1(() => {
      if (!isDefined(search)) {
        return false;
      }

      return originalEntries.length > 5;
    }, [ search, originalEntries ]);

    const [ searchValue, setSearchValue ] = d('');

    const filterEntries = q$1((originalEntries, searchValue) => {

      if (!searchable) {
        return originalEntries;
      }

      if (!searchValue.trim()) {
        return originalEntries.filter(({ rank = 0 }) => rank >= 0);
      }

      const searchableEntries = originalEntries.filter(({ searchable }) => searchable !== false);

      return searchFn(searchableEntries, searchValue, {
        keys: [
          'label',
          'search',
          'description'
        ]
      }).map(({ item }) => item);
    }, [ searchable ]);

    const [ entries, setEntries ] = d(filterEntries(originalEntries, searchValue));
    const [ selectedEntry, setSelectedEntry ] = d(entries[0]);

    const updateEntries = q$1((newEntries) => {

      // always select first
      setSelectedEntry(newEntries[0]);

      setEntries(newEntries);
    }, [ selectedEntry, setEntries, setSelectedEntry ]);

    // filter entries on search value change
    y(() => {
      updateEntries(filterEntries(originalEntries, searchValue));
    }, [ searchValue, originalEntries ]);

    // handle keyboard seleciton
    const keyboardSelect = q$1(direction => {
      const idx = entries.indexOf(selectedEntry);

      let nextIdx = idx + direction;

      if (nextIdx < 0) {
        nextIdx = entries.length - 1;
      }

      if (nextIdx >= entries.length) {
        nextIdx = 0;
      }

      setSelectedEntry(entries[nextIdx]);
    }, [ entries, selectedEntry, setSelectedEntry ]);

    const handleKeyDown = q$1(event => {
      if (event.key === 'Enter' && selectedEntry) {
        return onSelect(event, selectedEntry);
      }

      // ARROW_UP
      if (event.key === 'ArrowUp') {
        keyboardSelect(-1);

        return event.preventDefault();
      }

      // ARROW_DOWN
      if (event.key === 'ArrowDown') {
        keyboardSelect(1);

        return event.preventDefault();
      }
    }, [ onSelect, selectedEntry, keyboardSelect ]);

    const handleKey = q$1(event => {
      if (matches$1(event.target, 'input')) {
        setSearchValue(() => event.target.value);
      }
    }, [ setSearchValue ]);

    y(() => {
      onOpened();

      return () => {
        onClosed();
      };
    }, []);

    const displayHeader = T$1(() => title || headerEntries.length > 0, [ title, headerEntries ]);

    return m$1`
    <${PopupMenuWrapper}
      onClose=${ onClose }
      onKeyup=${ handleKey }
      onKeydown=${ handleKeyDown }
      className=${ className }
      position=${ position }
      width=${ width }
      scale=${ scale }
    >
      ${ displayHeader && m$1`
        <${PopupMenuHeader}
          headerEntries=${ headerEntries }
          onSelect=${ onSelect }
          selectedEntry=${ selectedEntry }
          setSelectedEntry=${ setSelectedEntry }
          title=${ title }
        />
      ` }
      ${ originalEntries.length > 0 && m$1`
        <div class="djs-popup-body">

          ${ searchable && m$1`
          <div class="djs-popup-search">
            <svg class="djs-popup-search-icon" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M9.0325 8.5H9.625L13.3675 12.25L12.25 13.3675L8.5 9.625V9.0325L8.2975 8.8225C7.4425 9.5575 6.3325 10 5.125 10C2.4325 10 0.25 7.8175 0.25 5.125C0.25 2.4325 2.4325 0.25 5.125 0.25C7.8175 0.25 10 2.4325 10 5.125C10 6.3325 9.5575 7.4425 8.8225 8.2975L9.0325 8.5ZM1.75 5.125C1.75 6.9925 3.2575 8.5 5.125 8.5C6.9925 8.5 8.5 6.9925 8.5 5.125C8.5 3.2575 6.9925 1.75 5.125 1.75C3.2575 1.75 1.75 3.2575 1.75 5.125Z" fill="#22242A"/>
            </svg>
            <input type="text" spellcheck=${ false } aria-label="${ title }" />
          </div>
          ` }

          <${PopupMenuList}
            entries=${ entries }
            selectedEntry=${ selectedEntry }
            setSelectedEntry=${ setSelectedEntry }
            onAction=${ onSelect }
          />
        </div>
      ` }
    ${ emptyPlaceholder && entries.length === 0 && m$1`
      <div class="djs-popup-no-results">${ isFunction(emptyPlaceholder) ? emptyPlaceholder(searchValue) : emptyPlaceholder }</div>
    ` }
    </${PopupMenuWrapper}>
  `;
  }

  /**
   * A component that wraps the popup menu.
   *
   * @param {*} props
   */
  function PopupMenuWrapper(props) {
    const {
      onClose,
      onKeydown,
      onKeyup,
      className,
      children,
      position: positionGetter
    } = props;

    const popupRef = A$1();

    // initial position
    _(() => {
      if (typeof positionGetter !== 'function') {
        return;
      }

      const popupEl = popupRef.current;
      const position = positionGetter(popupEl);

      popupEl.style.left = `${position.x}px`;
      popupEl.style.top = `${position.y}px`;
    }, [ popupRef.current, positionGetter ]);

    // initial focus
    _(() => {
      const popupEl = popupRef.current;

      if (!popupEl) {
        return;
      }

      const inputEl = popupEl.querySelector('input');

      (inputEl || popupEl).focus();
    }, []);

    // global <Escape> / blur handlers
    y(() => {
      const handleKeyDown = event => {
        if (event.key === 'Escape') {
          event.preventDefault();

          return onClose();
        }
      };

      const handleClick = event => {
        const popup = closest(event.target, '.djs-popup', true);

        if (popup) {
          return;
        }

        return onClose();
      };

      document.documentElement.addEventListener('keydown', handleKeyDown);
      document.body.addEventListener('click', handleClick);

      return () => {
        document.documentElement.removeEventListener('keydown', handleKeyDown);
        document.body.removeEventListener('click', handleClick);
      };
    }, []);

    return m$1`
    <div
      class=${ clsx('djs-popup', className) }
      style=${ getPopupStyle(props) }
      onKeydown=${ onKeydown }
      onKeyup=${ onKeyup }
      ref=${ popupRef }
      tabIndex="-1"
    >
      ${ children }
    </div>
  `;
  }

  // helpers //////////////////////

  function getPopupStyle(props) {
    return {
      transform: `scale(${props.scale})`,
      width: `${props.width}px`,
      'transform-origin': 'top left'
    };
  }

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../search/search').default} search
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('./PopupMenuProvider').PopupMenuEntries} PopupMenuEntries
   * @typedef {import('./PopupMenuProvider').PopupMenuEntry} PopupMenuEntry
   * @typedef {import('./PopupMenuProvider').PopupMenuHeaderEntries} PopupMenuHeaderEntries
   * @typedef {import('./PopupMenuProvider').PopupMenuHeaderEntry} PopupMenuHeaderEntry
   * @typedef {import('./PopupMenuProvider').default} PopupMenuProvider
   *
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef { {
   *   scale?: {
   *     min?: number;
   *     max?: number;
   *   } | boolean;
   * } } PopupMenuConfig
   *
   * @typedef {Element|Element[]} PopupMenuTarget;
   */

  var DATA_REF = 'data-id';

  var CLOSE_EVENTS = [
    'contextPad.close',
    'canvas.viewbox.changing',
    'commandStack.changed'
  ];

  var DEFAULT_PRIORITY$3 = 1000;

  /**
   * A popup menu to show a number of actions on the canvas.
   *
   * @param {PopupMenuConfig} config
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {search} search
   */
  function PopupMenu(config, eventBus, canvas, search) {
    this._eventBus = eventBus;
    this._canvas = canvas;
    this._search = search;

    this._current = null;

    var scale = isDefined(config && config.scale) ? config.scale : {
      min: 1,
      max: 1
    };

    this._config = {
      scale: scale
    };


    eventBus.on('diagram.destroy', () => {
      this.close();
    });

    eventBus.on('element.changed', event => {

      const element = this.isOpen() && this._current.target;

      if (event.element === element) {
        this.refresh();
      }
    });

  }

  PopupMenu.$inject = [
    'config.popupMenu',
    'eventBus',
    'canvas',
    'search'
  ];

  PopupMenu.prototype._render = function() {

    const {
      position: _position,
      providerId: className,
      entries,
      headerEntries,
      emptyPlaceholder,
      options
    } = this._current;

    const entriesArray = Object.entries(entries).map(
      ([ key, value ]) => ({ id: key, ...value })
    );

    const headerEntriesArray = Object.entries(headerEntries).map(
      ([ key, value ]) => ({ id: key, ...value })
    );

    const position = _position && (
      (container) => this._ensureVisible(container, _position)
    );

    const scale = this._updateScale(this._current.container);

    const onClose = result => this.close(result);
    const onSelect = (event, entry, action) => this.trigger(event, entry, action);

    D$2(
      m$1`
      <${PopupMenuComponent}
        onClose=${ onClose }
        onSelect=${ onSelect }
        position=${ position }
        className=${ className }
        entries=${ entriesArray }
        headerEntries=${ headerEntriesArray }
        emptyPlaceholder=${ emptyPlaceholder }
        scale=${ scale }
        onOpened=${ this._onOpened.bind(this) }
        onClosed=${ this._onClosed.bind(this) }
        searchFn=${ this._search }
        ...${{ ...options }}
      />
    `,
      this._current.container
    );
  };


  /**
   * Open the popup menu at the given position.
   *
   * @param {PopupMenuTarget} target
   * @param {string} providerId
   * @param {Point} position
   * @param {Object} [options]
   */
  PopupMenu.prototype.open = function(target, providerId, position, options) {
    if (!target) {
      throw new Error('target is missing');
    }

    if (!providerId) {
      throw new Error('providers for <' + providerId + '> not found');
    }

    if (!position) {
      throw new Error('position is missing');
    }

    if (this.isOpen()) {
      this.close();
    }

    const {
      entries,
      headerEntries,
      emptyPlaceholder
    } = this._getContext(target, providerId);

    this._current = {
      position,
      providerId,
      target,
      entries,
      headerEntries,
      emptyPlaceholder,
      container: this._createContainer({ provider: providerId }),
      options
    };

    this._emit('open');

    this._bindAutoClose();

    this._render();
  };

  /**
   * Refresh the popup menu entries without changing the target or position.
   */
  PopupMenu.prototype.refresh = function() {
    if (!this.isOpen()) {
      return;
    }

    const {
      target,
      providerId
    } = this._current;

    const {
      entries,
      headerEntries,
      emptyPlaceholder
    } = this._getContext(target, providerId);

    this._current = {
      ...this._current,
      entries,
      headerEntries,
      emptyPlaceholder
    };

    this._emit('refresh');

    this._render();
  };


  PopupMenu.prototype._getContext = function(target, provider) {

    const providers = this._getProviders(provider);

    if (!providers || !providers.length) {
      throw new Error('provider for <' + provider + '> not found');
    }

    const entries = this._getEntries(target, providers);

    const headerEntries = this._getHeaderEntries(target, providers);

    const emptyPlaceholder = this._getEmptyPlaceholder(providers);

    return {
      entries,
      headerEntries,
      emptyPlaceholder,
      empty: !(
        Object.keys(entries).length ||
            Object.keys(headerEntries).length
      )
    };
  };

  PopupMenu.prototype.close = function() {

    if (!this.isOpen()) {
      return;
    }

    this._emit('close');

    this.reset();

    this._canvas.restoreFocus();

    this._current = null;
  };

  PopupMenu.prototype.reset = function() {
    const container = this._current.container;

    D$2(null, container);

    remove$2(container);
  };

  PopupMenu.prototype._emit = function(event, payload) {
    this._eventBus.fire(`popupMenu.${ event }`, payload);
  };

  PopupMenu.prototype._onOpened = function() {
    this._emit('opened');
  };

  PopupMenu.prototype._onClosed = function() {
    this._emit('closed');
  };

  PopupMenu.prototype._createContainer = function(config) {

    var canvas = this._canvas,
        parent = canvas.getContainer();

    const container = domify$1(`<div class="djs-popup-parent djs-scrollable" data-popup=${config.provider}></div>`);

    parent.appendChild(container);

    return container;
  };

  /**
   * Set up listener to close popup automatically on certain events.
   */
  PopupMenu.prototype._bindAutoClose = function() {
    this._eventBus.once(CLOSE_EVENTS, this.close, this);
  };


  /**
   * Remove the auto-closing listener.
  */
  PopupMenu.prototype._unbindAutoClose = function() {
    this._eventBus.off(CLOSE_EVENTS, this.close, this);
  };


  /**
   * Updates popup style.transform with respect to the config and zoom level.
   *
   * @return {number}
   */
  PopupMenu.prototype._updateScale = function() {
    var zoom = this._canvas.zoom();

    var scaleConfig = this._config.scale,
        minScale,
        maxScale,
        scale = zoom;

    if (scaleConfig !== true) {

      if (scaleConfig === false) {
        minScale = 1;
        maxScale = 1;
      } else {
        minScale = scaleConfig.min;
        maxScale = scaleConfig.max;
      }

      if (isDefined(minScale) && zoom < minScale) {
        scale = minScale;
      }

      if (isDefined(maxScale) && zoom > maxScale) {
        scale = maxScale;
      }

    }

    return scale;
  };

  PopupMenu.prototype._ensureVisible = function(container, position) {
    var documentBounds = document.documentElement.getBoundingClientRect();
    var containerBounds = container.getBoundingClientRect();

    var overAxis = {},
        left = position.x,
        top = position.y;

    if (position.x + containerBounds.width > documentBounds.width) {
      overAxis.x = true;
    }

    if (position.y + containerBounds.height > documentBounds.height) {
      overAxis.y = true;
    }

    if (overAxis.x && overAxis.y) {
      left = position.x - containerBounds.width;
      top = position.y - containerBounds.height;
    } else if (overAxis.x) {
      left = position.x - containerBounds.width;
      top = position.y;
    } else if (overAxis.y && position.y < containerBounds.height) {
      left = position.x;
      top = 10;
    } else if (overAxis.y) {
      left = position.x;
      top = position.y - containerBounds.height;
    }

    // underAxis
    if (position.y < documentBounds.top) {
      top = position.y + containerBounds.height;
    }

    return {
      x: left,
      y: top
    };
  };

  /**
   * Check whether there are no popup menu providers or provided entries for the
   * given target.
   *
   * @param {PopupMenuTarget} target
   * @param {string} providerId
   *
   * @return {boolean}
   */
  PopupMenu.prototype.isEmpty = function(target, providerId) {
    if (!target) {
      throw new Error('target is missing');
    }

    if (!providerId) {
      throw new Error('provider ID is missing');
    }

    const providers = this._getProviders(providerId);

    if (!providers || !providers.length) {
      return true;
    }

    return this._getContext(target, providerId).empty;
  };

  /**
   * @overlord
   *
   * Register a popup menu provider with default priority. See
   * {@link PopupMenuProvider} for examples.
   *
   * @param {string} id
   * @param {PopupMenuProvider} provider
   */

  /**
   * Register a popup menu provider with the given priority. See
   * {@link PopupMenuProvider} for examples.
   *
   * @param {string} id
   * @param {number} priority
   * @param {PopupMenuProvider} provider
   */
  PopupMenu.prototype.registerProvider = function(id, priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$3;
    }

    this._eventBus.on('popupMenu.getProviders.' + id, priority, function(event) {
      event.providers.push(provider);
    });
  };

  /**
   * @param {string} id
   *
   * @return {PopupMenuProvider[]}
   */
  PopupMenu.prototype._getProviders = function(id) {
    var event = this._eventBus.createEvent({
      type: 'popupMenu.getProviders.' + id,
      providers: []
    });

    this._eventBus.fire(event);

    return event.providers;
  };

  /**
   * @param {PopupMenuTarget} target
   * @param {PopupMenuProvider[]} providers
   *
   * @return {PopupMenuEntries}
   */
  PopupMenu.prototype._getEntries = function(target, providers) {
    var entries = {};

    forEach$1(providers, function(provider) {

      // handle legacy method
      if (!provider.getPopupMenuEntries) {
        forEach$1(provider.getEntries(target), function(entry) {
          var id = entry.id;

          if (!id) {
            throw new Error('entry ID is missing');
          }

          entries[id] = omit(entry, [ 'id' ]);
        });

        return;
      }

      var entriesOrUpdater = provider.getPopupMenuEntries(target);

      if (isFunction(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$1(entriesOrUpdater, function(entry, id) {
          entries[id] = entry;
        });
      }
    });

    return entries;
  };

  /**
   * @param {PopupMenuTarget} target
   * @param {PopupMenuProvider[]} providers
   *
   * @return {PopupMenuHeaderEntries}
   */
  PopupMenu.prototype._getHeaderEntries = function(target, providers) {
    var entries = {};

    forEach$1(providers, function(provider) {

      // handle legacy method
      if (!provider.getPopupMenuHeaderEntries) {
        if (!provider.getHeaderEntries) {
          return;
        }

        forEach$1(provider.getHeaderEntries(target), function(entry) {
          var id = entry.id;

          if (!id) {
            throw new Error('entry ID is missing');
          }

          entries[id] = omit(entry, [ 'id' ]);
        });

        return;
      }

      var entriesOrUpdater = provider.getPopupMenuHeaderEntries(target);

      if (isFunction(entriesOrUpdater)) {
        entries = entriesOrUpdater(entries);
      } else {
        forEach$1(entriesOrUpdater, function(entry, id) {
          entries[id] = entry;
        });
      }
    });

    return entries;
  };


  PopupMenu.prototype._getEmptyPlaceholder = function(providers) {
    const provider = providers.find(
      provider => isFunction(provider.getEmptyPlaceholder)
    );

    return provider && provider.getEmptyPlaceholder();
  };


  /**
   * Check if the popup menu is open.
   *
   * @return {boolean}
   */
  PopupMenu.prototype.isOpen = function() {
    return !!this._current;
  };


  /**
   * Trigger an action associated with an entry.
   *
   * @param {Event} event
   * @param {PopupMenuEntry} entry
   * @param {string} [action='click']
   *
   * @return {any}
   */
  PopupMenu.prototype.trigger = function(event, entry, action = 'click') {

    // silence other actions
    event.preventDefault();

    if (!entry) {
      let element = closest(event.delegateTarget || event.target, '.entry', true);
      let entryId = attr(element, DATA_REF);

      entry = { id: entryId, ...this._getEntry(entryId) };
    }

    const handler = entry.action;

    if (this._emit('trigger', { entry, event }) === false) {
      return;
    }

    if (isFunction(handler)) {
      if (action === 'click') {
        return handler(event, entry);
      }
    } else {
      if (handler[action]) {
        return handler[action](event, entry);
      }
    }
  };

  /**
   * Get the entry (entry or header entry) with the given ID.
   *
   * @param {string} entryId
   *
   * @return {PopupMenuEntry|PopupMenuHeaderEntry}
   */
  PopupMenu.prototype._getEntry = function(entryId) {

    var entry = this._current.entries[ entryId ] || this._current.headerEntries[ entryId ];


    if (!entry) {
      throw new Error('entry not found');
    }

    return entry;
  };

  /**
   * @typedef { {
   *   index: number;
   *   match: boolean;
   *   value: string;
   * } } Token
   *
   * @typedef {Token[]} Tokens
   */

  /**
   * @template R
   *
   * @typedef { {
   *   item: R,
   *   tokens: Record<string, Tokens>
   * } } SearchResult
   */

  /**
   * @typedef {Record<string, string | string[]>} SearchItem
   */

  /**
   * Search items by query.
   *
   * @template {SearchItem} T
   *
   * @param {T[]} items elements to search in
   * @param {string} pattern pattern to search for
   * @param { {
   *   keys: string[];
   * } } options
   *
   * @returns {SearchResult<T>[]}
   */
  function search(items, pattern, options) {

    const {
      keys
    } = options;

    pattern = pattern.trim().toLowerCase();

    if (!pattern) {
      throw new Error('<pattern> must not be empty');
    }

    const words = pattern.trim().toLowerCase().split(/\s+/);

    return items.flatMap((item) => {
      const tokens = matchItem(item, words, keys);

      if (!tokens) {
        return [];
      }

      return {
        item,
        tokens
      };
    }).sort(createResultSorter(keys));
  }

  /**
   * Match an item and return tokens in case of a match.
   *
   * @param {SearchItem} item element to be matched
   * @param {string[]} words words from search pattern to find
   * @param {string[]} keys keys to search in the item
   *
   * @returns {Record<string, Tokens>}
   */
  function matchItem(item, words, keys) {

    const {
      matchedWords,
      tokens
    } = keys.reduce((result, key) => {
      const itemValue = item[ key ];

      const {
        tokens,
        matchedWords
      } = isArray$3(itemValue) ? (
        itemValue.reduce(
          (result, itemString) => {
            const { tokens, matchedWords } = matchString(itemString, words);

            return {
              tokens: [ ...result.tokens, tokens ],
              matchedWords: {
                ...result.matchedWords,
                ...matchedWords
              }
            };
          },
          {
            matchedWords: {},
            tokens: []
          }
        )
      ) : (
        matchString(itemValue, words)
      );

      return {
        tokens: {
          ...result.tokens,
          [ key ]: tokens,
        },
        matchedWords: {
          ...result.matchedWords,
          ...matchedWords
        }
      };
    }, {
      matchedWords: {},
      tokens: {}
    });

    // only return result if every word got matched
    if (Object.keys(matchedWords).length !== words.length) {
      return null;
    }

    return tokens;
  }

  /**
   * Creates a compare function that can be used in Array.sort() based on a custom scoring function
   *
   * @param {string[]} keys
   *
   * @returns { (resultA: SearchResult, resultB: SearchResult) => number}
   */
  function createResultSorter(keys) {

    /**
     * @param {SearchResult} resultA
     * @param {SearchResult} resultB
     */
    return (resultA, resultB) => {
      let comparison = 0;

      // used to assign some priority to earlier keys
      let modifier = 1;

      for (const key of keys) {

        const tokenComparison = compareTokens(
          resultA.tokens[key],
          resultB.tokens[key]
        );

        if (tokenComparison !== 0) {
          comparison += tokenComparison * modifier;
          modifier *= 0.9;
          continue;
        }

        const stringComparison = compareStrings(
          resultA.item[ key ],
          resultB.item[ key ]
        );

        if (stringComparison !== 0) {
          comparison += stringComparison * modifier;
          modifier *= 0.9;
          continue;
        }
      }

      return comparison;
    };

  }

  /**
   * Compares two token arrays.
   *
   * @param {Token[]} [tokensA]
   * @param {Token[]} [tokensB]
   *
   * @returns {number}
   */
  function compareTokens(tokensA, tokensB) {
    return scoreTokens(tokensB) - scoreTokens(tokensA);
  }

  /**
   * @param { Token[] } tokens
   * @returns { number }
   */
  function scoreTokens(tokens) {
    return tokens.reduce((sum, token) => sum + scoreToken(token), 0);
  }

  /**
   * Score a token based on its characteristics
   * and the length of the matched content.
   *
   * @param { Token } token
   *
   * @returns { number }
   */
  function scoreToken(token) {
    if (isArray$3(token)) {
      return Math.max(...token.map(scoreToken));
    }

    const modifier = Math.log(token.value.length);

    if (!token.match) {
      return -0.07 * modifier;
    }

    return (
      token.start
        ? (
          token.end
            ? 131.9
            : 7.87
        )
        : (
          token.wordStart
            ? 2.19
            : 1
        )
    ) * modifier;
  }

  /**
   * @param {string|string[]} [str='']
   *
   * @return {string}
   */
  function stringJoin(str = '') {
    return isArray$3(str) ? str.join(', ') : str;
  }

  /**
   * Compares two strings. also supports string arrays, which will be joined
   *
   * @param {string|string[]} [a]
   * @param {string|string[]} [b]
   *
   * @returns {number}
   */
  function compareStrings(a, b) {
    return stringJoin(a).localeCompare(stringJoin(b));
  }

  /**
   * Match a given string against a set of words,
   * and return the result.
   *
   * @param {string} string
   * @param {string[]} words
   *
   * @return { {
   *   tokens: Token[],
   *   matchedWords: Record<string, boolean>
   * } }
   */
  function matchString(string, words) {

    if (!string) {
      return {
        tokens: [],
        matchedWords: {}
      };
    }

    const tokens = [];
    const matchedWords = {};

    const wordsEscaped = words.map(escapeRegexp);

    const regexpString = [
      `(?<all>${wordsEscaped.join('\\s+')})`,
      ...wordsEscaped
    ].join('|');

    const regexp = new RegExp(regexpString, 'ig');

    let match;
    let lastIndex = 0;

    while ((match = regexp.exec(string))) {

      const [ value ] = match;

      const startIndex = match.index;
      const endIndex = match.index + value.length;

      const start = startIndex === 0;
      const end = endIndex === string.length;

      const all = !!match.groups.all;

      const wordStart = start || /\s/.test(string.charAt(startIndex - 1));
      const wordEnd = end || /\s/.test(string.charAt(endIndex));

      if (match.index > lastIndex) {

        // add previous token (NO match)
        tokens.push({
          value: string.slice(lastIndex, match.index),
          index: lastIndex
        });
      }

      // add current token (match)
      tokens.push({
        value,
        index: match.index,
        match: true,
        wordStart,
        wordEnd,
        start,
        end,
        all
      });

      const newMatchedWords = all ? words : [ value ];

      for (const word of newMatchedWords) {
        matchedWords[word.toLowerCase()] = true;
      }

      lastIndex = match.index + value.length;
    }

    // add after token (NO match)
    if (lastIndex < string.length) {
      tokens.push({
        value: string.slice(lastIndex),
        index: lastIndex
      });
    }

    return {
      tokens,
      matchedWords
    };
  }

  function escapeRegexp(string) {
    return string.replace(/[/\-\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var SearchModule$1 = {
    search: [ 'value', search ]
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var PopupMenuModule$1 = {
    __depends__: [ SearchModule$1 ],
    __init__: [ 'popupMenu' ],
    popupMenu: [ 'type', PopupMenu ]
  };

  /**
   * To change the icons, modify the SVGs in `./resources`, execute `npx svgo -f resources --datauri enc -o dist`,
   * and then replace respective icons with the optimized data URIs in `./dist`.
   */
  var icons$1 = {
    align:  `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2000 2000">
              <line x1="200" y1="150" x2="200" y2="1850" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
              <rect x="500" y="150" width="1300" height="700" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
              <rect x="500" y="1150" width="700" height="700" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    bottom: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="150" y1="1650" x2="1650" y2="1650" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="150" y="350" width="600" height="1300" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="1050" y="850" width="600" height="800" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    center: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="900" y1="150" x2="900" y2="1650" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="250" y="150" width="1300" height="600" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="500" y="1050" width="800" height="600" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    left:   `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="100" y1="150" x2="100" y2="1650" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="100" y="150" width="1300" height="600" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="100" y="1050" width="800" height="600" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    right:  `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="1650" y1="150" x2="1650" y2="1650" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="350" y="150" width="1300" height="600" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="850" y="1050" width="800" height="600" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    top:    `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="150" y1="150" x2="1650" y2="150" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="150" y="150" width="600" height="1300" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="1050" y="150" width="600" height="800" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`,
    middle: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
            <line x1="150" y1="900" x2="1650" y2="900" style="stroke:currentColor;stroke-width:100;stroke-linecap:round;"/>
            <rect x="150" y="250" width="600" height="1300" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
            <rect x="1050" y="500" width="600" height="800" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
          </svg>`
  };

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').default} ContextPad
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').ContextPadEntries} ContextPadEntries
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').default<Element>} ContextPadProvider
   */

  var LOW_PRIORITY$n = 900;

  /**
   * A provider for the `Align elements` context pad entry.
   *
   * @implements {ContextPadProvider}
   *
   * @param {ContextPad} contextPad
   * @param {PopupMenu} popupMenu
   * @param {Translate} translate
   * @param {Canvas} canvas
   */
  function AlignElementsContextPadProvider(contextPad, popupMenu, translate, canvas) {

    contextPad.registerProvider(LOW_PRIORITY$n, this);

    this._contextPad = contextPad;
    this._popupMenu = popupMenu;
    this._translate = translate;
    this._canvas = canvas;
  }

  AlignElementsContextPadProvider.$inject = [
    'contextPad',
    'popupMenu',
    'translate',
    'canvas'
  ];

  /**
   * @param {Element[]} elements
   *
   * @return {ContextPadEntries}
   */
  AlignElementsContextPadProvider.prototype.getMultiElementContextPadEntries = function(elements) {
    var actions = {};

    if (this._isAllowed(elements)) {
      assign$1(actions, this._getEntries(elements));
    }

    return actions;
  };

  AlignElementsContextPadProvider.prototype._isAllowed = function(elements) {
    return !this._popupMenu.isEmpty(elements, 'align-elements');
  };

  AlignElementsContextPadProvider.prototype._getEntries = function() {
    var self = this;

    return {
      'align-elements': {
        group: 'align-elements',
        title: self._translate('Align elements'),
        html: `<div class="entry">${icons$1['align']}</div>`,
        action: {
          click: function(event, target) {
            var position = self._getMenuPosition(target);

            assign$1(position, {
              cursor: {
                x: event.x,
                y: event.y
              }
            });

            self._popupMenu.open(target, 'align-elements', position);
          }
        }
      }
    };
  };

  AlignElementsContextPadProvider.prototype._getMenuPosition = function(elements) {
    var Y_OFFSET = 5;

    var pad = this._contextPad.getPad(elements).html;

    var padRect = pad.getBoundingClientRect();

    var pos = {
      x: padRect.left,
      y: padRect.bottom + Y_OFFSET
    };

    return pos;
  };

  /**
   * @typedef {import('diagram-js/lib/features/align-elements/AlignElements').default} AlignElements
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu
   * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   *
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuEntries} PopupMenuEntries
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').default} PopupMenuProvider
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget
   */

  var ALIGNMENT_OPTIONS = [
    'left',
    'center',
    'right',
    'top',
    'middle',
    'bottom'
  ];

  /**
   * A provider for the `Align elements` popup menu.
   *
   * @implements {PopupMenuProvider}
   *
   * @param {PopupMenu} popupMenu
   * @param {AlignElements} alignElements
   * @param {Translate} translate
   * @param {Rules} rules
   */
  function AlignElementsMenuProvider(popupMenu, alignElements, translate, rules) {

    this._alignElements = alignElements;
    this._translate = translate;
    this._popupMenu = popupMenu;
    this._rules = rules;

    popupMenu.registerProvider('align-elements', this);
  }

  AlignElementsMenuProvider.$inject = [
    'popupMenu',
    'alignElements',
    'translate',
    'rules'
  ];

  /**
   * @param {PopupMenuTarget} target
   *
   * @return {PopupMenuEntries}
   */
  AlignElementsMenuProvider.prototype.getPopupMenuEntries = function(target) {
    var entries = {};

    if (this._isAllowed(target)) {
      assign$1(entries, this._getEntries(target));
    }

    return entries;
  };

  AlignElementsMenuProvider.prototype._isAllowed = function(target) {
    return this._rules.allowed('elements.align', { elements: target });
  };

  /**
   * @param {PopupMenuTarget} target
   *
   * @return {PopupMenuEntries}
   */
  AlignElementsMenuProvider.prototype._getEntries = function(target) {
    var alignElements = this._alignElements,
        translate = this._translate,
        popupMenu = this._popupMenu;

    var entries = {};

    forEach$1(ALIGNMENT_OPTIONS, function(alignment) {
      entries[ 'align-elements-' + alignment ] = {
        group: 'align',
        title: translate('Align elements ' + alignment),
        className: 'bjs-align-elements-menu-entry',
        imageHtml: icons$1[ alignment ],
        action: function() {
          alignElements.trigger(target, alignment);
          popupMenu.close();
        }
      };
    });

    return entries;
  };

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  /**
   * A basic provider that may be extended to implement modeling rules.
   *
   * Extensions should implement the init method to actually add their custom
   * modeling checks. Checks may be added via the #addRule(action, fn) method.
   *
   * @class
   *
   * @param {EventBus} eventBus
   */
  function RuleProvider(eventBus) {
    CommandInterceptor.call(this, eventBus);

    this.init();
  }

  RuleProvider.$inject = [ 'eventBus' ];

  e$3(RuleProvider, CommandInterceptor);


  /**
   * Adds a modeling rule for the given action, implemented through
   * a callback function.
   *
   * The callback receives a modeling specific action context
   * to perform its check. It must return `false` to disallow the
   * action from happening or `true` to allow the action. Usually returing
   * `null` denotes that a particular interaction shall be ignored.
   * By returning nothing or `undefined` you pass evaluation to lower
   * priority rules.
   *
   * @example
   *
   * ```javascript
   * ResizableRules.prototype.init = function() {
   *
   *   \/**
   *    * Return `true`, `false` or nothing to denote
   *    * _allowed_, _not allowed_ and _continue evaluating_.
   *    *\/
   *   this.addRule('shape.resize', function(context) {
   *
   *     var shape = context.shape;
   *
   *     if (!context.newBounds) {
   *       // check general resizability
   *       if (!shape.resizable) {
   *         return false;
   *       }
   *
   *       // not returning anything (read: undefined)
   *       // will continue the evaluation of other rules
   *       // (with lower priority)
   *       return;
   *     } else {
   *       // element must have minimum size of 10*10 points
   *       return context.newBounds.width > 10 && context.newBounds.height > 10;
   *     }
   *   });
   * };
   * ```
   *
   * @param {string|string[]} actions the identifier for the modeling action to check
   * @param {number} [priority] the priority at which this rule is being applied
   * @param {(any) => any} fn the callback function that performs the actual check
   */
  RuleProvider.prototype.addRule = function(actions, priority, fn) {

    var self = this;

    if (typeof actions === 'string') {
      actions = [ actions ];
    }

    actions.forEach(function(action) {

      self.canExecute(action, priority, function(context, action, event) {
        return fn(context);
      }, true);
    });
  };

  /**
   * Implement this method to add new rules during provider initialization.
   */
  RuleProvider.prototype.init = function() {};

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * Rule provider for aligning BPMN elements.
   *
   * @param {EventBus} eventBus
   */
  function BpmnAlignElements(eventBus) {
    RuleProvider.call(this, eventBus);
  }

  BpmnAlignElements.$inject = [ 'eventBus' ];

  e$3(BpmnAlignElements, RuleProvider);

  BpmnAlignElements.prototype.init = function() {
    this.addRule('elements.align', function(context) {
      var elements = context.elements;

      // filter out elements which cannot be aligned
      var filteredElements = filter(elements, function(element) {
        return !(element.waypoints || element.host || element.labelTarget);
      });

      // filter out elements which are children of any of the selected elements
      filteredElements = getParents$1(filteredElements);

      if (filteredElements.length < 2) {
        return false;
      }

      return filteredElements;
    });
  };

  var AlignElementsModule = {
    __depends__: [
      AlignElementsModule$1,
      ContextPadModule$1,
      PopupMenuModule$1
    ],
    __init__: [
      'alignElementsContextPadProvider',
      'alignElementsMenuProvider',
      'bpmnAlignElements'
    ],
    alignElementsContextPadProvider: [ 'type', AlignElementsContextPadProvider ],
    alignElementsMenuProvider: [ 'type', AlignElementsMenuProvider ],
    bpmnAlignElements: [ 'type', BpmnAlignElements ]
  };

  /**
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../../util/Types').Point} Point
   */

  // padding to detect element placement
  var PLACEMENT_DETECTION_PAD = 10;

  var DEFAULT_DISTANCE = 50;

  var DEFAULT_MAX_DISTANCE = 250;


  /**
   * Get free position starting from given position.
   *
   * @param {Shape} source
   * @param {Shape} element
   * @param {Point} position
   * @param {(element: Element, position: Point, connectedAtPosition: Element) => Point} getNextPosition
   *
   * @return {Point}
   */
  function findFreePosition(source, element, position, getNextPosition) {
    var connectedAtPosition;

    while ((connectedAtPosition = getConnectedAtPosition(source, position, element))) {
      position = getNextPosition(element, position, connectedAtPosition);
    }

    return position;
  }

  /**
   * Returns function that returns next position.
   *
   * @param {Object} nextPositionDirection
   * @param {Object} [nextPositionDirection.x]
   * @param {Object} [nextPositionDirection.y]
   *
   * @return {(element: Element, previousPosition: Point, connectedAtPosition: Element) => Point}
   */
  function generateGetNextPosition(nextPositionDirection) {
    return function(element, previousPosition, connectedAtPosition) {
      var nextPosition = {
        x: previousPosition.x,
        y: previousPosition.y
      };

      [ 'x', 'y' ].forEach(function(axis) {

        var nextPositionDirectionForAxis = nextPositionDirection[ axis ];

        if (!nextPositionDirectionForAxis) {
          return;
        }

        var dimension = axis === 'x' ? 'width' : 'height';

        var margin = nextPositionDirectionForAxis.margin,
            minDistance = nextPositionDirectionForAxis.minDistance;

        if (margin < 0) {
          nextPosition[ axis ] = Math.min(
            connectedAtPosition[ axis ] + margin - element[ dimension ] / 2,
            previousPosition[ axis ] - minDistance + margin
          );
        } else {
          nextPosition[ axis ] = Math.max(
            connectedAtPosition[ axis ] + connectedAtPosition[ dimension ] + margin + element[ dimension ] / 2,
            previousPosition[ axis ] + minDistance + margin
          );
        }
      });

      return nextPosition;
    };
  }

  /**
   * Return connected element at given position and within given bounds. Takes
   * connected elements from host and attachers into account, too.
   *
   * @param {Shape} source
   * @param {Point} position
   * @param {Shape} element
   *
   * @return {Shape|undefined}
   */
  function getConnectedAtPosition(source, position, element) {

    var bounds = {
      x: position.x - (element.width / 2),
      y: position.y - (element.height / 2),
      width: element.width,
      height: element.height
    };

    var closure = getAutoPlaceClosure(source);

    return find$1(closure, function(target) {

      if (target === element) {
        return false;
      }

      var orientation = getOrientation(target, bounds, PLACEMENT_DETECTION_PAD);

      return orientation === 'intersect';
    });
  }

  /**
  * Compute optimal distance between source and target based on existing connections to and from source.
  * Assumes left-to-right and top-to-down modeling.
  *
  * @param {Shape} source
  * @param {Object} [hints]
  * @param {number} [hints.defaultDistance]
  * @param {string} [hints.direction]
  * @param {(connection: Connection) => boolean} [hints.filter]
  * @param {(connection: Connection) => number} [hints.getWeight]
  * @param {number} [hints.maxDistance]
  * @param {'start'|'center'|'end'} [hints.reference]
  *
  * @return {number}
  */
  function getConnectedDistance(source, hints) {
    if (!hints) {
      hints = {};
    }

    // targets > sources by default
    function getDefaultWeight(connection) {
      return connection.source === source ? 1 : -1;
    }

    var defaultDistance = hints.defaultDistance || DEFAULT_DISTANCE,
        direction = hints.direction || 'e',
        filter = hints.filter,
        getWeight = hints.getWeight || getDefaultWeight,
        maxDistance = hints.maxDistance || DEFAULT_MAX_DISTANCE,
        reference = hints.reference || 'start';

    if (!filter) {
      filter = noneFilter;
    }

    function getDistance(a, b) {
      if (direction === 'n') {
        if (reference === 'start') {
          return asTRBL(a).top - asTRBL(b).bottom;
        } else if (reference === 'center') {
          return asTRBL(a).top - getMid(b).y;
        } else {
          return asTRBL(a).top - asTRBL(b).top;
        }
      } else if (direction === 'w') {
        if (reference === 'start') {
          return asTRBL(a).left - asTRBL(b).right;
        } else if (reference === 'center') {
          return asTRBL(a).left - getMid(b).x;
        } else {
          return asTRBL(a).left - asTRBL(b).left;
        }
      } else if (direction === 's') {
        if (reference === 'start') {
          return asTRBL(b).top - asTRBL(a).bottom;
        } else if (reference === 'center') {
          return getMid(b).y - asTRBL(a).bottom;
        } else {
          return asTRBL(b).bottom - asTRBL(a).bottom;
        }
      } else {
        if (reference === 'start') {
          return asTRBL(b).left - asTRBL(a).right;
        } else if (reference === 'center') {
          return getMid(b).x - asTRBL(a).right;
        } else {
          return asTRBL(b).right - asTRBL(a).right;
        }
      }
    }

    var sourcesDistances = source.incoming
      .filter(filter)
      .map(function(connection) {
        var weight = getWeight(connection);

        var distance = weight < 0
          ? getDistance(connection.source, source)
          : getDistance(source, connection.source);

        return {
          id: connection.source.id,
          distance: distance,
          weight: weight
        };
      });

    var targetsDistances = source.outgoing
      .filter(filter)
      .map(function(connection) {
        var weight = getWeight(connection);

        var distance = weight > 0
          ? getDistance(source, connection.target)
          : getDistance(connection.target, source);

        return {
          id: connection.target.id,
          distance: distance,
          weight: weight
        };
      });

    var distances = sourcesDistances.concat(targetsDistances).reduce(function(accumulator, currentValue) {
      accumulator[ currentValue.id + '__weight_' + currentValue.weight ] = currentValue;

      return accumulator;
    }, {});

    var distancesGrouped = reduce(distances, function(accumulator, currentValue) {
      var distance = currentValue.distance,
          weight = currentValue.weight;

      if (distance < 0 || distance > maxDistance) {
        return accumulator;
      }

      if (!accumulator[ String(distance) ]) {
        accumulator[ String(distance) ] = 0;
      }

      accumulator[ String(distance) ] += 1 * weight;

      if (!accumulator.distance || accumulator[ accumulator.distance ] < accumulator[ String(distance) ]) {
        accumulator.distance = distance;
      }

      return accumulator;
    }, {});

    return distancesGrouped.distance || defaultDistance;
  }

  /**
   * Returns all elements connected to given source.
   *
   * This includes:
   *
   *   - elements connected to source
   *   - elements connected to host if source is an attacher
   *   - elements connected to attachers if source is a host
   *
   * @param {Shape} source
   *
   * @return {Shape[]}
   */
  function getAutoPlaceClosure(source) {

    var allConnected = getConnected(source);

    if (source.host) {
      allConnected = allConnected.concat(getConnected(source.host));
    }

    if (source.attachers) {
      allConnected = allConnected.concat(source.attachers.reduce(function(shapes, attacher) {
        return shapes.concat(getConnected(attacher));
      }, []));
    }

    return allConnected;
  }

  /**
   * Get all connected elements.
   *
   * @param {Shape} element
   *
   * @returns {Shape[]}
   */
  function getConnected(element) {
    return getTargets(element).concat(getSources(element));
  }

  function getSources(shape) {
    return shape.incoming.map(function(connection) {
      return connection.source;
    });
  }

  function getTargets(shape) {
    return shape.outgoing.map(function(connection) {
      return connection.target;
    });
  }

  function noneFilter() {
    return true;
  }

  /**
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   */

  var LOW_PRIORITY$m = 100;


  /**
   * A service that places elements connected to existing ones
   * to an appropriate position in an _automated_ fashion.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {Canvas} canvas
   */
  function AutoPlace$1(eventBus, modeling, canvas) {

    eventBus.on('autoPlace', LOW_PRIORITY$m, function(context) {
      var shape = context.shape,
          source = context.source;

      return getNewShapePosition$1(source, shape);
    });

    eventBus.on('autoPlace.end', function(event) {
      canvas.scrollToElement(event.shape);
    });

    /**
     * Append shape to source at appropriate position.
     *
     * @param {Shape} source
     * @param {Shape} shape
     * @param {any} [hints={}]
     *
     * @return {Shape} appended shape
     */
    this.append = function(source, shape, hints) {

      eventBus.fire('autoPlace.start', {
        source: source,
        shape: shape
      });

      // allow others to provide the position
      var position = eventBus.fire('autoPlace', {
        source: source,
        shape: shape
      });

      var newShape = modeling.appendShape(source, shape, position, source.parent, hints);

      eventBus.fire('autoPlace.end', {
        source: source,
        shape: newShape
      });

      return newShape;
    };

  }

  AutoPlace$1.$inject = [
    'eventBus',
    'modeling',
    'canvas'
  ];

  // helpers //////////

  /**
   * Find the new position for the target element to
   * connect to source.
   *
   * @param {Shape} source
   * @param {Shape} element
   * @param {Object} [hints]
   * @param {Object} [hints.defaultDistance]
   *
   * @return {Point}
   */
  function getNewShapePosition$1(source, element, hints) {
    if (!hints) {
      hints = {};
    }

    var distance = hints.defaultDistance || DEFAULT_DISTANCE;

    var sourceMid = getMid(source),
        sourceTrbl = asTRBL(source);

    // simply put element right next to source
    return {
      x: sourceTrbl.right + distance + element.width / 2,
      y: sourceMid.y
    };
  }

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../selection/Selection').default} Selection
   */

  /**
   * Select element after auto placement.
   *
   * @param {EventBus} eventBus
   * @param {Selection} selection
   */
  function AutoPlaceSelectionBehavior(eventBus, selection) {

    eventBus.on('autoPlace.end', 500, function(e) {
      selection.select(e.shape);
    });

  }

  AutoPlaceSelectionBehavior.$inject = [
    'eventBus',
    'selection'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var AutoPlaceModule$1 = {
    __init__: [ 'autoPlaceSelectionBehavior' ],
    autoPlace: [ 'type', AutoPlace$1 ],
    autoPlaceSelectionBehavior: [ 'type', AutoPlaceSelectionBehavior ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../../model/Types').Element} Element
   */

  /**
   * Return the parent of the element with any of the given types.
   *
   * @param {Element} element
   * @param {string|string[]} anyType
   *
   * @return {Element|null}
   */
  function getParent(element, anyType) {

    if (isString(anyType)) {
      anyType = [ anyType ];
    }

    while ((element = element.parent)) {
      if (isAny(element, anyType)) {
        return element;
      }
    }

    return null;
  }

  /**
   * Determines if the local modeling direction is vertical or horizontal.
   *
   * @param {Element} element
   * @param {ElementRegistry} [elementRegistry] - provide to consider parent diagram direction
   *
   * @return {boolean} false for vertical pools, lanes and their children. true otherwise
   */
  function isDirectionHorizontal(element, elementRegistry) {

    var parent = getParent(element, 'bpmn:Process');
    if (parent) {
      return true;
    }

    var types = [ 'bpmn:Participant', 'bpmn:Lane' ];

    parent = getParent(element, types);
    if (parent) {
      return isHorizontal$3(parent);
    } else if (isAny(element, types)) {
      return isHorizontal$3(element);
    }

    var process;
    for (process = getBusinessObject(element); process; process = process.$parent) {
      if (is$1(process, 'bpmn:Process')) {
        break;
      }
    }

    if (!elementRegistry) {
      return true;
    }

    // The direction may be specified in another diagram. We ignore that there
    // could be multiple diagrams with contradicting properties based on the
    // assumption that such BPMN files are unusual.
    var pool = elementRegistry.find(function(shape) {
      var businessObject = getBusinessObject(shape);
      return businessObject && businessObject.get('processRef') === process;
    });

    if (!pool) {
      return true;
    }

    return isHorizontal$3(pool);
  }

  /**
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   */

  /**
   * Get the position for given new target relative to the source it will be
   * connected to.
   *
   * @param  {Shape} source
   * @param  {Shape} element
   * @param  {ElementRegistry} elementRegistry
   *
   * @return {Point}
   */
  function getNewShapePosition(source, element, elementRegistry) {

    var placeHorizontally = isDirectionHorizontal(source, elementRegistry);

    if (is$1(element, 'bpmn:TextAnnotation')) {
      return getTextAnnotationPosition(source, element, placeHorizontally);
    }

    if (isAny(element, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {
      return getDataElementPosition(source, element, placeHorizontally);
    }

    if (is$1(element, 'bpmn:FlowNode')) {
      return getFlowNodePosition(source, element, placeHorizontally);
    }
  }

  /**
   * Get the position for given new flow node. Try placing the flow node right/bottom of
   * the source.
   *
   * @param {Shape} source
   * @param {Shape} element
   * @param {boolean} placeHorizontally Whether to place the new element horizontally
   *
   * @return {Point}
   */
  function getFlowNodePosition(source, element, placeHorizontally) {

    var sourceTrbl = asTRBL(source);
    var sourceMid = getMid(source);

    var placement = placeHorizontally ? {
      directionHint: 'e',
      minDistance: 80,
      baseOrientation: 'left',
      boundaryOrientation: 'top',
      start: 'top',
      end: 'bottom'
    } : {
      directionHint: 's',
      minDistance: 90,
      baseOrientation: 'top',
      boundaryOrientation: 'left',
      start: 'left',
      end: 'right'
    };

    var connectedDistance = getConnectedDistance(source, {
      filter: function(connection) {
        return is$1(connection, 'bpmn:SequenceFlow');
      },
      direction: placement.directionHint
    });

    var margin = 30,
        minDistance = placement.minDistance,
        orientation = placement.baseOrientation;

    if (is$1(source, 'bpmn:BoundaryEvent')) {
      orientation = getOrientation(source, source.host, -25);

      if (orientation.indexOf(placement.boundaryOrientation) !== -1) {
        margin *= -1;
      }
    }

    var position = placeHorizontally ? {
      x: sourceTrbl.right + connectedDistance + element.width / 2,
      y: sourceMid.y + getDistance$2(orientation, minDistance, placement)
    } : {
      x: sourceMid.x + getDistance$2(orientation, minDistance, placement),
      y: sourceTrbl.bottom + connectedDistance + element.height / 2
    };

    var nextPosition = {
      margin: margin,
      minDistance: minDistance
    };

    var nextPositionDirection = placeHorizontally ? {
      y: nextPosition
    } : {
      x: nextPosition
    };

    return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
  }

  /**
   * @param {DirectionTRBL} orientation
   * @param {number} minDistance
   * @param {{ start: DirectionTRBL, end: DirectionTRBL }} placement
   *
   * @return {number}
   */
  function getDistance$2(orientation, minDistance, placement) {
    if (orientation.includes(placement.start)) {
      return -1 * minDistance;
    } else if (orientation.includes(placement.end)) {
      return minDistance;
    } else {
      return 0;
    }
  }


  /**
   * Get the position for given text annotation. Try placing the text annotation
   * top-right of the source (bottom-right in vertical layouts).
   *
   * @param {Shape} source
   * @param {Shape} element
   * @param {boolean} placeHorizontally Whether to place the new element horizontally
   *
   * @return {Point}
   */
  function getTextAnnotationPosition(source, element, placeHorizontally) {

    var sourceTrbl = asTRBL(source);

    var position = placeHorizontally ? {
      x: sourceTrbl.right + element.width / 2,
      y: sourceTrbl.top - 50 - element.height / 2
    } : {
      x: sourceTrbl.right + 50 + element.width / 2,
      y: sourceTrbl.bottom + element.height / 2
    };

    if (isConnection(source)) {
      position = getMid(source);
      if (placeHorizontally) {
        position.x += 100;
        position.y -= 50;
      } else {
        position.x += 100;
        position.y += 50;
      }
    }

    var nextPosition = {
      margin: placeHorizontally ? -30 : 30,
      minDistance: 20
    };
    var nextPositionDirection = placeHorizontally ? {
      y: nextPosition
    } : {
      x: nextPosition
    };

    return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
  }


  /**
   * Get the position for given new data element. Try placing the data element
   * bottom-right of the source (bottom-left in vertical layouts).
   *
   * @param {Shape} source
   * @param {Shape} element
   * @param {boolean} placeHorizontally Whether to place the new element horizontally
   *
   * @return {Point}
   */
  function getDataElementPosition(source, element, placeHorizontally) {

    var sourceTrbl = asTRBL(source);

    var position = placeHorizontally ? {
      x: sourceTrbl.right - 10 + element.width / 2,
      y: sourceTrbl.bottom + 40 + element.width / 2
    } : {
      x: sourceTrbl.left - 40 - element.width / 2,
      y: sourceTrbl.bottom - 10 + element.height / 2
    };

    var nextPosition = {
      margin: 30,
      minDistance: 30
    };
    var nextPositionDirection = placeHorizontally ? {
      x: nextPosition
    } : {
      y: nextPosition
    };

    return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   */

  /**
   * BPMN auto-place behavior.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   */
  function AutoPlace(eventBus, elementRegistry) {
    eventBus.on('autoPlace', function(context) {
      var shape = context.shape,
          source = context.source;

      return getNewShapePosition(source, shape, elementRegistry);
    });
  }

  AutoPlace.$inject = [ 'eventBus', 'elementRegistry' ];

  var AutoPlaceModule = {
    __depends__: [ AutoPlaceModule$1 ],
    __init__: [ 'bpmnAutoPlace' ],
    bpmnAutoPlace: [ 'type', AutoPlace ]
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Rect} Rect
   * @typedef {import('../../util/Types').RectTRBL} RectTRBL
   *
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   */

  /**
   * An auto resize component that takes care of expanding a parent element
   * if child elements are created or moved close the parents edge.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function AutoResize(eventBus, elementRegistry, modeling, rules) {

    CommandInterceptor.call(this, eventBus);

    this._elementRegistry = elementRegistry;
    this._modeling = modeling;
    this._rules = rules;

    var self = this;

    this.postExecuted([ 'shape.create' ], function(event) {
      var context = event.context,
          hints = context.hints || {},
          shape = context.shape,
          parent = context.parent || context.newParent;

      if (hints.autoResize === false) {
        return;
      }

      self._expand([ shape ], parent);
    });

    this.postExecuted([ 'elements.move' ], function(event) {
      var context = event.context,
          elements = flatten$1(values(context.closure.topLevel)),
          hints = context.hints;

      var autoResize = hints ? hints.autoResize : true;

      if (autoResize === false) {
        return;
      }

      var expandings = groupBy(elements, function(element) {
        return element.parent.id;
      });

      forEach$1(expandings, function(elements, parentId) {

        // optionally filter elements to be considered when resizing
        if (isArray$3(autoResize)) {
          elements = elements.filter(function(element) {
            return find$1(autoResize, matchPattern({ id: element.id }));
          });
        }

        self._expand(elements, parentId);
      });
    });

    this.postExecuted([ 'shape.toggleCollapse' ], function(event) {
      var context = event.context,
          hints = context.hints,
          shape = context.shape;

      if (hints && hints.autoResize === false) {
        return;
      }

      if (shape.collapsed) {
        return;
      }

      self._expand(shape.children || [], shape);
    });

    this.postExecuted([ 'shape.resize' ], function(event) {
      var context = event.context,
          hints = context.hints,
          shape = context.shape,
          parent = shape.parent;

      if (hints && hints.autoResize === false) {
        return;
      }

      if (parent) {
        self._expand([ shape ], parent);
      }
    });

  }

  AutoResize.$inject = [
    'eventBus',
    'elementRegistry',
    'modeling',
    'rules'
  ];

  e$3(AutoResize, CommandInterceptor);


  /**
   * Calculate the new bounds of the target shape, given
   * a number of elements have been moved or added into the parent.
   *
   * This method considers the current size, the added elements as well as
   * the provided padding for the new bounds.
   *
   * @param {Shape[]} elements
   * @param {Shape} target
   */
  AutoResize.prototype._getOptimalBounds = function(elements, target) {

    var offset = this.getOffset(target),
        padding = this.getPadding(target);

    var elementsTrbl = asTRBL(getBBox(elements)),
        targetTrbl = asTRBL(target);

    var newTrbl = {};

    if (elementsTrbl.top - targetTrbl.top < padding.top) {
      newTrbl.top = elementsTrbl.top - offset.top;
    }

    if (elementsTrbl.left - targetTrbl.left < padding.left) {
      newTrbl.left = elementsTrbl.left - offset.left;
    }

    if (targetTrbl.right - elementsTrbl.right < padding.right) {
      newTrbl.right = elementsTrbl.right + offset.right;
    }

    if (targetTrbl.bottom - elementsTrbl.bottom < padding.bottom) {
      newTrbl.bottom = elementsTrbl.bottom + offset.bottom;
    }

    return asBounds(assign$1({}, targetTrbl, newTrbl));
  };


  /**
   * Expand the target shape respecting rules, offset and padding
   *
   * @param {Shape[]} elements
   * @param {Shape|string} target The target or its ID.
   */
  AutoResize.prototype._expand = function(elements, target) {

    if (typeof target === 'string') {
      target = this._elementRegistry.get(target);
    }

    var allowed = this._rules.allowed('element.autoResize', {
      elements: elements,
      target: target
    });

    if (!allowed) {
      return;
    }

    // calculate the new bounds
    var newBounds = this._getOptimalBounds(elements, target);

    if (!boundsChanged$1(newBounds, target)) {
      return;
    }

    var resizeDirections = getResizeDirections(pick(target, [ 'x', 'y', 'width', 'height' ]), newBounds);

    // resize the parent shape
    this.resize(target, newBounds, {
      autoResize: resizeDirections
    });

    var parent = target.parent;

    // recursively expand parent elements
    if (parent) {
      this._expand([ target ], parent);
    }
  };


  /**
   * Get the amount to expand the given shape in each direction.
   *
   * @param {Shape} shape
   *
   * @return {RectTRBL}
   */
  AutoResize.prototype.getOffset = function(shape) {
    return { top: 60, bottom: 60, left: 100, right: 100 };
  };


  /**
   * Get the activation threshold for each side for which
   * resize triggers.
   *
   * @param {Shape} shape
   *
   * @return {RectTRBL}
   */
  AutoResize.prototype.getPadding = function(shape) {
    return { top: 2, bottom: 2, left: 15, right: 15 };
  };


  /**
   * Perform the actual resize operation.
   *
   * @param {Shape} shape
   * @param {Rect} newBounds
   * @param {Object} [hints]
   * @param {string} [hints.autoResize]
   */
  AutoResize.prototype.resize = function(shape, newBounds, hints) {
    this._modeling.resizeShape(shape, newBounds, null, hints);
  };


  function boundsChanged$1(newBounds, oldBounds) {
    return (
      newBounds.x !== oldBounds.x ||
      newBounds.y !== oldBounds.y ||
      newBounds.width !== oldBounds.width ||
      newBounds.height !== oldBounds.height
    );
  }

  /**
   * Get directions of resize as {n|w|s|e} e.g. "nw".
   *
   * @param {Rect} oldBounds
   * @param {Rect} newBounds
   *
   * @return {Direction} Resize directions as {n|w|s|e}.
   */
  function getResizeDirections(oldBounds, newBounds) {
    var directions = '';

    oldBounds = asTRBL(oldBounds);
    newBounds = asTRBL(newBounds);

    if (oldBounds.top > newBounds.top) {
      directions = directions.concat('n');
    }

    if (oldBounds.right < newBounds.right) {
      directions = directions.concat('w');
    }

    if (oldBounds.bottom < newBounds.bottom) {
      directions = directions.concat('s');
    }

    if (oldBounds.left > newBounds.left) {
      directions = directions.concat('e');
    }

    return directions;
  }

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   */

  /**
   * BPMN-specific resize behavior.
   *
   * @param {Injector} injector
   */
  function BpmnAutoResize(injector) {

    injector.invoke(AutoResize, this);
  }

  BpmnAutoResize.$inject = [
    'injector'
  ];

  e$3(BpmnAutoResize, AutoResize);

  /**
   * Perform BPMN-specific resizing of participants.
   *
   * @param {Shape} target
   * @param {Rect} newBounds
   * @param {Object} [hints]
   * @param {string} [hints.autoResize]
   */
  BpmnAutoResize.prototype.resize = function(target, newBounds, hints) {

    if (is$1(target, 'bpmn:Participant')) {
      this._modeling.resizeLane(target, newBounds, null, hints);
    } else {
      this._modeling.resizeShape(target, newBounds, null, hints);
    }
  };

  /**
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  /**
   * This is a base rule provider for the element.autoResize rule.
   *
   * @param {EventBus} eventBus
   */
  function AutoResizeProvider(eventBus) {

    RuleProvider.call(this, eventBus);

    var self = this;

    this.addRule('element.autoResize', function(context) {
      return self.canResize(context.elements, context.target);
    });
  }

  AutoResizeProvider.$inject = [ 'eventBus' ];

  e$3(AutoResizeProvider, RuleProvider);

  /**
   * Needs to be implemented by sub classes to allow actual auto resize
   *
   * @param {Shape[]} elements
   * @param {Shape} target
   *
   * @return {boolean}
   */
  AutoResizeProvider.prototype.canResize = function(elements, target) {
    return false;
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   *
   * @typedef {import('../../model/Types').Shape} Shape
   */

  /**
   * BPMN-specific provider for automatic resizung.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function BpmnAutoResizeProvider(eventBus, modeling) {
    AutoResizeProvider.call(this, eventBus);

    this._modeling = modeling;
  }

  e$3(BpmnAutoResizeProvider, AutoResizeProvider);

  BpmnAutoResizeProvider.$inject = [
    'eventBus',
    'modeling'
  ];


  /**
   * BPMN-specific check whether given elements can be resized.
   *
   * @param {Shape[]} elements
   * @param {Shape} target
   *
   * @return {boolean}
   */
  BpmnAutoResizeProvider.prototype.canResize = function(elements, target) {

    // do not resize plane elements:
    // root elements, collapsed sub-processes
    if (is$1(target.di, 'bpmndi:BPMNPlane')) {
      return false;
    }

    if (!is$1(target, 'bpmn:Participant') && !is$1(target, 'bpmn:Lane') && !(is$1(target, 'bpmn:SubProcess'))) {
      return false;
    }

    var canResize = true;

    forEach$1(elements, function(element) {

      if (is$1(element, 'bpmn:Lane') || isLabel(element)) {
        canResize = false;
        return;
      }
    });

    return canResize;
  };

  var AutoResizeModule = {
    __init__: [
      'bpmnAutoResize',
      'bpmnAutoResizeProvider'
    ],
    bpmnAutoResize: [ 'type', BpmnAutoResize ],
    bpmnAutoResizeProvider: [ 'type', BpmnAutoResizeProvider ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var HIGH_PRIORITY$j = 1500;


  /**
   * Browsers may swallow certain events (hover, out ...) if users are to
   * fast with the mouse.
   *
   * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event
   *
   * The fix implemented in this component ensure that we
   *
   * 1) have a hover state after a successful drag.move event
   * 2) have an out event when dragging leaves an element
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function HoverFix(elementRegistry, eventBus, injector) {

    var self = this;

    var dragging = injector.get('dragging', false);

    /**
     * Make sure we are god damn hovering!
     *
     * @param {Event} dragging event
     */
    function ensureHover(event) {

      if (event.hover) {
        return;
      }

      var originalEvent = event.originalEvent;

      var gfx = self._findTargetGfx(originalEvent);

      var element = gfx && elementRegistry.get(gfx);

      if (gfx && element) {

        // 1) cancel current mousemove
        event.stopPropagation();

        // 2) emit fake hover for new target
        dragging.hover({ element: element, gfx: gfx });

        // 3) re-trigger move event
        dragging.move(originalEvent);
      }
    }


    if (dragging) {

      /**
       * We wait for a specific sequence of events before
       * emitting a fake drag.hover event.
       *
       * Event Sequence:
       *
       * drag.start
       * drag.move >> ensure we are hovering
       */
      eventBus.on('drag.start', function(event) {

        eventBus.once('drag.move', HIGH_PRIORITY$j, function(event) {

          ensureHover(event);

        });

      });
    }


    /**
     * We make sure that element.out is always fired, even if the
     * browser swallows an element.out event.
     *
     * Event sequence:
     *
     * element.hover
     * (element.out >> sometimes swallowed)
     * element.hover >> ensure we fired element.out
     */
    (function() {
      var hoverGfx;
      var hover;

      eventBus.on('element.hover', function(event) {

        // (1) remember current hover element
        hoverGfx = event.gfx;
        hover = event.element;
      });

      eventBus.on('element.hover', HIGH_PRIORITY$j, function(event) {

        // (3) am I on an element still?
        if (hover) {

          // (4) that is a problem, gotta "simulate the out"
          eventBus.fire('element.out', {
            element: hover,
            gfx: hoverGfx
          });
        }

      });

      eventBus.on('element.out', function() {

        // (2) unset hover state if we correctly outed us *GG*
        hoverGfx = null;
        hover = null;
      });

    })();

    this._findTargetGfx = function(event) {
      var position,
          target;

      if (!(event instanceof MouseEvent)) {
        return;
      }

      position = toPoint(event);

      // damn expensive operation, ouch!
      target = document.elementFromPoint(position.x, position.y);

      return getGfx(target);
    };

  }

  HoverFix.$inject = [
    'elementRegistry',
    'eventBus',
    'injector'
  ];


  // helpers /////////////////////

  function getGfx(target) {
    return closest(target, 'svg, .djs-element', true);
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var HoverFixModule = {
    __init__: [
      'hoverFix'
    ],
    hoverFix: [ 'type', HoverFix ],
  };

  var round$b = Math.round;

  /**
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../selection/Selection').default} Selection
   */

  var DRAG_ACTIVE_CLS = 'djs-drag-active';


  function preventDefault$2(event) {
    event.preventDefault();
  }

  function isTouchEvent(event) {

    // check for TouchEvent being available first
    // (i.e. not available on desktop Firefox)
    return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;
  }

  function getLength(point) {
    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
  }

  /**
   * A helper that fires canvas localized drag events and realizes
   * the general "drag-and-drop" look and feel.
   *
   * Calling {@link Dragging#activate} activates dragging on a canvas.
   *
   * It provides the following:
   *
   *   * emits life cycle events, namespaced with a prefix assigned
   *     during dragging activation
   *   * sets and restores the cursor
   *   * sets and restores the selection if elements still exist
   *   * ensures there can be only one drag operation active at a time
   *
   * Dragging may be canceled manually by calling {@link Dragging#cancel}
   * or by pressing ESC.
   *
   *
   * ## Life-cycle events
   *
   * Dragging can be in three different states, off, initialized
   * and active.
   *
   * (1) off: no dragging operation is in progress
   * (2) initialized: a new drag operation got initialized but not yet
   *                  started (i.e. because of no initial move)
   * (3) started: dragging is in progress
   *
   * Eventually dragging will be off again after a drag operation has
   * been ended or canceled via user click or ESC key press.
   *
   * To indicate transitions between these states dragging emits generic
   * life-cycle events with the `drag.` prefix _and_ events namespaced
   * to a prefix choosen by a user during drag initialization.
   *
   * The following events are emitted (appropriately prefixed) via
   * the {@link EventBus}.
   *
   * * `init`
   * * `start`
   * * `move`
   * * `end`
   * * `ended` (dragging already in off state)
   * * `cancel` (only if previously started)
   * * `canceled` (dragging already in off state, only if previously started)
   * * `cleanup`
   *
   *
   * @example
   *
   * ```javascript
   * function MyDragComponent(eventBus, dragging) {
   *
   *   eventBus.on('mydrag.start', function(event) {
   *     console.log('yes, we start dragging');
   *   });
   *
   *   eventBus.on('mydrag.move', function(event) {
   *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);
   *
   *     // local drag data is passed with the event
   *     event.context.foo; // "BAR"
   *
   *     // the original mouse event, too
   *     event.originalEvent; // MouseEvent(...)
   *   });
   *
   *   eventBus.on('element.click', function(event) {
   *     dragging.init(event, 'mydrag', {
   *       cursor: 'grabbing',
   *       data: {
   *         context: {
   *           foo: "BAR"
   *         }
   *       }
   *     });
   *   });
   * }
   * ```
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Selection} selection
   * @param {ElementRegistry} elementRegistry
   */
  function Dragging(eventBus, canvas, selection, elementRegistry) {

    var defaultOptions = {
      threshold: 5,
      trapClick: true
    };

    // the currently active drag operation
    // dragging is active as soon as this context exists.
    //
    // it is visually _active_ only when a context.active flag is set to true.
    var context;

    /* convert a global event into local coordinates */
    function toLocalPoint(globalPosition) {

      var viewbox = canvas.viewbox();

      var clientRect = canvas._container.getBoundingClientRect();

      return {
        x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,
        y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale
      };
    }

    // helpers

    function fire(type, dragContext) {
      dragContext = dragContext || context;

      var event = eventBus.createEvent(
        assign$1(
          {},
          dragContext.payload,
          dragContext.data,
          { isTouch: dragContext.isTouch }
        )
      );

      // default integration
      if (eventBus.fire('drag.' + type, event) === false) {
        return false;
      }

      return eventBus.fire(dragContext.prefix + '.' + type, event);
    }

    function restoreSelection(previousSelection) {
      var existingSelection = previousSelection.filter(function(element) {
        return elementRegistry.get(element.id);
      });

      existingSelection.length && selection.select(existingSelection);
    }

    // event listeners

    function move(event, activate) {
      var payload = context.payload,
          displacement = context.displacement;

      var globalStart = context.globalStart,
          globalCurrent = toPoint(event),
          globalDelta = delta(globalCurrent, globalStart);

      var localStart = context.localStart,
          localCurrent = toLocalPoint(globalCurrent),
          localDelta = delta(localCurrent, localStart);


      // activate context explicitly or once threshold is reached
      if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {

        // fire start event with original
        // starting coordinates

        assign$1(payload, {
          x: round$b(localStart.x + displacement.x),
          y: round$b(localStart.y + displacement.y),
          dx: 0,
          dy: 0
        }, { originalEvent: event });

        if (false === fire('start')) {
          return cancel();
        }

        context.active = true;

        // unset selection and remember old selection
        // the previous (old) selection will always passed
        // with the event via the event.previousSelection property
        if (!context.keepSelection) {
          payload.previousSelection = selection.get();
          selection.select(null);
        }

        // allow custom cursor
        if (context.cursor) {
          set(context.cursor);
        }

        // indicate dragging via marker on root element
        canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);
      }

      stopPropagation$1(event);

      if (context.active) {

        // update payload with actual coordinates
        assign$1(payload, {
          x: round$b(localCurrent.x + displacement.x),
          y: round$b(localCurrent.y + displacement.y),
          dx: round$b(localDelta.x),
          dy: round$b(localDelta.y)
        }, { originalEvent: event });

        // emit move event
        fire('move');
      }
    }

    function end(event) {
      var previousContext,
          returnValue = true;

      if (context.active) {

        if (event) {
          context.payload.originalEvent = event;

          // suppress original event (click, ...)
          // because we just ended a drag operation
          stopPropagation$1(event);
        }

        // implementations may stop restoring the
        // original state (selections, ...) by preventing the
        // end events default action
        returnValue = fire('end');
      }

      if (returnValue === false) {
        fire('rejected');
      }

      previousContext = cleanup(returnValue !== true);

      // last event to be fired when all drag operations are done
      // at this point in time no drag operation is in progress anymore
      fire('ended', previousContext);
    }


    // cancel active drag operation if the user presses
    // the ESC key on the keyboard

    function checkCancel(event) {

      if (isKey('Escape', event)) {
        preventDefault$2(event);

        cancel();
      }
    }


    // prevent ghost click that might occur after a finished
    // drag and drop session

    function trapClickAndEnd(event) {

      var untrap;

      // trap the click in case we are part of an active
      // drag operation. This will effectively prevent
      // the ghost click that cannot be canceled otherwise.
      if (context.active) {

        untrap = install(eventBus);

        // remove trap after minimal delay
        setTimeout(untrap, 400);

        // prevent default action (click)
        preventDefault$2(event);
      }

      end(event);
    }

    function trapTouch(event) {
      move(event);
    }

    // update the drag events model element (`hover`) and graphical element (`hoverGfx`)
    // properties during hover and out and fire {prefix}.hover and {prefix}.out properties
    // respectively

    function hover(event) {
      var payload = context.payload;

      payload.hoverGfx = event.gfx;
      payload.hover = event.element;

      fire('hover');
    }

    function out(event) {
      fire('out');

      var payload = context.payload;

      payload.hoverGfx = null;
      payload.hover = null;
    }


    // life-cycle methods

    function cancel(restore) {
      var previousContext;

      if (!context) {
        return;
      }

      var wasActive = context.active;

      if (wasActive) {
        fire('cancel');
      }

      previousContext = cleanup(restore);

      if (wasActive) {

        // last event to be fired when all drag operations are done
        // at this point in time no drag operation is in progress anymore
        fire('canceled', previousContext);
      }
    }

    function cleanup(restore) {
      var previousContext,
          endDrag;

      fire('cleanup');

      // reset cursor
      unset();

      if (context.trapClick) {
        endDrag = trapClickAndEnd;
      } else {
        endDrag = end;
      }

      // reset dom listeners
      event.unbind(document, 'mousemove', move);

      event.unbind(document, 'dragstart', preventDefault$2);
      event.unbind(document, 'selectstart', preventDefault$2);

      event.unbind(document, 'mousedown', endDrag, true);
      event.unbind(document, 'mouseup', endDrag, true);

      event.unbind(document, 'keyup', checkCancel);

      event.unbind(document, 'touchstart', trapTouch, true);
      event.unbind(document, 'touchcancel', cancel, true);
      event.unbind(document, 'touchmove', move, true);
      event.unbind(document, 'touchend', end, true);

      eventBus.off('element.hover', hover);
      eventBus.off('element.out', out);

      // remove drag marker on root element
      canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);

      // restore selection, unless it has changed
      var previousSelection = context.payload.previousSelection;

      if (restore !== false && previousSelection && !selection.get().length) {
        restoreSelection(previousSelection);
      }

      previousContext = context;

      context = null;

      return previousContext;
    }

    /**
     * Initialize a drag operation.
     *
     * If `localPosition` is given, drag events will be emitted
     * relative to it.
     *
     * @param {MouseEvent|TouchEvent} [event]
     * @param {Point} [relativeTo] actual diagram local position this drag operation should start at
     * @param {string} prefix
     * @param {Object} [options]
     */
    function init(event$1, relativeTo, prefix, options) {

      // only one drag operation may be active, at a time
      if (context) {
        cancel(false);
      }

      if (typeof relativeTo === 'string') {
        options = prefix;
        prefix = relativeTo;
        relativeTo = null;
      }

      options = assign$1({}, defaultOptions, options || {});

      var data = options.data || {},
          originalEvent,
          globalStart,
          localStart,
          endDrag,
          isTouch;

      if (options.trapClick) {
        endDrag = trapClickAndEnd;
      } else {
        endDrag = end;
      }

      if (event$1) {
        originalEvent = getOriginal$1(event$1) || event$1;
        globalStart = toPoint(event$1);

        stopPropagation$1(event$1);

        // prevent default browser dragging behavior
        if (originalEvent.type === 'dragstart') {
          preventDefault$2(originalEvent);
        }
      } else {
        originalEvent = null;
        globalStart = { x: 0, y: 0 };
      }

      localStart = toLocalPoint(globalStart);

      if (!relativeTo) {
        relativeTo = localStart;
      }

      isTouch = isTouchEvent(originalEvent);

      context = assign$1({
        prefix: prefix,
        data: data,
        payload: {},
        globalStart: globalStart,
        displacement: delta(relativeTo, localStart),
        localStart: localStart,
        isTouch: isTouch
      }, options);

      // skip dom registration if trigger
      // is set to manual (during testing)
      if (!options.manual) {

        // add dom listeners

        if (isTouch) {
          event.bind(document, 'touchstart', trapTouch, true);
          event.bind(document, 'touchcancel', cancel, true);
          event.bind(document, 'touchmove', move, true);
          event.bind(document, 'touchend', end, true);
        } else {

          // assume we use the mouse to interact per default
          event.bind(document, 'mousemove', move);

          // prevent default browser drag and text selection behavior
          event.bind(document, 'dragstart', preventDefault$2);
          event.bind(document, 'selectstart', preventDefault$2);

          event.bind(document, 'mousedown', endDrag, true);
          event.bind(document, 'mouseup', endDrag, true);
        }

        event.bind(document, 'keyup', checkCancel);

        eventBus.on('element.hover', hover);
        eventBus.on('element.out', out);
      }

      fire('init');

      if (options.autoActivate) {
        move(event$1, true);
      }
    }

    // cancel on diagram destruction
    eventBus.on('diagram.destroy', cancel);


    // API

    this.init = init;
    this.move = move;
    this.hover = hover;
    this.out = out;
    this.end = end;

    this.cancel = cancel;

    // for introspection

    this.context = function() {
      return context;
    };

    this.setOptions = function(options) {
      assign$1(defaultOptions, options);
    };
  }

  Dragging.$inject = [
    'eventBus',
    'canvas',
    'selection',
    'elementRegistry'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var DraggingModule = {
    __depends__: [
      HoverFixModule,
      SelectionModule,
    ],
    dragging: [ 'type', Dragging ],
  };

  /**
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../core/Canvas').default} Canvas
   */

  /**
   * Initiates canvas scrolling if current cursor point is close to a border.
   * Cancelled when current point moves back inside the scrolling borders
   * or cancelled manually.
   *
   * Default options :
   *   scrollThresholdIn: [ 20, 20, 20, 20 ],
   *   scrollThresholdOut: [ 0, 0, 0, 0 ],
   *   scrollRepeatTimeout: 15,
   *   scrollStep: 10
   *
   * Threshold order:
   *   [ left, top, right, bottom ]
   *
   * @param {Object} config
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function AutoScroll(config, eventBus, canvas) {

    this._canvas = canvas;

    this._opts = assign$1({
      scrollThresholdIn: [ 20, 20, 20, 20 ],
      scrollThresholdOut: [ 0, 0, 0, 0 ],
      scrollRepeatTimeout: 15,
      scrollStep: 10
    }, config);

    var self = this;

    eventBus.on('drag.move', function(e) {
      var point = self._toBorderPoint(e);

      self.startScroll(point);
    });

    eventBus.on([ 'drag.cleanup' ], function() {
      self.stopScroll();
    });
  }

  AutoScroll.$inject = [
    'config.autoScroll',
    'eventBus',
    'canvas'
  ];


  /**
   * Starts scrolling loop.
   * Point is given in global scale in canvas container box plane.
   *
   * @param {Point} point
   */
  AutoScroll.prototype.startScroll = function(point) {

    var canvas = this._canvas;
    var opts = this._opts;
    var self = this;

    var clientRect = canvas.getContainer().getBoundingClientRect();

    var diff = [
      point.x,
      point.y,
      clientRect.width - point.x,
      clientRect.height - point.y
    ];

    this.stopScroll();

    var dx = 0,
        dy = 0;

    for (var i = 0; i < 4; i++) {
      if (between(diff[i], opts.scrollThresholdOut[i], opts.scrollThresholdIn[i])) {
        if (i === 0) {
          dx = opts.scrollStep;
        } else if (i == 1) {
          dy = opts.scrollStep;
        } else if (i == 2) {
          dx = -opts.scrollStep;
        } else if (i == 3) {
          dy = -opts.scrollStep;
        }
      }
    }

    if (dx !== 0 || dy !== 0) {
      canvas.scroll({ dx: dx, dy: dy });

      this._scrolling = setTimeout(function() {
        self.startScroll(point);
      }, opts.scrollRepeatTimeout);
    }
  };

  function between(val, start, end) {
    if (start < val && val < end) {
      return true;
    }

    return false;
  }


  /**
   * Stops scrolling loop.
   */
  AutoScroll.prototype.stopScroll = function() {
    clearTimeout(this._scrolling);
  };


  /**
   * Overrides defaults options.
   *
   * @param {Object} options
   */
  AutoScroll.prototype.setOptions = function(options) {
    this._opts = assign$1({}, this._opts, options);
  };


  /**
   * Converts event to a point in canvas container plane in global scale.
   *
   * @param {Event} event
   * @return {Point}
   */
  AutoScroll.prototype._toBorderPoint = function(event) {
    var clientRect = this._canvas._container.getBoundingClientRect();

    var globalPosition = toPoint(event.originalEvent);

    return {
      x: globalPosition.x - clientRect.left,
      y: globalPosition.y - clientRect.top
    };
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var AutoScrollModule = {
    __depends__: [
      DraggingModule,
    ],
    __init__: [ 'autoScroll' ],
    autoScroll: [ 'type', AutoScroll ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   */

  /**
   * A service that provides rules for certain diagram actions.
   *
   * The default implementation will hook into the {@link CommandStack}
   * to perform the actual rule evaluation. Make sure to provide the
   * `commandStack` service with this module if you plan to use it.
   *
   * Together with this implementation you may use the {@link import('./RuleProvider').default}
   * to implement your own rule checkers.
   *
   * This module is ment to be easily replaced, thus the tiny foot print.
   *
   * @param {Injector} injector
   */
  function Rules(injector) {
    this._commandStack = injector.get('commandStack', false);
  }

  Rules.$inject = [ 'injector' ];


  /**
   * Returns whether or not a given modeling action can be executed
   * in the specified context.
   *
   * This implementation will respond with allow unless anyone
   * objects.
   *
   * @param {string} action The action to be allowed or disallowed.
   * @param {Object} [context] The context for allowing or disallowing the action.
   *
   * @return {boolean|null} Wether the action is allowed. Returns `null` if the action
   * is to be ignored.
   */
  Rules.prototype.allowed = function(action, context) {
    var allowed = true;

    var commandStack = this._commandStack;

    if (commandStack) {
      allowed = commandStack.canExecute(action, context);
    }

    // map undefined to true, i.e. no rules
    return allowed === undefined ? true : allowed;
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var RulesModule$1 = {
    __init__: [ 'rules' ],
    rules: [ 'type', Rules ]
  };

  /**
   * @typedef {import('../util/Types').Point} Point
   *
   * @typedef { {
   *   bendpoint?: boolean;
   *   index: number;
   *   point: Point;
   * } } Intersection
   */

  var round$a = Math.round,
      max$6 = Math.max;


  function circlePath(center, r) {
    var x = center.x,
        y = center.y;

    return [
      [ 'M', x, y ],
      [ 'm', 0, -10 ],
      [ 'a', r, r, 0, 1, 1, 0, 2 * r ],
      [ 'a', r, r, 0, 1, 1, 0, -2 * r ],
      [ 'z' ]
    ];
  }

  function linePath(points) {
    var segments = [];

    points.forEach(function(p, idx) {
      segments.push([ idx === 0 ? 'M' : 'L', p.x, p.y ]);
    });

    return segments;
  }


  var INTERSECTION_THRESHOLD$1 = 10;

  /**
   * @param {Point[]} waypoints
   * @param {Point} reference
   *
   * @return {Intersection|null}
   */
  function getBendpointIntersection(waypoints, reference) {

    var i, w;

    for (i = 0; (w = waypoints[i]); i++) {

      if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD$1) {
        return {
          point: waypoints[i],
          bendpoint: true,
          index: i
        };
      }
    }

    return null;
  }

  /**
   * @param {Point[]} waypoints
   * @param {Point} reference
   *
   * @return {Intersection|null}
   */
  function getPathIntersection(waypoints, reference) {

    var intersections = findPathIntersections(circlePath(reference, INTERSECTION_THRESHOLD$1), linePath(waypoints));

    var a = intersections[0],
        b = intersections[intersections.length - 1],
        idx;

    if (!a) {

      // no intersection
      return null;
    }

    if (a !== b) {

      if (a.segment2 !== b.segment2) {

        // we use the bendpoint in between both segments
        // as the intersection point

        idx = max$6(a.segment2, b.segment2) - 1;

        return {
          point: waypoints[idx],
          bendpoint: true,
          index: idx
        };
      }

      return {
        point: {
          x: (round$a(a.x + b.x) / 2),
          y: (round$a(a.y + b.y) / 2)
        },
        index: a.segment2
      };
    }

    return {
      point: {
        x: round$a(a.x),
        y: round$a(a.y)
      },
      index: a.segment2
    };
  }

  /**
   * Returns the closest point on the connection towards a given reference point.
   *
   * @param {Point[]} waypoints
   * @param {Point} reference
   *
   * @return {Intersection|null}
   */
  function getApproxIntersection(waypoints, reference) {
    return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);
  }

  /**
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').Vector} Vector
   */

  /**
   * Returns the length of a vector.
   *
   * @param {Vector} vector
   *
   * @return {number}
   */
  function vectorLength(vector) {
    return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
  }


  /**
   * Calculates the angle between a line a the Y axis.
   *
   * @param {Point[]} line
   *
   * @return {number}
   */
  function getAngle(line) {

    // return value is between 0, 180 and -180, -0
    // @janstuemmel: maybe replace return a/b with b/a
    return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));
  }


  /**
   * Rotates a vector by a given angle.
   *
   * @param {Vector} vector
   * @param {number} angle The angle in radians.
   *
   * @return {Vector}
   */
  function rotateVector(vector, angle) {
    return (!angle) ? vector : {
      x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,
      y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y
    };
  }


  /**
   * Solves a 2D equation system
   * a + r*b = c, where a,b,c are 2D vectors
   *
   * @param {Vector} a
   * @param {Vector} b
   * @param {Vector} c
   *
   * @return {number}
   */
  function solveLambaSystem(a, b, c) {

    // the 2d system
    var system = [
      { n: a[0] - c[0], lambda: b[0] },
      { n: a[1] - c[1], lambda: b[1] }
    ];

    // solve
    var n = system[0].n * b[0] + system[1].n * b[1],
        l = system[0].lambda * b[0] + system[1].lambda * b[1];

    return -n / l;
  }


  /**
   * Calculates the position of the perpendicular foot.
   *
   * @param {Point} point
   * @param {Point[]} line
   *
   * @return {Point}
   */
  function perpendicularFoot(point, line) {

    var a = line[0], b = line[1];

    // relative position of b from a
    var bd = { x: b.x - a.x, y: b.y - a.y };

    // solve equation system to the parametrized vectors param real value
    var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);

    return { x: a.x + r * bd.x, y: a.y + r * bd.y };
  }


  /**
   * Calculates the distance between a point and a line.
   *
   * @param {Point} point
   * @param {Point[]} line
   *
   * @return {number}
   */
  function getDistancePointLine(point, line) {

    var pfPoint = perpendicularFoot(point, line);

    // distance vector
    var connectionVector = {
      x: pfPoint.x - point.x,
      y: pfPoint.y - point.y
    };

    return vectorLength(connectionVector);
  }


  /**
   * Calculates the distance between two points.
   *
   * @param {Point} point1
   * @param {Point} point2
   *
   * @return {number}
   */
  function getDistancePointPoint(point1, point2) {

    return vectorLength({
      x: point1.x - point2.x,
      y: point1.y - point2.y
    });
  }

  /**
   * @typedef {import('../../core/Types').ConnectionLike} Connection
   *
   * @typedef {import('../../util/Types').Point} Point
   */

  var BENDPOINT_CLS = 'djs-bendpoint';
  var SEGMENT_DRAGGER_CLS = 'djs-segment-dragger';

  function toCanvasCoordinates(canvas, event) {

    var position = toPoint(event),
        clientRect = canvas._container.getBoundingClientRect(),
        offset;

    // canvas relative position

    offset = {
      x: clientRect.left,
      y: clientRect.top
    };

    // update actual event payload with canvas relative measures

    var viewbox = canvas.viewbox();

    return {
      x: viewbox.x + (position.x - offset.x) / viewbox.scale,
      y: viewbox.y + (position.y - offset.y) / viewbox.scale
    };
  }

  function getConnectionIntersection(canvas, waypoints, event) {
    var localPosition = toCanvasCoordinates(canvas, event),
        intersection = getApproxIntersection(waypoints, localPosition);

    return intersection;
  }

  function addBendpoint(parentGfx, cls) {
    var groupGfx = create$1('g');
    classes$1(groupGfx).add(BENDPOINT_CLS);

    append(parentGfx, groupGfx);

    var visual = create$1('circle');
    attr$1(visual, {
      cx: 0,
      cy: 0,
      r: 4
    });
    classes$1(visual).add('djs-visual');

    append(groupGfx, visual);

    var hit = create$1('circle');
    attr$1(hit, {
      cx: 0,
      cy: 0,
      r: 10
    });
    classes$1(hit).add('djs-hit');

    append(groupGfx, hit);

    if (cls) {
      classes$1(groupGfx).add(cls);
    }

    return groupGfx;
  }

  function createParallelDragger(parentGfx, segmentStart, segmentEnd, alignment) {
    var draggerGfx = create$1('g');

    append(parentGfx, draggerGfx);

    var width = 18,
        height = 6,
        padding = 11,
        hitWidth = calculateHitWidth(segmentStart, segmentEnd, alignment),
        hitHeight = height + padding;

    var visual = create$1('rect');
    attr$1(visual, {
      x: -18 / 2,
      y: -6 / 2,
      width: width,
      height: height
    });
    classes$1(visual).add('djs-visual');

    append(draggerGfx, visual);

    var hit = create$1('rect');
    attr$1(hit, {
      x: -hitWidth / 2,
      y: -17 / 2,
      width: hitWidth,
      height: hitHeight
    });
    classes$1(hit).add('djs-hit');

    append(draggerGfx, hit);

    rotate(draggerGfx, alignment === 'v' ? 90 : 0);

    return draggerGfx;
  }


  function addSegmentDragger(parentGfx, segmentStart, segmentEnd) {

    var groupGfx = create$1('g'),
        mid = getMidPoint(segmentStart, segmentEnd),
        alignment = pointsAligned(segmentStart, segmentEnd);

    append(parentGfx, groupGfx);

    createParallelDragger(groupGfx, segmentStart, segmentEnd, alignment);

    classes$1(groupGfx).add(SEGMENT_DRAGGER_CLS);
    classes$1(groupGfx).add(alignment === 'h' ? 'horizontal' : 'vertical');

    translate$1(groupGfx, mid.x, mid.y);

    return groupGfx;
  }

  /**
   * Calculates region for segment move which is 2/3 of the full segment length
   * @param {number} segmentLength
   *
   * @return {number}
   */
  function calculateSegmentMoveRegion(segmentLength) {
    return Math.abs(Math.round(segmentLength * 2 / 3));
  }

  /**
   * Returns the point with the closest distance that is on the connection path.
   *
   * @param {Point} position
   * @param {Connection} connection
   * @return {Point}
   */
  function getClosestPointOnConnection(position, connection) {
    var segment = getClosestSegment(position, connection);

    return perpendicularFoot(position, segment);
  }


  // helper //////////

  function calculateHitWidth(segmentStart, segmentEnd, alignment) {
    var segmentLengthXAxis = segmentEnd.x - segmentStart.x,
        segmentLengthYAxis = segmentEnd.y - segmentStart.y;

    return alignment === 'h' ?
      calculateSegmentMoveRegion(segmentLengthXAxis) :
      calculateSegmentMoveRegion(segmentLengthYAxis);
  }

  function getClosestSegment(position, connection) {
    var waypoints = connection.waypoints;

    var minDistance = Infinity,
        segmentIndex;

    for (var i = 0; i < waypoints.length - 1; i++) {
      var start = waypoints[i],
          end = waypoints[i + 1],
          distance = getDistancePointLine(position, [ start, end ]);

      if (distance < minDistance) {
        minDistance = distance;
        segmentIndex = i;
      }
    }

    return [ waypoints[segmentIndex], waypoints[segmentIndex + 1] ];
  }

  /**
   * @typedef {import('../bendpoints/BendpointMove').default} BendpointMove
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../bendpoints/ConnectionSegmentMove').default} ConnectionSegmentMove
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../interaction-events/InteractionEvents').default} InteractionEvents
   */

  /**
   * A service that adds editable bendpoints to connections.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {InteractionEvents} interactionEvents
   * @param {BendpointMove} bendpointMove
   * @param {ConnectionSegmentMove} connectionSegmentMove
   */
  function Bendpoints(
      eventBus, canvas, interactionEvents,
      bendpointMove, connectionSegmentMove) {

    /**
     * Returns true if intersection point is inside middle region of segment, adjusted by
     * optional threshold
     */
    function isIntersectionMiddle(intersection, waypoints, treshold) {
      var idx = intersection.index,
          p = intersection.point,
          p0, p1, mid, aligned, xDelta, yDelta;

      if (idx <= 0 || intersection.bendpoint) {
        return false;
      }

      p0 = waypoints[idx - 1];
      p1 = waypoints[idx];
      mid = getMidPoint(p0, p1),
      aligned = pointsAligned(p0, p1);
      xDelta = Math.abs(p.x - mid.x);
      yDelta = Math.abs(p.y - mid.y);

      return aligned && xDelta <= treshold && yDelta <= treshold;
    }

    /**
     * Calculates the threshold from a connection's middle which fits the two-third-region
     */
    function calculateIntersectionThreshold(connection, intersection) {
      var waypoints = connection.waypoints,
          relevantSegment, alignment, segmentLength, threshold;

      if (intersection.index <= 0 || intersection.bendpoint) {
        return null;
      }

      // segment relative to connection intersection
      relevantSegment = {
        start: waypoints[intersection.index - 1],
        end: waypoints[intersection.index]
      };

      alignment = pointsAligned(relevantSegment.start, relevantSegment.end);

      if (!alignment) {
        return null;
      }

      if (alignment === 'h') {
        segmentLength = relevantSegment.end.x - relevantSegment.start.x;
      } else {
        segmentLength = relevantSegment.end.y - relevantSegment.start.y;
      }

      // calculate threshold relative to 2/3 of segment length
      threshold = calculateSegmentMoveRegion(segmentLength) / 2;

      return threshold;
    }

    function activateBendpointMove(event, connection) {
      var waypoints = connection.waypoints,
          intersection = getConnectionIntersection(canvas, waypoints, event),
          threshold;

      if (!intersection) {
        return;
      }

      threshold = calculateIntersectionThreshold(connection, intersection);

      if (isIntersectionMiddle(intersection, waypoints, threshold)) {
        connectionSegmentMove.start(event, connection, intersection.index);
      } else {
        bendpointMove.start(event, connection, intersection.index, !intersection.bendpoint);
      }

      // we've handled the event
      return true;
    }

    function bindInteractionEvents(node, eventName, element) {

      event.bind(node, eventName, function(event) {
        interactionEvents.triggerMouseEvent(eventName, event, element);
        event.stopPropagation();
      });
    }

    function getBendpointsContainer(element, create) {

      var layer = canvas.getLayer('overlays'),
          gfx = query('.djs-bendpoints[data-element-id="' + escapeCSS(element.id) + '"]', layer);

      if (!gfx && create) {
        gfx = create$1('g');
        attr$1(gfx, { 'data-element-id': element.id });
        classes$1(gfx).add('djs-bendpoints');

        append(layer, gfx);

        bindInteractionEvents(gfx, 'mousedown', element);
        bindInteractionEvents(gfx, 'click', element);
        bindInteractionEvents(gfx, 'dblclick', element);
      }

      return gfx;
    }

    function getSegmentDragger(idx, parentGfx) {
      return query(
        '.djs-segment-dragger[data-segment-idx="' + idx + '"]',
        parentGfx
      );
    }

    function createBendpoints(gfx, connection) {
      connection.waypoints.forEach(function(p, idx) {
        var bendpoint = addBendpoint(gfx);

        append(gfx, bendpoint);

        translate$1(bendpoint, p.x, p.y);
      });

      // add floating bendpoint
      addBendpoint(gfx, 'floating');
    }

    function createSegmentDraggers(gfx, connection) {

      var waypoints = connection.waypoints;

      var segmentStart,
          segmentEnd,
          segmentDraggerGfx;

      for (var i = 1; i < waypoints.length; i++) {

        segmentStart = waypoints[i - 1];
        segmentEnd = waypoints[i];

        if (pointsAligned(segmentStart, segmentEnd)) {
          segmentDraggerGfx = addSegmentDragger(gfx, segmentStart, segmentEnd);

          attr$1(segmentDraggerGfx, { 'data-segment-idx': i });

          bindInteractionEvents(segmentDraggerGfx, 'mousemove', connection);
        }
      }
    }

    function clearBendpoints(gfx) {
      forEach$1(all('.' + BENDPOINT_CLS, gfx), function(node) {
        remove$3(node);
      });
    }

    function clearSegmentDraggers(gfx) {
      forEach$1(all('.' + SEGMENT_DRAGGER_CLS, gfx), function(node) {
        remove$3(node);
      });
    }

    function addHandles(connection) {

      var gfx = getBendpointsContainer(connection);

      if (!gfx) {
        gfx = getBendpointsContainer(connection, true);

        createBendpoints(gfx, connection);
        createSegmentDraggers(gfx, connection);
      }

      return gfx;
    }

    function updateHandles(connection) {

      var gfx = getBendpointsContainer(connection);

      if (gfx) {
        clearSegmentDraggers(gfx);
        clearBendpoints(gfx);
        createSegmentDraggers(gfx, connection);
        createBendpoints(gfx, connection);
      }
    }

    function updateFloatingBendpointPosition(parentGfx, intersection) {
      var floating = query('.floating', parentGfx),
          point = intersection.point;

      if (!floating) {
        return;
      }

      translate$1(floating, point.x, point.y);

    }

    function updateSegmentDraggerPosition(parentGfx, intersection, waypoints) {

      var draggerGfx = getSegmentDragger(intersection.index, parentGfx),
          segmentStart = waypoints[intersection.index - 1],
          segmentEnd = waypoints[intersection.index],
          point = intersection.point,
          mid = getMidPoint(segmentStart, segmentEnd),
          alignment = pointsAligned(segmentStart, segmentEnd),
          draggerVisual, relativePosition;

      if (!draggerGfx) {
        return;
      }

      draggerVisual = getDraggerVisual(draggerGfx);

      relativePosition = {
        x: point.x - mid.x,
        y: point.y - mid.y
      };

      if (alignment === 'v') {

        // rotate position
        relativePosition = {
          x: relativePosition.y,
          y: relativePosition.x
        };
      }

      translate$1(draggerVisual, relativePosition.x, relativePosition.y);
    }

    eventBus.on('connection.changed', function(event) {
      updateHandles(event.element);
    });

    eventBus.on('connection.remove', function(event) {
      var gfx = getBendpointsContainer(event.element);

      if (gfx) {
        remove$3(gfx);
      }
    });

    eventBus.on('element.marker.update', function(event) {

      var element = event.element,
          bendpointsGfx;

      if (!element.waypoints) {
        return;
      }

      bendpointsGfx = addHandles(element);

      if (event.add) {
        classes$1(bendpointsGfx).add(event.marker);
      } else {
        classes$1(bendpointsGfx).remove(event.marker);
      }
    });

    eventBus.on('element.mousemove', function(event) {

      var element = event.element,
          waypoints = element.waypoints,
          bendpointsGfx,
          intersection;

      if (waypoints) {
        bendpointsGfx = getBendpointsContainer(element, true);

        intersection = getConnectionIntersection(canvas, waypoints, event.originalEvent);

        if (!intersection) {
          return;
        }

        updateFloatingBendpointPosition(bendpointsGfx, intersection);

        if (!intersection.bendpoint) {
          updateSegmentDraggerPosition(bendpointsGfx, intersection, waypoints);
        }

      }
    });

    eventBus.on('element.mousedown', function(event) {

      if (!isPrimaryButton(event)) {
        return;
      }

      var originalEvent = event.originalEvent,
          element = event.element;

      if (!element.waypoints) {
        return;
      }

      return activateBendpointMove(originalEvent, element);
    });

    eventBus.on('selection.changed', function(event) {
      var newSelection = event.newSelection,
          primary = newSelection[0];

      if (primary && primary.waypoints) {
        addHandles(primary);
      }
    });

    eventBus.on('element.hover', function(event) {
      var element = event.element;

      if (element.waypoints) {
        addHandles(element);
        interactionEvents.registerEvent(event.gfx, 'mousemove', 'element.mousemove');
      }
    });

    eventBus.on('element.out', function(event) {
      interactionEvents.unregisterEvent(event.gfx, 'mousemove', 'element.mousemove');
    });

    // update bendpoint container data attribute on element ID change
    eventBus.on('element.updateId', function(context) {
      var element = context.element,
          newId = context.newId;

      if (element.waypoints) {
        var bendpointContainer = getBendpointsContainer(element);

        if (bendpointContainer) {
          attr$1(bendpointContainer, { 'data-element-id': newId });
        }
      }
    });

    // API

    this.addHandles = addHandles;
    this.updateHandles = updateHandles;
    this.getBendpointsContainer = getBendpointsContainer;
    this.getSegmentDragger = getSegmentDragger;
  }

  Bendpoints.$inject = [
    'eventBus',
    'canvas',
    'interactionEvents',
    'bendpointMove',
    'connectionSegmentMove'
  ];



  // helper /////////////

  function getDraggerVisual(draggerGfx) {
    return query('.djs-visual', draggerGfx);
  }

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   */

  var round$9 = Math.round;

  var RECONNECT_START$1 = 'reconnectStart',
      RECONNECT_END$1 = 'reconnectEnd',
      UPDATE_WAYPOINTS$1 = 'updateWaypoints';


  /**
   * Move bendpoints through drag and drop to add/remove bendpoints or reconnect connection.
   *
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {Rules} rules
   * @param {Modeling} modeling
   */
  function BendpointMove(injector, eventBus, canvas, dragging, rules, modeling) {
    this._injector = injector;

    this.start = function(event, connection, bendpointIndex, insert) {
      var gfx = canvas.getGraphics(connection),
          source = connection.source,
          target = connection.target,
          waypoints = connection.waypoints,
          type;

      if (!insert && bendpointIndex === 0) {
        type = RECONNECT_START$1;
      } else if (!insert && bendpointIndex === waypoints.length - 1) {
        type = RECONNECT_END$1;
      } else {
        type = UPDATE_WAYPOINTS$1;
      }

      var command = type === UPDATE_WAYPOINTS$1 ? 'connection.updateWaypoints' : 'connection.reconnect';

      var allowed = rules.allowed(command, {
        connection: connection,
        source: source,
        target: target
      });

      if (allowed === false) {
        allowed = rules.allowed(command, {
          connection: connection,
          source: target,
          target: source
        });
      }

      if (allowed === false) {
        return;
      }

      dragging.init(event, 'bendpoint.move', {
        data: {
          connection: connection,
          connectionGfx: gfx,
          context: {
            allowed: allowed,
            bendpointIndex: bendpointIndex,
            connection: connection,
            source: source,
            target: target,
            insert: insert,
            type: type
          }
        }
      });
    };

    eventBus.on('bendpoint.move.hover', function(event) {
      var context = event.context,
          connection = context.connection,
          source = connection.source,
          target = connection.target,
          hover = event.hover,
          type = context.type;

      // cache hover state
      context.hover = hover;

      var allowed;

      if (!hover) {
        return;
      }

      var command = type === UPDATE_WAYPOINTS$1 ? 'connection.updateWaypoints' : 'connection.reconnect';

      allowed = context.allowed = rules.allowed(command, {
        connection: connection,
        source: type === RECONNECT_START$1 ? hover : source,
        target: type === RECONNECT_END$1 ? hover : target
      });

      if (allowed) {
        context.source = type === RECONNECT_START$1 ? hover : source;
        context.target = type === RECONNECT_END$1 ? hover : target;

        return;
      }

      if (allowed === false) {
        allowed = context.allowed = rules.allowed(command, {
          connection: connection,
          source: type === RECONNECT_END$1 ? hover : target,
          target: type === RECONNECT_START$1 ? hover : source
        });
      }

      if (allowed) {
        context.source = type === RECONNECT_END$1 ? hover : target;
        context.target = type === RECONNECT_START$1 ? hover : source;
      }
    });

    eventBus.on([ 'bendpoint.move.out', 'bendpoint.move.cleanup' ], function(event) {
      var context = event.context,
          type = context.type;

      context.hover = null;
      context.source = null;
      context.target = null;

      if (type !== UPDATE_WAYPOINTS$1) {
        context.allowed = false;
      }
    });

    eventBus.on('bendpoint.move.end', function(event) {
      var context = event.context,
          allowed = context.allowed,
          bendpointIndex = context.bendpointIndex,
          connection = context.connection,
          insert = context.insert,
          newWaypoints = connection.waypoints.slice(),
          source = context.source,
          target = context.target,
          type = context.type,
          hints = context.hints || {};

      // ensure integer values (important if zoom level was > 1 during move)
      var docking = {
        x: round$9(event.x),
        y: round$9(event.y)
      };

      if (!allowed) {
        return false;
      }

      if (type === UPDATE_WAYPOINTS$1) {
        if (insert) {

          // insert new bendpoint
          newWaypoints.splice(bendpointIndex, 0, docking);
        } else {

          // swap previous waypoint with moved one
          newWaypoints[bendpointIndex] = docking;
        }

        // pass hints about actual moved bendpoint
        // useful for connection/label layout
        hints.bendpointMove = {
          insert: insert,
          bendpointIndex: bendpointIndex
        };

        newWaypoints = this.cropWaypoints(connection, newWaypoints);

        modeling.updateWaypoints(connection, filterRedundantWaypoints(newWaypoints), hints);
      } else {
        if (type === RECONNECT_START$1) {
          hints.docking = 'source';

          if (isReverse$2(context)) {
            hints.docking = 'target';

            hints.newWaypoints = newWaypoints.reverse();
          }
        } else if (type === RECONNECT_END$1) {
          hints.docking = 'target';

          if (isReverse$2(context)) {
            hints.docking = 'source';

            hints.newWaypoints = newWaypoints.reverse();
          }
        }

        modeling.reconnect(connection, source, target, docking, hints);
      }
    }, this);
  }

  BendpointMove.$inject = [
    'injector',
    'eventBus',
    'canvas',
    'dragging',
    'rules',
    'modeling'
  ];

  BendpointMove.prototype.cropWaypoints = function(connection, newWaypoints) {
    var connectionDocking = this._injector.get('connectionDocking', false);

    if (!connectionDocking) {
      return newWaypoints;
    }

    var waypoints = connection.waypoints;

    connection.waypoints = newWaypoints;

    connection.waypoints = connectionDocking.getCroppedWaypoints(connection);

    newWaypoints = connection.waypoints;

    connection.waypoints = waypoints;

    return newWaypoints;
  };


  // helpers //////////

  function isReverse$2(context) {
    var hover = context.hover,
        source = context.source,
        target = context.target,
        type = context.type;

    if (type === RECONNECT_START$1) {
      return hover && target && hover === target && source !== target;
    }

    if (type === RECONNECT_END$1) {
      return hover && source && hover === source && source !== target;
    }
  }

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../bendpoints/BendpointMove').default} BendpointMove
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var RECONNECT_START = 'reconnectStart',
      RECONNECT_END = 'reconnectEnd',
      UPDATE_WAYPOINTS = 'updateWaypoints';

  var MARKER_OK$4 = 'connect-ok',
      MARKER_NOT_OK$4 = 'connect-not-ok',
      MARKER_CONNECT_HOVER$1 = 'connect-hover',
      MARKER_CONNECT_UPDATING$1 = 'djs-updating',
      MARKER_DRAGGER = 'djs-dragging';

  var HIGH_PRIORITY$i = 1100;

  /**
   * Preview connection while moving bendpoints.
   *
   * @param {BendpointMove} bendpointMove
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function BendpointMovePreview(bendpointMove, injector, eventBus, canvas) {
    this._injector = injector;

    var connectionPreview = injector.get('connectionPreview', false);

    eventBus.on('bendpoint.move.start', function(event) {
      var context = event.context,
          bendpointIndex = context.bendpointIndex,
          connection = context.connection,
          insert = context.insert,
          waypoints = connection.waypoints,
          newWaypoints = waypoints.slice();

      context.waypoints = waypoints;

      if (insert) {

        // insert placeholder for new bendpoint
        newWaypoints.splice(bendpointIndex, 0, { x: event.x, y: event.y });
      }

      connection.waypoints = newWaypoints;

      // add dragger gfx
      var draggerGfx = context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));

      classes$1(draggerGfx).add('djs-dragging');

      canvas.addMarker(connection, MARKER_DRAGGER);
      canvas.addMarker(connection, MARKER_CONNECT_UPDATING$1);
    });

    eventBus.on('bendpoint.move.hover', function(event) {
      var context = event.context,
          allowed = context.allowed,
          hover = context.hover,
          type = context.type;

      if (hover) {
        canvas.addMarker(hover, MARKER_CONNECT_HOVER$1);

        if (type === UPDATE_WAYPOINTS) {
          return;
        }

        if (allowed) {
          canvas.removeMarker(hover, MARKER_NOT_OK$4);
          canvas.addMarker(hover, MARKER_OK$4);
        } else if (allowed === false) {
          canvas.removeMarker(hover, MARKER_OK$4);
          canvas.addMarker(hover, MARKER_NOT_OK$4);
        }
      }
    });

    eventBus.on([
      'bendpoint.move.out',
      'bendpoint.move.cleanup'
    ], HIGH_PRIORITY$i, function(event) {
      var context = event.context,
          hover = context.hover,
          target = context.target;

      if (hover) {
        canvas.removeMarker(hover, MARKER_CONNECT_HOVER$1);
        canvas.removeMarker(hover, target ? MARKER_OK$4 : MARKER_NOT_OK$4);
      }
    });

    eventBus.on('bendpoint.move.move', function(event) {
      var context = event.context,
          allowed = context.allowed,
          bendpointIndex = context.bendpointIndex,
          draggerGfx = context.draggerGfx,
          hover = context.hover,
          type = context.type,
          connection = context.connection,
          source = connection.source,
          target = connection.target,
          newWaypoints = connection.waypoints.slice(),
          bendpoint = { x: event.x, y: event.y },
          hints = context.hints || {},
          drawPreviewHints = {};

      if (connectionPreview) {
        if (hints.connectionStart) {
          drawPreviewHints.connectionStart = hints.connectionStart;
        }

        if (hints.connectionEnd) {
          drawPreviewHints.connectionEnd = hints.connectionEnd;
        }


        if (type === RECONNECT_START) {
          if (isReverse$2(context)) {
            drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;

            drawPreviewHints.source = target;
            drawPreviewHints.target = hover || source;

            newWaypoints = newWaypoints.reverse();
          } else {
            drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;

            drawPreviewHints.source = hover || source;
            drawPreviewHints.target = target;
          }
        } else if (type === RECONNECT_END) {
          if (isReverse$2(context)) {
            drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;

            drawPreviewHints.source = hover || target;
            drawPreviewHints.target = source;

            newWaypoints = newWaypoints.reverse();
          } else {
            drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;

            drawPreviewHints.source = source;
            drawPreviewHints.target = hover || target;
          }

        } else {
          drawPreviewHints.noCropping = true;
          drawPreviewHints.noLayout = true;
          newWaypoints[ bendpointIndex ] = bendpoint;
        }

        if (type === UPDATE_WAYPOINTS) {
          newWaypoints = bendpointMove.cropWaypoints(connection, newWaypoints);
        }

        drawPreviewHints.waypoints = newWaypoints;

        connectionPreview.drawPreview(context, allowed, drawPreviewHints);
      }

      translate$1(draggerGfx, event.x, event.y);
    }, this);

    eventBus.on([
      'bendpoint.move.end',
      'bendpoint.move.cancel'
    ], HIGH_PRIORITY$i, function(event) {
      var context = event.context,
          connection = context.connection,
          draggerGfx = context.draggerGfx,
          hover = context.hover,
          target = context.target,
          waypoints = context.waypoints;

      connection.waypoints = waypoints;

      // remove dragger gfx
      remove$3(draggerGfx);

      canvas.removeMarker(connection, MARKER_CONNECT_UPDATING$1);
      canvas.removeMarker(connection, MARKER_DRAGGER);

      if (hover) {
        canvas.removeMarker(hover, MARKER_OK$4);
        canvas.removeMarker(hover, target ? MARKER_OK$4 : MARKER_NOT_OK$4);
      }

      if (connectionPreview) {
        connectionPreview.cleanUp(context);
      }
    });
  }

  BendpointMovePreview.$inject = [
    'bendpointMove',
    'injector',
    'eventBus',
    'canvas'
  ];

  var MARKER_CONNECT_HOVER = 'connect-hover',
      MARKER_CONNECT_UPDATING = 'djs-updating';

  /**
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
   * @typedef {import('../modeling/Modeling').default} Modeling
   */

  function axisAdd(point, axis, delta) {
    return axisSet(point, axis, point[axis] + delta);
  }

  function axisSet(point, axis, value) {
    return {
      x: (axis === 'x' ? value : point.x),
      y: (axis === 'y' ? value : point.y)
    };
  }

  function axisFenced(position, segmentStart, segmentEnd, axis) {

    var maxValue = Math.max(segmentStart[axis], segmentEnd[axis]),
        minValue = Math.min(segmentStart[axis], segmentEnd[axis]);

    var padding = 20;

    var fencedValue = Math.min(Math.max(minValue + padding, position[axis]), maxValue - padding);

    return axisSet(segmentStart, axis, fencedValue);
  }

  function flipAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  /**
   * Get the docking point on the given element.
   *
   * Compute a reasonable docking, if non exists.
   *
   * @param {Point} point
   * @param {Shape} referenceElement
   * @param {Axis} moveAxis
   *
   * @return {Point}
   */
  function getDocking$2(point, referenceElement, moveAxis) {

    var referenceMid,
        inverseAxis;

    if (point.original) {
      return point.original;
    } else {
      referenceMid = getMid(referenceElement);
      inverseAxis = flipAxis(moveAxis);

      return axisSet(point, inverseAxis, referenceMid[inverseAxis]);
    }
  }

  /**
   * A component that implements moving of bendpoints.
   *
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Canvas} dragging
   * @param {GraphicsFactory} graphicsFactory
   * @param {Modeling} modeling
   */
  function ConnectionSegmentMove(
      injector, eventBus, canvas,
      dragging, graphicsFactory, modeling) {

    // optional connection docking integration
    var connectionDocking = injector.get('connectionDocking', false);


    // API

    this.start = function(event, connection, idx) {

      var context,
          gfx = canvas.getGraphics(connection),
          segmentStartIndex = idx - 1,
          segmentEndIndex = idx,
          waypoints = connection.waypoints,
          segmentStart = waypoints[segmentStartIndex],
          segmentEnd = waypoints[segmentEndIndex],
          intersection = getConnectionIntersection(canvas, waypoints, event),
          direction, axis, dragPosition;

      direction = pointsAligned(segmentStart, segmentEnd);

      // do not move diagonal connection
      if (!direction) {
        return;
      }

      // the axis where we are going to move things
      axis = direction === 'v' ? 'x' : 'y';

      if (segmentStartIndex === 0) {
        segmentStart = getDocking$2(segmentStart, connection.source, axis);
      }

      if (segmentEndIndex === waypoints.length - 1) {
        segmentEnd = getDocking$2(segmentEnd, connection.target, axis);
      }

      if (intersection) {
        dragPosition = intersection.point;
      } else {

        // set to segment center as default
        dragPosition = {
          x: (segmentStart.x + segmentEnd.x) / 2,
          y: (segmentStart.y + segmentEnd.y) / 2
        };
      }

      context = {
        connection: connection,
        segmentStartIndex: segmentStartIndex,
        segmentEndIndex: segmentEndIndex,
        segmentStart: segmentStart,
        segmentEnd: segmentEnd,
        axis: axis,
        dragPosition: dragPosition
      };

      dragging.init(event, dragPosition, 'connectionSegment.move', {
        cursor: axis === 'x' ? 'resize-ew' : 'resize-ns',
        data: {
          connection: connection,
          connectionGfx: gfx,
          context: context
        }
      });
    };

    /**
     * Crop connection if connection cropping is provided.
     *
     * @param {Connection} connection
     * @param {Point[]} newWaypoints
     *
     * @return {Point[]} cropped connection waypoints
     */
    function cropConnection(connection, newWaypoints) {

      // crop connection, if docking service is provided only
      if (!connectionDocking) {
        return newWaypoints;
      }

      var oldWaypoints = connection.waypoints,
          croppedWaypoints;

      // temporary set new waypoints
      connection.waypoints = newWaypoints;

      croppedWaypoints = connectionDocking.getCroppedWaypoints(connection);

      // restore old waypoints
      connection.waypoints = oldWaypoints;

      return croppedWaypoints;
    }

    // DRAGGING IMPLEMENTATION

    function redrawConnection(data) {
      graphicsFactory.update('connection', data.connection, data.connectionGfx);
    }

    function updateDragger(context, segmentOffset, event) {

      var newWaypoints = context.newWaypoints,
          segmentStartIndex = context.segmentStartIndex + segmentOffset,
          segmentStart = newWaypoints[segmentStartIndex],
          segmentEndIndex = context.segmentEndIndex + segmentOffset,
          segmentEnd = newWaypoints[segmentEndIndex],
          axis = flipAxis(context.axis);

      // make sure the dragger does not move
      // outside the connection
      var draggerPosition = axisFenced(event, segmentStart, segmentEnd, axis);

      // update dragger
      translate$1(context.draggerGfx, draggerPosition.x, draggerPosition.y);
    }

    /**
     * Filter waypoints for redundant ones (i.e. on the same axis).
     * Returns the filtered waypoints and the offset related to the segment move.
     *
     * @param {Point[]} waypoints
     * @param {Integer} segmentStartIndex of moved segment start
     *
     * @return {Object} { filteredWaypoints, segmentOffset }
     */
    function filterRedundantWaypoints(waypoints, segmentStartIndex) {

      var segmentOffset = 0;

      var filteredWaypoints = waypoints.filter(function(r, idx) {
        if (pointsOnLine(waypoints[idx - 1], waypoints[idx + 1], r)) {

          // remove point and increment offset
          segmentOffset = idx <= segmentStartIndex ? segmentOffset - 1 : segmentOffset;
          return false;
        }

        // dont remove point
        return true;
      });

      return {
        waypoints: filteredWaypoints,
        segmentOffset: segmentOffset
      };
    }

    eventBus.on('connectionSegment.move.start', function(event) {

      var context = event.context,
          connection = event.connection,
          layer = canvas.getLayer('overlays');

      context.originalWaypoints = connection.waypoints.slice();

      // add dragger gfx
      context.draggerGfx = addSegmentDragger(layer, context.segmentStart, context.segmentEnd);
      classes$1(context.draggerGfx).add('djs-dragging');

      canvas.addMarker(connection, MARKER_CONNECT_UPDATING);
    });

    eventBus.on('connectionSegment.move.move', function(event) {

      var context = event.context,
          connection = context.connection,
          segmentStartIndex = context.segmentStartIndex,
          segmentEndIndex = context.segmentEndIndex,
          segmentStart = context.segmentStart,
          segmentEnd = context.segmentEnd,
          axis = context.axis;

      var newWaypoints = context.originalWaypoints.slice(),
          newSegmentStart = axisAdd(segmentStart, axis, event['d' + axis]),
          newSegmentEnd = axisAdd(segmentEnd, axis, event['d' + axis]);

      // original waypoint count and added / removed
      // from start waypoint delta. We use the later
      // to retrieve the updated segmentStartIndex / segmentEndIndex
      var waypointCount = newWaypoints.length,
          segmentOffset = 0;

      // move segment start / end by axis delta
      newWaypoints[segmentStartIndex] = newSegmentStart;
      newWaypoints[segmentEndIndex] = newSegmentEnd;

      var sourceToSegmentOrientation,
          targetToSegmentOrientation;

      // handle first segment
      if (segmentStartIndex < 2) {
        sourceToSegmentOrientation = getOrientation(connection.source, newSegmentStart);

        // first bendpoint, remove first segment if intersecting
        if (segmentStartIndex === 1) {

          if (sourceToSegmentOrientation === 'intersect') {
            newWaypoints.shift();
            newWaypoints[0] = newSegmentStart;
            segmentOffset--;
          }
        }

        // docking point, add segment if not intersecting anymore
        else {
          if (sourceToSegmentOrientation !== 'intersect') {
            newWaypoints.unshift(segmentStart);
            segmentOffset++;
          }
        }
      }

      // handle last segment
      if (segmentEndIndex > waypointCount - 3) {
        targetToSegmentOrientation = getOrientation(connection.target, newSegmentEnd);

        // last bendpoint, remove last segment if intersecting
        if (segmentEndIndex === waypointCount - 2) {

          if (targetToSegmentOrientation === 'intersect') {
            newWaypoints.pop();
            newWaypoints[newWaypoints.length - 1] = newSegmentEnd;
          }
        }

        // last bendpoint, remove last segment if intersecting
        else {
          if (targetToSegmentOrientation !== 'intersect') {
            newWaypoints.push(segmentEnd);
          }
        }
      }

      // update connection waypoints
      context.newWaypoints = connection.waypoints = cropConnection(connection, newWaypoints);

      // update dragger position
      updateDragger(context, segmentOffset, event);

      // save segmentOffset in context
      context.newSegmentStartIndex = segmentStartIndex + segmentOffset;

      // redraw connection
      redrawConnection(event);
    });

    eventBus.on('connectionSegment.move.hover', function(event) {

      event.context.hover = event.hover;
      canvas.addMarker(event.hover, MARKER_CONNECT_HOVER);
    });

    eventBus.on([
      'connectionSegment.move.out',
      'connectionSegment.move.cleanup'
    ], function(event) {

      // remove connect marker
      // if it was added
      var hover = event.context.hover;

      if (hover) {
        canvas.removeMarker(hover, MARKER_CONNECT_HOVER);
      }
    });

    eventBus.on('connectionSegment.move.cleanup', function(event) {

      var context = event.context,
          connection = context.connection;

      // remove dragger gfx
      if (context.draggerGfx) {
        remove$3(context.draggerGfx);
      }

      canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);
    });

    eventBus.on([
      'connectionSegment.move.cancel',
      'connectionSegment.move.end'
    ], function(event) {
      var context = event.context,
          connection = context.connection;

      connection.waypoints = context.originalWaypoints;

      redrawConnection(event);
    });

    eventBus.on('connectionSegment.move.end', function(event) {

      var context = event.context,
          connection = context.connection,
          newWaypoints = context.newWaypoints,
          newSegmentStartIndex = context.newSegmentStartIndex;

      // ensure we have actual pixel values bendpoint
      // coordinates (important when zoom level was > 1 during move)
      newWaypoints = newWaypoints.map(function(p) {
        return {
          original: p.original,
          x: Math.round(p.x),
          y: Math.round(p.y)
        };
      });

      // apply filter redunant waypoints
      var filtered = filterRedundantWaypoints(newWaypoints, newSegmentStartIndex);

      // get filtered waypoints
      var filteredWaypoints = filtered.waypoints,
          croppedWaypoints = cropConnection(connection, filteredWaypoints),
          segmentOffset = filtered.segmentOffset;

      var hints = {
        segmentMove: {
          segmentStartIndex: context.segmentStartIndex,
          newSegmentStartIndex: newSegmentStartIndex + segmentOffset
        }
      };

      modeling.updateWaypoints(connection, croppedWaypoints, hints);
    });
  }

  ConnectionSegmentMove.$inject = [
    'injector',
    'eventBus',
    'canvas',
    'dragging',
    'graphicsFactory',
    'modeling'
  ];

  /**
   * @typedef {import('../../core/Types').ConnectionLike} Connection
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../core/EventBus').Event} Event
   *
   * @typedef {import('../../util/Types').Axis} Axis
   */

  var abs$6 = Math.abs,
      round$8 = Math.round;


  /**
   * Snap value to a collection of reference values.
   *
   * @param {number} value
   * @param {Array<number>} values
   * @param {number} [tolerance=10]
   *
   * @return {number} the value we snapped to or null, if none snapped
   */
  function snapTo(value, values, tolerance) {
    tolerance = tolerance === undefined ? 10 : tolerance;

    var idx, snapValue;

    for (idx = 0; idx < values.length; idx++) {
      snapValue = values[idx];

      if (abs$6(snapValue - value) <= tolerance) {
        return snapValue;
      }
    }
  }


  function topLeft(bounds) {
    return {
      x: bounds.x,
      y: bounds.y
    };
  }

  function bottomRight(bounds) {
    return {
      x: bounds.x + bounds.width,
      y: bounds.y + bounds.height
    };
  }

  function mid$2(bounds, defaultValue) {

    if (!bounds || isNaN(bounds.x) || isNaN(bounds.y)) {
      return defaultValue;
    }

    return {
      x: round$8(bounds.x + bounds.width / 2),
      y: round$8(bounds.y + bounds.height / 2)
    };
  }


  /**
   * Retrieve the snap state of the given event.
   *
   * @param {Event} event
   * @param {Axis} axis
   *
   * @return {boolean} the snapped state
   *
   */
  function isSnapped(event, axis) {
    var snapped = event.snapped;

    if (!snapped) {
      return false;
    }

    if (typeof axis === 'string') {
      return snapped[axis];
    }

    return snapped.x && snapped.y;
  }


  /**
   * Set the given event as snapped.
   *
   * This method may change the x and/or y position of the shape
   * from the given event!
   *
   * @param {Event} event
   * @param {Axis} axis
   * @param {number|boolean} value
   *
   * @return {number} old value
   */
  function setSnapped(event, axis, value) {
    if (typeof axis !== 'string') {
      throw new Error('axis must be in [x, y]');
    }

    if (typeof value !== 'number' && value !== false) {
      throw new Error('value must be Number or false');
    }

    var delta,
        previousValue = event[axis];

    var snapped = event.snapped = (event.snapped || {});


    if (value === false) {
      snapped[axis] = false;
    } else {
      snapped[axis] = true;

      delta = value - previousValue;

      event[axis] += delta;
      event['d' + axis] += delta;
    }

    return previousValue;
  }

  /**
   * Get children of a shape.
   *
   * @param {Shape} parent
   *
   * @return {Array<Shape|Connection>}
   */
  function getChildren$1(parent) {
    return parent.children || [];
  }

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   */
  var abs$5 = Math.abs,
      round$7 = Math.round;

  var TOLERANCE = 10;

  /**
   * @param {EventBus} eventBus
   */
  function BendpointSnapping(eventBus) {

    function snapTo(values, value) {

      if (isArray$3(values)) {
        var i = values.length;

        while (i--) if (abs$5(values[i] - value) <= TOLERANCE) {
          return values[i];
        }
      } else {
        values = +values;
        var rem = value % values;

        if (rem < TOLERANCE) {
          return value - rem;
        }

        if (rem > values - TOLERANCE) {
          return value - rem + values;
        }
      }

      return value;
    }

    function getSnapPoint(element, event) {

      if (element.waypoints) {
        return getClosestPointOnConnection(event, element);
      }

      if (element.width) {
        return {
          x: round$7(element.width / 2 + element.x),
          y: round$7(element.height / 2 + element.y)
        };
      }
    }

    // connection segment snapping //////////////////////

    function getConnectionSegmentSnaps(event) {

      var context = event.context,
          snapPoints = context.snapPoints,
          connection = context.connection,
          waypoints = connection.waypoints,
          segmentStart = context.segmentStart,
          segmentStartIndex = context.segmentStartIndex,
          segmentEnd = context.segmentEnd,
          segmentEndIndex = context.segmentEndIndex,
          axis = context.axis;

      if (snapPoints) {
        return snapPoints;
      }

      var referenceWaypoints = [
        waypoints[segmentStartIndex - 1],
        segmentStart,
        segmentEnd,
        waypoints[segmentEndIndex + 1]
      ];

      if (segmentStartIndex < 2) {
        referenceWaypoints.unshift(getSnapPoint(connection.source, event));
      }

      if (segmentEndIndex > waypoints.length - 3) {
        referenceWaypoints.unshift(getSnapPoint(connection.target, event));
      }

      context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };

      forEach$1(referenceWaypoints, function(p) {

        // we snap on existing bendpoints only,
        // not placeholders that are inserted during add
        if (p) {
          p = p.original || p;

          if (axis === 'y') {
            snapPoints.horizontal.push(p.y);
          }

          if (axis === 'x') {
            snapPoints.vertical.push(p.x);
          }
        }
      });

      return snapPoints;
    }

    eventBus.on('connectionSegment.move.move', 1500, function(event) {
      var snapPoints = getConnectionSegmentSnaps(event),
          x = event.x,
          y = event.y,
          sx, sy;

      if (!snapPoints) {
        return;
      }

      // snap
      sx = snapTo(snapPoints.vertical, x);
      sy = snapTo(snapPoints.horizontal, y);


      // correction x/y
      var cx = (x - sx),
          cy = (y - sy);

      // update delta
      assign$1(event, {
        dx: event.dx - cx,
        dy: event.dy - cy,
        x: sx,
        y: sy
      });

      // only set snapped if actually snapped
      if (cx || snapPoints.vertical.indexOf(x) !== -1) {
        setSnapped(event, 'x', sx);
      }

      if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
        setSnapped(event, 'y', sy);
      }
    });


    // bendpoint snapping //////////////////////

    function getBendpointSnaps(context) {

      var snapPoints = context.snapPoints,
          waypoints = context.connection.waypoints,
          bendpointIndex = context.bendpointIndex;

      if (snapPoints) {
        return snapPoints;
      }

      var referenceWaypoints = [ waypoints[bendpointIndex - 1], waypoints[bendpointIndex + 1] ];

      context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };

      forEach$1(referenceWaypoints, function(p) {

        // we snap on existing bendpoints only,
        // not placeholders that are inserted during add
        if (p) {
          p = p.original || p;

          snapPoints.horizontal.push(p.y);
          snapPoints.vertical.push(p.x);
        }
      });

      return snapPoints;
    }

    // Snap Endpoint of new connection
    eventBus.on([
      'connect.hover',
      'connect.move',
      'connect.end'
    ], 1500, function(event) {
      var context = event.context,
          hover = context.hover,
          hoverMid = hover && getSnapPoint(hover, event);

      // only snap on connections, elements can have multiple connect endpoints
      if (!isConnection(hover) || !hoverMid || !hoverMid.x || !hoverMid.y) {
        return;
      }

      setSnapped(event, 'x', hoverMid.x);
      setSnapped(event, 'y', hoverMid.y);
    });

    eventBus.on([ 'bendpoint.move.move', 'bendpoint.move.end' ], 1500, function(event) {

      var context = event.context,
          snapPoints = getBendpointSnaps(context),
          hover = context.hover,
          hoverMid = hover && getSnapPoint(hover, event),
          x = event.x,
          y = event.y,
          sx, sy;

      if (!snapPoints) {
        return;
      }

      // snap to hover mid
      sx = snapTo(hoverMid ? snapPoints.vertical.concat([ hoverMid.x ]) : snapPoints.vertical, x);
      sy = snapTo(hoverMid ? snapPoints.horizontal.concat([ hoverMid.y ]) : snapPoints.horizontal, y);

      // correction x/y
      var cx = (x - sx),
          cy = (y - sy);

      // update delta
      assign$1(event, {
        dx: event.dx - cx,
        dy: event.dy - cy,
        x: event.x - cx,
        y: event.y - cy
      });

      // only set snapped if actually snapped
      if (cx || snapPoints.vertical.indexOf(x) !== -1) {
        setSnapped(event, 'x', sx);
      }

      if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
        setSnapped(event, 'y', sy);
      }
    });
  }


  BendpointSnapping.$inject = [ 'eventBus' ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var BendpointsModule = {
    __depends__: [
      DraggingModule,
      RulesModule$1
    ],
    __init__: [ 'bendpoints', 'bendpointSnapping', 'bendpointMovePreview' ],
    bendpoints: [ 'type', Bendpoints ],
    bendpointMove: [ 'type', BendpointMove ],
    bendpointMovePreview: [ 'type', BendpointMovePreview ],
    connectionSegmentMove: [ 'type', ConnectionSegmentMove ],
    bendpointSnapping: [ 'type', BendpointSnapping ]
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   */

  /**
   * @param {EventBus} eventBus
   * @param {Dragging} dragging
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function Connect(eventBus, dragging, modeling, rules) {

    // rules

    function canConnect(source, target) {
      return rules.allowed('connection.create', {
        source: source,
        target: target
      });
    }

    function canConnectReverse(source, target) {
      return canConnect(target, source);
    }


    // event handlers

    eventBus.on('connect.hover', function(event) {
      var context = event.context,
          start = context.start,
          hover = event.hover,
          canExecute;

      // cache hover state
      context.hover = hover;

      canExecute = context.canExecute = canConnect(start, hover);

      // ignore hover
      if (isNil(canExecute)) {
        return;
      }

      if (canExecute !== false) {
        context.source = start;
        context.target = hover;

        return;
      }

      canExecute = context.canExecute = canConnectReverse(start, hover);

      // ignore hover
      if (isNil(canExecute)) {
        return;
      }

      if (canExecute !== false) {
        context.source = hover;
        context.target = start;
      }
    });

    eventBus.on([ 'connect.out', 'connect.cleanup' ], function(event) {
      var context = event.context;

      context.hover = null;
      context.source = null;
      context.target = null;

      context.canExecute = false;
    });

    eventBus.on('connect.end', function(event) {
      var context = event.context,
          canExecute = context.canExecute,
          connectionStart = context.connectionStart,
          connectionEnd = {
            x: event.x,
            y: event.y
          },
          source = context.source,
          target = context.target;

      if (!canExecute) {
        return false;
      }

      var attrs = null,
          hints = {
            connectionStart: isReverse$1(context) ? connectionEnd : connectionStart,
            connectionEnd: isReverse$1(context) ? connectionStart : connectionEnd
          };

      if (isObject(canExecute)) {
        attrs = canExecute;
      }

      context.connection = modeling.connect(source, target, attrs, hints);
    });


    // API

    /**
     * Start connect operation.
     *
     * @param {MouseEvent|TouchEvent} event
     * @param {Element} start
     * @param {Point} [connectionStart]
     * @param {boolean} [autoActivate=false]
     */
    this.start = function(event, start, connectionStart, autoActivate) {
      if (!isObject(connectionStart)) {
        autoActivate = connectionStart;
        connectionStart = getMid(start);
      }

      dragging.init(event, 'connect', {
        autoActivate: autoActivate,
        data: {
          shape: start,
          context: {
            start: start,
            connectionStart: connectionStart
          }
        }
      });
    };
  }

  Connect.$inject = [
    'eventBus',
    'dragging',
    'modeling',
    'rules'
  ];


  // helpers //////////

  function isReverse$1(context) {
    var hover = context.hover,
        source = context.source,
        target = context.target;

    return hover && source && hover === source && source !== target;
  }

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var HIGH_PRIORITY$h = 1100,
      LOW_PRIORITY$l = 900;

  var MARKER_OK$3 = 'connect-ok',
      MARKER_NOT_OK$3 = 'connect-not-ok';

  /**
   * Shows connection preview during connect.
   *
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function ConnectPreview(injector, eventBus, canvas) {
    var connectionPreview = injector.get('connectionPreview', false);

    connectionPreview && eventBus.on('connect.move', function(event) {
      var context = event.context,
          canConnect = context.canExecute,
          hover = context.hover,
          source = context.source,
          start = context.start,
          startPosition = context.startPosition,
          target = context.target,
          connectionStart = context.connectionStart || startPosition,
          connectionEnd = context.connectionEnd || {
            x: event.x,
            y: event.y
          },
          previewStart = connectionStart,
          previewEnd = connectionEnd;

      if (isReverse$1(context)) {
        previewStart = connectionEnd;
        previewEnd = connectionStart;
      }

      connectionPreview.drawPreview(context, canConnect, {
        source: source || start,
        target: target || hover,
        connectionStart: previewStart,
        connectionEnd: previewEnd
      });
    });

    eventBus.on('connect.hover', LOW_PRIORITY$l, function(event) {
      var context = event.context,
          hover = event.hover,
          canExecute = context.canExecute;

      // ignore hover
      if (canExecute === null) {
        return;
      }

      canvas.addMarker(hover, canExecute ? MARKER_OK$3 : MARKER_NOT_OK$3);
    });

    eventBus.on([
      'connect.out',
      'connect.cleanup'
    ], HIGH_PRIORITY$h, function(event) {
      var hover = event.hover;

      if (hover) {
        canvas.removeMarker(hover, MARKER_OK$3);
        canvas.removeMarker(hover, MARKER_NOT_OK$3);
      }
    });

    connectionPreview && eventBus.on('connect.cleanup', function(event) {
      connectionPreview.cleanUp(event.context);
    });
  }

  ConnectPreview.$inject = [
    'injector',
    'eventBus',
    'canvas'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ConnectModule = {
    __depends__: [
      SelectionModule,
      RulesModule$1,
      DraggingModule
    ],
    __init__: [
      'connectPreview'
    ],
    connect: [ 'type', Connect ],
    connectPreview: [ 'type', ConnectPreview ]
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementFactory').default} ElementFactory
   * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
   */

  var MARKER_CONNECTION_PREVIEW = 'djs-dragger';

  /**
   * Draws connection preview. Optionally, this can use layouter and connection docking to draw
   * better looking previews.
   *
   * @param {Injector} injector
   * @param {Canvas} canvas
   * @param {GraphicsFactory} graphicsFactory
   * @param {ElementFactory} elementFactory
   */
  function ConnectionPreview(
      injector,
      canvas,
      graphicsFactory,
      elementFactory
  ) {
    this._canvas = canvas;
    this._graphicsFactory = graphicsFactory;
    this._elementFactory = elementFactory;

    // optional components
    this._connectionDocking = injector.get('connectionDocking', false);
    this._layouter = injector.get('layouter', false);
  }

  ConnectionPreview.$inject = [
    'injector',
    'canvas',
    'graphicsFactory',
    'elementFactory'
  ];

  /**
   * Draw connection preview.
   *
   * Provide at least one of <source, connectionStart> and <target, connectionEnd> to create a preview.
   * In the clean up stage, call `connectionPreview#cleanUp` with the context to remove preview.
   *
   * @param {Object} context
   * @param {Object|boolean} canConnect
   * @param {Object} hints
   * @param {Element} [hints.source] source element
   * @param {Element} [hints.target] target element
   * @param {Point} [hints.connectionStart] connection preview start
   * @param {Point} [hints.connectionEnd] connection preview end
   * @param {Point[]} [hints.waypoints] provided waypoints for preview
   * @param {boolean} [hints.noLayout] true if preview should not be laid out
   * @param {boolean} [hints.noCropping] true if preview should not be cropped
   * @param {boolean} [hints.noNoop] true if simple connection should not be drawn
   */
  ConnectionPreview.prototype.drawPreview = function(context, canConnect, hints) {

    hints = hints || {};

    var connectionPreviewGfx = context.connectionPreviewGfx,
        getConnection = context.getConnection,
        source = hints.source,
        target = hints.target,
        waypoints = hints.waypoints,
        connectionStart = hints.connectionStart,
        connectionEnd = hints.connectionEnd,
        noLayout = hints.noLayout,
        noCropping = hints.noCropping,
        noNoop = hints.noNoop,
        connection;

    var self = this;

    if (!connectionPreviewGfx) {
      connectionPreviewGfx = context.connectionPreviewGfx = this.createConnectionPreviewGfx();
    }

    clear$1(connectionPreviewGfx);

    if (!getConnection) {
      getConnection = context.getConnection = cacheReturnValues(function(canConnect, source, target) {
        return self.getConnection(canConnect, source, target);
      });
    }

    if (canConnect) {
      connection = getConnection(canConnect, source, target);
    }

    if (!connection) {
      !noNoop && this.drawNoopPreview(connectionPreviewGfx, hints);
      return;
    }

    connection.waypoints = waypoints || [];

    // optional layout
    if (this._layouter && !noLayout) {
      connection.waypoints = this._layouter.layoutConnection(connection, {
        source: source,
        target: target,
        connectionStart: connectionStart,
        connectionEnd: connectionEnd,
        waypoints: hints.waypoints || connection.waypoints
      });
    }

    // fallback if no waypoints were provided nor created with layouter
    if (!connection.waypoints || !connection.waypoints.length) {
      connection.waypoints = [
        source ? getMid(source) : connectionStart,
        target ? getMid(target) : connectionEnd
      ];
    }

    // optional cropping
    if (this._connectionDocking && (source || target) && !noCropping) {
      connection.waypoints = this._connectionDocking.getCroppedWaypoints(connection, source, target);
    }

    this._graphicsFactory.drawConnection(connectionPreviewGfx, connection, {
      stroke: 'var(--element-dragger-color)'
    });
  };

  /**
   * Draw simple connection between source and target or provided points.
   *
   * @param {SVGElement} connectionPreviewGfx container for the connection
   * @param {Object} hints
   * @param {Element} [hints.source] source element
   * @param {Element} [hints.target] target element
   * @param {Point} [hints.connectionStart] required if source is not provided
   * @param {Point} [hints.connectionEnd] required if target is not provided
   */
  ConnectionPreview.prototype.drawNoopPreview = function(connectionPreviewGfx, hints) {
    var source = hints.source,
        target = hints.target,
        start = hints.connectionStart || getMid(source),
        end = hints.connectionEnd || getMid(target);

    var waypoints = this.cropWaypoints(start, end, source, target);

    var connection = this.createNoopConnection(waypoints[0], waypoints[1]);

    append(connectionPreviewGfx, connection);
  };

  /**
   * Return cropped waypoints.
   *
   * @param {Point} start
   * @param {Point} end
   * @param {Element} source
   * @param {Element} target
   *
   * @return {Point[]}
   */
  ConnectionPreview.prototype.cropWaypoints = function(start, end, source, target) {
    var graphicsFactory = this._graphicsFactory,
        sourcePath = source && graphicsFactory.getShapePath(source),
        targetPath = target && graphicsFactory.getShapePath(target),
        connectionPath = graphicsFactory.getConnectionPath({ waypoints: [ start, end ] });

    start = (source && getElementLineIntersection(sourcePath, connectionPath, true)) || start;
    end = (target && getElementLineIntersection(targetPath, connectionPath, false)) || end;

    return [ start, end ];
  };

  /**
   * Remove connection preview container if it exists.
   *
   * @param {Object} [context]
   * @param {SVGElement} [context.connectionPreviewGfx] preview container
   */
  ConnectionPreview.prototype.cleanUp = function(context) {
    if (context && context.connectionPreviewGfx) {
      remove$3(context.connectionPreviewGfx);
    }
  };

  /**
   * Get connection that connects source and target.
   *
   * @param {Object|boolean} canConnect
   *
   * @return {Connection}
   */
  ConnectionPreview.prototype.getConnection = function(canConnect) {
    var attrs = ensureConnectionAttrs(canConnect);

    return this._elementFactory.createConnection(attrs);
  };


  /**
   * Add and return preview graphics.
   *
   * @return {SVGElement}
   */
  ConnectionPreview.prototype.createConnectionPreviewGfx = function() {
    var gfx = create$1('g');

    attr$1(gfx, {
      pointerEvents: 'none'
    });

    classes$1(gfx).add(MARKER_CONNECTION_PREVIEW);

    append(this._canvas.getActiveLayer(), gfx);

    return gfx;
  };

  /**
   * Create and return simple connection.
   *
   * @param {Point} start
   * @param {Point} end
   *
   * @return {SVGElement}
   */
  ConnectionPreview.prototype.createNoopConnection = function(start, end) {
    return createLine([ start, end ], {
      'stroke': '#333',
      'strokeDasharray': [ 1 ],
      'strokeWidth': 2,
      'pointer-events': 'none'
    });
  };

  // helpers //////////

  /**
   * Returns function that returns cached return values referenced by stringified first argument.
   *
   * @param {Function} fn
   *
   * @return {Function}
   */
  function cacheReturnValues(fn) {
    var returnValues = {};

    /**
     * Return cached return value referenced by stringified first argument.
     *
     * @return {*}
     */
    return function(firstArgument) {
      var key = JSON.stringify(firstArgument);

      var returnValue = returnValues[key];

      if (!returnValue) {
        returnValue = returnValues[key] = fn.apply(null, arguments);
      }

      return returnValue;
    };
  }

  /**
   * Ensure connection attributes is object.
   *
   * @param {Object|boolean} canConnect
   *
   * @return {Object}
   */
  function ensureConnectionAttrs(canConnect) {
    if (isObject(canConnect)) {
      return canConnect;
    } else {
      return {};
    }
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ConnectionPreviewModule = {
    __init__: [ 'connectionPreview' ],
    connectionPreview: [ 'type', ConnectionPreview ]
  };

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../draw/Styles').default} Styles
   */

  const cloneIds = new IdGenerator('ps');

  var MARKER_TYPES = [
    'marker-start',
    'marker-mid',
    'marker-end'
  ];

  var NODES_CAN_HAVE_MARKER = [
    'circle',
    'ellipse',
    'line',
    'path',
    'polygon',
    'polyline',
    'path',
    'rect'
  ];


  /**
   * Adds support for previews of moving/resizing elements.
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Styles} styles
   */
  function PreviewSupport(elementRegistry, eventBus, canvas, styles) {
    this._elementRegistry = elementRegistry;
    this._canvas = canvas;
    this._styles = styles;
  }

  PreviewSupport.$inject = [
    'elementRegistry',
    'eventBus',
    'canvas',
    'styles'
  ];

  // Markers are cleaned up with visuals, keep stub for compatibility
  // cf. https://github.com/camunda/camunda-modeler/issues/4307
  PreviewSupport.prototype.cleanUp = function() {
    console.warn('PreviewSupport#cleanUp is deprecated and will be removed in future versions. You do not need to manually clean up previews anymore. cf. https://github.com/bpmn-io/diagram-js/pull/906');
  };

  /**
   * Returns graphics of an element.
   *
   * @param {Element} element
   *
   * @return {SVGElement}
   */
  PreviewSupport.prototype.getGfx = function(element) {
    return this._elementRegistry.getGraphics(element);
  };

  /**
   * Adds a move preview of a given shape to a given SVG group.
   *
   * @param {Element} element The element to be moved.
   * @param {SVGElement} group The SVG group to add the preview to.
   * @param {SVGElement} [gfx] The optional graphical element of the element.
   * @param {string} [className="djs-dragger"] The optional class name to add to the preview.
   *
   * @return {SVGElement} The preview.
   */
  PreviewSupport.prototype.addDragger = function(element, group, gfx, className = 'djs-dragger') {
    gfx = gfx || this.getGfx(element);

    var dragger = clone$1(gfx);
    var bbox = gfx.getBoundingClientRect();

    this._cloneMarkers(getVisual(dragger), className);

    attr$1(dragger, this._styles.cls(className, [], {
      x: bbox.top,
      y: bbox.left
    }));

    append(group, dragger);

    attr$1(dragger, 'data-preview-support-element-id', element.id);

    return dragger;
  };

  /**
   * Adds a resize preview of a given shape to a given SVG group.
   *
   * @param {Shape} shape The element to be resized.
   * @param {SVGElement} group The SVG group to add the preview to.
   *
   * @return {SVGElement} The preview.
   */
  PreviewSupport.prototype.addFrame = function(shape, group) {

    var frame = create$1('rect', {
      class: 'djs-resize-overlay',
      width:  shape.width,
      height: shape.height,
      x: shape.x,
      y: shape.y
    });

    append(group, frame);

    attr$1(frame, 'data-preview-support-element-id', shape.id);

    return frame;
  };

  /**
   * Clone all markers referenced by a node and its child nodes.
   *
   * @param {SVGElement} gfx
   * @param {string} [className="djs-dragger"]
   */
  PreviewSupport.prototype._cloneMarkers = function(gfx, className = 'djs-dragger', rootGfx = gfx) {
    var self = this;

    if (gfx.childNodes) {

      gfx.childNodes.forEach((childNode) => {
        self._cloneMarkers(childNode, className, rootGfx);
      });

    }

    if (!canHaveMarker(gfx)) {
      return;
    }

    MARKER_TYPES.forEach(function(markerType) {
      if (attr$1(gfx, markerType)) {
        var marker = getMarker(gfx, markerType, self._canvas.getContainer());

        // Only clone marker if it is already present on the DOM
        marker && self._cloneMarker(rootGfx, gfx, marker, markerType, className);
      }
    });
  };

  /**
   * Clone marker referenced by an element.
   *
   * @param {SVGElement} gfx
   * @param {SVGElement} marker
   * @param {string} markerType
   * @param {string} [className="djs-dragger"]
   */
  PreviewSupport.prototype._cloneMarker = function(parentGfx, gfx, marker, markerType, className = 'djs-dragger') {

    // Add a random suffix to the marker ID in case the same marker is previewed multiple times
    var clonedMarkerId = [ marker.id, className, cloneIds.next() ].join('-');

    // reuse marker if it was part of original gfx
    var copiedMarker = query('marker#' + marker.id, parentGfx);

    parentGfx = parentGfx || this._canvas._svg;

    var clonedMarker = copiedMarker || clone$1(marker);

    clonedMarker.id = clonedMarkerId;

    classes$1(clonedMarker).add(className);

    var defs = query(':scope > defs', parentGfx);

    if (!defs) {
      defs = create$1('defs');

      append(parentGfx, defs);
    }

    append(defs, clonedMarker);

    var reference = idToReference(clonedMarker.id);

    attr$1(gfx, markerType, reference);
  };

  // helpers //////////

  /**
   * Get marker of given type referenced by node.
   *
   * @param {HTMLElement} node
   * @param {string} markerType
   * @param {HTMLElement} [parentNode]
   *
   * @param {HTMLElement}
   */
  function getMarker(node, markerType, parentNode) {
    var id = referenceToId(attr$1(node, markerType));

    return query('marker#' + id, parentNode || document);
  }

  /**
   * Get ID of fragment within current document from its functional IRI reference.
   * References may use single or double quotes.
   *
   * @param {string} reference
   *
   * @return {string}
   */
  function referenceToId(reference) {
    return reference.match(/url\(['"]?#([^'"]*)['"]?\)/)[1];
  }

  /**
   * Get functional IRI reference for given ID of fragment within current document.
   *
   * @param {string} id
   *
   * @return {string}
   */
  function idToReference(id) {
    return 'url(#' + id + ')';
  }

  /**
   * Check wether node type can have marker attributes.
   *
   * @param {HTMLElement} node
   *
   * @return {boolean}
   */
  function canHaveMarker(node) {
    return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var PreviewSupportModule = {
    __init__: [ 'previewSupport' ],
    previewSupport: [ 'type', PreviewSupport ]
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').Rect} Rect
   *
   * @typedef { { element: Element, delta: Point } } MovedOption
   * @typedef { { shape: Shape, bounds: Rect } } ResizedOption
   *
   * @typedef { {
   *   created?: Element[],
   *   removed?: Element[],
   *   moved?: MovedOption[],
   *   resized?: ResizedOption[]
   * } } CreateOptions
   */

  const LAYER_NAME$1 = 'complex-preview';

  /**
   * Complex preview for shapes and connections.
   */
  class ComplexPreview {
    constructor(canvas, graphicsFactory, previewSupport) {
      this._canvas = canvas;
      this._graphicsFactory = graphicsFactory;
      this._previewSupport = previewSupport;

      this._markers = [];
    }

    /**
     * Create complex preview.
     *
     * @param {CreateOptions} options
     */
    create(options) {

      // there can only be one complex preview at a time
      this.cleanUp();

      const {
        created = [],
        moved = [],
        removed = [],
        resized = []
      } = options;

      const layer = this._canvas.getLayer(LAYER_NAME$1);

      // shapes and connections to be created
      created.filter(element => !isHidden$3(element)).forEach(element => {
        let gfx;

        if (isConnection(element)) {
          gfx = this._graphicsFactory._createContainer('connection', create$1('g'));

          this._graphicsFactory.drawConnection(getVisual(gfx), element);
        } else {
          gfx = this._graphicsFactory._createContainer('shape', create$1('g'));

          this._graphicsFactory.drawShape(getVisual(gfx), element);

          translate$1(gfx, element.x, element.y);
        }

        this._previewSupport.addDragger(element, layer, gfx);
      });

      // elements to be moved
      moved.forEach(({ element, delta }) => {
        this._previewSupport.addDragger(element, layer, undefined, 'djs-dragging');

        this._canvas.addMarker(element, 'djs-element-hidden');

        this._markers.push([ element, 'djs-element-hidden' ]);

        const dragger = this._previewSupport.addDragger(element, layer);

        if (isConnection(element)) {
          translate$1(dragger, delta.x, delta.y);
        } else {
          translate$1(dragger, element.x + delta.x, element.y + delta.y);
        }
      });

      // elements to be removed
      removed.forEach(element => {
        this._previewSupport.addDragger(element, layer, undefined, 'djs-dragging');

        this._canvas.addMarker(element, 'djs-element-hidden');

        this._markers.push([ element, 'djs-element-hidden' ]);
      });

      // elements to be resized
      resized.forEach(({ shape, bounds }) => {
        this._canvas.addMarker(shape, 'djs-hidden');

        this._markers.push([ shape, 'djs-hidden' ]);

        this._previewSupport.addDragger(shape, layer, undefined, 'djs-dragging');

        const gfx = this._graphicsFactory._createContainer('shape', create$1('g'));

        this._graphicsFactory.drawShape(getVisual(gfx), shape, {
          width: bounds.width,
          height: bounds.height
        });

        translate$1(gfx, bounds.x, bounds.y);

        this._previewSupport.addDragger(shape, layer, gfx);
      });
    }

    cleanUp() {
      clear$1(this._canvas.getLayer(LAYER_NAME$1));

      this._markers.forEach(([ element, marker ]) => this._canvas.removeMarker(element, marker));

      this._markers = [];
    }

    show() {
      this._canvas.showLayer(LAYER_NAME$1);
    }

    hide() {
      this._canvas.hideLayer(LAYER_NAME$1);
    }
  }

  ComplexPreview.$inject = [
    'canvas',
    'graphicsFactory',
    'previewSupport'
  ];

  function isHidden$3(element) {
    return element.hidden;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ComplexPreviewModule = {
    __depends__: [ PreviewSupportModule ],
    __init__: [ 'complexPreview' ],
    complexPreview: [ 'type', ComplexPreview ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   */

  var ALIGNMENTS = [
    'top',
    'bottom',
    'left',
    'right'
  ];

  var ELEMENT_LABEL_DISTANCE = 10;

  /**
   * A behavior that ensures that labels are positioned in a way that they do not
   * overlap with other elements or connections.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function AdaptiveLabelPositioningBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    this.postExecuted([
      'connection.create',
      'connection.layout',
      'connection.updateWaypoints'
    ], function(event) {
      var context = event.context,
          connection = context.connection,
          source = connection.source,
          target = connection.target,
          hints = context.hints || {};

      if (hints.createElementsBehavior !== false) {
        checkLabelAdjustment(source);
        checkLabelAdjustment(target);
      }
    });


    this.postExecuted([
      'label.create'
    ], function(event) {
      var context = event.context,
          shape = context.shape,
          hints = context.hints || {};

      if (hints.createElementsBehavior !== false) {
        checkLabelAdjustment(shape.labelTarget);
      }
    });


    this.postExecuted([
      'elements.create'
    ], function(event) {
      var context = event.context,
          elements = context.elements,
          hints = context.hints || {};

      if (hints.createElementsBehavior !== false) {
        elements.forEach(function(element) {
          checkLabelAdjustment(element);
        });
      }
    });

    function checkLabelAdjustment(element) {

      // skip non-existing labels
      if (!hasExternalLabel(element)) {
        return;
      }

      if (isConnection(element)) {
        return;
      }

      var optimalPosition = getOptimalPosition(element);

      // no optimal position found
      if (!optimalPosition) {
        return;
      }

      adjustLabelPosition(element, optimalPosition);
    }

    function adjustLabelPosition(element, orientation) {

      var elementMid = getMid(element),
          label = element.label,
          labelMid = getMid(label);

      // ignore labels that are being created
      if (!label.parent) {
        return;
      }

      var elementTrbl = asTRBL(element);

      var newLabelMid;

      switch (orientation) {
      case 'top':
        newLabelMid = {
          x: elementMid.x,
          y: elementTrbl.top - ELEMENT_LABEL_DISTANCE - label.height / 2
        };

        break;

      case 'left':

        newLabelMid = {
          x: elementTrbl.left - ELEMENT_LABEL_DISTANCE - label.width / 2,
          y: elementMid.y
        };

        break;

      case 'bottom':

        newLabelMid = {
          x: elementMid.x,
          y: elementTrbl.bottom + ELEMENT_LABEL_DISTANCE + label.height / 2
        };

        break;

      case 'right':

        newLabelMid = {
          x: elementTrbl.right + ELEMENT_LABEL_DISTANCE + label.width / 2,
          y: elementMid.y
        };

        break;
      }

      var delta$1 = delta(newLabelMid, labelMid);

      modeling.moveShape(label, delta$1);
    }

  }

  e$3(AdaptiveLabelPositioningBehavior, CommandInterceptor);

  AdaptiveLabelPositioningBehavior.$inject = [
    'eventBus',
    'modeling'
  ];


  // helpers //////////////////////

  /**
   * Return alignments which are taken by a boundary's host element
   *
   * @param {Shape} element
   *
   * @return {DirectionTRBL[]}
   */
  function getTakenHostAlignments(element) {

    var hostElement = element.host,
        elementMid = getMid(element),
        hostOrientation = getOrientation(elementMid, hostElement);

    var freeAlignments;

    // check whether there is a multi-orientation, e.g. 'top-left'
    if (hostOrientation.indexOf('-') >= 0) {
      freeAlignments = hostOrientation.split('-');
    } else {
      freeAlignments = [ hostOrientation ];
    }

    var takenAlignments = ALIGNMENTS.filter(function(alignment) {

      return freeAlignments.indexOf(alignment) === -1;
    });

    return takenAlignments;

  }

  /**
   * Return alignments which are taken by related connections
   *
   * @param {Element} element
   *
   * @return {DirectionTRBL[]}
   */
  function getTakenConnectionAlignments(element) {

    var elementMid = getMid(element);

    var takenAlignments = [].concat(
      element.incoming.map(function(c) {
        return c.waypoints[c.waypoints.length - 2 ];
      }),
      element.outgoing.map(function(c) {
        return c.waypoints[1];
      })
    ).map(function(point) {
      return getApproximateOrientation(elementMid, point);
    });

    return takenAlignments;
  }

  /**
   * Return the optimal label position around an element
   * or `undefined`, if none was found.
   *
   * @param  {Element} element
   *
   * @return {DirectionTRBL|undefined}
   */
  function getOptimalPosition(element) {

    var labelMid = getMid(element.label);

    var elementMid = getMid(element);

    var labelOrientation = getApproximateOrientation(elementMid, labelMid);

    if (!isAligned(labelOrientation)) {
      return;
    }

    var takenAlignments = getTakenConnectionAlignments(element);

    if (element.host) {
      var takenHostAlignments = getTakenHostAlignments(element);

      takenAlignments = takenAlignments.concat(takenHostAlignments);
    }

    var freeAlignments = ALIGNMENTS.filter(function(alignment) {

      return takenAlignments.indexOf(alignment) === -1;
    });

    // NOTHING TO DO; label already aligned a.O.K.
    if (freeAlignments.indexOf(labelOrientation) !== -1) {
      return;
    }

    return freeAlignments[0];
  }

  function getApproximateOrientation(p0, p1) {
    return getOrientation(p1, p0, 5);
  }

  function isAligned(orientation) {
    return ALIGNMENTS.indexOf(orientation) !== -1;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  function AppendBehavior(eventBus) {

    CommandInterceptor.call(this, eventBus);

    // assign correct shape position unless already set

    this.preExecute('shape.append', function(context) {

      var source = context.source,
          shape = context.shape;

      if (!context.position) {

        if (is$1(shape, 'bpmn:TextAnnotation')) {
          context.position = {
            x: source.x + source.width / 2 + 75,
            y: source.y - 50 - shape.height / 2
          };
        } else {
          context.position = {
            x: source.x + source.width + 80 + shape.width / 2,
            y: source.y + source.height / 2
          };
        }
      }
    }, true);
  }

  e$3(AppendBehavior, CommandInterceptor);

  AppendBehavior.$inject = [
    'eventBus'
  ];

  /**
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * @param {Injector} injector
   * @param {Modeling} modeling
   */
  function AssociationBehavior(injector, modeling) {
    injector.invoke(CommandInterceptor, this);

    this.postExecute('shape.move', function(context) {
      var newParent = context.newParent,
          shape = context.shape;

      var associations = filter(shape.incoming.concat(shape.outgoing), function(connection) {
        return is$1(connection, 'bpmn:Association');
      });

      forEach$1(associations, function(association) {
        modeling.moveConnection(association, { x: 0, y: 0 }, newParent);
      });
    }, true);
  }

  e$3(AssociationBehavior, CommandInterceptor);

  AssociationBehavior.$inject = [
    'injector',
    'modeling'
  ];

  /**
   * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
   * @typedef {import('didi').Injector} Injector
   */

  var LOW_PRIORITY$k = 500;


  /**
   * Replace intermediate event with boundary event when creating or moving results in attached event.
   *
   * @param {BpmnReplace} bpmnReplace
   * @param {Injector} injector
   */
  function AttachEventBehavior(bpmnReplace, injector) {
    injector.invoke(CommandInterceptor, this);

    this._bpmnReplace = bpmnReplace;

    var self = this;

    this.postExecuted('elements.create', LOW_PRIORITY$k, function(context) {
      var elements = context.elements;

      elements = elements.filter(function(shape) {
        var host = shape.host;

        return shouldReplace$1(shape, host);
      });

      if (elements.length !== 1) {
        return;
      }

      elements.map(function(element) {
        return elements.indexOf(element);
      }).forEach(function(index) {
        var host = elements[ index ];

        context.elements[ index ] = self._replaceShape(elements[ index ], host);
      });
    }, true);


    this.preExecute('elements.move', LOW_PRIORITY$k, function(context) {
      var shapes = context.shapes,
          host = context.newHost;

      if (shapes.length !== 1) {
        return;
      }

      var shape = shapes[0];

      if (shouldReplace$1(shape, host)) {
        context.shapes = [ self._replaceShape(shape, host) ];
      }
    }, true);
  }

  AttachEventBehavior.$inject = [
    'bpmnReplace',
    'injector'
  ];

  e$3(AttachEventBehavior, CommandInterceptor);

  AttachEventBehavior.prototype._replaceShape = function(shape, host) {
    var eventDefinition = getEventDefinition$4(shape);

    var boundaryEvent = {
      type: 'bpmn:BoundaryEvent',
      host: host
    };

    if (eventDefinition) {
      boundaryEvent.eventDefinitionType = eventDefinition.$type;
    }

    return this._bpmnReplace.replaceElement(shape, boundaryEvent, { layoutConnection: false });
  };


  // helpers //////////

  function getEventDefinition$4(element) {
    var businessObject = getBusinessObject(element),
        eventDefinitions = businessObject.eventDefinitions;

    return eventDefinitions && eventDefinitions[0];
  }

  function shouldReplace$1(shape, host) {
    return !isLabel(shape) &&
      isAny(shape, [ 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent' ]) && !!host;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * BPMN specific boundary event behavior.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function BoundaryEventBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    function getBoundaryEvents(element) {
      return filter(element.attachers, function(attacher) {
        return is$1(attacher, 'bpmn:BoundaryEvent');
      });
    }

    // remove after connecting to event-based gateway
    this.postExecute('connection.create', function(event) {
      var source = event.context.source,
          target = event.context.target,
          boundaryEvents = getBoundaryEvents(target);

      if (
        is$1(source, 'bpmn:EventBasedGateway') &&
        is$1(target, 'bpmn:ReceiveTask') &&
        boundaryEvents.length > 0
      ) {
        modeling.removeElements(boundaryEvents);
      }

    });

    // remove after replacing connected gateway with event-based gateway
    this.postExecute('connection.reconnect', function(event) {
      var oldSource = event.context.oldSource,
          newSource = event.context.newSource;

      if (is$1(oldSource, 'bpmn:Gateway') &&
          is$1(newSource, 'bpmn:EventBasedGateway')) {
        forEach$1(newSource.outgoing, function(connection) {
          var target = connection.target,
              attachedboundaryEvents = getBoundaryEvents(target);

          if (is$1(target, 'bpmn:ReceiveTask') &&
              attachedboundaryEvents.length > 0) {
            modeling.removeElements(attachedboundaryEvents);
          }
        });
      }
    });

  }

  BoundaryEventBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  e$3(BoundaryEventBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../lib/features/modeling/Modeling').default} Modeling
   */

  /**
   * Behavior ensuring that only a single compensation activity is connected to a
   * compensation boundary event when connecting, reconnecting or replacing shapes.
   *
   * @param {import('diagram-js/lib/core/EventBus').default} eventBus
   * @param {import('../Modeling').default} modeling
   * @param {import('../../rules/BpmnRules').default} bpmnRules
   */
  function CompensateBoundaryEventBehavior(eventBus, modeling, bpmnRules) {

    CommandInterceptor.call(this, eventBus);

    this.preExecute('shape.replace', handleReplacement, true);
    this.postExecuted('shape.replace', handleReplacementPostExecuted, true);
    this.preExecute('connection.create', handleNewConnection, true);
    this.postExecuted('connection.delete', handleConnectionRemoval, true);
    this.postExecuted('connection.reconnect', handleReconnection, true);
    this.postExecuted('element.updateProperties', handlePropertiesUpdate, true);

    /**
     * Given a connection from boundary event is removed, remove the `isForCompensation` property.
     */
    function handleConnectionRemoval(context) {
      const source = context.source,
            target = context.target;

      if (isCompensationBoundaryEvent$1(source) && isForCompensation$2(target)) {
        removeIsForCompensationProperty(target);
      }
    }

    /**
     * Add `isForCompensation` property and make sure only a single compensation activity is connected.
     */
    function handleNewConnection(context) {
      const connection = context.connection,
            source = context.source,
            target = context.target;

      if (isCompensationBoundaryEvent$1(source) && isForCompensationAllowed(target)) {
        addIsForCompensationProperty(target);
        removeExistingAssociations(source, [ connection ]);
      }
    }

    function handleReconnection(context) {
      const newTarget = context.newTarget,
            oldSource = context.oldSource,
            oldTarget = context.oldTarget;

      // target changes
      if (oldTarget !== newTarget) {
        const source = oldSource;

        // oldTarget perspective
        if (isForCompensation$2(oldTarget)) {
          removeIsForCompensationProperty(oldTarget);
        }

        // newTarget perspective
        if (isCompensationBoundaryEvent$1(source) && isForCompensationAllowed(newTarget)) {
          addIsForCompensationProperty(newTarget);
        }
      }
    }

    function handlePropertiesUpdate(context) {
      const { element } = context;

      if (isForCompensation$2(element)) {
        removeDisallowedConnections(element);
        removeAttachments(element);
      } else if (isForCompensationAllowed(element)) {
        removeIncomingCompensationAssociations(element);
      }
    }

    /**
     * When replacing a boundary event, make sure the compensation activity is connected,
     * and remove the potential candidates for connection replacement to have a single compensation activity.
     */
    function handleReplacement(context) {
      const {
        newData,
        oldShape
      } = context;

      // from compensate boundary event
      if (isCompensationBoundaryEvent$1(context.oldShape) &&
        newData.eventDefinitionType !== 'bpmn:CompensateEventDefinition' ||
        newData.type !== 'bpmn:BoundaryEvent'
      ) {
        const targetConnection = oldShape.outgoing.find(
          ({ target }) => isForCompensation$2(target)
        );

        if (targetConnection && targetConnection.target) {
          context._connectionTarget = targetConnection.target;
        }
      }

      // to compensate boundary event
      else if (
        !isCompensationBoundaryEvent$1(context.oldShape) &&
        newData.eventDefinitionType === 'bpmn:CompensateEventDefinition' &&
        newData.type === 'bpmn:BoundaryEvent'
      ) {
        const targetConnection = oldShape.outgoing.find(
          ({ target }) => isForCompensationAllowed(target)
        );

        if (targetConnection && targetConnection.target) {
          context._connectionTarget = targetConnection.target;
        }

        removeOutgoingSequenceFlows(oldShape);
      }
    }

    function handleReplacementPostExecuted(context) {
      const { _connectionTarget: target, newShape } = context;

      if (target) {
        modeling.connect(newShape, target);
      }
    }

    function addIsForCompensationProperty(target) {
      modeling.updateProperties(target, { isForCompensation: true });
    }

    function removeIsForCompensationProperty(target) {
      modeling.updateProperties(target, { isForCompensation: undefined });
    }

    function removeDisallowedConnections(element) {

      for (const connection of element.incoming) {
        if (!bpmnRules.canConnect(connection.source, element)) {
          modeling.removeConnection(connection);
        }
      }

      for (const connection of element.outgoing) {
        if (!bpmnRules.canConnect(element, connection.target)) {
          modeling.removeConnection(connection);
        }
      }
    }

    function removeExistingAssociations(boundaryEvent, ignoredAssociations) {
      const associations = boundaryEvent.outgoing.filter(connection => is$1(connection, 'bpmn:Association'));
      const associationsToRemove = associations.filter(association => {
        return isForCompensation$2(association.target) && !ignoredAssociations.includes(association);
      });

      // remove existing associations
      associationsToRemove.forEach(association => modeling.removeConnection(association));
    }

    function removeAttachments(element) {
      const attachments = element.attachers.slice();

      if (!attachments.length) {
        return;
      }

      modeling.removeElements(attachments);
    }

    function removeIncomingCompensationAssociations(element) {
      const compensationAssociations = element.incoming.filter(
        connection => isCompensationBoundaryEvent$1(connection.source)
      );

      modeling.removeElements(compensationAssociations);
    }

    function removeOutgoingSequenceFlows(element) {
      const sequenceFlows = element.outgoing.filter(
        connection => is$1(connection, 'bpmn:SequenceFlow')
      );

      modeling.removeElements(sequenceFlows);
    }
  }

  e$3(CompensateBoundaryEventBehavior, CommandInterceptor);

  CompensateBoundaryEventBehavior.$inject = [
    'eventBus',
    'modeling',
    'bpmnRules'
  ];

  // helpers //////////

  function isForCompensation$2(element) {
    const bo = getBusinessObject(element);
    return bo && bo.get('isForCompensation');
  }

  function isCompensationBoundaryEvent$1(element) {
    return element && is$1(element, 'bpmn:BoundaryEvent') &&
      hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');
  }

  function isForCompensationAllowed(element) {
    return element && is$1(element, 'bpmn:Activity') && !isEventSubProcess(element);
  }

  /**
   * @typedef {import('didi').Injector} Injector
   */

  /**
   * @param {Injector} injector
   */
  function CreateBehavior(injector) {
    injector.invoke(CommandInterceptor, this);

    this.preExecute('shape.create', 1500, function(event) {
      var context = event.context,
          parent = context.parent,
          shape = context.shape;

      if (is$1(parent, 'bpmn:Lane') && !is$1(shape, 'bpmn:Lane')) {
        context.parent = getParent(parent, 'bpmn:Participant');
      }
    });

  }


  CreateBehavior.$inject = [ 'injector' ];

  e$3(CreateBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   */

  /**
   * BPMN specific create data object behavior.
   *
   * @param {EventBus} eventBus
   * @param {BpmnFactory} bpmnFactory
   */
  function CreateDataObjectBehavior(eventBus, bpmnFactory) {

    CommandInterceptor.call(this, eventBus);

    this.preExecute('shape.create', function(event) {

      var context = event.context,
          shape = context.shape;

      if (is$1(shape, 'bpmn:DataObjectReference') && shape.type !== 'label') {

        // create a DataObject every time a DataObjectReference is created
        var dataObject = bpmnFactory.create('bpmn:DataObject');

        // set the reference to the DataObject
        shape.businessObject.dataObjectRef = dataObject;
      }
    });

  }

  CreateDataObjectBehavior.$inject = [
    'eventBus',
    'bpmnFactory'
  ];

  e$3(CreateDataObjectBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  var HORIZONTAL_PARTICIPANT_PADDING = 20,
      VERTICAL_PARTICIPANT_PADDING = 20;

  var PARTICIPANT_BORDER_WIDTH = 30;

  var HIGH_PRIORITY$g = 2000;


  /**
   * BPMN-specific behavior for creating participants.
   *
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function CreateParticipantBehavior(canvas, eventBus, modeling) {
    CommandInterceptor.call(this, eventBus);

    // fit participant
    eventBus.on([
      'create.start',
      'shape.move.start'
    ], HIGH_PRIORITY$g, function(event) {
      var context = event.context,
          shape = context.shape,
          rootElement = canvas.getRootElement();

      if (!is$1(shape, 'bpmn:Participant') ||
        !is$1(rootElement, 'bpmn:Process') ||
        !rootElement.children.length) {
        return;
      }

      // ignore connections, groups and labels
      var children = rootElement.children.filter(function(element) {
        return !is$1(element, 'bpmn:Group') &&
          !isLabel(element) &&
          !isConnection(element);
      });

      // ensure for available children to calculate bounds
      if (!children.length) {
        return;
      }

      var childrenBBox = getBBox(children);

      var participantBounds = getParticipantBounds(shape, childrenBBox);

      // assign width and height
      assign$1(shape, participantBounds);

      // assign create constraints
      context.createConstraints = getParticipantCreateConstraints(shape, childrenBBox);
    });

    // force hovering process when creating first participant
    eventBus.on('create.start', HIGH_PRIORITY$g, function(event) {
      var context = event.context,
          shape = context.shape,
          rootElement = canvas.getRootElement(),
          rootElementGfx = canvas.getGraphics(rootElement);

      function ensureHoveringProcess(event) {
        event.element = rootElement;
        event.gfx = rootElementGfx;
      }

      if (is$1(shape, 'bpmn:Participant') && is$1(rootElement, 'bpmn:Process')) {
        eventBus.on('element.hover', HIGH_PRIORITY$g, ensureHoveringProcess);

        eventBus.once('create.cleanup', function() {
          eventBus.off('element.hover', ensureHoveringProcess);
        });
      }
    });

    // turn process into collaboration when creating first participant
    function getOrCreateCollaboration() {
      var rootElement = canvas.getRootElement();

      if (is$1(rootElement, 'bpmn:Collaboration')) {
        return rootElement;
      }

      return modeling.makeCollaboration();
    }

    // when creating mutliple elements through `elements.create` parent must be set to collaboration
    // and passed to `shape.create` as hint
    this.preExecute('elements.create', HIGH_PRIORITY$g, function(context) {
      var elements = context.elements,
          parent = context.parent,
          participant = findParticipant(elements),
          hints;

      if (participant && is$1(parent, 'bpmn:Process')) {
        context.parent = getOrCreateCollaboration();

        hints = context.hints = context.hints || {};

        hints.participant = participant;
        hints.process = parent;
        hints.processRef = getBusinessObject(participant).get('processRef');
      }
    }, true);

    // when creating single shape through `shape.create` parent must be set to collaboration
    // unless it was already set through `elements.create`
    this.preExecute('shape.create', function(context) {
      var parent = context.parent,
          shape = context.shape;

      if (is$1(shape, 'bpmn:Participant') && is$1(parent, 'bpmn:Process')) {
        context.parent = getOrCreateCollaboration();

        context.process = parent;
        context.processRef = getBusinessObject(shape).get('processRef');
      }
    }, true);

    // #execute necessary because #preExecute not called on CommandStack#redo
    this.execute('shape.create', function(context) {
      var hints = context.hints || {},
          process = context.process || hints.process,
          shape = context.shape,
          participant = hints.participant;

      // both shape.create and elements.create must be handled
      if (process && (!participant || shape === participant)) {

        // monkey-patch process ref
        getBusinessObject(shape).set('processRef', getBusinessObject(process));
      }
    }, true);

    this.revert('shape.create', function(context) {
      var hints = context.hints || {},
          process = context.process || hints.process,
          processRef = context.processRef || hints.processRef,
          shape = context.shape,
          participant = hints.participant;

      // both shape.create and elements.create must be handled
      if (process && (!participant || shape === participant)) {

        // monkey-patch process ref
        getBusinessObject(shape).set('processRef', processRef);
      }
    }, true);

    this.postExecute('shape.create', function(context) {
      var hints = context.hints || {},
          process = context.process || context.hints.process,
          shape = context.shape,
          participant = hints.participant;

      if (process) {
        var children = process.children.slice();

        // both shape.create and elements.create must be handled
        if (!participant) {
          modeling.moveElements(children, { x: 0, y: 0 }, shape);
        } else if (shape === participant) {
          modeling.moveElements(children, { x: 0, y: 0 }, participant);
        }
      }
    }, true);
  }

  CreateParticipantBehavior.$inject = [
    'canvas',
    'eventBus',
    'modeling'
  ];

  e$3(CreateParticipantBehavior, CommandInterceptor);

  // helpers //////////

  function getParticipantBounds(shape, childrenBBox) {
    childrenBBox = {
      width: childrenBBox.width + HORIZONTAL_PARTICIPANT_PADDING * 2 + PARTICIPANT_BORDER_WIDTH,
      height: childrenBBox.height + VERTICAL_PARTICIPANT_PADDING * 2
    };

    var width = Math.max(shape.width, childrenBBox.width),
        height = Math.max(shape.height, childrenBBox.height);

    return {
      x: -width / 2,
      y: -height / 2,
      width: width,
      height: height
    };
  }

  function getParticipantCreateConstraints(shape, childrenBBox) {
    childrenBBox = asTRBL(childrenBBox);

    return {
      bottom: childrenBBox.top + shape.height / 2 - VERTICAL_PARTICIPANT_PADDING,
      left: childrenBBox.right - shape.width / 2 + HORIZONTAL_PARTICIPANT_PADDING,
      top: childrenBBox.bottom - shape.height / 2 + VERTICAL_PARTICIPANT_PADDING,
      right: childrenBBox.left + shape.width / 2 - HORIZONTAL_PARTICIPANT_PADDING - PARTICIPANT_BORDER_WIDTH
    };
  }

  function findParticipant(elements) {
    return find$1(elements, function(element) {
      return is$1(element, 'bpmn:Participant');
    });
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   */

  var TARGET_REF_PLACEHOLDER_NAME = '__targetRef_placeholder';


  /**
   * This behavior makes sure we always set a fake
   * DataInputAssociation#targetRef as demanded by the BPMN 2.0
   * XSD schema.
   *
   * The reference is set to a bpmn:Property{ name: '__targetRef_placeholder' }
   * which is created on the fly and cleaned up afterwards if not needed
   * anymore.
   *
   * @param {EventBus} eventBus
   * @param {BpmnFactory} bpmnFactory
   */
  function DataInputAssociationBehavior(eventBus, bpmnFactory) {

    CommandInterceptor.call(this, eventBus);


    this.executed([
      'connection.create',
      'connection.delete',
      'connection.move',
      'connection.reconnect'
    ], ifDataInputAssociation(fixTargetRef));

    this.reverted([
      'connection.create',
      'connection.delete',
      'connection.move',
      'connection.reconnect'
    ], ifDataInputAssociation(fixTargetRef));


    function usesTargetRef(element, targetRef, removedConnection) {

      var inputAssociations = element.get('dataInputAssociations');

      return find$1(inputAssociations, function(association) {
        return association !== removedConnection &&
               association.targetRef === targetRef;
      });
    }

    function getTargetRef(element, create) {

      var properties = element.get('properties');

      var targetRefProp = find$1(properties, function(p) {
        return p.name === TARGET_REF_PLACEHOLDER_NAME;
      });

      if (!targetRefProp && create) {
        targetRefProp = bpmnFactory.create('bpmn:Property', {
          name: TARGET_REF_PLACEHOLDER_NAME
        });

        add$1(properties, targetRefProp);
      }

      return targetRefProp;
    }

    function cleanupTargetRef(element, connection) {

      var targetRefProp = getTargetRef(element);

      if (!targetRefProp) {
        return;
      }

      if (!usesTargetRef(element, targetRefProp, connection)) {
        remove$1(element.get('properties'), targetRefProp);
      }
    }

    /**
     * Make sure targetRef is set to a valid property or
     * `null` if the connection is detached.
     *
     * @param {Event} event
     */
    function fixTargetRef(event) {

      var context = event.context,
          connection = context.connection,
          connectionBo = connection.businessObject,
          target = connection.target,
          targetBo = target && target.businessObject,
          newTarget = context.newTarget,
          newTargetBo = newTarget && newTarget.businessObject,
          oldTarget = context.oldTarget || context.target,
          oldTargetBo = oldTarget && oldTarget.businessObject;

      var dataAssociation = connection.businessObject,
          targetRefProp;

      if (oldTargetBo && oldTargetBo !== targetBo) {
        cleanupTargetRef(oldTargetBo, connectionBo);
      }

      if (newTargetBo && newTargetBo !== targetBo) {
        cleanupTargetRef(newTargetBo, connectionBo);
      }

      if (targetBo) {
        targetRefProp = getTargetRef(targetBo, true);
        dataAssociation.targetRef = targetRefProp;
      } else {
        dataAssociation.targetRef = null;
      }
    }
  }

  DataInputAssociationBehavior.$inject = [
    'eventBus',
    'bpmnFactory'
  ];

  e$3(DataInputAssociationBehavior, CommandInterceptor);


  /**
   * Only call the given function when the event
   * changes a bpmn:DataInputAssociation.
   *
   * @param {Function} fn
   * @return {Function}
   */
  function ifDataInputAssociation(fn) {

    return function(event) {
      var context = event.context,
          connection = context.connection;

      if (is$1(connection, 'bpmn:DataInputAssociation')) {
        return fn(event);
      }
    };
  }

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('../BpmnUpdater').default} BpmnUpdater
   */

  /**
   * @implements {CommandHandler}
   *
   * @param {BpmnUpdater} bpmnUpdater
   */
  function UpdateSemanticParentHandler(bpmnUpdater) {
    this._bpmnUpdater = bpmnUpdater;
  }

  UpdateSemanticParentHandler.$inject = [ 'bpmnUpdater' ];


  UpdateSemanticParentHandler.prototype.execute = function(context) {
    var dataStoreBo = context.dataStoreBo,
        dataStoreDi = context.dataStoreDi,
        newSemanticParent = context.newSemanticParent,
        newDiParent = context.newDiParent;

    context.oldSemanticParent = dataStoreBo.$parent;
    context.oldDiParent = dataStoreDi.$parent;

    // update semantic parent
    this._bpmnUpdater.updateSemanticParent(dataStoreBo, newSemanticParent);

    // update DI parent
    this._bpmnUpdater.updateDiParent(dataStoreDi, newDiParent);

    return [];
  };

  UpdateSemanticParentHandler.prototype.revert = function(context) {
    var dataStoreBo = context.dataStoreBo,
        dataStoreDi = context.dataStoreDi,
        oldSemanticParent = context.oldSemanticParent,
        oldDiParent = context.oldDiParent;

    // update semantic parent
    this._bpmnUpdater.updateSemanticParent(dataStoreBo, oldSemanticParent);

    // update DI parent
    this._bpmnUpdater.updateDiParent(dataStoreDi, oldDiParent);

    return [];
  };

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * BPMN specific data store behavior.
   *
   * @param {Canvas} canvas
   * @param {CommandStack} commandStack
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   */
  function DataStoreBehavior(
      canvas, commandStack, elementRegistry,
      eventBus) {

    CommandInterceptor.call(this, eventBus);

    commandStack.registerHandler('dataStore.updateContainment', UpdateSemanticParentHandler);

    function getFirstParticipantWithProcessRef() {
      return elementRegistry.filter(function(element) {
        return is$1(element, 'bpmn:Participant') && getBusinessObject(element).processRef;
      })[0];
    }

    function getDataStores(element) {
      return element.children.filter(function(child) {
        return is$1(child, 'bpmn:DataStoreReference') && !child.labelTarget;
      });
    }

    function updateDataStoreParent(dataStore, newDataStoreParent) {
      var dataStoreBo = dataStore.businessObject || dataStore;

      newDataStoreParent = newDataStoreParent || getFirstParticipantWithProcessRef();

      if (newDataStoreParent) {
        var newDataStoreParentBo = newDataStoreParent.businessObject || newDataStoreParent;

        commandStack.execute('dataStore.updateContainment', {
          dataStoreBo: dataStoreBo,
          dataStoreDi: getDi(dataStore),
          newSemanticParent: newDataStoreParentBo.processRef || newDataStoreParentBo,
          newDiParent: getDi(newDataStoreParent)
        });
      }
    }


    // disable auto-resize for data stores
    this.preExecute('shape.create', function(event) {

      var context = event.context,
          shape = context.shape;

      if (is$1(shape, 'bpmn:DataStoreReference') &&
          shape.type !== 'label') {

        if (!context.hints) {
          context.hints = {};
        }

        // prevent auto resizing
        context.hints.autoResize = false;
      }
    });


    // disable auto-resize for data stores
    this.preExecute('elements.move', function(event) {
      var context = event.context,
          shapes = context.shapes;

      var dataStoreReferences = shapes.filter(function(shape) {
        return is$1(shape, 'bpmn:DataStoreReference');
      });

      if (dataStoreReferences.length) {
        if (!context.hints) {
          context.hints = {};
        }

        // prevent auto resizing for data store references
        context.hints.autoResize = shapes.filter(function(shape) {
          return !is$1(shape, 'bpmn:DataStoreReference');
        });
      }
    });


    // update parent on data store created
    this.postExecute('shape.create', function(event) {
      var context = event.context,
          shape = context.shape,
          parent = shape.parent;


      if (is$1(shape, 'bpmn:DataStoreReference') &&
          shape.type !== 'label' &&
          is$1(parent, 'bpmn:Collaboration')) {

        updateDataStoreParent(shape);
      }
    });


    // update parent on data store moved
    this.postExecute('shape.move', function(event) {
      var context = event.context,
          shape = context.shape,
          oldParent = context.oldParent,
          parent = shape.parent;

      if (is$1(oldParent, 'bpmn:Collaboration')) {

        // do nothing if not necessary
        return;
      }

      if (is$1(shape, 'bpmn:DataStoreReference') &&
          shape.type !== 'label' &&
          is$1(parent, 'bpmn:Collaboration')) {

        var participant = is$1(oldParent, 'bpmn:Participant') ?
          oldParent :
          getAncestor(oldParent, 'bpmn:Participant');

        updateDataStoreParent(shape, participant);
      }
    });


    // update data store parents on participant or subprocess deleted
    this.postExecute('shape.delete', function(event) {
      var context = event.context,
          shape = context.shape,
          rootElement = canvas.getRootElement();

      if (isAny(shape, [ 'bpmn:Participant', 'bpmn:SubProcess' ])
          && is$1(rootElement, 'bpmn:Collaboration')) {
        getDataStores(rootElement)
          .filter(function(dataStore) {
            return isDescendant(dataStore, shape);
          })
          .forEach(function(dataStore) {
            updateDataStoreParent(dataStore);
          });
      }
    });

    // update data store parents on collaboration -> process
    this.postExecute('canvas.updateRoot', function(event) {
      var context = event.context,
          oldRoot = context.oldRoot,
          newRoot = context.newRoot;

      var dataStores = getDataStores(oldRoot);

      dataStores.forEach(function(dataStore) {

        if (is$1(newRoot, 'bpmn:Process')) {
          updateDataStoreParent(dataStore, newRoot);
        }

      });
    });
  }

  DataStoreBehavior.$inject = [
    'canvas',
    'commandStack',
    'elementRegistry',
    'eventBus',
  ];

  e$3(DataStoreBehavior, CommandInterceptor);


  // helpers //////////

  function isDescendant(descendant, ancestor) {
    var descendantBo = descendant.businessObject || descendant,
        ancestorBo = ancestor.businessObject || ancestor;

    while (descendantBo.$parent) {
      if (descendantBo.$parent === ancestorBo.processRef || ancestorBo) {
        return true;
      }

      descendantBo = descendantBo.$parent;
    }

    return false;
  }

  function getAncestor(element, type) {

    while (element.parent) {
      if (is$1(element.parent, type)) {
        return element.parent;
      }

      element = element.parent;
    }
  }

  var max$5 = Math.max,
      min$3 = Math.min;

  var DEFAULT_CHILD_BOX_PADDING = 20;

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').Rect} Rect
   * @typedef {import('../../util/Types').RectTRBL} RectTRBL
   */

  /**
   * Substract a TRBL from another
   *
   * @param {RectTRBL} trblA
   * @param {RectTRBL} trblB
   *
   * @return {RectTRBL}
   */
  function substractTRBL(trblA, trblB) {
    return {
      top: trblA.top - trblB.top,
      right: trblA.right - trblB.right,
      bottom: trblA.bottom - trblB.bottom,
      left: trblA.left - trblB.left
    };
  }

  /**
   * Resize the given bounds by the specified delta from a given anchor point.
   *
   * @param {Rect} bounds the bounding box that should be resized
   * @param {Direction} direction in which the element is resized (nw, ne, se, sw)
   * @param {Point} delta of the resize operation
   *
   * @return {Rect} resized bounding box
   */
  function resizeBounds$1(bounds, direction, delta) {
    var dx = delta.x,
        dy = delta.y;

    var newBounds = {
      x: bounds.x,
      y: bounds.y,
      width: bounds.width,
      height: bounds.height
    };

    if (direction.indexOf('n') !== -1) {
      newBounds.y = bounds.y + dy;
      newBounds.height = bounds.height - dy;
    } else if (direction.indexOf('s') !== -1) {
      newBounds.height = bounds.height + dy;
    }

    if (direction.indexOf('e') !== -1) {
      newBounds.width = bounds.width + dx;
    } else if (direction.indexOf('w') !== -1) {
      newBounds.x = bounds.x + dx;
      newBounds.width = bounds.width - dx;
    }

    return newBounds;
  }


  /**
   * Resize the given bounds by applying the passed
   * { top, right, bottom, left } delta.
   *
   * @param {Rect} bounds
   * @param {RectTRBL} resize
   *
   * @return {Rect}
   */
  function resizeTRBL(bounds, resize) {
    return {
      x: bounds.x + (resize.left || 0),
      y: bounds.y + (resize.top || 0),
      width: bounds.width - (resize.left || 0) + (resize.right || 0),
      height: bounds.height - (resize.top || 0) + (resize.bottom || 0)
    };
  }


  function applyConstraints(attr, trbl, resizeConstraints) {

    var value = trbl[attr],
        minValue = resizeConstraints.min && resizeConstraints.min[attr],
        maxValue = resizeConstraints.max && resizeConstraints.max[attr];

    if (isNumber(minValue)) {
      value = (/top|left/.test(attr) ? min$3 : max$5)(value, minValue);
    }

    if (isNumber(maxValue)) {
      value = (/top|left/.test(attr) ? max$5 : min$3)(value, maxValue);
    }

    return value;
  }

  function ensureConstraints$2(currentBounds, resizeConstraints) {

    if (!resizeConstraints) {
      return currentBounds;
    }

    var currentTrbl = asTRBL(currentBounds);

    return asBounds({
      top: applyConstraints('top', currentTrbl, resizeConstraints),
      right: applyConstraints('right', currentTrbl, resizeConstraints),
      bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),
      left: applyConstraints('left', currentTrbl, resizeConstraints)
    });
  }


  function getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {

    var currentBox = asTRBL(currentBounds);

    var minBox = {
      top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,
      left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,
      bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,
      right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right
    };

    var childrenBox = childrenBounds ? asTRBL(childrenBounds) : minBox;

    var combinedBox = {
      top: min$3(minBox.top, childrenBox.top),
      left: min$3(minBox.left, childrenBox.left),
      bottom: max$5(minBox.bottom, childrenBox.bottom),
      right: max$5(minBox.right, childrenBox.right)
    };

    return asBounds(combinedBox);
  }

  function asPadding(mayBePadding, defaultValue) {
    if (typeof mayBePadding !== 'undefined') {
      return mayBePadding;
    } else {
      return DEFAULT_CHILD_BOX_PADDING;
    }
  }

  function addPadding$1(bbox, padding) {
    var left, right, top, bottom;

    if (typeof padding === 'object') {
      left = asPadding(padding.left);
      right = asPadding(padding.right);
      top = asPadding(padding.top);
      bottom = asPadding(padding.bottom);
    } else {
      left = right = top = bottom = asPadding(padding);
    }

    return {
      x: bbox.x - left,
      y: bbox.y - top,
      width: bbox.width + left + right,
      height: bbox.height + top + bottom
    };
  }


  /**
   * Is the given element part of the resize
   * targets min boundary box?
   *
   * This is the default implementation which excludes
   * connections and labels.
   *
   * @param {Element} element
   */
  function isBBoxChild(element) {

    // exclude connections
    if (element.waypoints) {
      return false;
    }

    // exclude labels
    if (element.type === 'label') {
      return false;
    }

    return true;
  }

  /**
   * Return children bounding computed from a shapes children
   * or a list of prefiltered children.
   *
   * @param {Shape|Shape[]} shapeOrChildren
   * @param {RectTRBL|number} padding
   *
   * @return {Rect}
   */
  function computeChildrenBBox(shapeOrChildren, padding) {

    var elements;

    // compute based on shape
    if (shapeOrChildren.length === undefined) {

      // grab all the children that are part of the
      // parents children box
      elements = filter(shapeOrChildren.children, isBBoxChild);

    } else {
      elements = shapeOrChildren;
    }

    if (elements.length) {
      return addPadding$1(getBBox(elements), padding);
    }
  }

  /**
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   */

  var abs$4 = Math.abs;


  function getTRBLResize(oldBounds, newBounds) {
    return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));
  }


  var LANE_PARENTS = [
    'bpmn:Participant',
    'bpmn:Process',
    'bpmn:SubProcess'
  ];

  var LANE_INDENTATION = 30;


  /**
   * Return all lanes that are children of the given shape.
   *
   * @param  {Shape} shape
   * @param  {Shape[]} [collectedShapes]
   *
   * @return {Shape[]}
   */
  function collectLanes(shape, collectedShapes) {

    collectedShapes = collectedShapes || [];

    shape.children.filter(function(s) {
      if (is$1(s, 'bpmn:Lane')) {
        collectLanes(s, collectedShapes);

        collectedShapes.push(s);
      }
    });

    return collectedShapes;
  }


  /**
   * Return all lanes that are direct children of the given shape.
   *
   * @param {Shape} shape
   *
   * @return {Shape[]}
   */
  function getChildLanes(shape) {
    return shape.children.filter(function(c) {
      return is$1(c, 'bpmn:Lane');
    });
  }


  /**
   * Return the parent shape of the given lane.
   *
   * @param {Shape} shape
   *
   * @return {Shape}
   */
  function getLanesRoot(shape) {
    return getParent(shape, LANE_PARENTS) || shape;
  }


  /**
   * Compute the required resize operations for lanes
   * adjacent to the given shape, assuming it will be
   * resized to the given new bounds.
   *
   * @param {Shape} shape
   * @param {Rect} newBounds
   *
   * @return { {
   *   shape: Shape;
   *   newBounds: Rect;
   * }[] }
   */
  function computeLanesResize(shape, newBounds) {

    var rootElement = getLanesRoot(shape);

    var initialShapes = is$1(rootElement, 'bpmn:Process') ? [] : [ rootElement ];

    var allLanes = collectLanes(rootElement, initialShapes),
        shapeTrbl = asTRBL(shape),
        shapeNewTrbl = asTRBL(newBounds),
        trblResize = getTRBLResize(shape, newBounds),
        resizeNeeded = [];

    var isHorizontalLane = isHorizontal$3(shape);

    allLanes.forEach(function(other) {

      if (other === shape) {
        return;
      }

      var topResize = isHorizontalLane ? 0 : trblResize.top,
          rightResize = isHorizontalLane ? trblResize.right : 0,
          bottomResize = isHorizontalLane ? 0 : trblResize.bottom,
          leftResize = isHorizontalLane ? trblResize.left : 0;

      var otherTrbl = asTRBL(other);

      if (trblResize.top) {
        if (abs$4(otherTrbl.bottom - shapeTrbl.top) < 10) {
          bottomResize = shapeNewTrbl.top - otherTrbl.bottom;
        }

        if (abs$4(otherTrbl.top - shapeTrbl.top) < 5) {
          topResize = shapeNewTrbl.top - otherTrbl.top;
        }
      }

      if (trblResize.left) {
        if (abs$4(otherTrbl.right - shapeTrbl.left) < 10) {
          rightResize = shapeNewTrbl.left - otherTrbl.right;
        }

        if (abs$4(otherTrbl.left - shapeTrbl.left) < 5) {
          leftResize = shapeNewTrbl.left - otherTrbl.left;
        }
      }

      if (trblResize.bottom) {
        if (abs$4(otherTrbl.top - shapeTrbl.bottom) < 10) {
          topResize = shapeNewTrbl.bottom - otherTrbl.top;
        }

        if (abs$4(otherTrbl.bottom - shapeTrbl.bottom) < 5) {
          bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;
        }
      }

      if (trblResize.right) {
        if (abs$4(otherTrbl.left - shapeTrbl.right) < 10) {
          leftResize = shapeNewTrbl.right - otherTrbl.left;
        }

        if (abs$4(otherTrbl.right - shapeTrbl.right) < 5) {
          rightResize = shapeNewTrbl.right - otherTrbl.right;
        }
      }

      if (topResize || rightResize || bottomResize || leftResize) {

        resizeNeeded.push({
          shape: other,
          newBounds: resizeTRBL(other, {
            top: topResize,
            right: rightResize,
            bottom: bottomResize,
            left: leftResize
          })
        });
      }

    });

    return resizeNeeded;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
   */

  var LOW_PRIORITY$j = 500;


  /**
   * BPMN specific delete lane behavior.
   *
   * @param {EventBus} eventBus
   * @param {SpaceTool} spaceTool
   */
  function DeleteLaneBehavior(eventBus, spaceTool) {

    CommandInterceptor.call(this, eventBus);


    function compensateLaneDelete(shape, oldParent) {
      var isHorizontalLane = isHorizontal$3(shape);

      var siblings = getChildLanes(oldParent);

      var topAffected = [];
      var bottomAffected = [];
      var leftAffected = [];
      var rightAffected = [];

      eachElement(siblings, function(element) {

        if (isHorizontalLane) {
          if (element.y > shape.y) {
            bottomAffected.push(element);
          } else {
            topAffected.push(element);
          }
        } else {
          if (element.x > shape.x) {
            rightAffected.push(element);
          } else {
            leftAffected.push(element);
          }
        }

        return element.children;
      });

      if (!siblings.length) {
        return;
      }

      var offset;

      if (isHorizontalLane) {
        if (bottomAffected.length && topAffected.length) {
          offset = shape.height / 2;
        } else {
          offset = shape.height;
        }
      } else {
        if (rightAffected.length && leftAffected.length) {
          offset = shape.width / 2;
        } else {
          offset = shape.width;
        }
      }

      var topAdjustments,
          bottomAdjustments,
          leftAdjustments,
          rightAdjustments;

      if (topAffected.length) {
        topAdjustments = spaceTool.calculateAdjustments(
          topAffected, 'y', offset, shape.y - 10);

        spaceTool.makeSpace(
          topAdjustments.movingShapes,
          topAdjustments.resizingShapes,
          { x: 0, y: offset }, 's');
      }

      if (bottomAffected.length) {
        bottomAdjustments = spaceTool.calculateAdjustments(
          bottomAffected, 'y', -offset, shape.y + shape.height + 10);

        spaceTool.makeSpace(
          bottomAdjustments.movingShapes,
          bottomAdjustments.resizingShapes,
          { x: 0, y: -offset }, 'n');
      }

      if (leftAffected.length) {
        leftAdjustments = spaceTool.calculateAdjustments(
          leftAffected, 'x', offset, shape.x - 10);

        spaceTool.makeSpace(
          leftAdjustments.movingShapes,
          leftAdjustments.resizingShapes,
          { x: offset, y: 0 }, 'e');
      }

      if (rightAffected.length) {
        rightAdjustments = spaceTool.calculateAdjustments(
          rightAffected, 'x', -offset, shape.x + shape.width + 10);

        spaceTool.makeSpace(
          rightAdjustments.movingShapes,
          rightAdjustments.resizingShapes,
          { x: -offset, y: 0 }, 'w');
      }
    }


    /**
     * Adjust sizes of other lanes after lane deletion
     */
    this.postExecuted('shape.delete', LOW_PRIORITY$j, function(event) {

      var context = event.context,
          hints = context.hints,
          shape = context.shape,
          oldParent = context.oldParent;

      // only compensate lane deletes
      if (!is$1(shape, 'bpmn:Lane')) {
        return;
      }

      // compensate root deletes only
      if (hints && hints.nested) {
        return;
      }

      compensateLaneDelete(shape, oldParent);
    });
  }

  DeleteLaneBehavior.$inject = [
    'eventBus',
    'spaceTool'
  ];

  e$3(DeleteLaneBehavior, CommandInterceptor);

  /**
   * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
   * @typedef {import('didi').Injector} Injector
   */

  var LOW_PRIORITY$i = 500;


  /**
   * Replace boundary event with intermediate event when creating or moving results in detached event.
   *
   * @param {BpmnReplace} bpmnReplace
   * @param {Injector} injector
   */
  function DetachEventBehavior(bpmnReplace, injector) {
    injector.invoke(CommandInterceptor, this);

    this._bpmnReplace = bpmnReplace;

    var self = this;

    this.postExecuted('elements.create', LOW_PRIORITY$i, function(context) {
      var elements = context.elements;

      elements.filter(function(shape) {
        var host = shape.host;

        return shouldReplace(shape, host);
      }).map(function(shape) {
        return elements.indexOf(shape);
      }).forEach(function(index) {
        context.elements[ index ] = self._replaceShape(elements[ index ]);
      });
    }, true);

    this.preExecute('elements.move', LOW_PRIORITY$i, function(context) {
      var shapes = context.shapes,
          newHost = context.newHost;

      shapes.forEach(function(shape, index) {
        var host = shape.host;

        if (shouldReplace(shape, includes$6(shapes, host) ? host : newHost)) {
          shapes[ index ] = self._replaceShape(shape);
        }
      });
    }, true);
  }

  DetachEventBehavior.$inject = [
    'bpmnReplace',
    'injector'
  ];

  e$3(DetachEventBehavior, CommandInterceptor);

  DetachEventBehavior.prototype._replaceShape = function(shape) {
    var eventDefinition = getEventDefinition$3(shape),
        intermediateEvent;

    if (eventDefinition) {
      intermediateEvent = {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: eventDefinition.$type
      };
    } else {
      intermediateEvent = {
        type: 'bpmn:IntermediateThrowEvent'
      };
    }

    return this._bpmnReplace.replaceElement(shape, intermediateEvent, { layoutConnection: false });
  };


  // helpers //////////

  function getEventDefinition$3(element) {
    var businessObject = getBusinessObject(element),
        eventDefinitions = businessObject.eventDefinitions;

    return eventDefinitions && eventDefinitions[0];
  }

  function shouldReplace(shape, host) {
    return !isLabel(shape) && is$1(shape, 'bpmn:BoundaryEvent') && !host;
  }

  function includes$6(array, item) {
    return array.indexOf(item) !== -1;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../rules/BpmnRules').default} BpmnRules
   * @typedef {import('../../modeling/Modeling').default} Modeling
   */

  /**
   * @param {EventBus} eventBus
   * @param {BpmnRules} bpmnRules
   * @param {Modeling} modeling
   */
  function DropOnFlowBehavior(eventBus, bpmnRules, modeling) {

    CommandInterceptor.call(this, eventBus);

    /**
     * Reconnect start / end of a connection after
     * dropping an element on a flow.
     */

    function insertShape(shape, targetFlow, positionOrBounds) {
      var waypoints = targetFlow.waypoints,
          waypointsBefore,
          waypointsAfter,
          dockingPoint,
          source,
          target,
          incomingConnection,
          outgoingConnection,
          oldOutgoing = shape.outgoing.slice(),
          oldIncoming = shape.incoming.slice();

      var mid;

      if (isNumber(positionOrBounds.width)) {
        mid = getMid(positionOrBounds);
      } else {
        mid = positionOrBounds;
      }

      var intersection = getApproxIntersection(waypoints, mid);

      if (intersection) {
        waypointsBefore = waypoints.slice(0, intersection.index);
        waypointsAfter = waypoints.slice(intersection.index + (intersection.bendpoint ? 1 : 0));

        // due to inaccuracy intersection might have been found
        if (!waypointsBefore.length || !waypointsAfter.length) {
          return;
        }

        dockingPoint = intersection.bendpoint ? waypoints[intersection.index] : mid;

        // if last waypointBefore is inside shape's bounds, ignore docking point
        if (waypointsBefore.length === 1 || !isPointInsideBBox(shape, waypointsBefore[waypointsBefore.length - 1])) {
          waypointsBefore.push(copy(dockingPoint));
        }

        // if first waypointAfter is inside shape's bounds, ignore docking point
        if (waypointsAfter.length === 1 || !isPointInsideBBox(shape, waypointsAfter[0])) {
          waypointsAfter.unshift(copy(dockingPoint));
        }
      }

      source = targetFlow.source;
      target = targetFlow.target;

      if (bpmnRules.canConnect(source, shape, targetFlow)) {

        // reconnect source -> inserted shape
        modeling.reconnectEnd(targetFlow, shape, waypointsBefore || mid);

        incomingConnection = targetFlow;
      }

      if (bpmnRules.canConnect(shape, target, targetFlow)) {

        if (!incomingConnection) {

          // reconnect inserted shape -> end
          modeling.reconnectStart(targetFlow, shape, waypointsAfter || mid);

          outgoingConnection = targetFlow;
        } else {
          outgoingConnection = modeling.connect(
            shape, target, { type: targetFlow.type, waypoints: waypointsAfter }
          );
        }
      }

      var duplicateConnections = [].concat(

        incomingConnection && filter(oldIncoming, function(connection) {
          return connection.source === incomingConnection.source;
        }) || [],

        outgoingConnection && filter(oldOutgoing, function(connection) {
          return connection.target === outgoingConnection.target;
        }) || []
      );

      if (duplicateConnections.length) {
        modeling.removeElements(duplicateConnections);
      }
    }

    this.preExecute('elements.move', function(context) {

      var newParent = context.newParent,
          shapes = context.shapes,
          delta = context.delta,
          shape = shapes[0];

      if (!shape || !newParent) {
        return;
      }

      // if the new parent is a connection,
      // change it to the new parent's parent
      if (newParent && newParent.waypoints) {
        context.newParent = newParent = newParent.parent;
      }

      var shapeMid = getMid(shape);
      var newShapeMid = {
        x: shapeMid.x + delta.x,
        y: shapeMid.y + delta.y
      };

      // find a connection which intersects with the
      // element's mid point
      var connection = find$1(newParent.children, function(element) {
        var canInsert = bpmnRules.canInsert(shapes, element);

        return canInsert && getApproxIntersection(element.waypoints, newShapeMid);
      });

      if (connection) {
        context.targetFlow = connection;
        context.position = newShapeMid;
      }

    }, true);

    this.postExecuted('elements.move', function(context) {

      var shapes = context.shapes,
          targetFlow = context.targetFlow,
          position = context.position;

      if (targetFlow) {
        insertShape(shapes[0], targetFlow, position);
      }

    }, true);

    this.preExecute('shape.create', function(context) {

      var parent = context.parent,
          shape = context.shape;

      if (bpmnRules.canInsert(shape, parent)) {
        context.targetFlow = parent;
        context.parent = parent.parent;
      }
    }, true);

    this.postExecuted('shape.create', function(context) {

      var shape = context.shape,
          targetFlow = context.targetFlow,
          positionOrBounds = context.position;

      if (targetFlow) {
        insertShape(shape, targetFlow, positionOrBounds);
      }
    }, true);
  }

  e$3(DropOnFlowBehavior, CommandInterceptor);

  DropOnFlowBehavior.$inject = [
    'eventBus',
    'bpmnRules',
    'modeling'
  ];


  // helpers /////////////////////

  function isPointInsideBBox(bbox, point) {
    var x = point.x,
        y = point.y;

    return x >= bbox.x &&
      x <= bbox.x + bbox.width &&
      y >= bbox.y &&
      y <= bbox.y + bbox.height;
  }

  function copy(obj) {
    return assign$1({}, obj);
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function EventBasedGatewayBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    /**
     * Remove incoming sequence flows of event-based target when creating
     * sequence flow.
     *
     * 1. If source is event-based gateway remove all incoming sequence flows
     * 2. If source is not event-based gateway remove all incoming sequence flows
     * whose source is event-based gateway
     */
    this.preExecuted('connection.create', function(event) {
      var context = event.context,
          connection = context.connection,
          source = context.source,
          target = context.target,
          hints = context.hints;

      if (hints && hints.createElementsBehavior === false) {
        return;
      }

      if (!isSequenceFlow(connection)) {
        return;
      }

      var sequenceFlows = [];

      if (is$1(source, 'bpmn:EventBasedGateway')) {
        sequenceFlows = target.incoming
          .filter(flow =>
            flow !== connection &&
            isSequenceFlow(flow)
          );
      } else {
        sequenceFlows = target.incoming
          .filter(flow =>
            flow !== connection &&
            isSequenceFlow(flow) &&
            is$1(flow.source, 'bpmn:EventBasedGateway')
          );
      }

      sequenceFlows.forEach(function(sequenceFlow) {
        modeling.removeConnection(sequenceFlow);
      });
    });

    /**
     * Remove incoming sequence flows of event-based targets when replacing source
     * with event-based gateway.
     */
    this.preExecuted('shape.replace', function(event) {
      var context = event.context,
          newShape = context.newShape;

      if (!is$1(newShape, 'bpmn:EventBasedGateway')) {
        return;
      }

      var targets = newShape.outgoing.filter(isSequenceFlow)
        .reduce(function(targets, sequenceFlow) {
          if (!targets.includes(sequenceFlow.target)) {
            return targets.concat(sequenceFlow.target);
          }

          return targets;
        }, []);

      targets.forEach(function(target) {
        target.incoming.filter(isSequenceFlow).forEach(function(sequenceFlow) {
          const sequenceFlowsFromNewShape = target.incoming.filter(isSequenceFlow).filter(function(sequenceFlow) {
            return sequenceFlow.source === newShape;
          });

          if (sequenceFlow.source !== newShape || sequenceFlowsFromNewShape.length > 1) {
            modeling.removeConnection(sequenceFlow);
          }
        });
      });
    });
  }

  EventBasedGatewayBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  e$3(EventBasedGatewayBehavior, CommandInterceptor);

  // helpers //////////

  function isSequenceFlow(connection) {
    return is$1(connection, 'bpmn:SequenceFlow');
  }

  /**
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   */

  var HIGH_PRIORITY$f = 1500;
  var HIGHEST_PRIORITY = 2000;


  /**
   * Correct hover targets in certain situations to improve diagram interaction.
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function FixHoverBehavior(elementRegistry, eventBus, canvas) {

    eventBus.on([
      'create.hover',
      'create.move',
      'create.out',
      'create.end',
      'shape.move.hover',
      'shape.move.move',
      'shape.move.out',
      'shape.move.end'
    ], HIGH_PRIORITY$f, function(event) {
      var context = event.context,
          shape = context.shape || event.shape,
          hover = event.hover;

      // ensure elements are not dropped onto a bpmn:Lane but onto
      // the underlying bpmn:Participant
      if (is$1(hover, 'bpmn:Lane') && !isAny(shape, [ 'bpmn:Lane', 'bpmn:Participant' ])) {
        event.hover = getLanesRoot(hover);
        event.hoverGfx = elementRegistry.getGraphics(event.hover);
      }

      var rootElement = canvas.getRootElement();

      // ensure bpmn:Group and label elements are dropped
      // always onto the root
      if (hover !== rootElement && (shape.labelTarget || isAny(shape, [ 'bpmn:Group', 'bpmn:TextAnnotation' ]))) {
        event.hover = rootElement;
        event.hoverGfx = elementRegistry.getGraphics(event.hover);
      }
    });

    eventBus.on([
      'connect.hover',
      'connect.out',
      'connect.end',
      'connect.cleanup',
      'global-connect.hover',
      'global-connect.out',
      'global-connect.end',
      'global-connect.cleanup'
    ], HIGH_PRIORITY$f, function(event) {
      var hover = event.hover;

      // ensure connections start/end on bpmn:Participant,
      // not the underlying bpmn:Lane
      if (is$1(hover, 'bpmn:Lane')) {
        event.hover = getLanesRoot(hover) || hover;
        event.hoverGfx = elementRegistry.getGraphics(event.hover);
      }
    });


    eventBus.on([
      'bendpoint.move.hover'
    ], HIGH_PRIORITY$f, function(event) {
      var context = event.context,
          hover = event.hover,
          type = context.type;

      // ensure reconnect start/end on bpmn:Participant,
      // not the underlying bpmn:Lane
      if (is$1(hover, 'bpmn:Lane') && /reconnect/.test(type)) {
        event.hover = getLanesRoot(hover) || hover;
        event.hoverGfx = elementRegistry.getGraphics(event.hover);
      }
    });


    eventBus.on([
      'connect.start'
    ], HIGH_PRIORITY$f, function(event) {
      var context = event.context,
          start = context.start;

      // ensure connect start on bpmn:Participant,
      // not the underlying bpmn:Lane
      if (is$1(start, 'bpmn:Lane')) {
        context.start = getLanesRoot(start) || start;
      }
    });


    // allow movement of participants from lanes
    eventBus.on('shape.move.start', HIGHEST_PRIORITY, function(event) {
      var shape = event.shape;

      if (is$1(shape, 'bpmn:Lane')) {
        event.shape = getLanesRoot(shape) || shape;
      }
    });

    // ensure lanes aren't resized without their parent participant when using
    // space tool
    eventBus.on('spaceTool.move', HIGHEST_PRIORITY, function(event) {
      var hover = event.hover;

      if (hover && is$1(hover, 'bpmn:Lane')) {
        event.hover = getLanesRoot(hover);
      }
    });

  }

  FixHoverBehavior.$inject = [
    'elementRegistry',
    'eventBus',
    'canvas'
  ];

  /**
   * @typedef {import('../../BpmnFactory').default} BpmnFactory
   *
   * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
   */

  /**
   * Creates a new bpmn:CategoryValue inside a new bpmn:Category
   *
   * @param {BpmnFactory} bpmnFactory
   *
   * @return {ModdleElement}
   */
  function createCategory(bpmnFactory) {
    return bpmnFactory.create('bpmn:Category');
  }

  /**
   * Creates a new bpmn:CategoryValue inside a new bpmn:Category
   *
   * @param {BpmnFactory} bpmnFactory
   *
   * @return {ModdleElement}
   */
  function createCategoryValue$1(bpmnFactory) {
    return bpmnFactory.create('bpmn:CategoryValue');
  }

  /**
   * Adds category value to definitions
   *
   * @param {ModdleElement} categoryValue
   * @param {ModdleElement} category
   * @param {ModdleElement} definitions
   *
   * @return {ModdleElement}
   */
  function linkCategoryValue(categoryValue, category, definitions) {
    add$1(category.get('categoryValue'), categoryValue);
    categoryValue.$parent = category;

    add$1(definitions.get('rootElements'), category);
    category.$parent = definitions;

    return categoryValue;
  }

  /**
   * Unlink category value from parent
   *
   * @param {ModdleElement} categoryValue
   *
   * @return {ModdleElement}
   */
  function unlinkCategoryValue(categoryValue) {
    var category = categoryValue.$parent;

    if (category) {
      remove$1(category.get('categoryValue'), categoryValue);
      categoryValue.$parent = null;
    }

    return categoryValue;
  }

  /**
   * Unlink category from parent
   *
   * @param {ModdleElement} category
   *
   * @return {ModdleElement}
   */
  function unlinkCategory(category) {
    var definitions = category.$parent;

    if (definitions) {
      remove$1(definitions.get('rootElements'), category);
      category.$parent = null;
    }

    return category;
  }

  /**
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   * @typedef {import('../../../Modeler').default} Modeler
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../../copy-paste/ModdleCopy').default} ModdleCopy
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   */

  var LOWER_PRIORITY$1 = 770;


  /**
   * BPMN specific group behavior.
   *
   * @param {BpmnFactory} bpmnFactory
   * @param {Modeler} bpmnjs
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Injector} injector
   * @param {ModdleCopy} moddleCopy
   */
  function GroupBehavior(
      bpmnFactory,
      bpmnjs,
      elementRegistry,
      eventBus,
      injector,
      moddleCopy
  ) {
    injector.invoke(CommandInterceptor, this);

    /**
     * Returns all group element in the current registry.
     *
     * @return {Shape[]}
     */
    function getGroupElements() {
      return elementRegistry.filter(function(e) {
        return is$1(e, 'bpmn:Group');
      });
    }

    /**
     * Returns true if given category is referenced in one of the given elements.
     *
     * @param {Element[]} elements
     * @param {ModdleElement} category
     *
     * @return {boolean}
     */
    function isReferencedCategory(elements, category) {
      return elements.some(function(element) {
        var businessObject = getBusinessObject(element);

        var _category = businessObject.categoryValueRef && businessObject.categoryValueRef.$parent;

        return _category === category;
      });
    }

    /**
     * Returns true if given categoryValue is referenced in one of the given elements.
     *
     * @param {Element[]} elements
     * @param {ModdleElement} categoryValue
     *
     * @return {boolean}
     */
    function isReferencedCategoryValue(elements, categoryValue) {
      return elements.some(function(element) {
        var businessObject = getBusinessObject(element);

        return businessObject.categoryValueRef === categoryValue;
      });
    }

    /**
     * Remove category value unless it is still referenced.
     *
     * @param {ModdleElement} categoryValue
     * @param {ModdleElement} category
     * @param {ModdleElement} businessObject
     */
    function removeCategoryValue(categoryValue, category, businessObject) {

      var groups = getGroupElements().filter(function(element) {
        return element.businessObject !== businessObject;
      });

      if (category && !isReferencedCategory(groups, category)) {
        unlinkCategory(category);
      }

      if (categoryValue && !isReferencedCategoryValue(groups, categoryValue)) {
        unlinkCategoryValue(categoryValue);
      }
    }

    /**
     * Add category value.
     *
     * @param {ModdleElement} categoryValue
     * @param {ModdleElement} category
     *
     * @return {ModdleElement}
     */
    function addCategoryValue(categoryValue, category) {
      return linkCategoryValue(categoryValue, category, bpmnjs.getDefinitions());
    }

    function setCategoryValue(element, context) {
      var businessObject = getBusinessObject(element),
          categoryValue = businessObject.categoryValueRef;

      if (!categoryValue) {
        categoryValue =
        businessObject.categoryValueRef =
        context.categoryValue = (
          context.categoryValue || createCategoryValue$1(bpmnFactory)
        );
      }

      var category = categoryValue.$parent;

      if (!category) {
        category =
        categoryValue.$parent =
        context.category = (
          context.category || createCategory(bpmnFactory)
        );
      }

      addCategoryValue(categoryValue, category, bpmnjs.getDefinitions());
    }

    function unsetCategoryValue(element, context) {
      var category = context.category,
          categoryValue = context.categoryValue,
          businessObject = getBusinessObject(element);

      if (categoryValue) {
        businessObject.categoryValueRef = null;

        removeCategoryValue(categoryValue, category, businessObject);
      } else {
        removeCategoryValue(null, businessObject.categoryValueRef.$parent, businessObject);
      }
    }


    // ensure category + value exist before label editing

    this.execute('label.create', function(event) {
      var context = event.context,
          labelTarget = context.labelTarget;

      if (!is$1(labelTarget, 'bpmn:Group')) {
        return;
      }

      setCategoryValue(labelTarget, context);
    });

    this.revert('label.create', function(event) {
      var context = event.context,
          labelTarget = context.labelTarget;

      if (!is$1(labelTarget, 'bpmn:Group')) {
        return;
      }

      unsetCategoryValue(labelTarget, context);
    });


    // remove referenced category + value when group was deleted

    this.execute('shape.delete', function(event) {

      var context = event.context,
          shape = context.shape,
          businessObject = getBusinessObject(shape);

      if (!is$1(shape, 'bpmn:Group') || shape.labelTarget) {
        return;
      }

      var categoryValue = context.categoryValue = businessObject.categoryValueRef,
          category;

      if (categoryValue) {
        category = context.category = categoryValue.$parent;

        removeCategoryValue(categoryValue, category, businessObject);

        businessObject.categoryValueRef = null;
      }
    });

    this.reverted('shape.delete', function(event) {

      var context = event.context,
          shape = context.shape;

      if (!is$1(shape, 'bpmn:Group') || shape.labelTarget) {
        return;
      }

      var category = context.category,
          categoryValue = context.categoryValue,
          businessObject = getBusinessObject(shape);

      if (categoryValue) {
        businessObject.categoryValueRef = categoryValue;

        addCategoryValue(categoryValue, category);
      }
    });


    // create new category + value when group was created

    this.execute('shape.create', function(event) {
      var context = event.context,
          shape = context.shape;

      if (!is$1(shape, 'bpmn:Group') || shape.labelTarget) {
        return;
      }

      if (getBusinessObject(shape).categoryValueRef) {
        setCategoryValue(shape, context);
      }
    });

    this.reverted('shape.create', function(event) {

      var context = event.context,
          shape = context.shape;

      if (!is$1(shape, 'bpmn:Group') || shape.labelTarget) {
        return;
      }

      if (getBusinessObject(shape).categoryValueRef) {
        unsetCategoryValue(shape, context);
      }
    });


    // copy + paste categoryValueRef with group

    function copy(bo, clone) {
      var targetBo = bpmnFactory.create(bo.$type);

      return moddleCopy.copyElement(bo, targetBo, null, clone);
    }

    eventBus.on('copyPaste.copyElement', LOWER_PRIORITY$1, function(context) {
      var descriptor = context.descriptor,
          element = context.element;

      if (!is$1(element, 'bpmn:Group') || element.labelTarget) {
        return;
      }

      var groupBo = getBusinessObject(element);

      if (groupBo.categoryValueRef) {

        var categoryValue = groupBo.categoryValueRef;

        descriptor.categoryValue = copy(categoryValue, true);

        if (categoryValue.$parent) {
          descriptor.category = copy(categoryValue.$parent, true);
        }
      }
    });

    eventBus.on('copyPaste.pasteElement', LOWER_PRIORITY$1, function(context) {
      var descriptor = context.descriptor,
          businessObject = descriptor.businessObject,
          categoryValue = descriptor.categoryValue,
          category = descriptor.category;

      if (categoryValue) {
        categoryValue = businessObject.categoryValueRef = copy(categoryValue);
      }

      if (category) {
        categoryValue.$parent = copy(category);
      }

      delete descriptor.category;
      delete descriptor.categoryValue;
    });

  }

  GroupBehavior.$inject = [
    'bpmnFactory',
    'bpmnjs',
    'elementRegistry',
    'eventBus',
    'injector',
    'moddleCopy'
  ];

  e$3(GroupBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   */

  /**
   * Returns the intersection between two line segments a and b.
   *
   * @param {Point} l1s
   * @param {Point} l1e
   * @param {Point} l2s
   * @param {Point} l2e
   *
   * @return {Point}
   */
  function lineIntersect(l1s, l1e, l2s, l2e) {

    // if the lines intersect, the result contains the x and y of the
    // intersection (treating the lines as infinite) and booleans for
    // whether line segment 1 or line segment 2 contain the point
    var denominator, a, b, c, numerator;

    denominator = ((l2e.y - l2s.y) * (l1e.x - l1s.x)) - ((l2e.x - l2s.x) * (l1e.y - l1s.y));

    if (denominator == 0) {
      return null;
    }

    a = l1s.y - l2s.y;
    b = l1s.x - l2s.x;
    numerator = ((l2e.x - l2s.x) * a) - ((l2e.y - l2s.y) * b);

    c = numerator / denominator;

    // if we cast these lines infinitely in
    // both directions, they intersect here
    return {
      x: Math.round(l1s.x + (c * (l1e.x - l1s.x))),
      y: Math.round(l1s.y + (c * (l1e.y - l1s.y)))
    };
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * Fix broken dockings after DI imports.
   *
   * @param {EventBus} eventBus
   */
  function ImportDockingFix(eventBus) {

    function adjustDocking(startPoint, nextPoint, elementMid) {

      var elementTop = {
        x: elementMid.x,
        y: elementMid.y - 50
      };

      var elementLeft = {
        x: elementMid.x - 50,
        y: elementMid.y
      };

      var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),
          horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);

      // original is horizontal or vertical center cross intersection
      var centerIntersect;

      if (verticalIntersect && horizontalIntersect) {
        if (getDistance$1(verticalIntersect, elementMid) > getDistance$1(horizontalIntersect, elementMid)) {
          centerIntersect = horizontalIntersect;
        } else {
          centerIntersect = verticalIntersect;
        }
      } else {
        centerIntersect = verticalIntersect || horizontalIntersect;
      }

      startPoint.original = centerIntersect;
    }

    function fixDockings(connection) {
      var waypoints = connection.waypoints;

      adjustDocking(
        waypoints[0],
        waypoints[1],
        getMid(connection.source)
      );

      adjustDocking(
        waypoints[waypoints.length - 1],
        waypoints[waypoints.length - 2],
        getMid(connection.target)
      );
    }

    eventBus.on('bpmnElement.added', function(e) {

      var element = e.element;

      if (element.waypoints) {
        fixDockings(element);
      }
    });
  }

  ImportDockingFix.$inject = [
    'eventBus'
  ];


  // helpers //////////////////////

  function getDistance$1(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * A component that makes sure that each created or updated
   * Pool and Lane is assigned an isHorizontal property set to true.
   *
   * @param {EventBus} eventBus
   */
  function IsHorizontalFix(eventBus) {

    CommandInterceptor.call(this, eventBus);

    var elementTypesToUpdate = [
      'bpmn:Participant',
      'bpmn:Lane'
    ];

    this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], function(event) {
      var shape = event.context.shape,
          bo = getBusinessObject(shape),
          di = getDi(shape);

      if (isAny(bo, elementTypesToUpdate)) {
        var isHorizontal = di.get('isHorizontal');

        if (isHorizontal === undefined) {
          isHorizontal = true;
        }

        // set attribute directly to avoid modeling#updateProperty side effects
        di.set('isHorizontal', isHorizontal);
      }
    });

  }

  IsHorizontalFix.$inject = [ 'eventBus' ];

  e$3(IsHorizontalFix, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   *
   * @typedef { {
  *   type: 'bendpoint' | 'segment';
  *   position: Point;
  *   segmentIndex: number;
  *   bendpointIndex?: number;
  *   relativeLocation?: number;
  * } } Attachment
  */

  var sqrt = Math.sqrt,
      min$2 = Math.min,
      max$4 = Math.max,
      abs$3 = Math.abs;

  /**
   * Calculate the square (power to two) of a number.
   *
   * @param {number} n
   *
   * @return {number}
   */
  function sq(n) {
    return Math.pow(n, 2);
  }

  /**
   * Get distance between two points.
   *
   * @param {Point} p1
   * @param {Point} p2
   *
   * @return {number}
   */
  function getDistance(p1, p2) {
    return sqrt(sq(p1.x - p2.x) + sq(p1.y - p2.y));
  }

  /**
   * Return the attachment of the given point on the specified line.
   *
   * The attachment is either a bendpoint (attached to the given point)
   * or segment (attached to a location on a line segment) attachment:
   *
   * ```javascript
   * var pointAttachment = {
   *   type: 'bendpoint',
   *   bendpointIndex: 3,
   *   position: { x: 10, y: 10 } // the attach point on the line
   * };
   *
   * var segmentAttachment = {
   *   type: 'segment',
   *   segmentIndex: 2,
   *   relativeLocation: 0.31, // attach point location between 0 (at start) and 1 (at end)
   *   position: { x: 10, y: 10 } // the attach point on the line
   * };
   * ```
   *
   * @param {Point} point
   * @param {Point[]} line
   *
   * @return {Attachment}
   */
  function getAttachment(point, line) {

    var idx = 0,
        segmentStart,
        segmentEnd,
        segmentStartDistance,
        segmentEndDistance,
        attachmentPosition,
        minDistance,
        intersections,
        attachment,
        attachmentDistance,
        closestAttachmentDistance,
        closestAttachment;

    for (idx = 0; idx < line.length - 1; idx++) {

      segmentStart = line[idx];
      segmentEnd = line[idx + 1];

      if (pointsEqual(segmentStart, segmentEnd)) {
        intersections = [ segmentStart ];
      } else {
        segmentStartDistance = getDistance(point, segmentStart);
        segmentEndDistance = getDistance(point, segmentEnd);

        minDistance = min$2(segmentStartDistance, segmentEndDistance);

        intersections = getCircleSegmentIntersections(segmentStart, segmentEnd, point, minDistance);
      }

      if (intersections.length < 1) {
        throw new Error('expected between [1, 2] circle -> line intersections');
      }

      // one intersection -> bendpoint attachment
      if (intersections.length === 1) {
        attachment = {
          type: 'bendpoint',
          position: intersections[0],
          segmentIndex: idx,
          bendpointIndex: pointsEqual(segmentStart, intersections[0]) ? idx : idx + 1
        };
      }

      // two intersections -> segment attachment
      if (intersections.length === 2) {

        attachmentPosition = mid$1(intersections[0], intersections[1]);

        attachment = {
          type: 'segment',
          position: attachmentPosition,
          segmentIndex: idx,
          relativeLocation: getDistance(segmentStart, attachmentPosition) / getDistance(segmentStart, segmentEnd)
        };
      }

      attachmentDistance = getDistance(attachment.position, point);

      if (!closestAttachment || closestAttachmentDistance > attachmentDistance) {
        closestAttachment = attachment;
        closestAttachmentDistance = attachmentDistance;
      }
    }

    return closestAttachment;
  }

  /**
   * Get the intersection between a circle and a line segment.
   *
   * @param {Point} s1 segment start
   * @param {Point} s2 segment end
   * @param {Point} cc circle center
   * @param {number} cr circle radius
   *
   * @return {Point[]} intersections
   */
  function getCircleSegmentIntersections(s1, s2, cc, cr) {

    var baX = s2.x - s1.x;
    var baY = s2.y - s1.y;
    var caX = cc.x - s1.x;
    var caY = cc.y - s1.y;

    var a = baX * baX + baY * baY;
    var bBy2 = baX * caX + baY * caY;
    var c = caX * caX + caY * caY - cr * cr;

    var pBy2 = bBy2 / a;
    var q = c / a;

    var disc = pBy2 * pBy2 - q;

    // check against negative value to work around
    // negative, very close to zero results (-4e-15)
    // being produced in some environments
    if (disc < 0 && disc > -1e-6) {
      disc = 0;
    }

    if (disc < 0) {
      return [];
    }

    // if disc == 0 ... dealt with later
    var tmpSqrt = sqrt(disc);
    var abScalingFactor1 = -pBy2 + tmpSqrt;
    var abScalingFactor2 = -pBy2 - tmpSqrt;

    var i1 = {
      x: s1.x - baX * abScalingFactor1,
      y: s1.y - baY * abScalingFactor1
    };

    if (disc === 0) { // abScalingFactor1 == abScalingFactor2
      return [ i1 ];
    }

    var i2 = {
      x: s1.x - baX * abScalingFactor2,
      y: s1.y - baY * abScalingFactor2
    };

    // return only points on line segment
    return [ i1, i2 ].filter(function(p) {
      return isPointInSegment(p, s1, s2);
    });
  }


  function isPointInSegment(p, segmentStart, segmentEnd) {
    return (
      fenced(p.x, segmentStart.x, segmentEnd.x) &&
      fenced(p.y, segmentStart.y, segmentEnd.y)
    );
  }

  function fenced(n, rangeStart, rangeEnd) {

    // use matching threshold to work around
    // precision errors in intersection computation

    return (
      n >= min$2(rangeStart, rangeEnd) - EQUAL_THRESHOLD &&
      n <= max$4(rangeStart, rangeEnd) + EQUAL_THRESHOLD
    );
  }

  /**
   * Calculate the mid between two points.
   *
   * @param {Point} p1
   * @param {Point} p2
   *
   * @return {Point}
   */
  function mid$1(p1, p2) {

    return {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    };
  }

  var EQUAL_THRESHOLD = 0.1;

  function pointsEqual(p1, p2) {

    return (
      abs$3(p1.x - p2.x) <= EQUAL_THRESHOLD &&
      abs$3(p1.y - p2.y) <= EQUAL_THRESHOLD
    );
  }

  /**
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   *
   * @typedef {import('./LineAttachmentUtil').Attachment} Attachment
   *
   * @typedef { {
   *   point: Point;
   *   delta: Point;
   * } } AnchorPointAdjustment
   *
   * @typedef { {
   *   segmentMove?: {
  *     segmentStartIndex: number;
  *     newSegmentStartIndex: number;
  *   };
  *   bendpointMove?: {
  *     insert: boolean;
  *     bendpointIndex: number;
  *   };
  *   connectionStart: boolean;
  *   connectionEnd: boolean;
  * } } FindNewLineStartIndexHints
   */

  /**
   * @param {Point[]} oldWaypoints
   * @param {Point[]} newWaypoints
   * @param {Attachment} attachment
   * @param {FindNewLineStartIndexHints} hints
   *
   * @return {number}
   */
  function findNewLineStartIndex(oldWaypoints, newWaypoints, attachment, hints) {

    var index = attachment.segmentIndex;

    var offset = newWaypoints.length - oldWaypoints.length;

    // segmentMove happened
    if (hints.segmentMove) {

      var oldSegmentStartIndex = hints.segmentMove.segmentStartIndex,
          newSegmentStartIndex = hints.segmentMove.newSegmentStartIndex;

      // if point was on moved segment return new segment index
      if (index === oldSegmentStartIndex) {
        return newSegmentStartIndex;
      }

      // point is after new segment index
      if (index >= newSegmentStartIndex) {
        return (index + offset < newSegmentStartIndex) ? newSegmentStartIndex : index + offset;
      }

      // if point is before new segment index
      return index;
    }

    // bendpointMove happened
    if (hints.bendpointMove) {

      var insert = hints.bendpointMove.insert,
          bendpointIndex = hints.bendpointMove.bendpointIndex,
          newIndex;

      // waypoints length didnt change
      if (offset === 0) {
        return index;
      }

      // point behind new/removed bendpoint
      if (index >= bendpointIndex) {
        newIndex = insert ? index + 1 : index - 1;
      }

      // point before new/removed bendpoint
      if (index < bendpointIndex) {

        newIndex = index;

        // decide point should take right or left segment
        if (insert && attachment.type !== 'bendpoint' && bendpointIndex - 1 === index) {

          var rel = relativePositionMidWaypoint(newWaypoints, bendpointIndex);

          if (rel < attachment.relativeLocation) {
            newIndex++;
          }
        }
      }

      return newIndex;
    }

    // start/end changed
    if (offset === 0) {
      return index;
    }

    if (hints.connectionStart && index === 0) {
      return 0;
    }

    if (hints.connectionEnd && index === oldWaypoints.length - 2) {
      return newWaypoints.length - 2;
    }

    // if nothing fits, take the middle segment
    return Math.floor((newWaypoints.length - 2) / 2);
  }


  /**
   * Calculate the required adjustment (move delta) for the given point
   * after the connection waypoints got updated.
   *
   * @param {Point} position
   * @param {Point[]} newWaypoints
   * @param {Point[]} oldWaypoints
   * @param {FindNewLineStartIndexHints} hints
   *
   * @return {AnchorPointAdjustment} result
   */
  function getAnchorPointAdjustment(position, newWaypoints, oldWaypoints, hints) {

    var dx = 0,
        dy = 0;

    var oldPosition = {
      point: position,
      delta: { x: 0, y: 0 }
    };

    // get closest attachment
    var attachment = getAttachment(position, oldWaypoints),
        oldLabelLineIndex = attachment.segmentIndex,
        newLabelLineIndex = findNewLineStartIndex(oldWaypoints, newWaypoints, attachment, hints);


    // should never happen
    // TODO(@janstuemmel): throw an error here when connectionSegmentMove is refactored
    if (newLabelLineIndex < 0 ||
        newLabelLineIndex > newWaypoints.length - 2 ||
        newLabelLineIndex === null) {
      return oldPosition;
    }

    var oldLabelLine = getLine(oldWaypoints, oldLabelLineIndex),
        newLabelLine = getLine(newWaypoints, newLabelLineIndex),
        oldFoot = attachment.position;

    var relativeFootPosition = getRelativeFootPosition(oldLabelLine, oldFoot),
        angleDelta = getAngleDelta(oldLabelLine, newLabelLine);

    // special rule if label on bendpoint
    if (attachment.type === 'bendpoint') {

      var offset = newWaypoints.length - oldWaypoints.length,
          oldBendpointIndex = attachment.bendpointIndex,
          oldBendpoint = oldWaypoints[oldBendpointIndex];

      // bendpoint position hasn't changed, return same position
      if (newWaypoints.indexOf(oldBendpoint) !== -1) {
        return oldPosition;
      }

      // new bendpoint and old bendpoint have same index, then just return the offset
      if (offset === 0) {
        var newBendpoint = newWaypoints[oldBendpointIndex];

        dx = newBendpoint.x - attachment.position.x,
        dy = newBendpoint.y - attachment.position.y;

        return {
          delta: {
            x: dx,
            y: dy
          },
          point: {
            x: position.x + dx,
            y: position.y + dy
          }
        };
      }

      // if bendpoints get removed
      if (offset < 0 && oldBendpointIndex !== 0 && oldBendpointIndex < oldWaypoints.length - 1) {
        relativeFootPosition = relativePositionMidWaypoint(oldWaypoints, oldBendpointIndex);
      }
    }

    var newFoot = {
      x: (newLabelLine[1].x - newLabelLine[0].x) * relativeFootPosition + newLabelLine[0].x,
      y: (newLabelLine[1].y - newLabelLine[0].y) * relativeFootPosition + newLabelLine[0].y
    };

    // the rotated vector to label
    var newLabelVector = rotateVector({
      x: position.x - oldFoot.x,
      y: position.y - oldFoot.y
    }, angleDelta);

    // the new relative position
    dx = newFoot.x + newLabelVector.x - position.x;
    dy = newFoot.y + newLabelVector.y - position.y;

    return {
      point: roundPoint(newFoot),
      delta: roundPoint({
        x: dx,
        y: dy
      })
    };
  }


  // HELPERS //////////////////////

  function relativePositionMidWaypoint(waypoints, idx) {

    var distanceSegment1 = getDistancePointPoint(waypoints[idx - 1], waypoints[idx]),
        distanceSegment2 = getDistancePointPoint(waypoints[idx], waypoints[idx + 1]);

    var relativePosition = distanceSegment1 / (distanceSegment1 + distanceSegment2);

    return relativePosition;
  }

  function getAngleDelta(l1, l2) {
    var a1 = getAngle(l1),
        a2 = getAngle(l2);
    return a2 - a1;
  }

  function getLine(waypoints, idx) {
    return [ waypoints[idx], waypoints[idx + 1] ];
  }

  function getRelativeFootPosition(line, foot) {

    var length = getDistancePointPoint(line[0], line[1]),
        lengthToFoot = getDistancePointPoint(line[0], foot);

    return length === 0 ? 0 : lengthToFoot / length;
  }

  /**
   * Calculate the required adjustment (move delta) for the given label
   * after the connection waypoints got updated.
   *
   * @param {Label} label
   * @param {Point[]} newWaypoints
   * @param {Point[]} oldWaypoints
   * @param {FindNewLineStartIndexHints} hints
   *
   * @return {Point}
   */
  function getLabelAdjustment(label, newWaypoints, oldWaypoints, hints) {
    var labelPosition = getMid(label);

    return getAnchorPointAdjustment(labelPosition, newWaypoints, oldWaypoints, hints).delta;
  }

  /**
   * @typedef {import('../model/Types').Shape} Shape
   *
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   */

  /**
   * Calculates the absolute point relative to the new element's position.
   *
   * @param {Point} point [absolute]
   * @param {Rect} oldBounds
   * @param {Rect} newBounds
   *
   * @return {Point} point [absolute]
   */
  function getNewAttachPoint(point, oldBounds, newBounds) {
    var oldCenter = center(oldBounds),
        newCenter = center(newBounds),
        oldDelta = delta(point, oldCenter);

    var newDelta = {
      x: oldDelta.x * (newBounds.width / oldBounds.width),
      y: oldDelta.y * (newBounds.height / oldBounds.height)
    };

    return roundPoint({
      x: newCenter.x + newDelta.x,
      y: newCenter.y + newDelta.y
    });
  }


  /**
   * Calculates the shape's delta relative to a new position
   * of a certain element's bounds.
   *
   * @param {Shape} shape
   * @param {Rect} oldBounds
   * @param {Rect} newBounds
   *
   * @return {Point} delta
   */
  function getNewAttachShapeDelta(shape, oldBounds, newBounds) {
    var shapeCenter = center(shape),
        oldCenter = center(oldBounds),
        newCenter = center(newBounds),
        shapeDelta = delta(shape, shapeCenter),
        oldCenterDelta = delta(shapeCenter, oldCenter),
        stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);

    if (stickyPositionDelta) {
      return stickyPositionDelta;
    }

    var newCenterDelta = {
      x: oldCenterDelta.x * (newBounds.width / oldBounds.width),
      y: oldCenterDelta.y * (newBounds.height / oldBounds.height)
    };

    var newShapeCenter = {
      x: newCenter.x + newCenterDelta.x,
      y: newCenter.y + newCenterDelta.y
    };

    return roundPoint({
      x: newShapeCenter.x + shapeDelta.x - shape.x,
      y: newShapeCenter.y + shapeDelta.y - shape.y
    });
  }

  function getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {
    var oldTRBL = asTRBL(oldBounds),
        newTRBL = asTRBL(newBounds);

    if (isMoved(oldTRBL, newTRBL)) {
      return null;
    }

    var oldOrientation = getOrientation(oldBounds, oldShapeCenter),
        stickyPositionDelta,
        newShapeCenter,
        newOrientation;

    if (oldOrientation === 'top') {
      stickyPositionDelta = {
        x: 0,
        y: newTRBL.bottom - oldTRBL.bottom
      };
    } else if (oldOrientation === 'bottom') {
      stickyPositionDelta = {
        x: 0,
        y: newTRBL.top - oldTRBL.top
      };
    } else if (oldOrientation === 'right') {
      stickyPositionDelta = {
        x: newTRBL.left - oldTRBL.left,
        y: 0
      };
    } else if (oldOrientation === 'left') {
      stickyPositionDelta = {
        x: newTRBL.right - oldTRBL.right,
        y: 0
      };
    } else {

      // fallback to proportional movement for corner-placed attachments
      return null;
    }

    newShapeCenter = {
      x: oldShapeCenter.x + stickyPositionDelta.x,
      y: oldShapeCenter.y + stickyPositionDelta.y
    };

    newOrientation = getOrientation(newBounds, newShapeCenter);

    if (newOrientation !== oldOrientation) {

      // fallback to proportional movement if orientation would otherwise change
      return null;
    }

    return stickyPositionDelta;
  }

  function isMoved(oldTRBL, newTRBL) {
    return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);
  }

  function isHorizontallyMoved(oldTRBL, newTRBL) {
    return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;
  }

  function isVerticallyMoved(oldTRBL, newTRBL) {
    return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;
  }

  var NAME_PROPERTY = 'name';
  var TEXT_PROPERTY = 'text';

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
   *
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   *
   * @typedef {Point[]} Line
   */

  /**
   * A component that makes sure that external labels are added
   * together with respective elements and properly updated (DI wise)
   * during move.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {BpmnFactory} bpmnFactory
   * @param {TextRenderer} textRenderer
   */
  function LabelBehavior(
      eventBus, modeling, bpmnFactory,
      textRenderer) {

    CommandInterceptor.call(this, eventBus);

    // update label if name property was updated
    this.postExecute('element.updateProperties', onPropertyUpdate);
    this.postExecute('element.updateModdleProperties', e => {
      const elementBo = getBusinessObject(e.context.element);

      if (elementBo === e.context.moddleElement) {
        onPropertyUpdate(e);
      }
    });

    function onPropertyUpdate(e) {
      var context = e.context,
          element = context.element,
          properties = context.properties;

      if (NAME_PROPERTY in properties) {
        modeling.updateLabel(element, properties[NAME_PROPERTY]);
      }

      if (TEXT_PROPERTY in properties
          && is$1(element, 'bpmn:TextAnnotation')) {

        var newBounds = textRenderer.getTextAnnotationBounds(
          {
            x: element.x,
            y: element.y,
            width: element.width,
            height: element.height
          },
          properties[TEXT_PROPERTY] || ''
        );

        modeling.updateLabel(element, properties.text, newBounds);
      }
    }

    // create label shape after shape/connection was created
    this.postExecute([ 'shape.create', 'connection.create' ], function(e) {
      var context = e.context,
          hints = context.hints || {};

      if (hints.createElementsBehavior === false) {
        return;
      }

      var element = context.shape || context.connection;

      if (isLabel(element) || !isLabelExternal(element)) {
        return;
      }

      // only create label if attribute available
      if (!getLabel(element)) {
        return;
      }

      modeling.updateLabel(element, getLabel(element));
    });

    // update label after label shape was deleted
    this.postExecute('shape.delete', function(event) {
      var context = event.context,
          labelTarget = context.labelTarget,
          hints = context.hints || {};

      // check if label
      if (labelTarget && hints.unsetLabel !== false) {
        modeling.updateLabel(labelTarget, null, null, { removeShape: false });
      }
    });

    function getVisibleLabelAdjustment(event) {

      var context = event.context,
          connection = context.connection,
          label = connection.label,
          hints = assign$1({}, context.hints),
          newWaypoints = context.newWaypoints || connection.waypoints,
          oldWaypoints = context.oldWaypoints;


      if (typeof hints.startChanged === 'undefined') {
        hints.startChanged = !!hints.connectionStart;
      }

      if (typeof hints.endChanged === 'undefined') {
        hints.endChanged = !!hints.connectionEnd;
      }

      return getLabelAdjustment(label, newWaypoints, oldWaypoints, hints);
    }

    this.postExecute([
      'connection.layout',
      'connection.updateWaypoints'
    ], function(event) {
      var context = event.context,
          hints = context.hints || {};

      if (hints.labelBehavior === false) {
        return;
      }

      var connection = context.connection,
          label = connection.label,
          labelAdjustment;

      // handle missing label as well as the case
      // that the label parent does not exist (yet),
      // because it is being pasted / created via multi element create
      //
      // Cf. https://github.com/bpmn-io/bpmn-js/pull/1227
      if (!label || !label.parent) {
        return;
      }

      labelAdjustment = getVisibleLabelAdjustment(event);

      modeling.moveShape(label, labelAdjustment);
    });


    // keep label position on shape replace
    this.postExecute([ 'shape.replace' ], function(event) {
      var context = event.context,
          newShape = context.newShape,
          oldShape = context.oldShape;

      var businessObject = getBusinessObject(newShape);

      if (businessObject
        && isLabelExternal(businessObject)
        && oldShape.label
        && newShape.label) {
        newShape.label.x = oldShape.label.x;
        newShape.label.y = oldShape.label.y;
      }
    });


    // move external label after resizing
    this.postExecute('shape.resize', function(event) {

      var context = event.context,
          shape = context.shape,
          newBounds = context.newBounds,
          oldBounds = context.oldBounds;

      if (hasExternalLabel(shape)) {

        var label = shape.label,
            labelMid = getMid(label),
            edges = asEdges(oldBounds);

        // get nearest border point to label as reference point
        var referencePoint = getReferencePoint$1(labelMid, edges);

        var delta = getReferencePointDelta(referencePoint, oldBounds, newBounds);

        modeling.moveShape(label, delta);

      }

    });

  }

  e$3(LabelBehavior, CommandInterceptor);

  LabelBehavior.$inject = [
    'eventBus',
    'modeling',
    'bpmnFactory',
    'textRenderer'
  ];

  // helpers //////////////////////

  /**
   * Calculates a reference point delta relative to a new position
   * of a certain element's bounds
   *
   * @param {Point} referencePoint
   * @param {Rect} oldBounds
   * @param {Rect} newBounds
   *
   * @return {Point}
   */
  function getReferencePointDelta(referencePoint, oldBounds, newBounds) {

    var newReferencePoint = getNewAttachPoint(referencePoint, oldBounds, newBounds);

    return roundPoint(delta(newReferencePoint, referencePoint));
  }

  /**
   * Generates the nearest point (reference point) for a given point
   * onto given set of lines
   *
   * @param {Point} point
   * @param {Line[]} lines
   *
   * @return {Point}
   */
  function getReferencePoint$1(point, lines) {

    if (!lines.length) {
      return;
    }

    var nearestLine = getNearestLine(point, lines);

    return perpendicularFoot(point, nearestLine);
  }

  /**
   * Convert the given bounds to a lines array containing all edges
   *
   * @param {Rect|Point} bounds
   *
   * @return {Line[]}
   */
  function asEdges(bounds) {
    return [
      [ // top
        {
          x: bounds.x,
          y: bounds.y
        },
        {
          x: bounds.x + (bounds.width || 0),
          y: bounds.y
        }
      ],
      [ // right
        {
          x: bounds.x + (bounds.width || 0),
          y: bounds.y
        },
        {
          x: bounds.x + (bounds.width || 0),
          y: bounds.y + (bounds.height || 0)
        }
      ],
      [ // bottom
        {
          x: bounds.x,
          y: bounds.y + (bounds.height || 0)
        },
        {
          x: bounds.x + (bounds.width || 0),
          y: bounds.y + (bounds.height || 0)
        }
      ],
      [ // left
        {
          x: bounds.x,
          y: bounds.y
        },
        {
          x: bounds.x,
          y: bounds.y + (bounds.height || 0)
        }
      ]
    ];
  }

  /**
   * Returns the nearest line for a given point by distance
   * @param {Point} point
   * @param {Line[]} lines
   *
   * @return {Line}
   */
  function getNearestLine(point, lines) {

    var distances = lines.map(function(l) {
      return {
        line: l,
        distance: getDistancePointLine(point, l)
      };
    });

    var sorted = sortBy(distances, 'distance');

    return sorted[0].line;
  }

  /**
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   *
   * @typedef {import('./LayoutUtil').FindNewLineStartIndexHints} FindNewLineStartIndexHints
   */

  /**
   * Calculate the new point after the connection waypoints got updated.
   *
   * @param {Point} position
   * @param {Point[]} newWaypoints
   * @param {Point[]} oldWaypoints
   * @param {FindNewLineStartIndexHints} hints
   *
   * @return {Point}
   */
  function getConnectionAdjustment(position, newWaypoints, oldWaypoints, hints) {
    return getAnchorPointAdjustment(position, newWaypoints, oldWaypoints, hints).point;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A component that makes sure that Associations connected to Connections
   * are updated together with the Connection.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function LayoutConnectionBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    function getnewAnchorPoint(event, point) {

      var context = event.context,
          connection = context.connection,
          hints = assign$1({}, context.hints),
          newWaypoints = context.newWaypoints || connection.waypoints,
          oldWaypoints = context.oldWaypoints;


      if (typeof hints.startChanged === 'undefined') {
        hints.startChanged = !!hints.connectionStart;
      }

      if (typeof hints.endChanged === 'undefined') {
        hints.endChanged = !!hints.connectionEnd;
      }

      return getConnectionAdjustment(point, newWaypoints, oldWaypoints, hints);
    }

    this.postExecute([
      'connection.layout',
      'connection.updateWaypoints'
    ], function(event) {
      var context = event.context;

      var connection = context.connection,
          outgoing = connection.outgoing,
          incoming = connection.incoming;

      incoming.forEach(function(connection) {
        var endPoint = connection.waypoints[connection.waypoints.length - 1];
        var newEndpoint = getnewAnchorPoint(event, endPoint);

        var newWaypoints = [].concat(connection.waypoints.slice(0, -1), [ newEndpoint ]);

        modeling.updateWaypoints(connection, newWaypoints);
      });

      outgoing.forEach(function(connection) {
        var startpoint = connection.waypoints[0];
        var newStartpoint = getnewAnchorPoint(event, startpoint);

        var newWaypoints = [].concat([ newStartpoint ], connection.waypoints.slice(1));

        modeling.updateWaypoints(connection, newWaypoints);
      });

    });


    this.postExecute([
      'connection.move'
    ], function(event) {
      var context = event.context;

      var connection = context.connection,
          outgoing = connection.outgoing,
          incoming = connection.incoming,
          delta = context.delta;

      incoming.forEach(function(connection) {
        var endPoint = connection.waypoints[connection.waypoints.length - 1];
        var newEndpoint = {
          x: endPoint.x + delta.x,
          y: endPoint.y + delta.y
        };

        var newWaypoints = [].concat(connection.waypoints.slice(0, -1), [ newEndpoint ]);

        modeling.updateWaypoints(connection, newWaypoints);
      });

      outgoing.forEach(function(connection) {
        var startpoint = connection.waypoints[0];
        var newStartpoint = {
          x: startpoint.x + delta.x,
          y: startpoint.y + delta.y
        };

        var newWaypoints = [].concat([ newStartpoint ], connection.waypoints.slice(1));

        modeling.updateWaypoints(connection, newWaypoints);
      });

    });

  }

  e$3(LayoutConnectionBehavior, CommandInterceptor);

  LayoutConnectionBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  /**
   * @typedef {import('../../../../core/Types').ConnectionLike} Connection
   * @typedef {import('../../../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../../../util/Types').Point} Point
   * @typedef {import('../../../../util/Types').Rect} Rect
   */

  /**
   * @param {Connection} connection
   * @param {Shape} shape
   * @param {Rect} oldBounds
   * @return {Point}
   */
  function getResizedSourceAnchor(connection, shape, oldBounds) {

    var waypoints = safeGetWaypoints(connection),
        waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
        oldAnchor = waypoints[0];

    // new anchor is the last waypoint enclosed be resized source
    if (waypointsInsideNewBounds.length) {
      return waypointsInsideNewBounds[ waypointsInsideNewBounds.length - 1 ];
    }

    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
  }


  function getResizedTargetAnchor(connection, shape, oldBounds) {

    var waypoints = safeGetWaypoints(connection),
        waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
        oldAnchor = waypoints[waypoints.length - 1];

    // new anchor is the first waypoint enclosed be resized target
    if (waypointsInsideNewBounds.length) {
      return waypointsInsideNewBounds[ 0 ];
    }

    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
  }


  function getMovedSourceAnchor(connection, source, moveDelta) {

    var waypoints = safeGetWaypoints(connection),
        oldBounds = subtract(source, moveDelta),
        oldAnchor = waypoints[ 0 ];

    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);
  }


  function getMovedTargetAnchor(connection, target, moveDelta) {

    var waypoints = safeGetWaypoints(connection),
        oldBounds = subtract(target, moveDelta),
        oldAnchor = waypoints[ waypoints.length - 1 ];

    return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);
  }


  // helpers //////////////////////

  function subtract(bounds, delta) {
    return {
      x: bounds.x - delta.x,
      y: bounds.y - delta.y,
      width: bounds.width,
      height: bounds.height
    };
  }


  /**
   * Return waypoints of given connection; throw if non exists (should not happen!!).
   *
   * @param {Connection} connection
   *
   * @return {Point[]}
   */
  function safeGetWaypoints(connection) {

    var waypoints = connection.waypoints;

    if (!waypoints.length) {
      throw new Error('connection#' + connection.id + ': no waypoints');
    }

    return waypoints;
  }

  function getWaypointsInsideBounds(waypoints, bounds) {
    var originalWaypoints = map$1(waypoints, getOriginal);

    return filter(originalWaypoints, function(waypoint) {
      return isInsideBounds(waypoint, bounds);
    });
  }

  /**
   * Checks if point is inside bounds, incl. edges.
   *
   * @param {Point} point
   * @param {Rect} bounds
   */
  function isInsideBounds(point, bounds) {
    return getOrientation(bounds, point, 1) === 'intersect';
  }

  function getOriginal(point) {
    return point.original || point;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * BPMN-specific message flow behavior.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function MessageFlowBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    this.postExecute('shape.replace', function(context) {
      var oldShape = context.oldShape,
          newShape = context.newShape;

      if (!isParticipantCollapse(oldShape, newShape)) {
        return;
      }

      var messageFlows = getMessageFlows(oldShape);

      messageFlows.incoming.forEach(function(incoming) {
        var anchor = getResizedTargetAnchor(incoming, newShape, oldShape);

        modeling.reconnectEnd(incoming, newShape, anchor);
      });

      messageFlows.outgoing.forEach(function(outgoing) {
        var anchor = getResizedSourceAnchor(outgoing, newShape, oldShape);

        modeling.reconnectStart(outgoing, newShape, anchor);
      });
    }, true);

  }

  MessageFlowBehavior.$inject = [ 'eventBus', 'modeling' ];

  e$3(MessageFlowBehavior, CommandInterceptor);

  // helpers //////////

  function isParticipantCollapse(oldShape, newShape) {
    return is$1(oldShape, 'bpmn:Participant')
      && isExpanded(oldShape)
      && is$1(newShape, 'bpmn:Participant')
      && !isExpanded(newShape);
  }

  function getMessageFlows(parent) {
    var elements = selfAndAllChildren([ parent ], false);

    var incoming = [],
        outgoing = [];

    elements.forEach(function(element) {
      if (element === parent) {
        return;
      }

      element.incoming.forEach(function(connection) {
        if (is$1(connection, 'bpmn:MessageFlow')) {
          incoming.push(connection);
        }
      });

      element.outgoing.forEach(function(connection) {
        if (is$1(connection, 'bpmn:MessageFlow')) {
          outgoing.push(connection);
        }
      });
    }, []);

    return {
      incoming: incoming,
      outgoing: outgoing
    };
  }

  const NON_INTERRUPTING_EVENT_TYPES = [
    'bpmn:MessageEventDefinition',
    'bpmn:TimerEventDefinition',
    'bpmn:EscalationEventDefinition',
    'bpmn:ConditionalEventDefinition',
    'bpmn:SignalEventDefinition'
  ];

  function canBeNonInterrupting(shape) {

    const businessObject = getBusinessObject(shape);

    if (
      !is$1(businessObject, 'bpmn:BoundaryEvent') &&
      !(is$1(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent))
    ) {
      return false;
    }

    const eventDefinitions = businessObject.get('eventDefinitions');
    if (!eventDefinitions || !eventDefinitions.length) {
      return false;
    }

    return NON_INTERRUPTING_EVENT_TYPES.some(event => is$1(eventDefinitions[0], event));
  }

  function getInterruptingProperty(shape) {
    return is$1(shape, 'bpmn:BoundaryEvent') ? 'cancelActivity' : 'isInterrupting';
  }

  function NonInterruptingBehavior(injector, modeling) {
    injector.invoke(CommandInterceptor, this);

    this.postExecuted('shape.replace', function(event) {
      const oldShape = event.context.oldShape;
      const newShape = event.context.newShape;
      const hints = event.context.hints;

      if (!canBeNonInterrupting(newShape)) {
        return;
      }

      const property = getInterruptingProperty(newShape);
      const isExplicitChange = hints.targetElement && hints.targetElement[property] !== undefined;

      if (isExplicitChange) {
        return;
      }

      const isOldInterrupting = getBusinessObject(oldShape).get(property);
      const isNewInterruptingDefault = getBusinessObject(newShape).get(property);

      if (isOldInterrupting === isNewInterruptingDefault) {
        return;
      }

      modeling.updateProperties(newShape, {
        [property]: isOldInterrupting
      });
    });
  }

  NonInterruptingBehavior.$inject = [ 'injector', 'modeling' ];

  e$3(NonInterruptingBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * BPMN specific behavior ensuring that bpmndi:Label's dc:Bounds are removed
   * when shape is resized.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function RemoveEmbeddedLabelBoundsBehavior(eventBus, modeling) {
    CommandInterceptor.call(this, eventBus);

    this.preExecute('shape.resize', function(context) {
      var shape = context.shape;

      var di = getDi(shape),
          label = di && di.get('label'),
          bounds = label && label.get('bounds');

      if (bounds) {
        modeling.updateModdleProperties(shape, label, {
          bounds: undefined
        });
      }
    }, true);
  }

  e$3(RemoveEmbeddedLabelBoundsBehavior, CommandInterceptor);

  RemoveEmbeddedLabelBoundsBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../rules/BpmnRules').default} BpmnRules
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * @param {EventBus} eventBus
   * @param {BpmnRules} bpmnRules
   * @param {Modeling} modeling
   */
  function RemoveElementBehavior(eventBus, bpmnRules, modeling) {

    CommandInterceptor.call(this, eventBus);

    /**
     * Combine sequence flows when deleting an element
     * if there is one incoming and one outgoing
     * sequence flow
     */
    this.preExecute('shape.delete', function(e) {

      var shape = e.context.shape;

      // only handle [a] -> [shape] -> [b] patterns
      if (shape.incoming.length !== 1 || shape.outgoing.length !== 1) {
        return;
      }

      var inConnection = shape.incoming[0],
          outConnection = shape.outgoing[0];

      // only handle sequence flows
      if (!is$1(inConnection, 'bpmn:SequenceFlow') || !is$1(outConnection, 'bpmn:SequenceFlow')) {
        return;
      }

      if (bpmnRules.canConnect(inConnection.source, outConnection.target, inConnection)) {

        // compute new, combined waypoints
        var newWaypoints = getNewWaypoints(inConnection.waypoints, outConnection.waypoints);

        modeling.reconnectEnd(inConnection, outConnection.target, newWaypoints);
      }
    });

  }

  e$3(RemoveElementBehavior, CommandInterceptor);

  RemoveElementBehavior.$inject = [
    'eventBus',
    'bpmnRules',
    'modeling'
  ];


  // helpers //////////////////////

  function getDocking$1(point) {
    return point.original || point;
  }


  function getNewWaypoints(inWaypoints, outWaypoints) {

    var intersection = lineIntersect(
      getDocking$1(inWaypoints[inWaypoints.length - 2]),
      getDocking$1(inWaypoints[inWaypoints.length - 1]),
      getDocking$1(outWaypoints[1]),
      getDocking$1(outWaypoints[0]));

    if (intersection) {
      return [].concat(
        inWaypoints.slice(0, inWaypoints.length - 1),
        [ intersection ],
        outWaypoints.slice(1));
    } else {
      return [
        getDocking$1(inWaypoints[0]),
        getDocking$1(outWaypoints[outWaypoints.length - 1])
      ];
    }
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * BPMN specific remove behavior.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function RemoveParticipantBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);


    /**
     * morph collaboration diagram into process diagram
     * after the last participant has been removed
     */

    this.preExecute('shape.delete', function(context) {

      var shape = context.shape,
          parent = shape.parent;

      // activate the behavior if the shape to be removed
      // is a participant
      if (is$1(shape, 'bpmn:Participant')) {
        context.collaborationRoot = parent;
      }
    }, true);

    this.postExecute('shape.delete', function(context) {

      var collaborationRoot = context.collaborationRoot;

      if (collaborationRoot && !collaborationRoot.businessObject.participants.length) {

        // replace empty collaboration with process diagram
        var process = modeling.makeProcess();

        // move all root elements from collaboration to process
        var children = collaborationRoot.children.slice();

        modeling.moveElements(children, { x: 0, y: 0 }, process);
      }
    }, true);

  }

  RemoveParticipantBehavior.$inject = [ 'eventBus', 'modeling' ];

  e$3(RemoveParticipantBehavior, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../../rules/BpmnRules').default} BpmnRules
   * @typedef {import('didi').Injector} Injector
   */

  /**
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {BpmnRules} bpmnRules
   * @param {Injector} injector
   */
  function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {

    CommandInterceptor.call(this, eventBus);

    var dragging = injector.get('dragging', false);

    function fixConnection(connection) {

      var source = connection.source,
          target = connection.target,
          parent = connection.parent;

      // do not do anything if connection
      // is already deleted (may happen due to other
      // behaviors plugged-in before)
      if (!parent) {
        return;
      }

      var replacementType,
          remove;

      /**
       * Check if incoming or outgoing connections
       * can stay or could be substituted with an
       * appropriate replacement.
       *
       * This holds true for SequenceFlow <> MessageFlow.
       */

      if (is$1(connection, 'bpmn:SequenceFlow')) {
        if (!bpmnRules.canConnectSequenceFlow(source, target)) {
          remove = true;
        }

        if (bpmnRules.canConnectMessageFlow(source, target)) {
          replacementType = 'bpmn:MessageFlow';
        }
      }

      // transform message flows into sequence flows, if possible

      if (is$1(connection, 'bpmn:MessageFlow')) {

        if (!bpmnRules.canConnectMessageFlow(source, target)) {
          remove = true;
        }

        if (bpmnRules.canConnectSequenceFlow(source, target)) {
          replacementType = 'bpmn:SequenceFlow';
        }
      }

      // remove invalid connection,
      // unless it has been removed already
      if (remove) {
        modeling.removeConnection(connection);
      }

      // replace SequenceFlow <> MessageFlow

      if (replacementType) {
        modeling.connect(source, target, {
          type: replacementType,
          waypoints: connection.waypoints.slice()
        });
      }
    }

    function replaceReconnectedConnection(event) {

      var context = event.context,
          connection = context.connection,
          source = context.newSource || connection.source,
          target = context.newTarget || connection.target,
          allowed,
          replacement;

      allowed = bpmnRules.canConnect(source, target);

      if (!allowed || allowed.type === connection.type) {
        return;
      }

      replacement = modeling.connect(source, target, {
        type: allowed.type,
        associationDirection: allowed.associationDirection,
        waypoints: connection.waypoints.slice()
      });

      // remove old connection unless it's already removed
      if (connection.parent) {
        modeling.removeConnection(connection);
      }

      // replace connection in context to reconnect end/start
      context.connection = replacement;

      if (dragging) {
        cleanDraggingSelection(connection, replacement);
      }
    }

    // monkey-patch selection saved in dragging in order to re-select it when operation is finished
    function cleanDraggingSelection(oldConnection, newConnection) {
      var context = dragging.context(),
          previousSelection = context && context.payload.previousSelection,
          index;

      // do nothing if not dragging or no selection was present
      if (!previousSelection || !previousSelection.length) {
        return;
      }

      index = previousSelection.indexOf(oldConnection);

      if (index === -1) {
        return;
      }

      previousSelection.splice(index, 1, newConnection);
    }

    // lifecycle hooks

    this.postExecuted('elements.move', function(context) {

      var closure = context.closure,
          allConnections = closure.allConnections;

      forEach$1(allConnections, fixConnection);
    }, true);

    this.preExecute('connection.reconnect', replaceReconnectedConnection);

    this.postExecuted('element.updateProperties', function(event) {
      var context = event.context,
          properties = context.properties,
          element = context.element,
          businessObject = element.businessObject,
          connection;

      // remove condition on change to default
      if (properties.default) {
        connection = find$1(
          element.outgoing,
          matchPattern({ id: element.businessObject.default.id })
        );

        if (connection) {
          modeling.updateProperties(connection, { conditionExpression: undefined });
        }
      }

      // remove default from source on change to conditional
      if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {
        modeling.updateProperties(element.source, { default: undefined });
      }
    });
  }

  e$3(ReplaceConnectionBehavior, CommandInterceptor);

  ReplaceConnectionBehavior.$inject = [
    'eventBus',
    'modeling',
    'bpmnRules',
    'injector'
  ];

  /**
   * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
   * @typedef {import('../../rules/BpmnRules').default} BpmnRules
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('diagram-js/lib/features/selection/Selection').default} Selection
   */

  /**
   * BPMN-specific replace behavior.
   *
   * @param {BpmnReplace} bpmnReplace
   * @param {BpmnRules} bpmnRules
   * @param {ElementRegistry} elementRegistry
   * @param {Injector} injector
   * @param {Modeling} modeling
   * @param {Selection} selection
   */
  function ReplaceElementBehaviour(
      bpmnReplace,
      bpmnRules,
      elementRegistry,
      injector,
      modeling,
      selection
  ) {
    injector.invoke(CommandInterceptor, this);

    this._bpmnReplace = bpmnReplace;
    this._elementRegistry = elementRegistry;
    this._selection = selection;

    // replace elements on create, e.g. during copy-paste
    this.postExecuted([ 'elements.create' ], 500, function(event) {
      var context = event.context,
          target = context.parent,
          elements = context.elements;

      var elementReplacements = reduce(elements, function(replacements, element) {
        var canReplace = bpmnRules.canReplace([ element ], element.host || element.parent || target);

        return canReplace ? replacements.concat(canReplace.replacements) : replacements;
      }, []);

      if (elementReplacements.length) {
        this._replaceElements(elements, elementReplacements);
      }
    }, this);

    // replace elements on move
    this.postExecuted([ 'elements.move' ], 500, function(event) {
      var context = event.context,
          target = context.newParent,
          newHost = context.newHost,
          elements = [];

      forEach$1(context.closure.topLevel, function(topLevelElements) {
        if (isEventSubProcess(topLevelElements)) {
          elements = elements.concat(topLevelElements.children);
        } else {
          elements = elements.concat(topLevelElements);
        }
      });

      // set target to host if attaching
      if (elements.length === 1 && newHost) {
        target = newHost;
      }

      var canReplace = bpmnRules.canReplace(elements, target);

      if (canReplace) {
        this._replaceElements(elements, canReplace.replacements, newHost);
      }
    }, this);

    // update attachments on host replace
    this.postExecute([ 'shape.replace' ], 1500, function(e) {
      var context = e.context,
          oldShape = context.oldShape,
          newShape = context.newShape,
          attachers = oldShape.attachers,
          canReplace;

      if (attachers && attachers.length) {
        canReplace = bpmnRules.canReplace(attachers, newShape);

        this._replaceElements(attachers, canReplace.replacements);
      }

    }, this);

    // keep ID on shape replace
    this.postExecuted([ 'shape.replace' ], 1500, function(e) {
      var context = e.context,
          oldShape = context.oldShape,
          newShape = context.newShape;

      modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);
      modeling.updateProperties(newShape, { id: oldShape.id });
    });
  }

  e$3(ReplaceElementBehaviour, CommandInterceptor);

  ReplaceElementBehaviour.prototype._replaceElements = function(elements, newElements) {
    var elementRegistry = this._elementRegistry,
        bpmnReplace = this._bpmnReplace,
        selection = this._selection;

    forEach$1(newElements, function(replacement) {
      var newElement = {
        type: replacement.newElementType
      };

      var oldElement = elementRegistry.get(replacement.oldElementId);

      var idx = elements.indexOf(oldElement);

      elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });
    });

    if (newElements) {
      selection.select(elements);
    }
  };

  ReplaceElementBehaviour.$inject = [
    'bpmnReplace',
    'bpmnRules',
    'elementRegistry',
    'injector',
    'modeling',
    'selection'
  ];

  var HIGH_PRIORITY$e = 1500;

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Dimensions} Dimensions
   * @typedef {import('diagram-js/lib/util/Types').Direction} Direction
   * @typedef {import('diagram-js/lib/util/Types').RectTRBL} RectTRBL
   */

  /**
   * @type {Dimensions}
   */
  var GROUP_MIN_DIMENSIONS = { width: 140, height: 120 };

  /**
   * @type {Dimensions}
   */
  var LANE_MIN_DIMENSIONS = { width: 300, height: 60 };

  /**
   * @type {Dimensions}
   */
  var VERTICAL_LANE_MIN_DIMENSIONS = { width: 60, height: 300 };

  /**
   * @type {Dimensions}
   */
  var PARTICIPANT_MIN_DIMENSIONS = { width: 300, height: 150 };

  /**
   * @type {Dimensions}
   */
  var VERTICAL_PARTICIPANT_MIN_DIMENSIONS = { width: 150, height: 300 };

  /**
   * @type {Dimensions}
   */
  var SUB_PROCESS_MIN_DIMENSIONS = { width: 140, height: 120 };

  /**
   * @type {Dimensions}
   */
  var TEXT_ANNOTATION_MIN_DIMENSIONS = { width: 50, height: 30 };

  /**
   * Set minimum bounds/resize constraints on resize.
   *
   * @param {EventBus} eventBus
   */
  function ResizeBehavior$1(eventBus) {
    eventBus.on('resize.start', HIGH_PRIORITY$e, function(event) {
      var context = event.context,
          shape = context.shape,
          direction = context.direction,
          balanced = context.balanced;

      if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {
        context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);
      }

      if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
        context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
      }

      if (is$1(shape, 'bpmn:TextAnnotation')) {
        context.minDimensions = TEXT_ANNOTATION_MIN_DIMENSIONS;
      }
    });
  }

  ResizeBehavior$1.$inject = [ 'eventBus' ];


  var abs$2 = Math.abs,
      min$1 = Math.min,
      max$3 = Math.max;


  function addToTrbl(trbl, attr, value, choice) {
    var current = trbl[attr];

    // make sure to set the value if it does not exist
    // or apply the correct value by comparing against
    // choice(value, currentValue)
    trbl[attr] = current === undefined ? value : choice(value, current);
  }

  function addMin(trbl, attr, value) {
    return addToTrbl(trbl, attr, value, min$1);
  }

  function addMax(trbl, attr, value) {
    return addToTrbl(trbl, attr, value, max$3);
  }

  var LANE_PADDING = { top: 20, left: 50, right: 20, bottom: 20 },
      VERTICAL_LANE_PADDING = { top: 50, left: 20, right: 20, bottom: 20 };

  /**
   * @param {Shape} laneShape
   * @param {Direction} resizeDirection
   * @param {boolean} [balanced=false]
   *
   * @return { {
   *   min: RectTRBL;
   *   max: RectTRBL;
   * } }
   */
  function getParticipantResizeConstraints(laneShape, resizeDirection, balanced) {
    var lanesRoot = getLanesRoot(laneShape);

    var isFirst = true,
        isLast = true;

    var allLanes = collectLanes(lanesRoot, [ lanesRoot ]);

    var laneTrbl = asTRBL(laneShape);

    var maxTrbl = {},
        minTrbl = {};

    var isHorizontalLane = isHorizontal$3(laneShape);

    var minDimensions = isHorizontalLane ? LANE_MIN_DIMENSIONS : VERTICAL_LANE_MIN_DIMENSIONS;

    if (/n/.test(resizeDirection)) {
      minTrbl.top = laneTrbl.bottom - minDimensions.height;
    } else if (/e/.test(resizeDirection)) {
      minTrbl.right = laneTrbl.left + minDimensions.width;
    } else if (/s/.test(resizeDirection)) {
      minTrbl.bottom = laneTrbl.top + minDimensions.height;
    } else if (/w/.test(resizeDirection)) {
      minTrbl.left = laneTrbl.right - minDimensions.width;
    }

    // min/max size based on related lanes
    allLanes.forEach(function(other) {

      var otherTrbl = asTRBL(other);

      // lane flags
      if (isHorizontalLane) {
        if (otherTrbl.top < (laneTrbl.top - 10)) {
          isFirst = false;
        }
        if (otherTrbl.bottom > (laneTrbl.bottom + 10)) {
          isLast = false;
        }
      }
      else {
        if (otherTrbl.left < (laneTrbl.left - 10)) {
          isFirst = false;
        }
        if (otherTrbl.right > (laneTrbl.right + 10)) {
          isLast = false;
        }
      }

      if (/n/.test(resizeDirection)) {

        // max top size (based on next element)
        if (balanced && abs$2(laneTrbl.top - otherTrbl.bottom) < 10) {
          addMax(maxTrbl, 'top', otherTrbl.top + minDimensions.height);
        }

        // min top size (based on self or nested element)
        if (abs$2(laneTrbl.top - otherTrbl.top) < 5) {
          addMin(minTrbl, 'top', otherTrbl.bottom - minDimensions.height);
        }
      }

      if (/e/.test(resizeDirection)) {

        // max right size (based on previous element)
        if (balanced && abs$2(laneTrbl.right - otherTrbl.left) < 10) {
          addMin(maxTrbl, 'right', otherTrbl.right - minDimensions.width);
        }

        // min right size (based on self or nested element)
        if (abs$2(laneTrbl.right - otherTrbl.right) < 5) {
          addMax(minTrbl, 'right', otherTrbl.left + minDimensions.width);
        }
      }

      if (/s/.test(resizeDirection)) {

        // max bottom size (based on previous element)
        if (balanced && abs$2(laneTrbl.bottom - otherTrbl.top) < 10) {
          addMin(maxTrbl, 'bottom', otherTrbl.bottom - minDimensions.height);
        }

        // min bottom size (based on self or nested element)
        if (abs$2(laneTrbl.bottom - otherTrbl.bottom) < 5) {
          addMax(minTrbl, 'bottom', otherTrbl.top + minDimensions.height);
        }
      }

      if (/w/.test(resizeDirection)) {

        // max left size (based on next element)
        if (balanced && abs$2(laneTrbl.left - otherTrbl.right) < 10) {
          addMax(maxTrbl, 'left', otherTrbl.left + minDimensions.width);
        }

        // min left size (based on self or nested element)
        if (abs$2(laneTrbl.left - otherTrbl.left) < 5) {
          addMin(minTrbl, 'left', otherTrbl.right - minDimensions.width);
        }
      }
    });

    // max top/bottom/left/right size based on flow nodes
    var flowElements = lanesRoot.children.filter(function(s) {
      return !s.hidden && !s.waypoints && (is$1(s, 'bpmn:FlowElement') || is$1(s, 'bpmn:Artifact'));
    });

    var padding = isHorizontalLane ? LANE_PADDING : VERTICAL_LANE_PADDING;

    flowElements.forEach(function(flowElement) {

      var flowElementTrbl = asTRBL(flowElement);

      // vertical lane will resize from top with respect to flow element irrespective of first or last lane
      if (/n/.test(resizeDirection) && (!isHorizontalLane || isFirst)) {
        addMin(minTrbl, 'top', flowElementTrbl.top - padding.top);
      }

      // horizonal lane will resize from right with respect to flow element irrespective of first or last lane
      if (/e/.test(resizeDirection) && (isHorizontalLane || isLast)) {
        addMax(minTrbl, 'right', flowElementTrbl.right + padding.right);
      }

      // vertical lane will resize from bottom with respect to flow element irrespective of first or last lane
      if (/s/.test(resizeDirection) && (!isHorizontalLane || isLast)) {
        addMax(minTrbl, 'bottom', flowElementTrbl.bottom + padding.bottom);
      }

      // horizonal lane will resize from left with respect to flow element irrespective of first or last lane
      if (/w/.test(resizeDirection) && (isHorizontalLane || isFirst)) {
        addMin(minTrbl, 'left', flowElementTrbl.left - padding.left);
      }
    });
    return {
      min: minTrbl,
      max: maxTrbl
    };
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  var SLIGHTLY_HIGHER_PRIORITY = 1001;


  /**
   * Invoke {@link Modeling#resizeLane} instead of {@link Modeling#resizeShape}
   * when resizing a lane or participant shape.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function ResizeLaneBehavior(eventBus, modeling) {

    eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function(event) {
      var context = event.context,
          shape = context.shape;

      if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {

        // should we resize the opposite lane(s) in
        // order to compensate for the resize operation?
        context.balanced = !hasPrimaryModifier(event);
      }
    });

    /**
     * Intercept resize end and call resize lane function instead.
     */
    eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function(event) {
      var context = event.context,
          shape = context.shape,
          canExecute = context.canExecute,
          newBounds = context.newBounds;

      if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {

        if (canExecute) {

          // ensure we have actual pixel values for new bounds
          // (important when zoom level was > 1 during move)
          newBounds = roundBounds(newBounds);

          // perform the actual resize
          modeling.resizeLane(shape, newBounds, context.balanced);
        }

        // stop propagation
        return false;
      }
    });
  }

  ResizeLaneBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  /**
   * @typedef {import('../../../Modeler').default} Modeler
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../../copy-paste/ModdleCopy').default} ModdleCopy
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   */

  var LOW_PRIORITY$h = 500;


  /**
   * Add referenced root elements (error, escalation, message, signal) if they don't exist.
   * Copy referenced root elements on copy & paste.
   *
   * @param {Modeler} bpmnjs
   * @param {EventBus} eventBus
   * @param {Injector} injector
   * @param {ModdleCopy} moddleCopy
   * @param {BpmnFactory} bpmnFactory
   */
  function RootElementReferenceBehavior(
      bpmnjs, eventBus, injector, moddleCopy, bpmnFactory
  ) {
    injector.invoke(CommandInterceptor, this);

    function canHaveRootElementReference(element) {
      return isAny(element, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ]) ||
        hasAnyEventDefinition(element, [
          'bpmn:ErrorEventDefinition',
          'bpmn:EscalationEventDefinition',
          'bpmn:MessageEventDefinition',
          'bpmn:SignalEventDefinition'
        ]);
    }

    function hasRootElement(rootElement) {
      var definitions = bpmnjs.getDefinitions(),
          rootElements = definitions.get('rootElements');

      return !!find$1(rootElements, matchPattern({ id: rootElement.id }));
    }

    function getRootElementReferencePropertyName(eventDefinition) {
      if (is$1(eventDefinition, 'bpmn:ErrorEventDefinition')) {
        return 'errorRef';
      } else if (is$1(eventDefinition, 'bpmn:EscalationEventDefinition')) {
        return 'escalationRef';
      } else if (is$1(eventDefinition, 'bpmn:MessageEventDefinition')) {
        return 'messageRef';
      } else if (is$1(eventDefinition, 'bpmn:SignalEventDefinition')) {
        return 'signalRef';
      }
    }

    function getRootElement(businessObject) {
      if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
        return businessObject.get('messageRef');
      }

      var eventDefinitions = businessObject.get('eventDefinitions'),
          eventDefinition = eventDefinitions[ 0 ];

      return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));
    }

    function setRootElement(businessObject, rootElement) {
      if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
        return businessObject.set('messageRef', rootElement);
      }

      var eventDefinitions = businessObject.get('eventDefinitions'),
          eventDefinition = eventDefinitions[ 0 ];

      return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);
    }

    // create shape
    this.executed([
      'shape.create',
      'element.updateProperties',
      'element.updateModdleProperties'
    ], function(context) {
      var shape = context.shape || context.element;

      if (!canHaveRootElementReference(shape)) {
        return;
      }

      var businessObject = getBusinessObject(shape),
          rootElement = getRootElement(businessObject),
          rootElements;

      if (rootElement && !hasRootElement(rootElement)) {
        rootElements = bpmnjs.getDefinitions().get('rootElements');

        // add root element
        add$1(rootElements, rootElement);

        context.addedRootElement = rootElement;
      }
    }, true);

    this.reverted([
      'shape.create',
      'element.updateProperties',
      'element.updateModdleProperties'
    ], function(context) {
      var addedRootElement = context.addedRootElement;

      if (!addedRootElement) {
        return;
      }

      var rootElements = bpmnjs.getDefinitions().get('rootElements');

      // remove root element
      remove$1(rootElements, addedRootElement);
    }, true);

    eventBus.on('copyPaste.copyElement', function(context) {
      var descriptor = context.descriptor,
          element = context.element;

      if (element.labelTarget || !canHaveRootElementReference(element)) {
        return;
      }

      var businessObject = getBusinessObject(element),
          rootElement = getRootElement(businessObject);

      if (rootElement) {

        // TODO(nikku): clone on copy
        descriptor.referencedRootElement = rootElement;
      }
    });

    eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$h, function(context) {
      var descriptor = context.descriptor,
          businessObject = descriptor.businessObject,
          referencedRootElement = descriptor.referencedRootElement;

      if (!referencedRootElement) {
        return;
      }

      if (!hasRootElement(referencedRootElement)) {
        referencedRootElement = moddleCopy.copyElement(
          referencedRootElement,
          bpmnFactory.create(referencedRootElement.$type)
        );
      }

      setRootElement(businessObject, referencedRootElement);

      delete descriptor.referencedRootElement;
    });
  }

  RootElementReferenceBehavior.$inject = [
    'bpmnjs',
    'eventBus',
    'injector',
    'moddleCopy',
    'bpmnFactory'
  ];

  e$3(RootElementReferenceBehavior, CommandInterceptor);

  // helpers //////////

  function hasAnyEventDefinition(element, types) {
    if (!isArray$3(types)) {
      types = [ types ];
    }

    return some(types, function(type) {
      return hasEventDefinition$2(element, type);
    });
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('../../../model/Types').Shape} Shape
   */

  var max$2 = Math.max;

  /**
   * @param {EventBus} eventBus
   */
  function SpaceToolBehavior$1(eventBus) {
    eventBus.on('spaceTool.getMinDimensions', function(context) {
      var shapes = context.shapes,
          axis = context.axis,
          start = context.start,
          minDimensions = {};

      forEach$1(shapes, function(shape) {
        var id = shape.id;

        if (is$1(shape, 'bpmn:Participant')) {
          minDimensions[ id ] = getParticipantMinDimensions(shape, axis, start);
        }

        if (is$1(shape, 'bpmn:Lane')) {
          minDimensions[ id ] = isHorizontal$3(shape) ? LANE_MIN_DIMENSIONS : VERTICAL_LANE_MIN_DIMENSIONS;
        }

        if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
          minDimensions[ id ] = SUB_PROCESS_MIN_DIMENSIONS;
        }

        if (is$1(shape, 'bpmn:TextAnnotation')) {
          minDimensions[ id ] = TEXT_ANNOTATION_MIN_DIMENSIONS;
        }

        if (is$1(shape, 'bpmn:Group')) {
          minDimensions[ id ] = GROUP_MIN_DIMENSIONS;
        }
      });

      return minDimensions;
    });
  }

  SpaceToolBehavior$1.$inject = [ 'eventBus' ];


  // helpers //////////
  function isHorizontalAxis(axis) {
    return axis === 'x';
  }

  /**
   * Get minimum dimensions for participant taking lanes into account.
   *
   * @param {Shape} participant
   * @param {Axis} axis
   * @param {number} start
   *
   * @return {number}
   */
  function getParticipantMinDimensions(participant, axis, start) {
    var isHorizontalLane = isHorizontal$3(participant);

    if (!hasChildLanes(participant)) {
      return isHorizontalLane ? PARTICIPANT_MIN_DIMENSIONS : VERTICAL_PARTICIPANT_MIN_DIMENSIONS;
    }

    var isHorizontalResize = isHorizontalAxis(axis);
    var minDimensions = {};

    if (isHorizontalResize) {
      if (isHorizontalLane) {
        minDimensions = PARTICIPANT_MIN_DIMENSIONS;
      } else {
        minDimensions = {
          width: getParticipantMinWidth(participant, start, isHorizontalResize),
          height: VERTICAL_PARTICIPANT_MIN_DIMENSIONS.height
        };
      }

    } else {
      if (isHorizontalLane) {
        minDimensions = {
          width: PARTICIPANT_MIN_DIMENSIONS.width,
          height: getParticipantMinHeight(participant, start, isHorizontalResize)
        };
      } else {
        minDimensions = VERTICAL_PARTICIPANT_MIN_DIMENSIONS;
      }
    }

    return minDimensions;
  }

  /**
   * Get minimum height for participant taking lanes into account.
   *
   * @param {Shape} participant
   * @param {number} start
   * @param {boolean} isHorizontalResize
   *
   * @return {number}
   */
  function getParticipantMinHeight(participant, start, isHorizontalResize) {
    var lanesMinHeight;
    lanesMinHeight = getLanesMinHeight(participant, start, isHorizontalResize);
    return max$2(PARTICIPANT_MIN_DIMENSIONS.height, lanesMinHeight);
  }

  /**
   * Get minimum width for participant taking lanes into account.
   *
   * @param {Shape} participant
   * @param {number} start
   * @param {boolean} isHorizontalResize
   *
   * @return {number}
   */
  function getParticipantMinWidth(participant, start, isHorizontalResize) {
    var lanesMinWidth;
    lanesMinWidth = getLanesMinWidth(participant, start, isHorizontalResize);
    return max$2(VERTICAL_PARTICIPANT_MIN_DIMENSIONS.width, lanesMinWidth);
  }

  function hasChildLanes(element) {
    return !!getChildLanes(element).length;
  }

  function getLanesMinHeight(participant, resizeStart, isHorizontalResize) {
    var lanes = getChildLanes(participant),
        resizedLane;

    // find the nested lane which is currently resized
    resizedLane = findResizedLane(lanes, resizeStart, isHorizontalResize);

    // resized lane cannot shrink below the minimum height
    // but remaining lanes' dimensions are kept intact
    return participant.height - resizedLane.height + LANE_MIN_DIMENSIONS.height;
  }

  function getLanesMinWidth(participant, resizeStart, isHorizontalResize) {
    var lanes = getChildLanes(participant),
        resizedLane;

    // find the nested lane which is currently resized
    resizedLane = findResizedLane(lanes, resizeStart, isHorizontalResize);

    // resized lane cannot shrink below the minimum width
    // but remaining lanes' dimensions are kept intact
    return participant.width - resizedLane.width + VERTICAL_LANE_MIN_DIMENSIONS.width;
  }

  /**
   * Find nested lane which is currently resized.
   *
   * @param {Shape[]} lanes
   * @param {number} resizeStart
   * @param {boolean} isHorizontalResize
   *
   * @return {Shape}
   */
  function findResizedLane(lanes, resizeStart, isHorizontalResize) {
    var i, lane, childLanes;

    for (i = 0; i < lanes.length; i++) {
      lane = lanes[i];

      // resizing current lane or a lane nested
      if (!isHorizontalResize && resizeStart >= lane.y && resizeStart <= lane.y + lane.height ||
          isHorizontalResize && resizeStart >= lane.x && resizeStart <= lane.x + lane.width) {

        childLanes = getChildLanes(lane);

        // a nested lane is resized
        if (childLanes.length) {
          return findResizedLane(childLanes, resizeStart, isHorizontalResize);
        }

        // current lane is the resized one
        return lane;
      }
    }
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../ElementFactory').default} ElementFactory
   * @typedef {import('../BpmnFactory').default} BpmnFactory
   * @typedef {import('../../../Modeler').default} Modeler
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Root} Root
   * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
   */

  var LOW_PRIORITY$g = 400;
  var HIGH_PRIORITY$d = 600;

  var DEFAULT_POSITION = {
    x: 180,
    y: 160
  };


  /**
   * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.
   *
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {ElementFactory} elementFactory
   * @param {BpmnFactory} bpmnFactory
   * @param {Modeler} bpmnjs
   * @param {ElementRegistry} elementRegistry
   */
  function SubProcessPlaneBehavior(
      canvas, eventBus, modeling,
      elementFactory, bpmnFactory, bpmnjs, elementRegistry) {

    CommandInterceptor.call(this, eventBus);

    this._canvas = canvas;
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._elementFactory = elementFactory;
    this._bpmnFactory = bpmnFactory;
    this._bpmnjs = bpmnjs;
    this._elementRegistry = elementRegistry;

    var self = this;

    function isCollapsedSubProcess(element) {
      return is$1(element, 'bpmn:SubProcess') && !isExpanded(element);
    }

    function createRoot(context) {
      var shape = context.shape,
          rootElement = context.newRootElement;

      var businessObject = getBusinessObject(shape);

      rootElement = self._addDiagram(rootElement || businessObject);

      context.newRootElement = canvas.addRootElement(rootElement);
    }

    function removeRoot(context) {
      var shape = context.shape;

      var businessObject = getBusinessObject(shape);
      self._removeDiagram(businessObject);

      var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));

      canvas.removeRootElement(rootElement);
    }

    // add plane elements for newly created sub-processes
    // this ensures we can actually drill down into the element
    this.executed('shape.create', function(context) {
      var shape = context.shape;
      if (!isCollapsedSubProcess(shape)) {
        return;
      }

      createRoot(context);
    }, true);


    this.postExecuted('shape.create', function(context) {
      var shape = context.shape,
          rootElement = context.newRootElement;

      if (!rootElement || !shape.children) {
        return;
      }

      self._showRecursively(shape.children);

      self._moveChildrenToShape(shape, rootElement);
    }, true);


    this.reverted('shape.create', function(context) {
      var shape = context.shape;
      if (!isCollapsedSubProcess(shape)) {
        return;
      }

      removeRoot(context);
    }, true);


    this.preExecuted('shape.delete', function(context) {
      var shape = context.shape;
      if (!isCollapsedSubProcess(shape)) {
        return;
      }

      var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));

      if (!attachedRoot) {
        return;
      }

      modeling.removeElements(attachedRoot.children.slice());
    }, true);


    this.executed('shape.delete', function(context) {
      var shape = context.shape;
      if (!isCollapsedSubProcess(shape)) {
        return;
      }
      removeRoot(context);
    }, true);


    this.reverted('shape.delete', function(context) {
      var shape = context.shape;
      if (!isCollapsedSubProcess(shape)) {
        return;
      }

      createRoot(context);
    }, true);


    this.preExecuted('shape.replace', function(context) {
      var oldShape = context.oldShape;
      var newShape = context.newShape;

      if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {
        return;
      }

      // old plane could have content,
      // we remove it so it is not recursively deleted from 'shape.delete'
      context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));
    }, true);


    this.postExecuted('shape.replace', function(context) {
      var newShape = context.newShape,
          source = context.oldRoot,
          target = canvas.findRoot(getPlaneIdFromShape(newShape));

      if (!source || !target) {
        return;
      }
      var elements = source.children;

      modeling.moveElements(elements, { x: 0, y: 0 }, target);
    }, true);


    // rename primary elements when the secondary element changes
    // this ensures rootElement.id = element.id + '_plane'
    this.executed('element.updateProperties', function(context) {
      var shape = context.element;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      var properties = context.properties;
      var oldProperties = context.oldProperties;

      var oldId = oldProperties.id,
          newId = properties.id;

      if (oldId === newId) {
        return;
      }

      if (isPlane$1(shape)) {
        elementRegistry.updateId(shape, toPlaneId(newId));
        elementRegistry.updateId(oldId, newId);

        return;
      }

      var planeElement = elementRegistry.get(toPlaneId(oldId));

      if (!planeElement) {
        return;
      }

      elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));
    }, true);


    this.reverted('element.updateProperties', function(context) {
      var shape = context.element;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      var properties = context.properties;
      var oldProperties = context.oldProperties;

      var oldId = oldProperties.id,
          newId = properties.id;

      if (oldId === newId) {
        return;
      }

      if (isPlane$1(shape)) {
        elementRegistry.updateId(shape, toPlaneId(oldId));
        elementRegistry.updateId(newId, oldId);

        return;
      }

      var planeElement = elementRegistry.get(toPlaneId(newId));

      if (!planeElement) {
        return;
      }

      elementRegistry.updateId(planeElement, toPlaneId(oldId));
    }, true);

    // re-throw element.changed to re-render primary shape if associated plane has
    // changed (e.g. bpmn:name property has changed)
    eventBus.on('element.changed', function(context) {
      var element = context.element;

      if (!isPlane$1(element)) {
        return;
      }

      var plane = element;

      var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane));

      // do not re-throw if no associated primary shape (e.g. bpmn:Process)
      if (!primaryShape || primaryShape === plane) {
        return;
      }

      eventBus.fire('element.changed', { element: primaryShape });
    });


    // create/remove plane for the subprocess
    this.executed('shape.toggleCollapse', LOW_PRIORITY$g, function(context) {
      var shape = context.shape;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      if (!isExpanded(shape)) {
        createRoot(context);
        self._showRecursively(shape.children);
      } else {
        removeRoot(context);
      }

    }, true);


    // create/remove plane for the subprocess
    this.reverted('shape.toggleCollapse', LOW_PRIORITY$g, function(context) {
      var shape = context.shape;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      if (!isExpanded(shape)) {
        createRoot(context);
        self._showRecursively(shape.children);
      } else {
        removeRoot(context);
      }

    }, true);

    // move elements between planes
    this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY$d, function(context) {
      var shape = context.shape;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      var rootElement = context.newRootElement;

      if (!rootElement) {
        return;
      }

      if (!isExpanded(shape)) {

        // collapsed
        self._moveChildrenToShape(shape, rootElement);

      } else {
        self._moveChildrenToShape(rootElement, shape);
      }
    }, true);


    // copy-paste ///////////

    // add elements in plane to tree
    eventBus.on('copyPaste.createTree', function(context) {
      var element = context.element,
          children = context.children;

      if (!isCollapsedSubProcess(element)) {
        return;
      }

      var id = getPlaneIdFromShape(element);
      var parent = elementRegistry.get(id);

      if (parent) {

        // do not copy invisible root element
        children.push.apply(children, parent.children);
      }
    });

    // set plane children as direct children of collapsed shape
    eventBus.on('copyPaste.copyElement', function(context) {
      var descriptor = context.descriptor,
          element = context.element,
          elements = context.elements;

      var parent = element.parent;

      var isPlane = is$1(getDi(parent), 'bpmndi:BPMNPlane');
      if (!isPlane) {
        return;
      }

      var parentId = getShapeIdFromPlane(parent);

      var referencedShape = find$1(elements, function(element) {
        return element.id === parentId;
      });

      if (!referencedShape) {
        return;
      }

      descriptor.parent = referencedShape.id;
    });

    // hide children during pasting
    eventBus.on('copyPaste.pasteElement', function(context) {
      var descriptor = context.descriptor;

      if (!descriptor.parent) {
        return;
      }

      if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {
        descriptor.hidden = true;
      }
    });

  }

  e$3(SubProcessPlaneBehavior, CommandInterceptor);

  /**
   * Moves the child elements from source to target.
   *
   * If the target is a plane, the children are moved to the top left corner.
   * Otherwise, the center of the target is used.
   *
   * @param {Root} source
   * @param {Root} target
   */
  SubProcessPlaneBehavior.prototype._moveChildrenToShape = function(source, target) {
    var modeling = this._modeling;

    var children = source.children;
    var offset;

    if (!children) {
      return;
    }

    // add external labels that weren't children of sub process
    children = children.concat(children.reduce(function(labels, child) {
      if (child.label && child.label.parent !== source) {
        return labels.concat(child.label);
      }

      return labels;
    }, []));

    // only change plane if there are no visible children, but don't move them
    var visibleChildren = children.filter(function(child) {
      return !child.hidden;
    });

    if (!visibleChildren.length) {
      modeling.moveElements(children, { x: 0, y: 0 }, target, { autoResize: false });
      return;
    }

    var childrenBounds = getBBox(visibleChildren);

    // target is a plane
    if (!target.x) {
      offset = {
        x: DEFAULT_POSITION.x - childrenBounds.x,
        y: DEFAULT_POSITION.y - childrenBounds.y
      };
    }

    // source is a plane
    else {

      // move relative to the center of the shape
      var targetMid = getMid(target);
      var childrenMid = getMid(childrenBounds);

      offset = {
        x: targetMid.x - childrenMid.x,
        y: targetMid.y - childrenMid.y
      };
    }

    modeling.moveElements(children, offset, target, { autoResize: false });
  };

  /**
   * Sets `hidden` property on all children of the given shape.
   *
   * @param {Element[]} elements
   * @param {boolean} [hidden=false]
   *
   * @return {Element[]}
   */
  SubProcessPlaneBehavior.prototype._showRecursively = function(elements, hidden) {
    var self = this;

    var result = [];
    elements.forEach(function(element) {
      element.hidden = !!hidden;

      result = result.concat(element);

      if (element.children) {
        result = result.concat(
          self._showRecursively(element.children, element.collapsed || hidden)
        );
      }
    });

    return result;
  };

  /**
   * Adds a given root element to the BPMNDI diagrams.
   *
   * @param {Root|ModdleElement} planeElement
   *
   * @return {Root}
   */
  SubProcessPlaneBehavior.prototype._addDiagram = function(planeElement) {
    var bpmnjs = this._bpmnjs;
    var diagrams = bpmnjs.getDefinitions().diagrams;

    if (!planeElement.businessObject) {
      planeElement = this._createNewDiagram(planeElement);
    }

    diagrams.push(planeElement.di.$parent);

    return planeElement;
  };


  /**
   * Creates a new plane element for the given sub process.
   *
   * @param {ModdleElement} bpmnElement
   *
   * @return {Root}
   */
  SubProcessPlaneBehavior.prototype._createNewDiagram = function(bpmnElement) {
    var bpmnFactory = this._bpmnFactory,
        elementFactory = this._elementFactory;

    var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {
      bpmnElement: bpmnElement
    });

    var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {
      plane: diPlane
    });

    diPlane.$parent = diDiagram;

    // add a virtual element (not being drawn),
    // a copy cat of our BpmnImporter code
    var planeElement = elementFactory.createRoot({
      id: getPlaneIdFromShape(bpmnElement),
      type: bpmnElement.$type,
      di: diPlane,
      businessObject: bpmnElement,
      collapsed: true
    });

    return planeElement;
  };

  /**
   * Removes the diagram for a given root element.
   *
   * @param {Root} rootElement
   *
   * @return {ModdleElement}
   */
  SubProcessPlaneBehavior.prototype._removeDiagram = function(rootElement) {
    var bpmnjs = this._bpmnjs;

    var diagrams = bpmnjs.getDefinitions().diagrams;

    var removedDiagram = find$1(diagrams, function(diagram) {
      return diagram.plane.bpmnElement.id === rootElement.id;
    });

    diagrams.splice(diagrams.indexOf(removedDiagram), 1);

    return removedDiagram;
  };


  SubProcessPlaneBehavior.$inject = [
    'canvas',
    'eventBus',
    'modeling',
    'elementFactory',
    'bpmnFactory',
    'bpmnjs',
    'elementRegistry'
  ];

  /**
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * Add start event replacing element with expanded sub process.
   *
   * @param {Injector} injector
   * @param {Modeling} modeling
   */
  function SubProcessStartEventBehavior(injector, modeling) {
    injector.invoke(CommandInterceptor, this);

    this.postExecuted('shape.replace', function(event) {
      var oldShape = event.context.oldShape,
          newShape = event.context.newShape;

      if (
        !is$1(newShape, 'bpmn:SubProcess') ||
        is$1(newShape,'bpmn:AdHocSubProcess') ||
        ! (is$1(oldShape, 'bpmn:Task') || is$1(oldShape, 'bpmn:CallActivity')) ||
        !isExpanded(newShape)
      ) {
        return;
      }

      var position = getStartEventPosition(newShape);

      modeling.createShape({ type: 'bpmn:StartEvent' }, position, newShape);
    });
  }

  SubProcessStartEventBehavior.$inject = [
    'injector',
    'modeling'
  ];

  e$3(SubProcessStartEventBehavior, CommandInterceptor);

  // helpers //////////

  function getStartEventPosition(shape) {
    return {
      x: shape.x + shape.width / 6,
      y: shape.y + shape.height / 2
    };
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  function TextAnnotationBehavior(eventBus) {

    CommandInterceptor.call(this, eventBus);

    // On Append, TextAnnotations will be created on the Root.
    // The default for connections will create the connection in the parent of
    // the source element, so we overwrite the parent here.
    this.preExecute('connection.create', function(context) {
      const { target } = context;

      if (!is$1(target, 'bpmn:TextAnnotation')) {
        return;
      }

      context.parent = target.parent;
    }, true);

    this.preExecute([ 'shape.create', 'shape.resize', 'elements.move' ], function(context) {
      const shapes = context.shapes || [ context.shape ];

      if (shapes.length === 1 && is$1(shapes[0], 'bpmn:TextAnnotation')) {
        context.hints = context.hints || {};

        context.hints.autoResize = false;
      }
    }, true);
  }

  e$3(TextAnnotationBehavior, CommandInterceptor);

  TextAnnotationBehavior.$inject = [
    'eventBus'
  ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   */

  /**
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function ToggleCollapseConnectionBehaviour(
      eventBus, modeling
  ) {

    CommandInterceptor.call(this, eventBus);

    this.postExecuted('shape.toggleCollapse', 1500, function(context) {

      // var shape = context.shape;
      var shape = context.shape;

      // only change connections when collapsing
      if (isExpanded(shape)) {
        return;
      }

      var allChildren = selfAndAllChildren(shape);

      allChildren.forEach(function(child) {

        // Ensure that the connection array is not modified during iteration
        var incomingConnections = child.incoming.slice(),
            outgoingConnections = child.outgoing.slice();

        forEach$1(incomingConnections, function(c) {
          handleConnection(c, true);
        });

        forEach$1(outgoingConnections, function(c) {
          handleConnection(c, false);
        });
      });


      function handleConnection(c, incoming) {
        if (allChildren.indexOf(c.source) !== -1 && allChildren.indexOf(c.target) !== -1) {
          return;
        }

        if (incoming) {
          modeling.reconnectEnd(c, shape, getMid(shape));
        } else {
          modeling.reconnectStart(c, shape, getMid(shape));
        }

      }

    }, true);

  }

  e$3(ToggleCollapseConnectionBehaviour, CommandInterceptor);

  ToggleCollapseConnectionBehaviour.$inject = [
    'eventBus',
    'modeling',
  ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../ElementFactory').default} ElementFactory
   * @typedef {import('../Modeling').default} Modeling
   */

  var LOW_PRIORITY$f = 500;

  /**
   * @param {EventBus} eventBus
   * @param {ElementFactory} elementFactory
   * @param {Modeling} modeling
   */
  function ToggleElementCollapseBehaviour(
      eventBus, elementFactory, modeling) {

    CommandInterceptor.call(this, eventBus);


    function hideEmptyLabels(children) {
      if (children.length) {
        children.forEach(function(child) {
          if (child.type === 'label' && !child.businessObject.name) {
            child.hidden = true;
          }
        });
      }
    }

    function expandedBounds(shape, defaultSize) {
      var children = shape.children,
          newBounds = defaultSize,
          visibleElements,
          visibleBBox;

      visibleElements = filterVisible(children).concat([ shape ]);

      visibleBBox = computeChildrenBBox(visibleElements);

      if (visibleBBox) {

        // center to visibleBBox with max(defaultSize, childrenBounds)
        newBounds.width = Math.max(visibleBBox.width, newBounds.width);
        newBounds.height = Math.max(visibleBBox.height, newBounds.height);

        newBounds.x = visibleBBox.x + (visibleBBox.width - newBounds.width) / 2;
        newBounds.y = visibleBBox.y + (visibleBBox.height - newBounds.height) / 2;
      } else {

        // center to collapsed shape with defaultSize
        newBounds.x = shape.x + (shape.width - newBounds.width) / 2;
        newBounds.y = shape.y + (shape.height - newBounds.height) / 2;
      }

      return newBounds;
    }

    function collapsedBounds(shape, defaultSize) {

      return {
        x: shape.x + (shape.width - defaultSize.width) / 2,
        y: shape.y + (shape.height - defaultSize.height) / 2,
        width: defaultSize.width,
        height: defaultSize.height
      };
    }

    this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY$f, function(e) {

      var context = e.context,
          shape = context.shape;

      if (!is$1(shape, 'bpmn:SubProcess')) {
        return;
      }

      if (!shape.collapsed) {

        // all children got made visible through djs, hide empty labels
        hideEmptyLabels(shape.children);

        // remove collapsed marker
        getDi(shape).isExpanded = true;
      } else {

        // place collapsed marker
        getDi(shape).isExpanded = false;
      }
    });

    this.reverted([ 'shape.toggleCollapse' ], LOW_PRIORITY$f, function(e) {

      var context = e.context;
      var shape = context.shape;


      // revert removing/placing collapsed marker
      if (!shape.collapsed) {
        getDi(shape).isExpanded = true;

      } else {
        getDi(shape).isExpanded = false;
      }
    });

    this.postExecuted([ 'shape.toggleCollapse' ], LOW_PRIORITY$f, function(e) {
      var shape = e.context.shape,
          defaultSize = elementFactory.getDefaultSize(shape),
          newBounds;

      if (shape.collapsed) {

        // resize to default size of collapsed shapes
        newBounds = collapsedBounds(shape, defaultSize);
      } else {

        // resize to bounds of max(visible children, defaultSize)
        newBounds = expandedBounds(shape, defaultSize);
      }

      modeling.resizeShape(shape, newBounds, null, {
        autoResize: shape.collapsed ? false : 'nwse'
      });
    });

  }


  e$3(ToggleElementCollapseBehaviour, CommandInterceptor);

  ToggleElementCollapseBehaviour.$inject = [
    'eventBus',
    'elementFactory',
    'modeling'
  ];


  // helpers //////////////////////

  function filterVisible(elements) {
    return elements.filter(function(e) {
      return !e.hidden;
    });
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('../Modeling').default} Modeling
   *
   * @typedef {import('../../../model/Types').Moddle} Moddle
   */

  /**
   * Unclaims model IDs on element deletion.
   *
   * @param {Canvas} canvas
   * @param {Injector} injector
   * @param {Moddle} moddle
   * @param {Modeling} modeling
   */
  function UnclaimIdBehavior(canvas, injector, moddle, modeling) {
    injector.invoke(CommandInterceptor, this);

    this.preExecute('shape.delete', function(event) {
      var context = event.context,
          shape = context.shape,
          shapeBo = shape.businessObject;

      if (isLabel(shape)) {
        return;
      }

      if (is$1(shape, 'bpmn:Participant') && isExpanded(shape)) {
        moddle.ids.unclaim(shapeBo.processRef.id);
      }

      modeling.unclaimId(shapeBo.id, shapeBo);
    });


    this.preExecute('connection.delete', function(event) {
      var context = event.context,
          connection = context.connection,
          connectionBo = connection.businessObject;

      modeling.unclaimId(connectionBo.id, connectionBo);
    });

    this.preExecute('canvas.updateRoot', function() {
      var rootElement = canvas.getRootElement(),
          rootElementBo = rootElement.businessObject;

      if (is$1(rootElement, 'bpmn:Collaboration')) {
        moddle.ids.unclaim(rootElementBo.id);
      }
    });
  }

  e$3(UnclaimIdBehavior, CommandInterceptor);

  UnclaimIdBehavior.$inject = [ 'canvas', 'injector', 'moddle', 'modeling' ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A behavior that unsets the Default property of sequence flow source on
   * element delete, if the removed element is the Gateway or Task's default flow.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function DeleteSequenceFlowBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);


    this.preExecute('connection.delete', function(event) {
      var context = event.context,
          connection = context.connection,
          source = connection.source;

      if (isDefaultFlow$1(connection, source)) {
        modeling.updateProperties(source, {
          'default': null
        });
      }
    });
  }

  e$3(DeleteSequenceFlowBehavior, CommandInterceptor);

  DeleteSequenceFlowBehavior.$inject = [
    'eventBus',
    'modeling'
  ];


  // helpers //////////////////////

  function isDefaultFlow$1(connection, source) {

    if (!is$1(connection, 'bpmn:SequenceFlow')) {
      return false;
    }

    var sourceBo = getBusinessObject(source),
        sequenceFlow = getBusinessObject(connection);

    return sourceBo.get('default') === sequenceFlow;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../Modeling').default} Modeling
   */

  var LOW_PRIORITY$e = 500,
      HIGH_PRIORITY$c = 5000;


  /**
   * BPMN specific delete lane behavior.
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function UpdateFlowNodeRefsBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    /**
     * Update Lane#flowNodeRefs and FlowNode#lanes with every flow node
     * move/resize and lane move/resize. Groups elements to recompute containments
     * as efficient as possible.
     */

    // the update context
    var context;


    function initContext() {
      context = context || new UpdateContext$1();
      context.enter();

      return context;
    }

    function getContext() {
      if (!context) {
        throw new Error('out of bounds release');
      }

      return context;
    }

    function releaseContext() {

      if (!context) {
        throw new Error('out of bounds release');
      }

      var triggerUpdate = context.leave();

      if (triggerUpdate) {
        modeling.updateLaneRefs(context.flowNodes, context.lanes);

        context = null;
      }

      return triggerUpdate;
    }


    var laneRefUpdateEvents = [
      'spaceTool',
      'lane.add',
      'lane.resize',
      'lane.split',
      'elements.create',
      'elements.delete',
      'elements.move',
      'shape.create',
      'shape.delete',
      'shape.move',
      'shape.resize'
    ];


    // listen to a lot of stuff to group lane updates

    this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY$c, function(event) {
      initContext();
    });

    this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY$e, function(event) {
      releaseContext();
    });


    // Mark flow nodes + lanes that need an update

    this.preExecute([
      'shape.create',
      'shape.move',
      'shape.delete',
      'shape.resize'
    ], function(event) {

      var context = event.context,
          shape = context.shape;

      var updateContext = getContext();

      // no need to update labels
      if (shape.labelTarget) {
        return;
      }

      if (is$1(shape, 'bpmn:Lane')) {
        updateContext.addLane(shape);
      }

      if (is$1(shape, 'bpmn:FlowNode')) {
        updateContext.addFlowNode(shape);
      }
    });
  }

  UpdateFlowNodeRefsBehavior.$inject = [
    'eventBus',
    'modeling'
  ];

  e$3(UpdateFlowNodeRefsBehavior, CommandInterceptor);


  function UpdateContext$1() {

    this.flowNodes = [];
    this.lanes = [];

    this.counter = 0;

    this.addLane = function(lane) {
      this.lanes.push(lane);
    };

    this.addFlowNode = function(flowNode) {
      this.flowNodes.push(flowNode);
    };

    this.enter = function() {
      this.counter++;
    };

    this.leave = function() {
      this.counter--;

      return !this.counter;
    };
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../rules/BpmnRules').default} BpmnRules
   * @typedef {import('../Modeling').default} Modeling
   */


  /**
   * A behavior that sets the property of Compensation Activity after paste operation
   *
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function SetCompensationActivityAfterPasteBehavior(eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    this.postExecuted('elements.create', function(event) {
      const context = event.context,
            elements = context.elements;

      // check if compensation activity is connected to compensation boundary event
      for (const element of elements) {
        if (isForCompensation$1(element) && !isConnectedToCompensationBoundaryEvent(element)) {
          modeling.updateProperties(element, { isForCompensation: undefined });
        }
      }
    });
  }

  e$3(SetCompensationActivityAfterPasteBehavior, CommandInterceptor);

  SetCompensationActivityAfterPasteBehavior.$inject = [
    'eventBus',
    'modeling'
  ];


  // helpers //////////////////////

  function isForCompensation$1(element) {
    const bo = getBusinessObject(element);
    return bo && bo.isForCompensation;
  }

  function isCompensationBoundaryEvent(element) {
    return element && is$1(element, 'bpmn:BoundaryEvent') &&
        hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');
  }

  function isConnectedToCompensationBoundaryEvent(element) {
    const compensationAssociations = element.incoming.filter(
      connection => isCompensationBoundaryEvent(connection.source)
    );
    if (compensationAssociations.length > 0) {
      return true;
    }
    return false;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var BehaviorModule = {
    __init__: [
      'adaptiveLabelPositioningBehavior',
      'appendBehavior',
      'associationBehavior',
      'attachEventBehavior',
      'boundaryEventBehavior',
      'compensateBoundaryEventBehaviour',
      'createBehavior',
      'createDataObjectBehavior',
      'createParticipantBehavior',
      'dataInputAssociationBehavior',
      'dataStoreBehavior',
      'deleteLaneBehavior',
      'detachEventBehavior',
      'dropOnFlowBehavior',
      'eventBasedGatewayBehavior',
      'fixHoverBehavior',
      'groupBehavior',
      'importDockingFix',
      'isHorizontalFix',
      'labelBehavior',
      'layoutConnectionBehavior',
      'messageFlowBehavior',
      'nonInterruptingBehavior',
      'removeElementBehavior',
      'removeEmbeddedLabelBoundsBehavior',
      'removeParticipantBehavior',
      'replaceConnectionBehavior',
      'replaceElementBehaviour',
      'resizeBehavior',
      'resizeLaneBehavior',
      'rootElementReferenceBehavior',
      'spaceToolBehavior',
      'subProcessPlaneBehavior',
      'subProcessStartEventBehavior',
      'textAnnotationBehavior',
      'toggleCollapseConnectionBehaviour',
      'toggleElementCollapseBehaviour',
      'unclaimIdBehavior',
      'updateFlowNodeRefsBehavior',
      'unsetDefaultFlowBehavior',
      'setCompensationActivityAfterPasteBehavior'
    ],
    adaptiveLabelPositioningBehavior: [ 'type', AdaptiveLabelPositioningBehavior ],
    appendBehavior: [ 'type', AppendBehavior ],
    associationBehavior: [ 'type', AssociationBehavior ],
    attachEventBehavior: [ 'type', AttachEventBehavior ],
    boundaryEventBehavior: [ 'type', BoundaryEventBehavior ],
    compensateBoundaryEventBehaviour: [ 'type', CompensateBoundaryEventBehavior ],
    createBehavior: [ 'type', CreateBehavior ],
    createDataObjectBehavior: [ 'type', CreateDataObjectBehavior ],
    createParticipantBehavior: [ 'type', CreateParticipantBehavior ],
    dataInputAssociationBehavior: [ 'type', DataInputAssociationBehavior ],
    dataStoreBehavior: [ 'type', DataStoreBehavior ],
    deleteLaneBehavior: [ 'type', DeleteLaneBehavior ],
    detachEventBehavior: [ 'type', DetachEventBehavior ],
    dropOnFlowBehavior: [ 'type', DropOnFlowBehavior ],
    eventBasedGatewayBehavior: [ 'type', EventBasedGatewayBehavior ],
    fixHoverBehavior: [ 'type', FixHoverBehavior ],
    groupBehavior: [ 'type', GroupBehavior ],
    importDockingFix: [ 'type', ImportDockingFix ],
    isHorizontalFix: [ 'type', IsHorizontalFix ],
    labelBehavior: [ 'type', LabelBehavior ],
    layoutConnectionBehavior: [ 'type', LayoutConnectionBehavior ],
    messageFlowBehavior: [ 'type', MessageFlowBehavior ],
    nonInterruptingBehavior: [ 'type', NonInterruptingBehavior ],
    removeElementBehavior: [ 'type', RemoveElementBehavior ],
    removeEmbeddedLabelBoundsBehavior: [ 'type', RemoveEmbeddedLabelBoundsBehavior ],
    removeParticipantBehavior: [ 'type', RemoveParticipantBehavior ],
    replaceConnectionBehavior: [ 'type', ReplaceConnectionBehavior ],
    replaceElementBehaviour: [ 'type', ReplaceElementBehaviour ],
    resizeBehavior: [ 'type', ResizeBehavior$1 ],
    resizeLaneBehavior: [ 'type', ResizeLaneBehavior ],
    rootElementReferenceBehavior: [ 'type', RootElementReferenceBehavior ],
    spaceToolBehavior: [ 'type', SpaceToolBehavior$1 ],
    subProcessPlaneBehavior: [ 'type', SubProcessPlaneBehavior ],
    subProcessStartEventBehavior: [ 'type', SubProcessStartEventBehavior ],
    textAnnotationBehavior: [ 'type', TextAnnotationBehavior ],
    toggleCollapseConnectionBehaviour: [ 'type', ToggleCollapseConnectionBehaviour ],
    toggleElementCollapseBehaviour : [ 'type', ToggleElementCollapseBehaviour ],
    unclaimIdBehavior: [ 'type', UnclaimIdBehavior ],
    unsetDefaultFlowBehavior: [ 'type', DeleteSequenceFlowBehavior ],
    updateFlowNodeRefsBehavior: [ 'type', UpdateFlowNodeRefsBehavior ],
    setCompensationActivityAfterPasteBehavior: [ 'type', SetCompensationActivityAfterPasteBehavior ]
  };

  /**
   * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   */

  /**
   * @param {Point} position
   * @param {Rect} targetBounds
   *
   * @return {DirectionTRBL|null}
   */
  function getBoundaryAttachment(position, targetBounds) {

    var orientation = getOrientation(position, targetBounds, -15);

    if (orientation !== 'intersect') {
      return orientation;
    } else {
      return null;
    }
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   *
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   *
   * @typedef { {
   *   associationDirection?: 'None' | 'One' | 'Both';
   *   type: string;
   * } | boolean | null } CanConnectResult
   *
   * @typedef { {
   *   id: string;
   *   type: string;
   * } | boolean } CanReplaceResult
   */

  /**
   * BPMN-specific modeling rules.
   *
   * @param {EventBus} eventBus
   */
  function BpmnRules(eventBus) {
    RuleProvider.call(this, eventBus);
  }

  e$3(BpmnRules, RuleProvider);

  BpmnRules.$inject = [ 'eventBus' ];

  BpmnRules.prototype.init = function() {

    this.addRule('connection.start', function(context) {
      var source = context.source;

      return canStartConnection(source);
    });

    this.addRule('connection.create', function(context) {
      var source = context.source,
          target = context.target,
          hints = context.hints || {},
          targetParent = hints.targetParent,
          targetAttach = hints.targetAttach;

      // don't allow incoming connections on
      // newly created boundary events
      // to boundary events
      if (targetAttach) {
        return false;
      }

      // temporarily set target parent for scoping
      // checks to work
      if (targetParent) {
        target.parent = targetParent;
      }

      try {
        return canConnect(source, target);
      } finally {

        // unset temporary target parent
        if (targetParent) {
          target.parent = null;
        }
      }
    });

    this.addRule('connection.reconnect', function(context) {

      var connection = context.connection,
          source = context.source,
          target = context.target;

      return canConnect(source, target, connection);
    });

    this.addRule('connection.updateWaypoints', function(context) {
      return {
        type: context.connection.type
      };
    });

    this.addRule('shape.resize', function(context) {

      var shape = context.shape,
          newBounds = context.newBounds;

      return canResize(shape, newBounds);
    });

    this.addRule('elements.create', function(context) {
      var elements = context.elements,
          position = context.position,
          target = context.target;

      if (isConnection(target) && !canInsert(elements, target)) {
        return false;
      }

      return every(elements, function(element) {
        if (isConnection(element)) {
          return canConnect(element.source, element.target, element);
        }

        if (element.host) {
          return canAttach(element, element.host, null, position);
        }

        return canCreate(element, target, null);
      });
    });

    this.addRule('elements.move', function(context) {

      var target = context.target,
          shapes = context.shapes,
          position = context.position;

      return canAttach(shapes, target, null, position) ||
             canReplace(shapes, target, position) ||
             canMove(shapes, target) ||
             canInsert(shapes, target);
    });

    this.addRule('shape.create', function(context) {
      return canCreate(
        context.shape,
        context.target,
        context.source,
        context.position
      );
    });

    this.addRule('shape.attach', function(context) {

      return canAttach(
        context.shape,
        context.target,
        null,
        context.position
      );
    });

    this.addRule('element.copy', function(context) {
      var element = context.element,
          elements = context.elements;

      return canCopy(elements, element);
    });
  };

  BpmnRules.prototype.canConnectMessageFlow = canConnectMessageFlow;

  BpmnRules.prototype.canConnectSequenceFlow = canConnectSequenceFlow;

  BpmnRules.prototype.canConnectDataAssociation = canConnectDataAssociation;

  BpmnRules.prototype.canConnectAssociation = canConnectAssociation;

  BpmnRules.prototype.canConnectCompensationAssociation = canConnectCompensationAssociation;

  BpmnRules.prototype.canMove = canMove;

  BpmnRules.prototype.canAttach = canAttach;

  BpmnRules.prototype.canReplace = canReplace;

  BpmnRules.prototype.canDrop = canDrop;

  BpmnRules.prototype.canInsert = canInsert;

  BpmnRules.prototype.canCreate = canCreate;

  BpmnRules.prototype.canConnect = canConnect;

  BpmnRules.prototype.canResize = canResize;

  BpmnRules.prototype.canCopy = canCopy;

  /**
   * Utility functions for rule checking
   */

  /**
   * Checks if given element can be used for starting connection.
   *
   * @param  {Element} source
   *
   * @return {boolean}
   */
  function canStartConnection(element) {
    if (nonExistingOrLabel(element)) {
      return null;
    }

    return isAny(element, [
      'bpmn:FlowNode',
      'bpmn:InteractionNode',
      'bpmn:DataObjectReference',
      'bpmn:DataStoreReference',
      'bpmn:Group',
      'bpmn:TextAnnotation'
    ]);
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function nonExistingOrLabel(element) {
    return !element || isLabel(element);
  }

  function isSame$1(a, b) {
    return a === b;
  }

  /**
   * @param {Element} element
   *
   * @return {ModdleElement}
   */
  function getOrganizationalParent(element) {

    do {
      if (is$1(element, 'bpmn:Process')) {
        return getBusinessObject(element);
      }

      if (is$1(element, 'bpmn:Participant')) {
        return (
          getBusinessObject(element).processRef ||
          getBusinessObject(element)
        );
      }
    } while ((element = element.parent));

  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isTextAnnotation(element) {
    return is$1(element, 'bpmn:TextAnnotation');
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isGroup(element) {
    return is$1(element, 'bpmn:Group') && !element.labelTarget;
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isCompensationBoundary(element) {
    return is$1(element, 'bpmn:BoundaryEvent') &&
           hasEventDefinition$1(element, 'bpmn:CompensateEventDefinition');
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isForCompensation(element) {
    return getBusinessObject(element).isForCompensation;
  }

  /**
   * @param {Element} a
   * @param {Element} b
   *
   * @return {boolean}
   */
  function isSameOrganization(a, b) {
    var parentA = getOrganizationalParent(a),
        parentB = getOrganizationalParent(b);

    return parentA === parentB;
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isMessageFlowSource(element) {
    return (
      is$1(element, 'bpmn:InteractionNode') &&
      !is$1(element, 'bpmn:BoundaryEvent') && (
        !is$1(element, 'bpmn:Event') || (
          is$1(element, 'bpmn:ThrowEvent') &&
          hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
        )
      )
    );
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isMessageFlowTarget(element) {
    return (
      is$1(element, 'bpmn:InteractionNode') &&
      !isForCompensation(element) && (
        !is$1(element, 'bpmn:Event') || (
          is$1(element, 'bpmn:CatchEvent') &&
          hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
        )
      ) && !(
        is$1(element, 'bpmn:BoundaryEvent') &&
        !hasEventDefinition$1(element, 'bpmn:MessageEventDefinition')
      )
    );
  }

  /**
   * @param {Element} element
   *
   * @return {ModdleElement}
   */
  function getScopeParent(element) {

    var parent = element;

    while ((parent = parent.parent)) {

      if (is$1(parent, 'bpmn:FlowElementsContainer')) {
        return getBusinessObject(parent);
      }

      if (is$1(parent, 'bpmn:Participant')) {
        return getBusinessObject(parent).processRef;
      }
    }

    return null;
  }

  /**
   * @param {Element} a
   * @param {Element} b
   *
   * @return {boolean}
   */
  function isSameScope(a, b) {
    var scopeParentA = getScopeParent(a),
        scopeParentB = getScopeParent(b);

    return scopeParentA === scopeParentB;
  }

  /**
   * @param {Element} element
   * @param {string} eventDefinition
   *
   * @return {boolean}
   */
  function hasEventDefinition$1(element, eventDefinition) {
    var businessObject = getBusinessObject(element);

    return !!find$1(businessObject.eventDefinitions || [], function(definition) {
      return is$1(definition, eventDefinition);
    });
  }

  /**
   * @param {Element} element
   * @param {string} eventDefinition
   *
   * @return {boolean}
   */
  function hasEventDefinitionOrNone(element, eventDefinition) {
    var businessObject = getBusinessObject(element);

    return (businessObject.eventDefinitions || []).every(function(definition) {
      return is$1(definition, eventDefinition);
    });
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isSequenceFlowSource(element) {
    return (
      is$1(element, 'bpmn:FlowNode') &&
      !is$1(element, 'bpmn:EndEvent') &&
      !isEventSubProcess(element) &&
      !(is$1(element, 'bpmn:IntermediateThrowEvent') &&
        hasEventDefinition$1(element, 'bpmn:LinkEventDefinition')
      ) &&
      !isCompensationBoundary(element) &&
      !isForCompensation(element)
    );
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isSequenceFlowTarget(element) {
    return (
      is$1(element, 'bpmn:FlowNode') &&
      !is$1(element, 'bpmn:StartEvent') &&
      !is$1(element, 'bpmn:BoundaryEvent') &&
      !isEventSubProcess(element) &&
      !(is$1(element, 'bpmn:IntermediateCatchEvent') &&
        hasEventDefinition$1(element, 'bpmn:LinkEventDefinition')
      ) &&
      !isForCompensation(element)
    );
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isEventBasedTarget(element) {
    return (
      is$1(element, 'bpmn:ReceiveTask') || (
        is$1(element, 'bpmn:IntermediateCatchEvent') && (
          hasEventDefinition$1(element, 'bpmn:MessageEventDefinition') ||
          hasEventDefinition$1(element, 'bpmn:TimerEventDefinition') ||
          hasEventDefinition$1(element, 'bpmn:ConditionalEventDefinition') ||
          hasEventDefinition$1(element, 'bpmn:SignalEventDefinition')
        )
      )
    );
  }

  /**
   * @param {Element} element
   *
   * @return {Shape[]}
   */
  function getParents(element) {

    var parents = [];

    while (element) {
      element = element.parent;

      if (element) {
        parents.push(element);
      }
    }

    return parents;
  }

  /**
   * @param {Shape} possibleParent
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isParent$1(possibleParent, element) {
    var allParents = getParents(element);

    return allParents.indexOf(possibleParent) !== -1;
  }

  /**
   * @param {Element} source
   * @param {Element} target
   * @param {Connection} connection
   *
   * @return {CanConnectResult}
   */
  function canConnect(source, target, connection) {

    if (nonExistingOrLabel(source) || nonExistingOrLabel(target)) {
      return null;
    }

    if (!is$1(connection, 'bpmn:DataAssociation')) {

      if (canConnectMessageFlow(source, target)) {
        return { type: 'bpmn:MessageFlow' };
      }

      if (canConnectSequenceFlow(source, target)) {
        return { type: 'bpmn:SequenceFlow' };
      }
    }

    var connectDataAssociation = canConnectDataAssociation(source, target);

    if (connectDataAssociation) {
      return connectDataAssociation;
    }

    if (canConnectCompensationAssociation(source, target)) {
      return {
        type: 'bpmn:Association',
        associationDirection: 'One'
      };
    }

    if (canConnectAssociation(source, target)) {
      return {
        type: 'bpmn:Association',
        associationDirection: 'None'
      };
    }

    return false;
  }

  /**
   * Can an element be dropped into the target element.
   *
   * @param {Element} element
   * @param {Shape} target
   *
   * @return {boolean}
   */
  function canDrop(element, target) {

    // can move labels and groups everywhere
    if (isLabel(element) || isGroup(element)) {
      return true;
    }


    // disallow to create elements on collapsed pools
    if (is$1(target, 'bpmn:Participant') && !isExpanded(target)) {
      return false;
    }

    // allow to create new participants on
    // existing collaboration and process diagrams
    if (is$1(element, 'bpmn:Participant')) {
      return is$1(target, 'bpmn:Process') || is$1(target, 'bpmn:Collaboration');
    }

    // allow moving DataInput / DataOutput within its original container only
    if (isAny(element, [ 'bpmn:DataInput', 'bpmn:DataOutput' ])) {

      if (element.parent) {
        return target === element.parent;
      }
    }

    // allow creating lanes on participants and other lanes only
    if (is$1(element, 'bpmn:Lane')) {
      return is$1(target, 'bpmn:Participant') || is$1(target, 'bpmn:Lane');
    }

    // disallow dropping boundary events which cannot replace with intermediate event
    if (is$1(element, 'bpmn:BoundaryEvent') && !isDroppableBoundaryEvent(element)) {
      return false;
    }

    // drop flow elements onto flow element containers
    // and participants
    if (is$1(element, 'bpmn:FlowElement') && !is$1(element, 'bpmn:DataStoreReference')) {
      if (is$1(target, 'bpmn:FlowElementsContainer')) {
        return isExpanded(target);
      }

      return isAny(target, [ 'bpmn:Participant', 'bpmn:Lane' ]);
    }

    // disallow dropping data store reference if there is no process to append to
    if (is$1(element, 'bpmn:DataStoreReference') && is$1(target, 'bpmn:Collaboration')) {
      return some(getBusinessObject(target).get('participants'), function(participant) {
        return !!participant.get('processRef');
      });
    }

    // account for the fact that data associations are always
    // rendered and moved to top (Process or Collaboration level)
    //
    // artifacts may be placed wherever, too
    if (isAny(element, [ 'bpmn:Artifact', 'bpmn:DataAssociation', 'bpmn:DataStoreReference' ])) {
      return isAny(target, [
        'bpmn:Collaboration',
        'bpmn:Lane',
        'bpmn:Participant',
        'bpmn:Process',
        'bpmn:SubProcess' ]);
    }

    if (is$1(element, 'bpmn:MessageFlow')) {
      return is$1(target, 'bpmn:Collaboration')
        || element.source.parent == target
        || element.target.parent == target;
    }

    return false;
  }

  /**
   * @param {Shape} event
   *
   * @return {boolean}
   */
  function isDroppableBoundaryEvent(event) {
    return getBusinessObject(event).cancelActivity && (
      hasNoEventDefinition(event) || hasCommonBoundaryIntermediateEventDefinition(event)
    );
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isBoundaryEvent(element) {
    return !isLabel(element) && is$1(element, 'bpmn:BoundaryEvent');
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isLane(element) {
    return is$1(element, 'bpmn:Lane');
  }

  /**
   * `bpmn:IntermediateThrowEvents` are treated as boundary events during create.
   *
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isBoundaryCandidate(element) {
    if (isBoundaryEvent(element)) {
      return true;
    }

    if (is$1(element, 'bpmn:IntermediateThrowEvent') && hasNoEventDefinition(element)) {
      return true;
    }

    return (
      is$1(element, 'bpmn:IntermediateCatchEvent') &&
      hasCommonBoundaryIntermediateEventDefinition(element)
    );
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasNoEventDefinition(element) {
    var businessObject = getBusinessObject(element);

    return businessObject && !(businessObject.eventDefinitions && businessObject.eventDefinitions.length);
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function hasCommonBoundaryIntermediateEventDefinition(element) {
    return hasOneOfEventDefinitions(element, [
      'bpmn:MessageEventDefinition',
      'bpmn:TimerEventDefinition',
      'bpmn:SignalEventDefinition',
      'bpmn:ConditionalEventDefinition'
    ]);
  }

  /**
   * @param {Element} element
   * @param {string[]} eventDefinitions
   *
   * @return {boolean}
   */
  function hasOneOfEventDefinitions(element, eventDefinitions) {
    return eventDefinitions.some(function(definition) {
      return hasEventDefinition$1(element, definition);
    });
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isReceiveTaskAfterEventBasedGateway(element) {
    return (
      is$1(element, 'bpmn:ReceiveTask') &&
      find$1(element.incoming, function(incoming) {
        return is$1(incoming.source, 'bpmn:EventBasedGateway');
      })
    );
  }

  /**
   * TODO(philippfromme): remove `source` parameter
   *
   * @param {Element[]} elements
   * @param {Shape} target
   * @param {Element} source
   * @param {Point} [position]
   *
   * @return {boolean | 'attach'}
   */
  function canAttach(elements, target, source, position) {

    if (!Array.isArray(elements)) {
      elements = [ elements ];
    }

    // only (re-)attach one element at a time
    if (elements.length !== 1) {
      return false;
    }

    var element = elements[0];

    // do not attach labels
    if (isLabel(element)) {
      return false;
    }

    // only handle boundary events
    if (!isBoundaryCandidate(element)) {
      return false;
    }

    // disallow drop on event sub processes
    if (isEventSubProcess(target)) {
      return false;
    }

    // only allow drop on non compensation activities
    if (!is$1(target, 'bpmn:Activity') || isForCompensation(target)) {
      return false;
    }

    // only attach to subprocess border
    if (position && !getBoundaryAttachment(position, target)) {
      return false;
    }

    // do not attach on receive tasks after event based gateways
    if (isReceiveTaskAfterEventBasedGateway(target)) {
      return false;
    }

    return 'attach';
  }

  /**
   * Check whether the given elements can be replaced. Return all elements which
   * can be replaced.
   *
   * @example
   *
   * ```javascript
   * [{
   *   id: 'IntermediateEvent_1',
   *   type: 'bpmn:StartEvent'
   * },
   * {
   *   id: 'Task_1',
   *   type: 'bpmn:ServiceTask'
   * }]
   * ```
   *
   * @param  {Element[]} elements
   * @param  {Shape} [target]
   * @param  {Point} [position]
   *
   * @return {CanReplaceResult}
   */
  function canReplace(elements, target, position) {

    if (!target) {
      return false;
    }

    var canExecute = {
      replacements: []
    };

    forEach$1(elements, function(element) {

      if (!isEventSubProcess(target)) {

        if (is$1(element, 'bpmn:StartEvent') &&
            element.type !== 'label' &&
            canDrop(element, target)) {

          // replace a non-interrupting start event by a blank interrupting start event
          // when the target is not an event sub process
          if (!isInterrupting(element)) {
            canExecute.replacements.push({
              oldElementId: element.id,
              newElementType: 'bpmn:StartEvent'
            });
          }

          // replace an error/escalation/compensate start event by a blank interrupting start event
          // when the target is not an event sub process
          if (hasErrorEventDefinition(element) ||
              hasEscalationEventDefinition(element) ||
              hasCompensateEventDefinition(element)) {
            canExecute.replacements.push({
              oldElementId: element.id,
              newElementType: 'bpmn:StartEvent'
            });
          }

          // replace a typed start event by a blank interrupting start event
          // when the target is a sub process but not an event sub process
          if (hasOneOfEventDefinitions(element,
            [
              'bpmn:MessageEventDefinition',
              'bpmn:TimerEventDefinition',
              'bpmn:SignalEventDefinition',
              'bpmn:ConditionalEventDefinition'
            ]) &&
              is$1(target, 'bpmn:SubProcess')) {
            canExecute.replacements.push({
              oldElementId: element.id,
              newElementType: 'bpmn:StartEvent'
            });
          }
        }
      }

      if (!is$1(target, 'bpmn:Transaction')) {
        if (hasEventDefinition$1(element, 'bpmn:CancelEventDefinition') &&
            element.type !== 'label') {

          if (is$1(element, 'bpmn:EndEvent') && canDrop(element, target)) {
            canExecute.replacements.push({
              oldElementId: element.id,
              newElementType: 'bpmn:EndEvent'
            });
          }

          if (is$1(element, 'bpmn:BoundaryEvent') && canAttach(element, target, null, position)) {
            canExecute.replacements.push({
              oldElementId: element.id,
              newElementType: 'bpmn:BoundaryEvent'
            });
          }
        }
      }
    });

    return canExecute.replacements.length ? canExecute : false;
  }

  /**
   * @param {Element[]} elements
   * @param {Shape} target
   *
   * @return {boolean}
   */
  function canMove(elements, target) {

    // do not move selection containing lanes
    if (some(elements, isLane)) {
      return false;
    }

    // allow default move check to start move operation
    if (!target) {
      return true;
    }

    return elements.every(function(element) {
      return canDrop(element, target);
    });
  }

  /**
   * @param {Shape} shape
   * @param {Shape} target
   * @param {Element} source
   * @param {Point} position
   *
   * @return {boolean}
   */
  function canCreate(shape, target, source, position) {

    if (!target) {
      return false;
    }

    if (isLabel(shape) || isGroup(shape)) {
      return true;
    }

    if (isSame$1(source, target)) {
      return false;
    }

    // ensure we do not drop the element
    // into source
    if (source && isParent$1(source, target)) {
      return false;
    }

    return canDrop(shape, target) || canInsert(shape, target);
  }

  /**
   * @param {Shape} shape
   * @param {Rect} newBounds
   *
   * @return {boolean}
   */
  function canResize(shape, newBounds) {
    if (is$1(shape, 'bpmn:SubProcess')) {
      return (
        isExpanded(shape) && (
          !newBounds || (newBounds.width >= 100 && newBounds.height >= 80)
        )
      );
    }

    if (is$1(shape, 'bpmn:Lane')) {
      return true;
    }

    if (is$1(shape, 'bpmn:Participant')) {
      return true;
    }

    if (isTextAnnotation(shape)) {
      return true;
    }

    if (isGroup(shape)) {
      return true;
    }

    return false;
  }

  /**
   * Check whether one of of the elements to be connected is a text annotation.
   *
   * @param {Element} source
   * @param {Element} target
   *
   * @return {boolean}
   */
  function isOneTextAnnotation(source, target) {

    var sourceTextAnnotation = isTextAnnotation(source),
        targetTextAnnotation = isTextAnnotation(target);

    return (
      (sourceTextAnnotation || targetTextAnnotation) &&
      (sourceTextAnnotation !== targetTextAnnotation)
    );
  }

  /**
   * @param {Element} source
   * @param {Element} target
   *
   * @return {CanConnectResult}
   */
  function canConnectAssociation(source, target) {

    // don't connect parent <-> child
    if (isParent$1(target, source) || isParent$1(source, target)) {
      return false;
    }

    // allow connection of associations between <!TextAnnotation> and <TextAnnotation>
    if (isOneTextAnnotation(source, target)) {
      return true;
    }

    // can connect associations where we can connect
    // data associations, too (!)
    return !!canConnectDataAssociation(source, target);
  }

  /**
   * @param {Element} source
   * @param {Element} target
   *
   * @return {boolean}
   */
  function canConnectCompensationAssociation(source, target) {
    return (
      isSameScope(source, target) &&
      isCompensationBoundary(source) &&
      is$1(target, 'bpmn:Activity') &&
      !isHostOfElement(target, source) &&
      !isEventSubProcess(target)
    );
  }

  /**
   * @param {Element} source
   * @param {Element} target
   *
   * @return {boolean}
   */
  function canConnectMessageFlow(source, target) {

    // during connect user might move mouse out of canvas
    // https://github.com/bpmn-io/bpmn-js/issues/1033
    if (getRootElement(source) && !getRootElement(target)) {
      return false;
    }

    return (
      isMessageFlowSource(source) &&
      isMessageFlowTarget(target) &&
      !isSameOrganization(source, target)
    );
  }

  /**
   * @param {Element} source
   * @param {Element} target
   *
   * @return {boolean}
   */
  function canConnectSequenceFlow(source, target) {
    return isSequenceFlowSource(source) &&
           isSequenceFlowTarget(target) &&
           isSameScope(source, target) &&
           !(is$1(source, 'bpmn:EventBasedGateway') && !isEventBasedTarget(target));
  }

  /**
   * @param {Element} source
   * @param {Element} target
   *
   * @return {CanConnectResult}
   */
  function canConnectDataAssociation(source, target) {

    if (isAny(source, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
        isAny(target, [ 'bpmn:Activity', 'bpmn:ThrowEvent' ])) {
      return { type: 'bpmn:DataInputAssociation' };
    }

    if (isAny(target, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
        isAny(source, [ 'bpmn:Activity', 'bpmn:CatchEvent' ])) {
      return { type: 'bpmn:DataOutputAssociation' };
    }

    return false;
  }

  /**
   * @param {Shape} shape
   * @param {Connection} connection
   * @param {Point} position
   *
   * @return {boolean}
   */
  function canInsert(shape, connection, position) {
    if (!connection) {
      return false;
    }

    if (Array.isArray(shape)) {
      if (shape.length !== 1) {
        return false;
      }

      shape = shape[ 0 ];
    }

    if (connection.source === shape ||
        connection.target === shape) {
      return false;
    }

    // return true if shape can be inserted into connection parent
    return (
      isAny(connection, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ]) &&
      !isLabel(connection) &&
      is$1(shape, 'bpmn:FlowNode') &&
      !is$1(shape, 'bpmn:BoundaryEvent') &&
      canDrop(shape, connection.parent));
  }

  /**
   * @param {Element[]} elements
   * @param {Element} element
   *
   * @return {boolean}
   */
  function includes$5(elements, element) {
    return (elements && element) && elements.indexOf(element) !== -1;
  }

  /**
   * @param {Element[]} elements
   * @param {Element} element
   *
   * @return {boolean}
   */
  function canCopy(elements, element) {
    if (isLabel(element)) {
      return true;
    }

    if (is$1(element, 'bpmn:Lane') && !includes$5(elements, element.parent)) {
      return false;
    }

    return true;
  }

  /**
   * @param {Element} element
   *
   * @return {Element|null}
   */
  function getRootElement(element) {
    return getParent(element, 'bpmn:Process') || getParent(element, 'bpmn:Collaboration');
  }

  function isHostOfElement(potentialHost, element) {
    return potentialHost.attachers.includes(element);
  }

  var RulesModule = {
    __depends__: [
      RulesModule$1
    ],
    __init__: [ 'bpmnRules' ],
    bpmnRules: [ 'type', BpmnRules ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   */

  var HIGH_PRIORITY$b = 2000;

  /**
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function BpmnDiOrdering(eventBus, canvas) {

    eventBus.on('saveXML.start', HIGH_PRIORITY$b, orderDi);

    function orderDi() {
      var rootElements = canvas.getRootElements();

      forEach$1(rootElements, function(root) {
        var rootDi = getDi(root),
            elements,
            diElements;

        elements = selfAndAllChildren([ root ], false);

        // only bpmndi:Shape and bpmndi:Edge can be direct children of bpmndi:Plane
        elements = filter(elements, function(element) {
          return element !== root && !element.labelTarget;
        });

        diElements = map$1(elements, getDi);

        rootDi.set('planeElement', diElements);
      });
    }
  }

  BpmnDiOrdering.$inject = [ 'eventBus', 'canvas' ];

  var DiOrderingModule = {
    __init__: [
      'bpmnDiOrdering'
    ],
    bpmnDiOrdering: [ 'type', BpmnDiOrdering ]
  };

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  /**
   * An abstract provider that allows modelers to implement a custom
   * ordering of diagram elements on the canvas.
   *
   * It makes sure that the order is always preserved during element
   * creation and move operations.
   *
   * In order to use this behavior, inherit from it and override
   * the method {@link OrderingProvider#getOrdering}.
   *
   * @example
   *
   * ```javascript
   * function CustomOrderingProvider(eventBus) {
   *   OrderingProvider.call(this, eventBus);
   *
   *   this.getOrdering = function(element, newParent) {
   *     // always insert elements at the front
   *     // when moving
   *     return {
   *       index: 0,
   *       parent: newParent
   *     };
   *   };
   * }
   * ```
   *
   * @param {EventBus} eventBus
   */
  function OrderingProvider(eventBus) {

    CommandInterceptor.call(this, eventBus);


    var self = this;

    this.preExecute([ 'shape.create', 'connection.create' ], function(event) {

      var context = event.context,
          element = context.shape || context.connection,
          parent = context.parent;

      var ordering = self.getOrdering(element, parent);

      if (ordering) {

        if (ordering.parent !== undefined) {
          context.parent = ordering.parent;
        }

        context.parentIndex = ordering.index;
      }
    });

    this.preExecute([ 'shape.move', 'connection.move' ], function(event) {

      var context = event.context,
          element = context.shape || context.connection,
          parent = context.newParent || element.parent;

      var ordering = self.getOrdering(element, parent);

      if (ordering) {

        if (ordering.parent !== undefined) {
          context.newParent = ordering.parent;
        }

        context.newParentIndex = ordering.index;
      }
    });
  }

  /**
   * Return a custom ordering of the element, both in terms
   * of parent element and index in the new parent.
   *
   * Implementors of this method must return an object with
   * `parent` _and_ `index` in it.
   *
   * @param {Element} element
   * @param {Shape} newParent
   *
   * @return {Object} ordering descriptor
   */
  OrderingProvider.prototype.getOrdering = function(element, newParent) {
    return null;
  };

  e$3(OrderingProvider, CommandInterceptor);

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * A BPMN-specific ordering provider.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function BpmnOrderingProvider(eventBus, canvas) {

    OrderingProvider.call(this, eventBus);

    var orders = [
      { type: 'bpmn:SubProcess', order: { level: 6 } },

      // handle SequenceFlow(s) like message flows and render them always on top
      {
        type: 'bpmn:SequenceFlow',
        order: {
          level: 9,
          containers: [
            'bpmn:Participant',
            'bpmn:FlowElementsContainer'
          ]
        }
      },

      // handle DataAssociation(s) like message flows and render them always on top
      {
        type: 'bpmn:DataAssociation',
        order: {
          level: 9,
          containers: [
            'bpmn:Collaboration',
            'bpmn:FlowElementsContainer'
          ]
        }
      },
      {
        type: 'bpmn:TextAnnotation',
        order: {
          level: 9
        }
      },
      {
        type: 'bpmn:MessageFlow', order: {
          level: 9,
          containers: [ 'bpmn:Collaboration' ]
        }
      },
      {
        type: 'bpmn:Association',
        order: {
          level: 6,
          containers: [
            'bpmn:Participant',
            'bpmn:FlowElementsContainer',
            'bpmn:Collaboration'
          ]
        }
      },
      { type: 'bpmn:BoundaryEvent', order: { level: 8 } },
      {
        type: 'bpmn:Group',
        order: {
          level: 10,
          containers: [
            'bpmn:Collaboration',
            'bpmn:FlowElementsContainer'
          ]
        }
      },
      { type: 'bpmn:FlowElement', order: { level: 5 } },
      { type: 'bpmn:Participant', order: { level: -2 } },
      { type: 'bpmn:Lane', order: { level: -1 } }
    ];

    function computeOrder(element) {
      if (element.labelTarget) {
        return { level: 10 };
      }

      var entry = find$1(orders, function(o) {
        return isAny(element, [ o.type ]);
      });

      return entry && entry.order || { level: 1 };
    }

    function getOrder(element) {

      var order = element.order;

      if (!order) {
        element.order = order = computeOrder(element);
      }

      if (!order) {
        throw new Error(`no order for <${ element.id }>`);
      }

      return order;
    }

    function findActualParent(element, newParent, containers) {

      var actualParent = newParent;

      while (actualParent) {

        if (isAny(actualParent, containers)) {
          break;
        }

        actualParent = actualParent.parent;
      }

      if (!actualParent) {
        throw new Error(`no parent for <${ element.id }> in <${ newParent && newParent.id }>`);
      }

      return actualParent;
    }

    this.getOrdering = function(element, newParent) {

      // render labels and text annotations always on top
      if (element.labelTarget || is$1(element, 'bpmn:TextAnnotation')) {
        return {
          parent: canvas.findRoot(newParent) || canvas.getRootElement(),
          index: -1
        };
      }

      var elementOrder = getOrder(element);

      if (elementOrder.containers) {
        newParent = findActualParent(element, newParent, elementOrder.containers);
      }

      var currentIndex = newParent.children.indexOf(element);

      var insertIndex = findIndex(newParent.children, function(child) {

        // do not compare with labels, they are created
        // in the wrong order (right after elements) during import and
        // mess up the positioning.
        if (!element.labelTarget && child.labelTarget) {
          return false;
        }

        return elementOrder.level < getOrder(child).level;
      });


      // if the element is already in the child list at
      // a smaller index, we need to adjust the insert index.
      // this takes into account that the element is being removed
      // before being re-inserted
      if (insertIndex !== -1) {
        if (currentIndex !== -1 && currentIndex < insertIndex) {
          insertIndex -= 1;
        }
      }

      return {
        index: insertIndex,
        parent: newParent
      };
    };
  }

  BpmnOrderingProvider.$inject = [ 'eventBus', 'canvas' ];

  e$3(BpmnOrderingProvider, OrderingProvider);

  var OrderingModule = {
    __init__: [ 'bpmnOrderingProvider' ],
    bpmnOrderingProvider: [ 'type', BpmnOrderingProvider ]
  };

  /**
   * A clip board stub
   */
  function Clipboard() {}


  Clipboard.prototype.get = function() {
    return this._data;
  };

  Clipboard.prototype.set = function(data) {
    this._data = data;
  };

  Clipboard.prototype.clear = function() {
    var data = this._data;

    delete this._data;

    return data;
  };

  Clipboard.prototype.isEmpty = function() {
    return !this._data;
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ClipboardModule = {
    clipboard: [ 'type', Clipboard ]
  };

  var MARKER_OK$2 = 'drop-ok',
      MARKER_NOT_OK$2 = 'drop-not-ok',
      MARKER_ATTACH$2 = 'attach-ok',
      MARKER_NEW_PARENT$1 = 'new-parent';

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   */

  var PREFIX = 'create';

  var HIGH_PRIORITY$a = 2000;


  /**
   * Create new elements through drag and drop.
   *
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function Create(
      canvas,
      dragging,
      eventBus,
      modeling,
      rules
  ) {

    // rules //////////

    /**
     * Check wether elements can be created.
     *
     * @param {Element[]} elements
     * @param {Shape} target
     * @param {Point} position
     * @param {Element} [source]
     *
     * @return {boolean|null|Object}
     */
    function canCreate(elements, target, position, source, hints) {
      if (!target) {
        return false;
      }

      // ignore child elements and external labels
      elements = filter(elements, function(element) {
        var labelTarget = element.labelTarget;

        return !element.parent && !(isLabel(element) && elements.indexOf(labelTarget) !== -1);
      });

      var shape = find$1(elements, function(element) {
        return !isConnection(element);
      });

      var attach = false,
          connect = false,
          create = false;

      // (1) attaching single shapes
      if (isSingleShape(elements)) {
        attach = rules.allowed('shape.attach', {
          position: position,
          shape: shape,
          target: target
        });
      }

      if (!attach) {

        // (2) creating elements
        if (isSingleShape(elements)) {
          create = rules.allowed('shape.create', {
            position: position,
            shape: shape,
            source: source,
            target: target
          });
        } else {
          create = rules.allowed('elements.create', {
            elements: elements,
            position: position,
            target: target
          });
        }

      }

      var connectionTarget = hints.connectionTarget;

      // (3) appending single shapes
      if (create || attach) {
        if (shape && source) {
          connect = rules.allowed('connection.create', {
            source: connectionTarget === source ? shape : source,
            target: connectionTarget === source ? source : shape,
            hints: {
              targetParent: target,
              targetAttach: attach
            }
          });
        }

        return {
          attach: attach,
          connect: connect
        };
      }

      // ignore wether or not elements can be created
      if (create === null || attach === null) {
        return null;
      }

      return false;
    }

    function setMarker(element, marker) {
      [ MARKER_ATTACH$2, MARKER_OK$2, MARKER_NOT_OK$2, MARKER_NEW_PARENT$1 ].forEach(function(m) {

        if (m === marker) {
          canvas.addMarker(element, m);
        } else {
          canvas.removeMarker(element, m);
        }
      });
    }

    // event handling //////////

    eventBus.on([ 'create.move', 'create.hover' ], function(event) {
      var context = event.context,
          elements = context.elements,
          hover = event.hover,
          source = context.source,
          hints = context.hints || {};

      if (!hover) {
        context.canExecute = false;
        context.target = null;

        return;
      }

      ensureConstraints$1(event);

      var position = {
        x: event.x,
        y: event.y
      };

      var canExecute = context.canExecute = hover && canCreate(elements, hover, position, source, hints);

      if (hover && canExecute !== null) {
        context.target = hover;

        if (canExecute && canExecute.attach) {
          setMarker(hover, MARKER_ATTACH$2);
        } else {
          setMarker(hover, canExecute ? MARKER_NEW_PARENT$1 : MARKER_NOT_OK$2);
        }
      }
    });

    eventBus.on([ 'create.end', 'create.out', 'create.cleanup' ], function(event) {
      var hover = event.hover;

      if (hover) {
        setMarker(hover, null);
      }
    });

    eventBus.on('create.end', function(event) {
      var context = event.context,
          source = context.source,
          shape = context.shape,
          elements = context.elements,
          target = context.target,
          canExecute = context.canExecute,
          attach = canExecute && canExecute.attach,
          connect = canExecute && canExecute.connect,
          hints = context.hints || {};

      if (canExecute === false || !target) {
        return false;
      }

      ensureConstraints$1(event);

      var position = {
        x: event.x,
        y: event.y
      };

      if (connect) {
        shape = modeling.appendShape(source, shape, position, target, {
          attach: attach,
          connection: connect === true ? {} : connect,
          connectionTarget: hints.connectionTarget
        });
      } else {
        elements = modeling.createElements(elements, position, target, assign$1({}, hints, {
          attach: attach
        }));

        // update shape
        shape = find$1(elements, function(element) {
          return !isConnection(element);
        });
      }

      // update elements and shape
      assign$1(context, {
        elements: elements,
        shape: shape
      });

      assign$1(event, {
        elements: elements,
        shape: shape
      });
    });

    function cancel() {
      var context = dragging.context();

      if (context && context.prefix === PREFIX) {
        dragging.cancel();
      }
    }

    // cancel on <elements.changed> that is not result of <drag.end>
    eventBus.on('create.init', function() {
      eventBus.on('elements.changed', cancel);

      eventBus.once([ 'create.cancel', 'create.end' ], HIGH_PRIORITY$a, function() {
        eventBus.off('elements.changed', cancel);
      });
    });

    // API //////////

    /**
     * @param event
     * @param elements
     * @param {any} [context={}]
     */
    this.start = function(event, elements, context) {
      if (!isArray$3(elements)) {
        elements = [ elements ];
      }

      var shape = find$1(elements, function(element) {
        return !isConnection(element);
      });

      if (!shape) {

        // at least one shape is required
        return;
      }

      context = assign$1({
        elements: elements,
        hints: {},
        shape: shape
      }, context || {});

      // make sure each element has x and y
      forEach$1(elements, function(element) {
        if (!isNumber(element.x)) {
          element.x = 0;
        }

        if (!isNumber(element.y)) {
          element.y = 0;
        }
      });

      var visibleElements = filter(elements, function(element) {
        return !element.hidden;
      });

      var bbox = getBBox(visibleElements);

      // center elements around cursor
      forEach$1(elements, function(element) {
        if (isConnection(element)) {
          element.waypoints = map$1(element.waypoints, function(waypoint) {
            return {
              x: waypoint.x - bbox.x - bbox.width / 2,
              y: waypoint.y - bbox.y - bbox.height / 2
            };
          });
        }

        assign$1(element, {
          x: element.x - bbox.x - bbox.width / 2,
          y: element.y - bbox.y - bbox.height / 2
        });
      });

      dragging.init(event, PREFIX, {
        cursor: 'grabbing',
        autoActivate: true,
        data: {
          shape: shape,
          elements: elements,
          context: context
        }
      });
    };
  }

  Create.$inject = [
    'canvas',
    'dragging',
    'eventBus',
    'modeling',
    'rules'
  ];

  // helpers //////////

  function ensureConstraints$1(event) {
    var context = event.context,
        createConstraints = context.createConstraints;

    if (!createConstraints) {
      return;
    }

    if (createConstraints.left) {
      event.x = Math.max(event.x, createConstraints.left);
    }

    if (createConstraints.right) {
      event.x = Math.min(event.x, createConstraints.right);
    }

    if (createConstraints.top) {
      event.y = Math.max(event.y, createConstraints.top);
    }

    if (createConstraints.bottom) {
      event.y = Math.min(event.y, createConstraints.bottom);
    }
  }

  function isSingleShape(elements) {
    return elements && elements.length === 1 && !isConnection(elements[ 0 ]);
  }

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
   * @typedef {import('../preview-support/PreviewSupport').default} PreviewSupport
   * @typedef {import('../../draw/Styles').default} Styles
   */

  var LOW_PRIORITY$d = 750;

  /**
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {GraphicsFactory} graphicsFactory
   * @param {PreviewSupport} previewSupport
   * @param {Styles} styles
   */
  function CreatePreview(
      canvas,
      eventBus,
      graphicsFactory,
      previewSupport,
      styles
  ) {
    function createDragGroup(elements) {
      var dragGroup = create$1('g');

      attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

      var childrenGfx = create$1('g');

      elements.forEach(function(element) {

        // create graphics
        var gfx;

        if (element.hidden) {
          return;
        }

        if (element.waypoints) {
          gfx = graphicsFactory._createContainer('connection', childrenGfx);

          graphicsFactory.drawConnection(getVisual(gfx), element);
        } else {
          gfx = graphicsFactory._createContainer('shape', childrenGfx);

          graphicsFactory.drawShape(getVisual(gfx), element);

          translate$1(gfx, element.x, element.y);
        }

        // add preview
        previewSupport.addDragger(element, dragGroup, gfx);
      });

      return dragGroup;
    }

    eventBus.on('create.move', LOW_PRIORITY$d, function(event) {

      var hover = event.hover,
          context = event.context,
          elements = context.elements,
          dragGroup = context.dragGroup;

      // lazily create previews
      if (!dragGroup) {
        dragGroup = context.dragGroup = createDragGroup(elements);
      }

      var activeLayer;

      if (hover) {
        if (!dragGroup.parentNode) {
          activeLayer = canvas.getActiveLayer();

          append(activeLayer, dragGroup);
        }

        translate$1(dragGroup, event.x, event.y);
      } else {
        remove$3(dragGroup);
      }
    });

    eventBus.on('create.cleanup', function(event) {
      var context = event.context,
          dragGroup = context.dragGroup;

      if (dragGroup) {
        remove$3(dragGroup);
      }
    });
  }

  CreatePreview.$inject = [
    'canvas',
    'eventBus',
    'graphicsFactory',
    'previewSupport',
    'styles'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var CreateModule = {
    __depends__: [
      DraggingModule,
      PreviewSupportModule,
      RulesModule$1,
      SelectionModule
    ],
    __init__: [
      'create',
      'createPreview'
    ],
    create: [ 'type', Create ],
    createPreview: [ 'type', CreatePreview ]
  };

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  /**
   * @param {EventBus} eventBus
   */
  function Mouse(eventBus) {
    var self = this;

    this._lastMoveEvent = null;

    function setLastMoveEvent(mousemoveEvent) {
      self._lastMoveEvent = mousemoveEvent;
    }

    eventBus.on('canvas.init', function(context) {
      var svg = self._svg = context.svg;

      svg.addEventListener('mousemove', setLastMoveEvent);
    });

    eventBus.on('canvas.destroy', function() {
      self._lastMouseEvent = null;

      self._svg.removeEventListener('mousemove', setLastMoveEvent);
    });
  }

  Mouse.$inject = [ 'eventBus' ];

  Mouse.prototype.getLastMoveEvent = function() {
    return this._lastMoveEvent || createMoveEvent(0, 0);
  };

  // helpers //////////

  function createMoveEvent(x, y) {
    var event = document.createEvent('MouseEvent');

    var screenX = x,
        screenY = y,
        clientX = x,
        clientY = y;

    if (event.initMouseEvent) {
      event.initMouseEvent(
        'mousemove',
        true,
        true,
        window,
        0,
        screenX,
        screenY,
        clientX,
        clientY,
        false,
        false,
        false,
        false,
        0,
        null
      );
    }

    return event;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var MouseModule = {
    __init__: [ 'mouse' ],
    mouse: [ 'type', Mouse ]
  };

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../clipboard/Clipboard').default} Clipboard
   * @typedef {import('../create/Create').default} Create
   * @typedef {import('../../core/ElementFactory').default} ElementFactory
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../mouse/Mouse').default} Mouse
   * @typedef {import('../rules/Rules').default} Rules
   */

  /**
   * @typedef { (event: { elements: Element[] }) => Element[]|boolean } CopyPasteCanCopyElementsListener
   */

  /**
   * @typedef { (event: { descriptor: any, element: Element, elements: Element[] }) => void } CopyPasteCopyElementListener
   */

  /**
   * @typedef { (event: { element: Element, children: Element[] }) => void } CopyPasteCreateTreeListener
   */

  /**
   * @typedef { (event: { elements: any, tree: any }) => void } CopyPasteElementsCopiedListener
   */

  /**
   * @typedef { (event: { cache: any, descriptor: any }) => void } CopyPastePasteElementListener
   */

  /**
   * @typedef { (event: { hints: any }) => void } CopyPastePasteElementsListener
   */

  /**
   * Copy and paste elements.
   *
   * @param {Canvas} canvas
   * @param {Create} create
   * @param {Clipboard} clipboard
   * @param {ElementFactory} elementFactory
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {Mouse} mouse
   * @param {Rules} rules
   */
  function CopyPaste(
      canvas,
      create,
      clipboard,
      elementFactory,
      eventBus,
      modeling,
      mouse,
      rules
  ) {

    this._canvas = canvas;
    this._create = create;
    this._clipboard = clipboard;
    this._elementFactory = elementFactory;
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._mouse = mouse;
    this._rules = rules;

    eventBus.on('copyPaste.copyElement', function(context) {
      var descriptor = context.descriptor,
          element = context.element,
          elements = context.elements;

      // default priority (priority = 1)
      descriptor.priority = 1;

      descriptor.id = element.id;

      var parentCopied = find$1(elements, function(e) {
        return e === element.parent;
      });

      // do NOT reference parent if parent wasn't copied
      if (parentCopied) {
        descriptor.parent = element.parent.id;
      }

      // attachers (priority = 2)
      if (isAttacher$2(element)) {
        descriptor.priority = 2;

        descriptor.host = element.host.id;
      }

      // connections (priority = 3)
      if (isConnection(element)) {
        descriptor.priority = 3;

        descriptor.source = element.source.id;
        descriptor.target = element.target.id;

        descriptor.waypoints = copyWaypoints$1(element);
      }

      // labels (priority = 4)
      if (isLabel(element)) {
        descriptor.priority = 4;

        descriptor.labelTarget = element.labelTarget.id;
      }

      forEach$1([ 'x', 'y', 'width', 'height' ], function(property) {
        if (isNumber(element[ property ])) {
          descriptor[ property ] = element[ property ];
        }
      });

      descriptor.hidden = element.hidden;
      descriptor.collapsed = element.collapsed;

    });

    eventBus.on('copyPaste.pasteElements', function(context) {
      var hints = context.hints;

      assign$1(hints, {
        createElementsBehavior: false
      });
    });
  }

  CopyPaste.$inject = [
    'canvas',
    'create',
    'clipboard',
    'elementFactory',
    'eventBus',
    'modeling',
    'mouse',
    'rules'
  ];


  /**
   * Copy elements.
   *
   * @param {Element[]} elements
   *
   * @return {Object}
   */
  CopyPaste.prototype.copy = function(elements) {
    var allowed,
        tree;

    if (!isArray$3(elements)) {
      elements = elements ? [ elements ] : [];
    }

    allowed = this._eventBus.fire('copyPaste.canCopyElements', {
      elements: elements
    });

    if (allowed === false) {
      tree = {};
    } else {
      tree = this.createTree(isArray$3(allowed) ? allowed : elements);
    }

    // we set an empty tree, selection of elements
    // to copy was empty.
    this._clipboard.set(tree);

    this._eventBus.fire('copyPaste.elementsCopied', {
      elements: elements,
      tree: tree
    });

    return tree;
  };

  /**
   * Paste elements.
   *
   * @param {Object} [context]
   * @param {Shape} [context.element] The optional parent.
   * @param {Point} [context.point] The optional position.
   * @param {Object} [context.hints] The optional hints.
   */
  CopyPaste.prototype.paste = function(context) {
    var tree = this._clipboard.get();

    if (this._clipboard.isEmpty()) {
      return;
    }

    var hints = context && context.hints || {};

    this._eventBus.fire('copyPaste.pasteElements', {
      hints: hints
    });

    var elements = this._createElements(tree);

    // paste directly
    if (context && context.element && context.point) {
      return this._paste(elements, context.element, context.point, hints);
    }

    this._create.start(this._mouse.getLastMoveEvent(), elements, {
      hints: hints || {}
    });
  };

  /**
   * Paste elements directly.
   *
   * @param {Element[]} elements
   * @param {Shape} target
   * @param {Point} position
   * @param {Object} [hints]
   */
  CopyPaste.prototype._paste = function(elements, target, position, hints) {

    // make sure each element has x and y
    forEach$1(elements, function(element) {
      if (!isNumber(element.x)) {
        element.x = 0;
      }

      if (!isNumber(element.y)) {
        element.y = 0;
      }
    });

    var bbox = getBBox(elements);

    // center elements around cursor
    forEach$1(elements, function(element) {
      if (isConnection(element)) {
        element.waypoints = map$1(element.waypoints, function(waypoint) {
          return {
            x: waypoint.x - bbox.x - bbox.width / 2,
            y: waypoint.y - bbox.y - bbox.height / 2
          };
        });
      }

      assign$1(element, {
        x: element.x - bbox.x - bbox.width / 2,
        y: element.y - bbox.y - bbox.height / 2
      });
    });

    return this._modeling.createElements(elements, position, target, assign$1({}, hints));
  };

  /**
   * Create elements from tree.
   */
  CopyPaste.prototype._createElements = function(tree) {
    var self = this;

    var eventBus = this._eventBus;

    var cache = {};

    var elements = [];

    forEach$1(tree, function(branch, depth) {

      // sort by priority
      branch = sortBy(branch, 'priority');

      forEach$1(branch, function(descriptor) {

        // remove priority
        var attrs = assign$1({}, omit(descriptor, [ 'priority' ]));

        if (cache[ descriptor.parent ]) {
          attrs.parent = cache[ descriptor.parent ];
        } else {
          delete attrs.parent;
        }

        eventBus.fire('copyPaste.pasteElement', {
          cache: cache,
          descriptor: attrs
        });

        var element;

        if (isConnection(attrs)) {
          attrs.source = cache[ descriptor.source ];
          attrs.target = cache[ descriptor.target ];

          element = cache[ descriptor.id ] = self.createConnection(attrs);

          elements.push(element);

          return;
        }

        if (isLabel(attrs)) {
          attrs.labelTarget = cache[ attrs.labelTarget ];

          element = cache[ descriptor.id ] = self.createLabel(attrs);

          elements.push(element);

          return;
        }

        if (attrs.host) {
          attrs.host = cache[ attrs.host ];
        }

        element = cache[ descriptor.id ] = self.createShape(attrs);

        elements.push(element);
      });

    });

    return elements;
  };

  CopyPaste.prototype.createConnection = function(attrs) {
    var connection = this._elementFactory.createConnection(omit(attrs, [ 'id' ]));

    return connection;
  };

  CopyPaste.prototype.createLabel = function(attrs) {
    var label = this._elementFactory.createLabel(omit(attrs, [ 'id' ]));

    return label;
  };

  CopyPaste.prototype.createShape = function(attrs) {
    var shape = this._elementFactory.createShape(omit(attrs, [ 'id' ]));

    return shape;
  };

  /**
   * Check wether element has relations to other elements e.g. attachers, labels and connections.
   *
   * @param {Object} element
   * @param {Element[]} elements
   *
   * @return {boolean}
   */
  CopyPaste.prototype.hasRelations = function(element, elements) {
    var labelTarget,
        source,
        target;

    if (isConnection(element)) {
      source = find$1(elements, matchPattern({ id: element.source.id }));
      target = find$1(elements, matchPattern({ id: element.target.id }));

      if (!source || !target) {
        return false;
      }
    }

    if (isLabel(element)) {
      labelTarget = find$1(elements, matchPattern({ id: element.labelTarget.id }));

      if (!labelTarget) {
        return false;
      }
    }

    return true;
  };

  /**
   * Create a tree-like structure from elements.
   *
   * @example
   *
   * ```javascript
   * tree: {
   *  0: [
   *    { id: 'Shape_1', priority: 1, ... },
   *    { id: 'Shape_2', priority: 1, ... },
   *    { id: 'Connection_1', source: 'Shape_1', target: 'Shape_2', priority: 3, ... },
   *    ...
   *  ],
   *  1: [
   *    { id: 'Shape_3', parent: 'Shape1', priority: 1, ... },
   *    ...
   *  ]
   * };
   * ```
   *
   * @param {Element[]} elements
   *
   * @return {Object}
   */
  CopyPaste.prototype.createTree = function(elements) {
    var rules = this._rules,
        self = this;

    var tree = {},
        elementsData = [];

    var parents = getParents$1(elements);

    function canCopy(element, elements) {
      return rules.allowed('element.copy', {
        element: element,
        elements: elements
      });
    }

    function addElementData(element, depth) {

      // (1) check wether element has already been added
      var foundElementData = find$1(elementsData, function(elementsData) {
        return element === elementsData.element;
      });

      // (2) add element if not already added
      if (!foundElementData) {
        elementsData.push({
          element: element,
          depth: depth
        });

        return;
      }

      // (3) update depth
      if (foundElementData.depth < depth) {
        elementsData = removeElementData(foundElementData, elementsData);

        elementsData.push({
          element: foundElementData.element,
          depth: depth
        });
      }
    }

    function removeElementData(elementData, elementsData) {
      var index = elementsData.indexOf(elementData);

      if (index !== -1) {
        elementsData.splice(index, 1);
      }

      return elementsData;
    }

    // (1) add elements
    eachElement(parents, function(element, _index, depth) {

      // do NOT add external labels directly
      if (isLabel(element)) {
        return;
      }

      // always copy external labels
      forEach$1(element.labels, function(label) {
        addElementData(label, depth);
      });

      function addRelatedElements(elements) {
        elements && elements.length && forEach$1(elements, function(element) {

          // add external labels
          forEach$1(element.labels, function(label) {
            addElementData(label, depth);
          });

          addElementData(element, depth);
        });
      }

      forEach$1([ element.attachers, element.incoming, element.outgoing ], addRelatedElements);

      addElementData(element, depth);

      var children = [];

      if (element.children) {
        children = element.children.slice();
      }

      // allow others to add children to tree
      self._eventBus.fire('copyPaste.createTree', {
        element: element,
        children: children
      });

      return children;
    });

    elements = map$1(elementsData, function(elementData) {
      return elementData.element;
    });

    // (2) copy elements
    elementsData = map$1(elementsData, function(elementData) {
      elementData.descriptor = {};

      self._eventBus.fire('copyPaste.copyElement', {
        descriptor: elementData.descriptor,
        element: elementData.element,
        elements: elements
      });

      return elementData;
    });

    // (3) sort elements by priority
    elementsData = sortBy(elementsData, function(elementData) {
      return elementData.descriptor.priority;
    });

    elements = map$1(elementsData, function(elementData) {
      return elementData.element;
    });

    // (4) create tree
    forEach$1(elementsData, function(elementData) {
      var depth = elementData.depth;

      if (!self.hasRelations(elementData.element, elements)) {
        removeElement(elementData.element, elements);

        return;
      }

      if (!canCopy(elementData.element, elements)) {
        removeElement(elementData.element, elements);

        return;
      }

      if (!tree[depth]) {
        tree[depth] = [];
      }

      tree[depth].push(elementData.descriptor);
    });

    return tree;
  };

  // helpers //////////

  function isAttacher$2(element) {
    return !!element.host;
  }

  function copyWaypoints$1(element) {
    return map$1(element.waypoints, function(waypoint) {

      waypoint = copyWaypoint$1(waypoint);

      if (waypoint.original) {
        waypoint.original = copyWaypoint$1(waypoint.original);
      }

      return waypoint;
    });
  }

  function copyWaypoint$1(waypoint) {
    return assign$1({}, waypoint);
  }

  function removeElement(element, elements) {
    var index = elements.indexOf(element);

    if (index === -1) {
      return elements;
    }

    return elements.splice(index, 1);
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var CopyPasteModule$1 = {
    __depends__: [
      ClipboardModule,
      CreateModule,
      MouseModule,
      RulesModule$1
    ],
    __init__: [ 'copyPaste' ],
    copyPaste: [ 'type', CopyPaste ]
  };

  /**
   * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('./ModdleCopy').default} ModdleCopy
   */

  function copyProperties$1(source, target, properties) {
    if (!isArray$3(properties)) {
      properties = [ properties ];
    }

    forEach$1(properties, function(property) {
      if (!isUndefined$2(source[property])) {
        target[property] = source[property];
      }
    });
  }

  var LOW_PRIORITY$c = 750;

  /**
   * BPMN-specific copy & paste.
   *
   * @param {BpmnFactory} bpmnFactory
   * @param {EventBus} eventBus
   * @param {ModdleCopy} moddleCopy
   */
  function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {

    function copy(bo, clone) {
      var targetBo = bpmnFactory.create(bo.$type);

      return moddleCopy.copyElement(bo, targetBo, null, clone);
    }

    eventBus.on('copyPaste.copyElement', LOW_PRIORITY$c, function(context) {
      var descriptor = context.descriptor,
          element = context.element,
          businessObject = getBusinessObject(element);

      // do not copy business object + di for labels;
      // will be pulled from the referenced label target
      if (isLabel(element)) {
        return descriptor;
      }

      var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);
      var diCopy = descriptor.di = copy(getDi(element), true);
      diCopy.bpmnElement = businessObjectCopy;

      copyProperties$1(businessObjectCopy, descriptor, 'name');
      copyProperties$1(diCopy, descriptor, 'isExpanded');

      // default sequence flow
      if (businessObject.default) {
        descriptor.default = businessObject.default.id;
      }
    });

    var referencesKey = '-bpmn-js-refs';

    function getReferences(cache) {
      return (cache[referencesKey] = cache[referencesKey] || {});
    }

    function setReferences(cache, references) {
      cache[referencesKey] = references;
    }

    function resolveReferences(descriptor, cache, references) {
      var businessObject = getBusinessObject(descriptor);

      // default sequence flows
      if (descriptor.default) {

        // relationship cannot be resolved immediately
        references[ descriptor.default ] = {
          element: businessObject,
          property: 'default'
        };
      }

      // boundary events
      if (descriptor.host) {

        // relationship can be resolved immediately
        getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);
      }

      return omit(references, reduce(references, function(array, reference, key) {
        var element = reference.element,
            property = reference.property;

        if (key === descriptor.id) {
          element.set(property, businessObject);

          array.push(descriptor.id);
        }

        return array;
      }, []));
    }

    eventBus.on('copyPaste.pasteElement', function(context) {
      var cache = context.cache,
          descriptor = context.descriptor,
          businessObject = descriptor.businessObject,
          di = descriptor.di;

      // wire existing di + businessObject for external label
      if (isLabel(descriptor)) {
        descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);
        descriptor.di = getDi(cache[ descriptor.labelTarget ]);

        return;
      }

      businessObject = descriptor.businessObject = copy(businessObject);

      di = descriptor.di = copy(di);
      di.bpmnElement = businessObject;

      copyProperties$1(descriptor, businessObject, [
        'isExpanded',
        'name'
      ]);

      descriptor.type = businessObject.$type;
    });

    // copy + paste processRef with participant

    eventBus.on('copyPaste.copyElement', LOW_PRIORITY$c, function(context) {
      var descriptor = context.descriptor,
          element = context.element;

      if (!is$1(element, 'bpmn:Participant')) {
        return;
      }

      var participantBo = getBusinessObject(element);

      if (participantBo.processRef) {
        descriptor.processRef = copy(participantBo.processRef, true);
      }
    });

    eventBus.on('copyPaste.pasteElement', function(context) {
      var descriptor = context.descriptor,
          processRef = descriptor.processRef;

      if (processRef) {
        descriptor.processRef = copy(processRef);
      }
    });

    // resolve references

    eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$c, function(context) {
      var cache = context.cache,
          descriptor = context.descriptor;

      // resolve references e.g. default sequence flow
      setReferences(
        cache,
        resolveReferences(descriptor, cache, getReferences(cache))
      );
    });

  }


  BpmnCopyPaste.$inject = [
    'bpmnFactory',
    'eventBus',
    'moddleCopy'
  ];

  const DISALLOWED_PROPERTIES = [
    'artifacts',
    'dataInputAssociations',
    'dataOutputAssociations',
    'default',
    'flowElements',
    'lanes',
    'incoming',
    'outgoing',
    'categoryValue'
  ];

  const ALLOWED_REFERENCES = [
    'errorRef',
    'escalationRef',
    'messageRef',
    'signalRef'
  ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
   * @typedef {import('../../model/Types').Moddle} Moddle
   *
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   */

  /**
   * Utility for copying model properties from source element to target element.
   *
   * @param {EventBus} eventBus
   * @param {BpmnFactory} bpmnFactory
   * @param {Moddle} moddle
   */
  function ModdleCopy(eventBus, bpmnFactory, moddle) {
    this._bpmnFactory = bpmnFactory;
    this._eventBus = eventBus;
    this._moddle = moddle;

    // copy extension elements last
    eventBus.on('moddleCopy.canCopyProperties', (context) => {
      const { propertyNames } = context;

      if (!propertyNames || !propertyNames.length) {
        return;
      }

      return sortBy(propertyNames, (propertyName) => {
        return propertyName === 'extensionElements';
      });
    });

    // default check whether property can be copied
    eventBus.on('moddleCopy.canCopyProperty', (context) => {
      const {
        parent,
        property,
        propertyName
      } = context;

      const parentDescriptor = isObject(parent) && parent.$descriptor;

      if (propertyName && ALLOWED_REFERENCES.includes(propertyName)) {

        // allow copying reference
        return property;
      }

      if (propertyName && DISALLOWED_PROPERTIES.includes(propertyName)) {

        // disallow copying property
        return false;
      }

      if (propertyName &&
        parentDescriptor &&
        !find$1(parentDescriptor.properties, matchPattern({ name: propertyName }))) {

        // disallow copying property
        return false;
      }
    });

    // do NOT allow to copy empty extension elements
    eventBus.on('moddleCopy.canSetCopiedProperty', (context) => {
      const { property } = context;

      if (is$1(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {

        // disallow setting copied property
        return false;
      }
    });
  }

  ModdleCopy.$inject = [
    'eventBus',
    'bpmnFactory',
    'moddle'
  ];

  /**
   * Copy model properties of source element to target element.
   *
   * @param {ModdleElement} sourceElement
   * @param {ModdleElement} targetElement
   * @param {string[]} [propertyNames]
   * @param {boolean} [clone=false]
   *
   * @return {ModdleElement}
   */
  ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames, clone = false) {
    if (propertyNames && !isArray$3(propertyNames)) {
      propertyNames = [ propertyNames ];
    }

    propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);

    const canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {
      propertyNames: propertyNames,
      sourceElement: sourceElement,
      targetElement: targetElement,
      clone: clone
    });

    if (canCopyProperties === false) {
      return targetElement;
    }

    if (isArray$3(canCopyProperties)) {
      propertyNames = canCopyProperties;
    }

    // copy properties
    forEach$1(propertyNames, (propertyName) => {
      let sourceProperty;

      if (has$1(sourceElement, propertyName)) {
        sourceProperty = sourceElement.get(propertyName);
      }

      const copiedProperty = this.copyProperty(sourceProperty, targetElement, propertyName, clone);

      if (!isDefined(copiedProperty)) {
        return;
      }

      const canSetProperty = this._eventBus.fire('moddleCopy.canSetCopiedProperty', {
        parent: targetElement,
        property: copiedProperty,
        propertyName: propertyName
      });

      if (canSetProperty === false) {
        return;
      }

      // TODO(nikku): unclaim old IDs if ID property is copied over
      // this._moddle.getPropertyDescriptor(parent, propertyName)
      targetElement.set(propertyName, copiedProperty);
    });

    return targetElement;
  };

  /**
   * Copy model property.
   *
   * @param {any} property
   * @param {ModdleElement} parent
   * @param {string} propertyName
   * @param {boolean} [clone=false]
   *
   * @return {any}
   */
  ModdleCopy.prototype.copyProperty = function(property, parent, propertyName, clone = false) {

    // allow others to copy property
    let copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {
      parent: parent,
      property: property,
      propertyName: propertyName,
      clone: clone
    });

    // return if copying is NOT allowed
    if (copiedProperty === false) {
      return;
    }

    if (copiedProperty) {
      if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {
        copiedProperty.$parent = parent;
      }

      return copiedProperty;
    }

    const propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);

    // do NOT copy references
    if (propertyDescriptor.isReference) {
      return;
    }

    // copy id
    if (propertyDescriptor.isId) {
      return property && this._copyId(property, parent, clone);
    }

    // copy arrays
    if (isArray$3(property)) {
      return reduce(property, (childProperties, childProperty) => {

        // recursion
        const copiedProperty = this.copyProperty(childProperty, parent, propertyName, clone);

        // copying might NOT be allowed
        if (copiedProperty) {
          return childProperties.concat(copiedProperty);
        }

        return childProperties;
      }, []);
    }

    // copy model elements
    if (isObject(property) && property.$type) {
      if (this._moddle.getElementDescriptor(property).isGeneric) {
        return;
      }

      copiedProperty = this._bpmnFactory.create(property.$type);

      copiedProperty.$parent = parent;

      // recursion
      copiedProperty = this.copyElement(property, copiedProperty, null, clone);

      return copiedProperty;
    }

    // copy primitive properties
    return property;
  };

  ModdleCopy.prototype._copyId = function(id, element, clone = false) {
    if (clone) {
      return id;
    }

    // disallow if already taken
    if (this._moddle.ids.assigned(id)) {
      return;
    } else {

      this._moddle.ids.claim(id, element);
      return id;
    }
  };

  // helpers //////////

  function getPropertyNames(descriptor, keepDefaultProperties) {
    return reduce(descriptor.properties, (properties, property) => {

      if (keepDefaultProperties && property.default) {
        return properties;
      }

      return properties.concat(property.name);
    }, []);
  }

  var CopyPasteModule = {
    __depends__: [
      CopyPasteModule$1
    ],
    __init__: [ 'bpmnCopyPaste', 'moddleCopy' ],
    bpmnCopyPaste: [ 'type', BpmnCopyPaste ],
    moddleCopy: [ 'type', ModdleCopy ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   *
   * @typedef {import('../../core/Types').ShapeLike} Shape
   */

  var round$6 = Math.round;

  /**
   * Service that allows replacing of elements.
   *
   * @param {Modeling} modeling
   * @param {EventBus} eventBus
   */
  function Replace(modeling, eventBus) {
    this._modeling = modeling;
    this._eventBus = eventBus;
  }

  Replace.$inject = [ 'modeling', 'eventBus' ];

  /**
   * Replace an element.
   *
   * @param {Shape} oldElement The element to be replaced.
   * @param {Object} attrs Containing information about the new element, for
   * example the new bounds and type.
   * @param {Object} hints Custom hints that will be attached to the context. It
   * can be used to inject data that is needed in the command chain. For example
   * it could be used in eventbus.on('commandStack.shape.replace.postExecute') to
   * change shape attributes after shape creation.
   *
   * @return {Shape}
   */
  Replace.prototype.replaceElement = function(oldElement, attrs, hints) {

    if (oldElement.waypoints) {

      // TODO(nikku): we do not replace connections, yet
      return null;
    }

    var modeling = this._modeling;
    var eventBus = this._eventBus;

    eventBus.fire('replace.start', {
      element: oldElement,
      attrs,
      hints
    });

    var width = attrs.width || oldElement.width,
        height = attrs.height || oldElement.height,
        x = attrs.x || oldElement.x,
        y = attrs.y || oldElement.y,
        centerX = round$6(x + width / 2),
        centerY = round$6(y + height / 2);

    // modeling API requires center coordinates,
    // account for that when handling shape bounds

    var newElement = modeling.replaceShape(
      oldElement,
      assign$1(
        {},
        attrs,
        {
          x: centerX,
          y: centerY,
          width: width,
          height: height
        }
      ),
      hints
    );

    eventBus.fire('replace.end', {
      element: oldElement,
      newElement,
      hints
    });

    return newElement;
  };

  function ReplaceSelectionBehavior(selection, eventBus) {

    eventBus.on('replace.end', 500, function(event) {
      const {
        newElement,
        hints = {}
      } = event;

      if (hints.select === false) {
        return;
      }

      selection.select(newElement);
    });

  }

  ReplaceSelectionBehavior.$inject = [ 'selection', 'eventBus' ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ReplaceModule$1 = {
    __init__: [ 'replace', 'replaceSelectionBehavior' ],
    replaceSelectionBehavior: [ 'type', ReplaceSelectionBehavior ],
    replace: [ 'type', Replace ]
  };

  /**
   * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
   * @typedef {import('../modeling/ElementFactory').default} ElementFactory
   * @typedef {import('../copy-paste/ModdleCopy').default} ModdleCopy
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('diagram-js/lib/features/replace/Replace').default} Replace
   * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   *
   * @typedef { {
   *   type: string;
   *   cancelActivity: boolean;
   *   instantiate: boolean;
   *   eventGatewayType: string;
   *   triggeredByEvent: boolean;
   *   isInterrupting: boolean;
   *   collapsed: boolean;
   *   isExpanded: boolean;
   *   eventDefinitionType: string;
   *   eventDefinitionAttrs: Object;
   *   host: Shape;
   * } } TargetElement
   *
   * @typedef { {
   *   moveChildren: boolean;
   * } & Record<string, any> } Hints
   */

  function copyProperties(source, target, properties) {
    if (!isArray$3(properties)) {
      properties = [ properties ];
    }

    forEach$1(properties, function(property) {
      if (!isUndefined$2(source[property])) {
        target[property] = source[property];
      }
    });
  }


  var CUSTOM_PROPERTIES = [
    'cancelActivity',
    'instantiate',
    'eventGatewayType',
    'triggeredByEvent',
    'isInterrupting'
  ];

  /**
   * Check if element should be collapsed or expanded.
   */
  function shouldToggleCollapsed(element, targetElement) {

    var oldCollapsed = (
      element && has$1(element, 'collapsed') ? element.collapsed : !isExpanded(element)
    );

    var targetCollapsed;

    if (targetElement && (has$1(targetElement, 'collapsed') || has$1(targetElement, 'isExpanded'))) {

      // property is explicitly set so use it
      targetCollapsed = (
        has$1(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded
      );
    } else {

      // keep old state
      targetCollapsed = oldCollapsed;
    }

    if (oldCollapsed !== targetCollapsed) {
      return true;
    }

    return false;
  }


  /**
   * BPMN-specific replace.
   *
   * @param {BpmnFactory} bpmnFactory
   * @param {ElementFactory} elementFactory
   * @param {ModdleCopy} moddleCopy
   * @param {Modeling} modeling
   * @param {Replace} replace
   * @param {Rules} rules
   */
  function BpmnReplace(
      bpmnFactory,
      elementFactory,
      moddleCopy,
      modeling,
      replace,
      rules
  ) {

    /**
     * Prepares a new business object for the replacement element
     * and triggers the replace operation.
     *
     * @param  {Element} element
     * @param  {TargetElement} targetElement
     * @param  {Hints} [hints]
     *
     * @return {Element}
     */
    function replaceElement(element, targetElement, hints) {

      hints = hints || {};

      var type = targetElement.type,
          oldBusinessObject = element.businessObject;

      if (isSubProcess(oldBusinessObject) && (type === 'bpmn:SubProcess' || type === 'bpmn:AdHocSubProcess')) {
        if (shouldToggleCollapsed(element, targetElement)) {

          // expanding or collapsing process
          modeling.toggleCollapse(element);

          return element;
        }
      }

      var newBusinessObject = bpmnFactory.create(type);

      var newElement = {
        type: type,
        businessObject: newBusinessObject,
      };

      newElement.di = {};

      if (type === 'bpmn:ExclusiveGateway') {
        newElement.di.isMarkerVisible = true;
      }

      // colors will be set to DI
      copyProperties(element.di, newElement.di, [
        'fill',
        'stroke',
        'background-color',
        'border-color',
        'color'
      ]);

      var elementProps = getPropertyNames(oldBusinessObject.$descriptor),
          newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),
          copyProps = intersection(elementProps, newElementProps);

      // initialize special properties defined in target definition
      assign$1(newBusinessObject, pick(targetElement, CUSTOM_PROPERTIES));

      var properties = filter(copyProps, function(propertyName) {

        // copying event definitions, unless we replace
        if (propertyName === 'eventDefinitions') {
          return hasEventDefinition(element, targetElement.eventDefinitionType);
        }

        // retain loop characteristics if the target element
        // is not an event sub process
        if (propertyName === 'loopCharacteristics') {
          return !isEventSubProcess(newBusinessObject);
        }

        // so the applied properties from 'target' don't get lost
        if (has$1(newBusinessObject, propertyName)) {
          return false;
        }

        if (propertyName === 'processRef' && targetElement.isExpanded === false) {
          return false;
        }

        if (propertyName === 'triggeredByEvent') {
          return false;
        }

        if (propertyName === 'isForCompensation') {
          return !isEventSubProcess(newBusinessObject);
        }

        return true;
      });

      newBusinessObject = moddleCopy.copyElement(
        oldBusinessObject,
        newBusinessObject,
        properties
      );

      // initialize custom BPMN extensions
      if (targetElement.eventDefinitionType) {

        // only initialize with new eventDefinition
        // if we did not set an event definition yet,
        // i.e. because we copied it
        if (!hasEventDefinition(newBusinessObject, targetElement.eventDefinitionType)) {
          newElement.eventDefinitionType = targetElement.eventDefinitionType;
          newElement.eventDefinitionAttrs = targetElement.eventDefinitionAttrs;
        }
      }

      if (is$1(oldBusinessObject, 'bpmn:Activity')) {

        if (isSubProcess(oldBusinessObject)) {

          // no toggeling, so keep old state
          newElement.isExpanded = isExpanded(element);
        }

        // else if property is explicitly set, use it
        else if (targetElement && has$1(targetElement, 'isExpanded')) {
          newElement.isExpanded = targetElement.isExpanded;

          // assign default size of new expanded element
          var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {
            isExpanded: newElement.isExpanded
          });

          newElement.width = defaultSize.width;
          newElement.height = defaultSize.height;

          // keep element centered
          newElement.x = element.x - (newElement.width - element.width) / 2;
          newElement.y = element.y - (newElement.height - element.height) / 2;
        }

        // TODO: need also to respect min/max Size
        // copy size, from an expanded subprocess to an expanded alternative subprocess
        // except bpmn:Task, because Task is always expanded
        if ((isExpanded(element) && !is$1(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {
          newElement.width = element.width;
          newElement.height = element.height;
        }
      }

      // remove children if not expanding sub process
      if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {
        hints.moveChildren = false;
      }

      // transform collapsed/expanded pools
      if (is$1(oldBusinessObject, 'bpmn:Participant')) {

        // create expanded pool
        if (targetElement.isExpanded === true) {
          newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');
        } else {

          // remove children when transforming to collapsed pool
          hints.moveChildren = false;
        }

        // apply same directionality
        var isHorizontalPool = isHorizontal$3(element);
        if (!getDi(element).isHorizontal) {
          getDi(newElement).isHorizontal = isHorizontalPool;
        }

        // keep the existing size of the pool's direction to
        // prevent dangling message flows
        newElement.width = isHorizontalPool ? element.width : elementFactory.getDefaultSize(newElement).width;
        newElement.height = isHorizontalPool ? elementFactory.getDefaultSize(newElement).height : element.height;
      }

      if (!rules.allowed('shape.resize', { shape: newBusinessObject })) {
        newElement.height = elementFactory.getDefaultSize(newElement).height;
        newElement.width = elementFactory.getDefaultSize(newElement).width;
      }

      newBusinessObject.name = oldBusinessObject.name;

      // retain default flow's reference between inclusive <-> exclusive gateways and activities
      if (
        isAny(oldBusinessObject, [
          'bpmn:ExclusiveGateway',
          'bpmn:InclusiveGateway',
          'bpmn:Activity'
        ]) &&
        isAny(newBusinessObject, [
          'bpmn:ExclusiveGateway',
          'bpmn:InclusiveGateway',
          'bpmn:Activity'
        ])
      ) {
        newBusinessObject.default = oldBusinessObject.default;
      }

      if (
        targetElement.host &&
        !is$1(oldBusinessObject, 'bpmn:BoundaryEvent') &&
        is$1(newBusinessObject, 'bpmn:BoundaryEvent')
      ) {
        newElement.host = targetElement.host;
      }

      // The DataStoreReference element is 14px wider than the DataObjectReference element
      // This ensures that they stay centered on the x axis when replaced
      if (
        newElement.type === 'bpmn:DataStoreReference' ||
        newElement.type === 'bpmn:DataObjectReference'
      ) {
        newElement.x = element.x + (element.width - newElement.width) / 2;
      }

      return replace.replaceElement(element, newElement, { ...hints, targetElement });
    }

    this.replaceElement = replaceElement;
  }

  BpmnReplace.$inject = [
    'bpmnFactory',
    'elementFactory',
    'moddleCopy',
    'modeling',
    'replace',
    'rules'
  ];

  /**
   * @param {ModdleElement} businessObject
   *
   * @return {boolean}
   */
  function isSubProcess(businessObject) {
    return is$1(businessObject, 'bpmn:SubProcess');
  }

  /**
   * @param {Element|ModdleElement} element
   * @param {string} type
   *
   * @return {boolean}
   */
  function hasEventDefinition(element, type) {
    var businessObject = getBusinessObject(element);

    return type && businessObject.get('eventDefinitions').some(function(definition) {
      return is$1(definition, type);
    });
  }

  /**
   * Compute intersection between two arrays.
   *
   * @param {Array} a
   * @param {Array} b
   *
   * @return {Array}
   */
  function intersection(a, b) {
    return a.filter(function(item) {
      return b.includes(item);
    });
  }

  var ReplaceModule = {
    __depends__: [
      CopyPasteModule,
      ReplaceModule$1,
      SelectionModule
    ],
    bpmnReplace: [ 'type', BpmnReplace ]
  };

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('../../core/EventBus').Event} Event
   */

  var LOW_PRIORITY$b = 250;

  /**
   * The tool manager acts as middle-man between the available tool's and the Palette,
   * it takes care of making sure that the correct active state is set.
   *
   * @param {EventBus} eventBus
   */
  function ToolManager(eventBus) {
    this._eventBus = eventBus;

    this._tools = [];
    this._active = null;
  }

  ToolManager.$inject = [ 'eventBus' ];

  /**
   * Register a tool.
   *
   * @param {string} name
   * @param { {
   *   tool: string;
   * } } events
   */
  ToolManager.prototype.registerTool = function(name, events) {
    var tools = this._tools;

    if (!events) {
      throw new Error('A tool has to be registered with it\'s "events"');
    }

    tools.push(name);
    this.bindEvents(name, events);
  };

  ToolManager.prototype.isActive = function(tool) {
    return tool && this._active === tool;
  };

  ToolManager.prototype.length = function(tool) {
    return this._tools.length;
  };

  ToolManager.prototype.setActive = function(tool) {
    var eventBus = this._eventBus;

    if (this._active !== tool) {
      this._active = tool;

      eventBus.fire('tool-manager.update', { tool: tool });
    }
  };

  ToolManager.prototype.bindEvents = function(name, events) {
    var eventBus = this._eventBus;

    var eventsToRegister = [];

    eventBus.on(events.tool + '.init', function(event) {
      var context = event.context;

      // Active tools that want to reactivate themselves must do this explicitly
      if (!context.reactivate && this.isActive(name)) {
        this.setActive(null);

        return;
      }

      this.setActive(name);

    }, this);

    // TODO: add test cases
    forEach$1(events, function(event) {
      eventsToRegister.push(event + '.ended');
      eventsToRegister.push(event + '.canceled');
    });

    eventBus.on(eventsToRegister, LOW_PRIORITY$b, function(event) {

      // We defer the de-activation of the tool to the .activate phase,
      // so we're able to check if we want to toggle off the current
      // active tool or switch to a new one
      if (!this._active) {
        return;
      }

      if (isPaletteClick(event)) {
        return;
      }

      this.setActive(null);
    }, this);

  };


  // helpers ///////////////

  /**
   * Check if a given event is a palette click event.
   *
   * @param {Event} event
   *
   * @return {boolean}
   */
  function isPaletteClick(event) {
    var target = event.originalEvent && event.originalEvent.target;

    return target && closest(target, '.group[data-group="tools"]');
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ToolManagerModule = {
    __depends__: [
      DraggingModule
    ],
    __init__: [ 'toolManager' ],
    toolManager: [ 'type', ToolManager ]
  };

  /**
   * @typedef {import('../../core/Types').ConnectionLike} Connection
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').Rect} Rect
   */


  /**
   * Return direction given axis and delta.
   *
   * @param {Axis} axis
   * @param {number} delta
   *
   * @return {Direction}
   */
  function getDirection(axis, delta) {

    if (axis === 'x') {
      if (delta > 0) {
        return 'e';
      }

      if (delta < 0) {
        return 'w';
      }
    }

    if (axis === 'y') {
      if (delta > 0) {
        return 's';
      }

      if (delta < 0) {
        return 'n';
      }
    }

    return null;
  }

  /**
   * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start
   * or end is to be moved or resized.
   *
   * @param {Array<Shape>} movingShapes
   * @param {Array<Shape>} resizingShapes
   *
   * @return {Array<Connection>}
   */
  function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {
    var waypointsUpdatingConnections = [];

    forEach$1(movingShapes.concat(resizingShapes), function(shape) {
      var incoming = shape.incoming,
          outgoing = shape.outgoing;

      forEach$1(incoming.concat(outgoing), function(connection) {
        var source = connection.source,
            target = connection.target;

        if (includes$4(movingShapes, source) ||
          includes$4(movingShapes, target) ||
          includes$4(resizingShapes, source) ||
          includes$4(resizingShapes, target)) {

          if (!includes$4(waypointsUpdatingConnections, connection)) {
            waypointsUpdatingConnections.push(connection);
          }
        }
      });
    });

    return waypointsUpdatingConnections;
  }

  function includes$4(array, item) {
    return array.indexOf(item) !== -1;
  }

  /**
   * Resize bounds.
   *
   * @param {Rect} bounds
   * @param {Direction} direction
   * @param {Point} delta
   *
   * @return {Rect}
   */
  function resizeBounds(bounds, direction, delta) {
    var x = bounds.x,
        y = bounds.y,
        width = bounds.width,
        height = bounds.height,
        dx = delta.x,
        dy = delta.y;

    switch (direction) {
    case 'n':
      return {
        x: x,
        y: y + dy,
        width: width,
        height: height - dy
      };
    case 's':
      return {
        x: x,
        y: y,
        width: width,
        height: height + dy
      };
    case 'w':
      return {
        x: x + dx,
        y: y,
        width: width - dx,
        height: height
      };
    case 'e':
      return {
        x: x,
        y: y,
        width: width + dx,
        height: height
      };
    default:
      throw new Error('unknown direction: ' + direction);
    }
  }

  /**
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../mouse/Mouse').default} Mouse
   * @typedef {import('../rules/Rules').default} Rules
   * @typedef {import('../tool-manager/ToolManager').default} ToolManager
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Point} Point
   */

  var abs$1 = Math.abs,
      round$5 = Math.round;

  var AXIS_TO_DIMENSION = {
    x: 'width',
    y: 'height'
  };

  var CURSOR_CROSSHAIR = 'crosshair';

  var DIRECTION_TO_TRBL = {
    n: 'top',
    w: 'left',
    s: 'bottom',
    e: 'right'
  };

  var HIGH_PRIORITY$9 = 1500;

  var DIRECTION_TO_OPPOSITE = {
    n: 's',
    w: 'e',
    s: 'n',
    e: 'w'
  };

  var PADDING = 20;


  /**
   * Add or remove space by moving and resizing elements.
   *
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   * @param {Rules} rules
   * @param {ToolManager} toolManager
   * @param {Mouse} mouse
   */
  function SpaceTool(
      canvas, dragging, eventBus,
      modeling, rules, toolManager,
      mouse) {

    this._canvas = canvas;
    this._dragging = dragging;
    this._eventBus = eventBus;
    this._modeling = modeling;
    this._rules = rules;
    this._toolManager = toolManager;
    this._mouse = mouse;

    var self = this;

    toolManager.registerTool('space', {
      tool: 'spaceTool.selection',
      dragging: 'spaceTool'
    });

    eventBus.on('spaceTool.selection.end', function(event) {
      eventBus.once('spaceTool.selection.ended', function() {
        self.activateMakeSpace(event.originalEvent);
      });
    });

    eventBus.on('spaceTool.move', HIGH_PRIORITY$9 , function(event) {
      var context = event.context,
          initialized = context.initialized;

      if (!initialized) {
        initialized = context.initialized = self.init(event, context);
      }

      if (initialized) {
        ensureConstraints(event);
      }
    });

    eventBus.on('spaceTool.end', function(event) {
      var context = event.context,
          axis = context.axis,
          direction = context.direction,
          movingShapes = context.movingShapes,
          resizingShapes = context.resizingShapes,
          start = context.start;

      if (!context.initialized) {
        return;
      }

      ensureConstraints(event);

      var delta = {
        x: 0,
        y: 0
      };

      delta[ axis ] = round$5(event[ 'd' + axis ]);

      self.makeSpace(movingShapes, resizingShapes, delta, direction, start);

      eventBus.once('spaceTool.ended', function(event) {

        // activate space tool selection after make space
        self.activateSelection(event.originalEvent, true, true);
      });
    });
  }

  SpaceTool.$inject = [
    'canvas',
    'dragging',
    'eventBus',
    'modeling',
    'rules',
    'toolManager',
    'mouse'
  ];

  /**
   * Activate space tool selection.
   *
   * @param {MouseEvent|TouchEvent} event
   * @param {boolean} autoActivate
   * @param {boolean} reactivate
   */
  SpaceTool.prototype.activateSelection = function(event, autoActivate, reactivate) {
    this._dragging.init(event, 'spaceTool.selection', {
      autoActivate: autoActivate,
      cursor: CURSOR_CROSSHAIR,
      data: {
        context: {
          reactivate: reactivate
        }
      },
      trapClick: false
    });
  };

  /**
   * Activate space tool make space.
   *
   * @param {MouseEvent|TouchEvent} event
   */
  SpaceTool.prototype.activateMakeSpace = function(event) {
    this._dragging.init(event, 'spaceTool', {
      autoActivate: true,
      cursor: CURSOR_CROSSHAIR,
      data: {
        context: {}
      }
    });
  };

  /**
   * Make space.
   *
   * @param {Array<Shape>} movingShapes
   * @param {Array<Shape>} resizingShapes
   * @param {Point} delta
   * @param {Direction} direction
   * @param {number} start
   */
  SpaceTool.prototype.makeSpace = function(movingShapes, resizingShapes, delta, direction, start) {
    return this._modeling.createSpace(movingShapes, resizingShapes, delta, direction, start);
  };

  /**
   * Initialize make space and return true if that was successful.
   *
   * @param {MouseEvent|TouchEvent} event
   * @param {Object} context
   *
   * @return {boolean}
   */
  SpaceTool.prototype.init = function(event, context) {
    var axis = abs$1(event.dx) > abs$1(event.dy) ? 'x' : 'y',
        delta = event[ 'd' + axis ],
        start = event[ axis ] - delta;

    if (abs$1(delta) < 5) {
      return false;
    }

    // invert delta to remove space when moving left
    if (delta < 0) {
      delta *= -1;
    }

    // invert delta to add/remove space when removing/adding space if modifier key is pressed
    if (hasPrimaryModifier(event)) {
      delta *= -1;
    }

    var direction = getDirection(axis, delta);

    var root = this._canvas.getRootElement();

    if (!hasSecondaryModifier(event) && event.hover) {
      root = event.hover;
    }

    var children = [
      ...selfAndAllChildren(root, true),
      ...(root.attachers || [])
    ];

    var elements = this.calculateAdjustments(children, axis, delta, start);

    var minDimensions = this._eventBus.fire('spaceTool.getMinDimensions', {
      axis: axis,
      direction: direction,
      shapes: elements.resizingShapes,
      start: start
    });

    var spaceToolConstraints = getSpaceToolConstraints(elements, axis, direction, start, minDimensions);

    assign$1(
      context,
      elements,
      {
        axis: axis,
        direction: direction,
        spaceToolConstraints: spaceToolConstraints,
        start: start
      }
    );

    set('resize-' + (axis === 'x' ? 'ew' : 'ns'));

    return true;
  };

  /**
   * Get elements to be moved and resized.
   *
   * @param {Array<Shape>} elements
   * @param {Axis} axis
   * @param {Point} delta
   * @param {number} start
   *
   * @return {Object}
   */
  SpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {
    var rules = this._rules;

    var movingShapes = [],
        resizingShapes = [];

    var attachers = [],
        connections = [];

    function moveShape(shape) {
      if (!movingShapes.includes(shape)) {
        movingShapes.push(shape);
      }

      var label = shape.label;

      // move external label if its label target is moving
      if (label && !movingShapes.includes(label)) {
        movingShapes.push(label);
      }
    }

    function resizeShape(shape) {
      if (!resizingShapes.includes(shape)) {
        resizingShapes.push(shape);
      }
    }

    forEach$1(elements, function(element) {
      if (!element.parent || isLabel(element)) {
        return;
      }

      // handle connections separately
      if (isConnection(element)) {
        connections.push(element);

        return;
      }

      var shapeStart = element[ axis ],
          shapeEnd = shapeStart + element[ AXIS_TO_DIMENSION[ axis ] ];

      // handle attachers separately
      if (isAttacher$1(element)
        && ((delta > 0 && getMid(element)[ axis ] > start)
          || (delta < 0 && getMid(element)[ axis ] < start))) {
        attachers.push(element);

        return;
      }

      // move shape if its start is after space tool
      if ((delta > 0 && shapeStart > start)
        || (delta < 0 && shapeEnd < start)) {
        moveShape(element);

        return;
      }

      // resize shape if it's resizable and its start is before and its end is after space tool
      if (shapeStart < start
        && shapeEnd > start
        && rules.allowed('shape.resize', { shape: element })
      ) {
        resizeShape(element);

        return;
      }
    });

    // move attacher if its host is moving
    forEach$1(movingShapes, function(shape) {
      var attachers = shape.attachers;

      if (attachers) {
        forEach$1(attachers, function(attacher) {
          moveShape(attacher);
        });
      }
    });

    var allShapes = movingShapes.concat(resizingShapes);

    // move attacher if its mid is after space tool and its host is moving or resizing
    forEach$1(attachers, function(attacher) {
      var host = attacher.host;

      if (includes$3(allShapes, host)) {
        moveShape(attacher);
      }
    });

    allShapes = movingShapes.concat(resizingShapes);

    // move external label if its label target's (connection) source and target are moving
    forEach$1(connections, function(connection) {
      var source = connection.source,
          target = connection.target,
          label = connection.label;

      if (includes$3(allShapes, source)
        && includes$3(allShapes, target)
        && label) {
        moveShape(label);
      }
    });

    return {
      movingShapes: movingShapes,
      resizingShapes: resizingShapes
    };
  };

  SpaceTool.prototype.toggle = function() {

    if (this.isActive()) {
      return this._dragging.cancel();
    }

    var mouseEvent = this._mouse.getLastMoveEvent();

    this.activateSelection(mouseEvent, !!mouseEvent);
  };

  SpaceTool.prototype.isActive = function() {
    var context = this._dragging.context();

    if (context) {
      return /^spaceTool/.test(context.prefix);
    }

    return false;
  };

  // helpers //////////

  function addPadding(trbl) {
    return {
      top: trbl.top - PADDING,
      right: trbl.right + PADDING,
      bottom: trbl.bottom + PADDING,
      left: trbl.left - PADDING
    };
  }

  function ensureConstraints(event) {
    var context = event.context,
        spaceToolConstraints = context.spaceToolConstraints;

    if (!spaceToolConstraints) {
      return;
    }

    var x, y;

    if (isNumber(spaceToolConstraints.left)) {
      x = Math.max(event.x, spaceToolConstraints.left);

      event.dx = event.dx + x - event.x;
      event.x = x;
    }

    if (isNumber(spaceToolConstraints.right)) {
      x = Math.min(event.x, spaceToolConstraints.right);

      event.dx = event.dx + x - event.x;
      event.x = x;
    }

    if (isNumber(spaceToolConstraints.top)) {
      y = Math.max(event.y, spaceToolConstraints.top);

      event.dy = event.dy + y - event.y;
      event.y = y;
    }

    if (isNumber(spaceToolConstraints.bottom)) {
      y = Math.min(event.y, spaceToolConstraints.bottom);

      event.dy = event.dy + y - event.y;
      event.y = y;
    }
  }

  function getSpaceToolConstraints(elements, axis, direction, start, minDimensions) {
    var movingShapes = elements.movingShapes,
        resizingShapes = elements.resizingShapes;

    if (!resizingShapes.length) {
      return;
    }

    var spaceToolConstraints = {},
        min,
        max;

    forEach$1(resizingShapes, function(resizingShape) {
      var attachers = resizingShape.attachers,
          children = resizingShape.children;

      var resizingShapeBBox = asTRBL(resizingShape);

      // find children that are not moving or resizing
      var nonMovingResizingChildren = filter(children, function(child) {
        return !isConnection(child) &&
          !isLabel(child) &&
          !includes$3(movingShapes, child) &&
          !includes$3(resizingShapes, child);
      });

      // find children that are moving
      var movingChildren = filter(children, function(child) {
        return !isConnection(child) && !isLabel(child) && includes$3(movingShapes, child);
      });

      var minOrMax,
          nonMovingResizingChildrenBBox,
          movingChildrenBBox,
          movingAttachers = [],
          nonMovingAttachers = [],
          movingAttachersBBox,
          movingAttachersConstraint,
          nonMovingAttachersBBox,
          nonMovingAttachersConstraint;

      if (nonMovingResizingChildren.length) {
        nonMovingResizingChildrenBBox = addPadding(asTRBL(getBBox(nonMovingResizingChildren)));

        minOrMax = start -
          resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] +
          nonMovingResizingChildrenBBox[ DIRECTION_TO_TRBL[ direction ] ];

        if (direction === 'n') {
          spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 'w') {
          spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 's') {
          spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        } else if (direction === 'e') {
          spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        }
      }

      if (movingChildren.length) {
        movingChildrenBBox = addPadding(asTRBL(getBBox(movingChildren)));

        minOrMax = start -
          movingChildrenBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] +
          resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ];

        if (direction === 'n') {
          spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 'w') {
          spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 's') {
          spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        } else if (direction === 'e') {
          spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        }
      }

      if (attachers && attachers.length) {
        attachers.forEach(function(attacher) {
          if (includes$3(movingShapes, attacher)) {
            movingAttachers.push(attacher);
          } else {
            nonMovingAttachers.push(attacher);
          }
        });

        if (movingAttachers.length) {
          movingAttachersBBox = asTRBL(getBBox(movingAttachers.map(getMid)));

          movingAttachersConstraint = resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ]
                - (movingAttachersBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] - start);
        }

        if (nonMovingAttachers.length) {
          nonMovingAttachersBBox = asTRBL(getBBox(nonMovingAttachers.map(getMid)));

          nonMovingAttachersConstraint = nonMovingAttachersBBox[ DIRECTION_TO_TRBL[ direction ] ]
                - (resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] - start);
        }

        if (direction === 'n') {
          minOrMax = Math.min(movingAttachersConstraint || Infinity, nonMovingAttachersConstraint || Infinity);

          spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 'w') {
          minOrMax = Math.min(movingAttachersConstraint || Infinity, nonMovingAttachersConstraint || Infinity);

          spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 's') {
          minOrMax = Math.max(movingAttachersConstraint || -Infinity, nonMovingAttachersConstraint || -Infinity);

          spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        } else if (direction === 'e') {
          minOrMax = Math.max(movingAttachersConstraint || -Infinity, nonMovingAttachersConstraint || -Infinity);

          spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        }
      }

      var resizingShapeMinDimensions = minDimensions && minDimensions[ resizingShape.id ];

      if (resizingShapeMinDimensions) {

        if (direction === 'n') {
          minOrMax = start +
            resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
            resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

          spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 'w') {
          minOrMax = start +
            resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
            resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

          spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
        } else if (direction === 's') {
          minOrMax = start -
            resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
            resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

          spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        } else if (direction === 'e') {
          minOrMax = start -
            resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
            resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

          spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
        }
      }
    });

    return spaceToolConstraints;
  }

  function includes$3(array, item) {
    return array.indexOf(item) !== -1;
  }

  function isAttacher$1(element) {
    return !!element.host;
  }

  var MARKER_DRAGGING$1 = 'djs-dragging',
      MARKER_RESIZING$1 = 'djs-resizing';

  var LOW_PRIORITY$a = 250;

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../draw/Styles').default} Styles
   */

  var max$1 = Math.max;


  /**
   * Provides previews for selecting/moving/resizing shapes when creating/removing space.
   *
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {Canvas} canvas
   * @param {Styles} styles
   */
  function SpaceToolPreview(
      eventBus, elementRegistry, canvas,
      styles, previewSupport) {

    function addPreviewGfx(collection, dragGroup) {
      forEach$1(collection, function(element) {
        previewSupport.addDragger(element, dragGroup);

        canvas.addMarker(element, MARKER_DRAGGING$1);
      });
    }

    // add crosshair
    eventBus.on('spaceTool.selection.start', function(event) {
      var space = canvas.getLayer('space'),
          context = event.context;

      var orientation = {
        x: 'M 0,-10000 L 0,10000',
        y: 'M -10000,0 L 10000,0'
      };

      var crosshairGroup = create$1('g');
      attr$1(crosshairGroup, styles.cls('djs-crosshair-group', [ 'no-events' ]));

      append(space, crosshairGroup);

      // horizontal path
      var pathX = create$1('path');
      attr$1(pathX, 'd', orientation.x);
      classes$1(pathX).add('djs-crosshair');

      append(crosshairGroup, pathX);

      // vertical path
      var pathY = create$1('path');
      attr$1(pathY, 'd', orientation.y);
      classes$1(pathY).add('djs-crosshair');

      append(crosshairGroup, pathY);

      context.crosshairGroup = crosshairGroup;
    });

    // update crosshair
    eventBus.on('spaceTool.selection.move', function(event) {
      var crosshairGroup = event.context.crosshairGroup;

      translate$1(crosshairGroup, event.x, event.y);
    });

    // remove crosshair
    eventBus.on('spaceTool.selection.cleanup', function(event) {
      var context = event.context,
          crosshairGroup = context.crosshairGroup;

      if (crosshairGroup) {
        remove$3(crosshairGroup);
      }
    });

    // add and update move/resize previews
    eventBus.on('spaceTool.move', LOW_PRIORITY$a, function(event) {

      var context = event.context,
          line = context.line,
          axis = context.axis,
          movingShapes = context.movingShapes,
          resizingShapes = context.resizingShapes;

      if (!context.initialized) {
        return;
      }

      if (!context.dragGroup) {
        var spaceLayer = canvas.getLayer('space');

        line = create$1('path');
        attr$1(line, 'd', 'M0,0 L0,0');
        classes$1(line).add('djs-crosshair');

        append(spaceLayer, line);

        context.line = line;

        var dragGroup = create$1('g');
        attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

        append(canvas.getActiveLayer(), dragGroup);

        // shapes
        addPreviewGfx(movingShapes, dragGroup);

        // connections
        var movingConnections = context.movingConnections = elementRegistry.filter(function(element) {
          var sourceIsMoving = false;

          forEach$1(movingShapes, function(shape) {
            forEach$1(shape.outgoing, function(connection) {
              if (element === connection) {
                sourceIsMoving = true;
              }
            });
          });

          var targetIsMoving = false;

          forEach$1(movingShapes, function(shape) {
            forEach$1(shape.incoming, function(connection) {
              if (element === connection) {
                targetIsMoving = true;
              }
            });
          });

          var sourceIsResizing = false;

          forEach$1(resizingShapes, function(shape) {
            forEach$1(shape.outgoing, function(connection) {
              if (element === connection) {
                sourceIsResizing = true;
              }
            });
          });

          var targetIsResizing = false;

          forEach$1(resizingShapes, function(shape) {
            forEach$1(shape.incoming, function(connection) {
              if (element === connection) {
                targetIsResizing = true;
              }
            });
          });

          return isConnection(element)
            && (sourceIsMoving || sourceIsResizing)
            && (targetIsMoving || targetIsResizing);
        });


        addPreviewGfx(movingConnections, dragGroup);

        context.dragGroup = dragGroup;
      }

      if (!context.frameGroup) {
        var frameGroup = create$1('g');
        attr$1(frameGroup, styles.cls('djs-frame-group', [ 'no-events' ]));

        append(canvas.getActiveLayer(), frameGroup);

        var frames = [];

        forEach$1(resizingShapes, function(shape) {
          var frame = previewSupport.addFrame(shape, frameGroup);

          var initialBounds = frame.getBBox();

          frames.push({
            element: frame,
            initialBounds: initialBounds
          });

          canvas.addMarker(shape, MARKER_RESIZING$1);
        });

        context.frameGroup = frameGroup;
        context.frames = frames;
      }

      var orientation = {
        x: 'M' + event.x + ', -10000 L' + event.x + ', 10000',
        y: 'M -10000, ' + event.y + ' L 10000, ' + event.y
      };

      attr$1(line, { d: orientation[ axis ] });

      var opposite = { x: 'y', y: 'x' };
      var delta = { x: event.dx, y: event.dy };
      delta[ opposite[ context.axis ] ] = 0;

      // update move previews
      translate$1(context.dragGroup, delta.x, delta.y);

      // update resize previews
      forEach$1(context.frames, function(frame) {
        var element = frame.element,
            initialBounds = frame.initialBounds,
            width,
            height;

        if (context.direction === 'e') {
          attr$1(element, {
            width: max$1(initialBounds.width + delta.x, 5)
          });
        } else {
          width = max$1(initialBounds.width - delta.x, 5);

          attr$1(element, {
            width: width,
            x: initialBounds.x + initialBounds.width - width
          });
        }

        if (context.direction === 's') {
          attr$1(element, {
            height: max$1(initialBounds.height + delta.y, 5)
          });
        } else {
          height = max$1(initialBounds.height - delta.y, 5);

          attr$1(element, {
            height: height,
            y: initialBounds.y + initialBounds.height - height
          });
        }
      });

    });

    // remove move/resize previews
    eventBus.on('spaceTool.cleanup', function(event) {

      var context = event.context,
          movingShapes = context.movingShapes,
          movingConnections = context.movingConnections,
          resizingShapes = context.resizingShapes,
          line = context.line,
          dragGroup = context.dragGroup,
          frameGroup = context.frameGroup;

      // moving shapes
      forEach$1(movingShapes, function(shape) {
        canvas.removeMarker(shape, MARKER_DRAGGING$1);
      });

      // moving connections
      forEach$1(movingConnections, function(connection) {
        canvas.removeMarker(connection, MARKER_DRAGGING$1);
      });

      if (dragGroup) {
        remove$3(line);
        remove$3(dragGroup);
      }

      forEach$1(resizingShapes, function(shape) {
        canvas.removeMarker(shape, MARKER_RESIZING$1);
      });

      if (frameGroup) {
        remove$3(frameGroup);
      }
    });
  }

  SpaceToolPreview.$inject = [
    'eventBus',
    'elementRegistry',
    'canvas',
    'styles',
    'previewSupport'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var SpaceToolModule$1 = {
    __init__: [ 'spaceToolPreview' ],
    __depends__: [
      DraggingModule,
      RulesModule$1,
      ToolManagerModule,
      PreviewSupportModule,
      MouseModule
    ],
    spaceTool: [ 'type', SpaceTool ],
    spaceToolPreview: [ 'type', SpaceToolPreview ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   *
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Axis} Axis
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   */

  /**
   * @param {Injector} injector
   * @param {Canvas} canvas
   */
  function BpmnSpaceTool(injector, canvas) {
    injector.invoke(SpaceTool, this);

    this._canvas = canvas;
  }

  BpmnSpaceTool.$inject = [
    'injector',
    'canvas'
  ];

  e$3(BpmnSpaceTool, SpaceTool);

  /**
   * @param {Shape[]} elements
   * @param {Axis} axis
   * @param {Point} delta
   * @param {number} start
   *
   * @return {Object}
   */
  BpmnSpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {

    var canvasRoot = this._canvas.getRootElement(),
        spaceRoot = elements[0] === canvasRoot ? null : elements[0],
        enclosedArtifacts = [];

    // ensure
    if (spaceRoot) {
      enclosedArtifacts = values(
        getEnclosedElements(
          canvasRoot.children.filter(
            (child) => is$1(child, 'bpmn:Artifact')
          ),
          getBBox(spaceRoot)
        )
      );
    }

    const elementsToMove = [ ...elements, ...enclosedArtifacts ];

    var adjustments = SpaceTool.prototype.calculateAdjustments.call(this, elementsToMove, axis, delta, start);

    // do not resize:
    //
    // * text annotations (horizontally/vertically)
    // * empty horizontal pools (vertically)
    // * empty vertical pools (horizontally)
    adjustments.resizingShapes = adjustments.resizingShapes.filter(function(shape) {

      if (is$1(shape, 'bpmn:TextAnnotation')) {
        return false;
      }

      if (isCollapsedPool$1(shape)) {
        if (axis === 'y' && isHorizontal$3(shape) || axis === 'x' && !isHorizontal$3(shape)) {
          return false;
        }
      }

      return true;
    });

    return adjustments;
  };


  // helpers ///////////

  function isCollapsedPool$1(shape) {
    return is$1(shape, 'bpmn:Participant') && !getBusinessObject(shape).processRef;
  }

  var SpaceToolModule = {
    __depends__: [ SpaceToolModule$1 ],
    spaceTool: [ 'type', BpmnSpaceTool ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../core/Types').ElementLike} ElementLike
   *
   * @typedef {import('../core/EventBus').default} EventBus
   * @typedef {import('./CommandHandler').default} CommandHandler
   *
   * @typedef { any } CommandContext
   * @typedef { {
   *   new (...args: any[]) : CommandHandler
   * } } CommandHandlerConstructor
   * @typedef { {
   *   [key: string]: CommandHandler;
   * } } CommandHandlerMap
   * @typedef { {
   *   command: string;
   *   context: any;
   *   id?: any;
   * } } CommandStackAction
   * @typedef { {
   *   actions: CommandStackAction[];
   *   dirty: ElementLike[];
   *   trigger: 'execute' | 'undo' | 'redo' | 'clear' | null;
   *   atomic?: boolean;
   * } } CurrentExecution
   */

  /**
   * A service that offers un- and redoable execution of commands.
   *
   * The command stack is responsible for executing modeling actions
   * in a un- and redoable manner. To do this it delegates the actual
   * command execution to {@link CommandHandler}s.
   *
   * Command handlers provide {@link CommandHandler#execute(ctx)} and
   * {@link CommandHandler#revert(ctx)} methods to un- and redo a command
   * identified by a command context.
   *
   *
   * ## Life-Cycle events
   *
   * In the process the command stack fires a number of life-cycle events
   * that other components to participate in the command execution.
   *
   *    * preExecute
   *    * preExecuted
   *    * execute
   *    * executed
   *    * postExecute
   *    * postExecuted
   *    * revert
   *    * reverted
   *
   * A special event is used for validating, whether a command can be
   * performed prior to its execution.
   *
   *    * canExecute
   *
   * Each of the events is fired as `commandStack.{eventName}` and
   * `commandStack.{commandName}.{eventName}`, respectively. This gives
   * components fine grained control on where to hook into.
   *
   * The event object fired transports `command`, the name of the
   * command and `context`, the command context.
   *
   *
   * ## Creating Command Handlers
   *
   * Command handlers should provide the {@link CommandHandler#execute(ctx)}
   * and {@link CommandHandler#revert(ctx)} methods to implement
   * redoing and undoing of a command.
   *
   * A command handler _must_ ensure undo is performed properly in order
   * not to break the undo chain. It must also return the shapes that
   * got changed during the `execute` and `revert` operations.
   *
   * Command handlers may execute other modeling operations (and thus
   * commands) in their `preExecute(d)` and `postExecute(d)` phases. The command
   * stack will properly group all commands together into a logical unit
   * that may be re- and undone atomically.
   *
   * Command handlers must not execute other commands from within their
   * core implementation (`execute`, `revert`).
   *
   *
   * ## Change Tracking
   *
   * During the execution of the CommandStack it will keep track of all
   * elements that have been touched during the command's execution.
   *
   * At the end of the CommandStack execution it will notify interested
   * components via an 'elements.changed' event with all the dirty
   * elements.
   *
   * The event can be picked up by components that are interested in the fact
   * that elements have been changed. One use case for this is updating
   * their graphical representation after moving / resizing or deletion.
   *
   * @see CommandHandler
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function CommandStack(eventBus, injector) {

    /**
     * A map of all registered command handlers.
     *
     * @type {CommandHandlerMap}
     */
    this._handlerMap = {};

    /**
     * A stack containing all re/undoable actions on the diagram
     *
     * @type {CommandStackAction[]}
     */
    this._stack = [];

    /**
     * The current index on the stack
     *
     * @type {number}
     */
    this._stackIdx = -1;

    /**
     * Current active commandStack execution
     *
     * @type {CurrentExecution}
     */
    this._currentExecution = {
      actions: [],
      dirty: [],
      trigger: null
    };

    /**
     * @type {Injector}
     */
    this._injector = injector;

    /**
     * @type EventBus
     */
    this._eventBus = eventBus;

    /**
     * @type { number }
     */
    this._uid = 1;

    eventBus.on([
      'diagram.destroy',
      'diagram.clear'
    ], function() {
      this.clear(false);
    }, this);
  }

  CommandStack.$inject = [ 'eventBus', 'injector' ];


  /**
   * Execute a command.
   *
   * @param {string} command The command to execute.
   * @param {CommandContext} context The context with which to execute the command.
   */
  CommandStack.prototype.execute = function(command, context) {
    if (!command) {
      throw new Error('command required');
    }

    this._currentExecution.trigger = 'execute';

    const action = { command: command, context: context };

    this._pushAction(action);
    this._internalExecute(action);
    this._popAction();
  };


  /**
   * Check whether a command can be executed.
   *
   * Implementors may hook into the mechanism on two ways:
   *
   *   * in event listeners:
   *
   *     Users may prevent the execution via an event listener.
   *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.
   *
   *   * in command handlers:
   *
   *     If the method {@link CommandHandler#canExecute} is implemented in a handler
   *     it will be called to figure out whether the execution is allowed.
   *
   * @param {string} command The command to execute.
   * @param {CommandContext} context The context with which to execute the command.
   *
   * @return {boolean} Whether the command can be executed with the given context.
   */
  CommandStack.prototype.canExecute = function(command, context) {

    const action = { command: command, context: context };

    const handler = this._getHandler(command);

    let result = this._fire(command, 'canExecute', action);

    // handler#canExecute will only be called if no listener
    // decided on a result already
    if (result === undefined) {
      if (!handler) {
        return false;
      }

      if (handler.canExecute) {
        result = handler.canExecute(context);
      }
    }

    return result;
  };


  /**
   * Clear the command stack, erasing all undo / redo history.
   *
   * @param {boolean} [emit=true] Whether to fire an event. Defaults to `true`.
   */
  CommandStack.prototype.clear = function(emit) {
    this._stack.length = 0;
    this._stackIdx = -1;

    if (emit !== false) {
      this._fire('changed', { trigger: 'clear' });
    }
  };


  /**
   * Undo last command(s)
   */
  CommandStack.prototype.undo = function() {
    let action = this._getUndoAction(),
        next;

    if (action) {
      this._currentExecution.trigger = 'undo';

      this._pushAction(action);

      while (action) {
        this._internalUndo(action);
        next = this._getUndoAction();

        if (!next || next.id !== action.id) {
          break;
        }

        action = next;
      }

      this._popAction();
    }
  };


  /**
   * Redo last command(s)
   */
  CommandStack.prototype.redo = function() {
    let action = this._getRedoAction(),
        next;

    if (action) {
      this._currentExecution.trigger = 'redo';

      this._pushAction(action);

      while (action) {
        this._internalExecute(action, true);
        next = this._getRedoAction();

        if (!next || next.id !== action.id) {
          break;
        }

        action = next;
      }

      this._popAction();
    }
  };


  /**
   * Register a handler instance with the command stack.
   *
   * @param {string} command Command to be executed.
   * @param {CommandHandler} handler Handler to execute the command.
   */
  CommandStack.prototype.register = function(command, handler) {
    this._setHandler(command, handler);
  };


  /**
   * Register a handler type with the command stack  by instantiating it and
   * injecting its dependencies.
   *
   * @param {string} command Command to be executed.
   * @param {CommandHandlerConstructor} handlerCls Constructor to instantiate a {@link CommandHandler}.
   */
  CommandStack.prototype.registerHandler = function(command, handlerCls) {

    if (!command || !handlerCls) {
      throw new Error('command and handlerCls must be defined');
    }

    const handler = this._injector.instantiate(handlerCls);
    this.register(command, handler);
  };

  /**
   * @return {boolean}
   */
  CommandStack.prototype.canUndo = function() {
    return !!this._getUndoAction();
  };

  /**
   * @return {boolean}
   */
  CommandStack.prototype.canRedo = function() {
    return !!this._getRedoAction();
  };

  // stack access  //////////////////////

  CommandStack.prototype._getRedoAction = function() {
    return this._stack[this._stackIdx + 1];
  };


  CommandStack.prototype._getUndoAction = function() {
    return this._stack[this._stackIdx];
  };


  // internal functionality //////////////////////

  CommandStack.prototype._internalUndo = function(action) {
    const command = action.command,
          context = action.context;

    const handler = this._getHandler(command);

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {
      this._fire(command, 'revert', action);

      if (handler.revert) {
        this._markDirty(handler.revert(context));
      }

      this._revertedAction(action);

      this._fire(command, 'reverted', action);
    });
  };


  CommandStack.prototype._fire = function(command, qualifier, event) {
    if (arguments.length < 3) {
      event = qualifier;
      qualifier = null;
    }

    const names = qualifier ? [ command + '.' + qualifier, qualifier ] : [ command ];
    let result;

    event = this._eventBus.createEvent(event);

    for (const name of names) {
      result = this._eventBus.fire('commandStack.' + name, event);

      if (event.cancelBubble) {
        break;
      }
    }

    return result;
  };

  CommandStack.prototype._createId = function() {
    return this._uid++;
  };

  CommandStack.prototype._atomicDo = function(fn) {

    const execution = this._currentExecution;

    execution.atomic = true;

    try {
      fn();
    } finally {
      execution.atomic = false;
    }
  };

  CommandStack.prototype._internalExecute = function(action, redo) {
    const command = action.command,
          context = action.context;

    const handler = this._getHandler(command);

    if (!handler) {
      throw new Error('no command handler registered for <' + command + '>');
    }

    this._pushAction(action);

    if (!redo) {
      this._fire(command, 'preExecute', action);

      if (handler.preExecute) {
        handler.preExecute(context);
      }

      this._fire(command, 'preExecuted', action);
    }

    // guard against illegal nested command stack invocations
    this._atomicDo(() => {

      this._fire(command, 'execute', action);

      if (handler.execute) {

        // actual execute + mark return results as dirty
        this._markDirty(handler.execute(context));
      }

      // log to stack
      this._executedAction(action, redo);

      this._fire(command, 'executed', action);
    });

    if (!redo) {
      this._fire(command, 'postExecute', action);

      if (handler.postExecute) {
        handler.postExecute(context);
      }

      this._fire(command, 'postExecuted', action);
    }

    this._popAction();
  };


  CommandStack.prototype._pushAction = function(action) {

    const execution = this._currentExecution,
          actions = execution.actions;

    const baseAction = actions[0];

    if (execution.atomic) {
      throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');
    }

    if (!action.id) {
      action.id = (baseAction && baseAction.id) || this._createId();
    }

    actions.push(action);
  };


  CommandStack.prototype._popAction = function() {
    const execution = this._currentExecution,
          trigger = execution.trigger,
          actions = execution.actions,
          dirty = execution.dirty;

    actions.pop();

    if (!actions.length) {
      this._eventBus.fire('elements.changed', { elements: uniqueBy('id', dirty.reverse()) });

      dirty.length = 0;

      this._fire('changed', { trigger: trigger });

      execution.trigger = null;
    }
  };


  CommandStack.prototype._markDirty = function(elements) {
    const execution = this._currentExecution;

    if (!elements) {
      return;
    }

    elements = isArray$3(elements) ? elements : [ elements ];

    execution.dirty = execution.dirty.concat(elements);
  };


  CommandStack.prototype._executedAction = function(action, redo) {
    const stackIdx = ++this._stackIdx;

    if (!redo) {
      this._stack.splice(stackIdx, this._stack.length, action);
    }
  };


  CommandStack.prototype._revertedAction = function(action) {
    this._stackIdx--;
  };


  CommandStack.prototype._getHandler = function(command) {
    return this._handlerMap[command];
  };

  CommandStack.prototype._setHandler = function(command, handler) {
    if (!command || !handler) {
      throw new Error('command and handler required');
    }

    if (this._handlerMap[command]) {
      throw new Error('overriding handler for command <' + command + '>');
    }

    this._handlerMap[command] = handler;
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var CommandModule = {
    commandStack: [ 'type', CommandStack ]
  };

  /**
   * Remove from the beginning of a collection until it is empty.
   *
   * This is a null-safe operation that ensures elements
   * are being removed from the given collection until the
   * collection is empty.
   *
   * The implementation deals with the fact that a remove operation
   * may touch, i.e. remove multiple elements in the collection
   * at a time.
   *
   * @param {Object[]} [collection]
   * @param {(element: Object) => void} removeFn
   *
   * @return {Object[]} the cleared collection
   */
  function saveClear(collection, removeFn) {

    if (typeof removeFn !== 'function') {
      throw new Error('removeFn iterator must be a function');
    }

    if (!collection) {
      return;
    }

    var e;

    while ((e = collection[0])) {
      removeFn(e);
    }

    return collection;
  }

  var LOW_PRIORITY$9 = 250,
      HIGH_PRIORITY$8 = 1400;

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   */

  /**
   * A handler that makes sure labels are properly moved with
   * their label targets.
   *
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Modeling} modeling
   */
  function LabelSupport(injector, eventBus, modeling) {

    CommandInterceptor.call(this, eventBus);

    var movePreview = injector.get('movePreview', false);

    // remove labels from the collection that are being
    // moved with other elements anyway
    eventBus.on('shape.move.start', HIGH_PRIORITY$8, function(e) {

      var context = e.context,
          shapes = context.shapes,
          validatedShapes = context.validatedShapes;

      context.shapes = removeLabels(shapes);
      context.validatedShapes = removeLabels(validatedShapes);
    });

    // add labels to visual's group
    movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$9, function(e) {

      var context = e.context,
          shapes = context.shapes;

      var labels = [];

      forEach$1(shapes, function(element) {

        forEach$1(element.labels, function(label) {

          if (!label.hidden && context.shapes.indexOf(label) === -1) {
            labels.push(label);
          }

          if (element.labelTarget) {
            labels.push(element);
          }
        });
      });

      forEach$1(labels, function(label) {
        movePreview.makeDraggable(context, label, true);
      });

    });

    // add all labels to move closure
    this.preExecuted('elements.move', HIGH_PRIORITY$8, function(e) {
      var context = e.context,
          closure = context.closure,
          enclosedElements = closure.enclosedElements;

      var enclosedLabels = [];

      // find labels that are not part of
      // move closure yet and add them
      forEach$1(enclosedElements, function(element) {
        forEach$1(element.labels, function(label) {

          if (!enclosedElements[label.id]) {
            enclosedLabels.push(label);
          }
        });
      });

      closure.addAll(enclosedLabels);
    });


    this.preExecute([
      'connection.delete',
      'shape.delete'
    ], function(e) {

      var context = e.context,
          element = context.connection || context.shape;

      saveClear(element.labels, function(label) {
        modeling.removeShape(label, { nested: true });
      });
    });


    this.execute('shape.delete', function(e) {

      var context = e.context,
          shape = context.shape,
          labelTarget = shape.labelTarget;

      // unset labelTarget
      if (labelTarget) {
        context.labelTargetIndex = indexOf(labelTarget.labels, shape);
        context.labelTarget = labelTarget;

        shape.labelTarget = null;
      }
    });

    this.revert('shape.delete', function(e) {

      var context = e.context,
          shape = context.shape,
          labelTarget = context.labelTarget,
          labelTargetIndex = context.labelTargetIndex;

      // restore labelTarget
      if (labelTarget) {
        add$1(labelTarget.labels, shape, labelTargetIndex);

        shape.labelTarget = labelTarget;
      }
    });

  }

  e$3(LabelSupport, CommandInterceptor);

  LabelSupport.$inject = [
    'injector',
    'eventBus',
    'modeling'
  ];


  /**
   * Return a filtered list of elements that do not
   * contain attached elements with hosts being part
   * of the selection.
   *
   * @param {Element[]} elements
   *
   * @return {Element[]} filtered
   */
  function removeLabels(elements) {

    return filter(elements, function(element) {

      // filter out labels that are move together
      // with their label targets
      return elements.indexOf(element.labelTarget) === -1;
    });
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var LabelSupportModule = {
    __init__: [ 'labelSupport' ],
    labelSupport: [ 'type', LabelSupport ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../rules/Rules').default} Rules
   * @typedef {import('../modeling/Modeling').default} Modeling
   */

  var LOW_PRIORITY$8 = 251,
      HIGH_PRIORITY$7 = 1401;

  var MARKER_ATTACH$1 = 'attach-ok';


  /**
   * Adds the notion of attached elements to the modeler.
   *
   * Optionally depends on `diagram-js/lib/features/move` to render
   * the attached elements during move preview.
   *
   * Optionally depends on `diagram-js/lib/features/label-support`
   * to render attached labels during move preview.
   *
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Rules} rules
   * @param {Modeling} modeling
   */
  function AttachSupport(injector, eventBus, canvas, rules, modeling) {

    CommandInterceptor.call(this, eventBus);

    var movePreview = injector.get('movePreview', false);


    // remove all the attached elements from the shapes to be validated
    // add all the attached shapes to the overall list of moved shapes
    eventBus.on('shape.move.start', HIGH_PRIORITY$7, function(e) {

      var context = e.context,
          shapes = context.shapes,
          validatedShapes = context.validatedShapes;

      context.shapes = addAttached(shapes);

      context.validatedShapes = removeAttached(validatedShapes);
    });

    // add attachers to the visual's group
    movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$8, function(e) {

      var context = e.context,
          shapes = context.shapes,
          attachers = getAttachers(shapes);

      forEach$1(attachers, function(attacher) {
        movePreview.makeDraggable(context, attacher, true);

        forEach$1(attacher.labels, function(label) {
          movePreview.makeDraggable(context, label, true);
        });
      });
    });

    // add attach-ok marker to current host
    movePreview && eventBus.on('shape.move.start', function(event) {
      var context = event.context,
          shapes = context.shapes;

      if (shapes.length !== 1) {
        return;
      }

      var shape = shapes[0];

      var host = shape.host;

      if (host) {
        canvas.addMarker(host, MARKER_ATTACH$1);

        eventBus.once([
          'shape.move.out',
          'shape.move.cleanup'
        ], function() {
          canvas.removeMarker(host, MARKER_ATTACH$1);
        });
      }
    });

    // add all attachers to move closure
    this.preExecuted('elements.move', HIGH_PRIORITY$7, function(e) {
      var context = e.context,
          closure = context.closure,
          shapes = context.shapes,
          attachers = getAttachers(shapes);

      forEach$1(attachers, function(attacher) {
        closure.add(attacher, closure.topLevel[attacher.host.id]);
      });
    });

    // perform the attaching after shapes are done moving
    this.postExecuted('elements.move', function(e) {

      var context = e.context,
          shapes = context.shapes,
          newHost = context.newHost,
          attachers;

      // only single elements can be attached
      // multiply elements can be detached
      if (newHost && shapes.length !== 1) {
        return;
      }

      if (newHost) {
        attachers = shapes;
      } else {

        // find attachers moved without host
        attachers = filter(shapes, function(shape) {
          var host = shape.host;

          return isAttacher(shape) && !includes$2(shapes, host);
        });
      }

      forEach$1(attachers, function(attacher) {
        modeling.updateAttachment(attacher, newHost);
      });
    });

    // ensure invalid attachment connections are removed
    this.postExecuted('elements.move', function(e) {

      var shapes = e.context.shapes;

      forEach$1(shapes, function(shape) {

        forEach$1(shape.attachers, function(attacher) {

          // remove invalid outgoing connections
          forEach$1(attacher.outgoing.slice(), function(connection) {
            var allowed = rules.allowed('connection.reconnect', {
              connection: connection,
              source: connection.source,
              target: connection.target
            });

            if (!allowed) {
              modeling.removeConnection(connection);
            }
          });

          // remove invalid incoming connections
          forEach$1(attacher.incoming.slice(), function(connection) {
            var allowed = rules.allowed('connection.reconnect', {
              connection: connection,
              source: connection.source,
              target: connection.target
            });

            if (!allowed) {
              modeling.removeConnection(connection);
            }
          });
        });
      });
    });

    this.postExecute('shape.create', function(e) {
      var context = e.context,
          shape = context.shape,
          host = context.host;

      if (host) {
        modeling.updateAttachment(shape, host);
      }
    });

    // update attachments if the host is replaced
    this.postExecute('shape.replace', function(e) {

      var context = e.context,
          oldShape = context.oldShape,
          newShape = context.newShape;

      // move the attachers to the new host
      saveClear(oldShape.attachers, function(attacher) {
        var allowed = rules.allowed('elements.move', {
          target: newShape,
          shapes: [ attacher ]
        });

        if (allowed === 'attach') {
          modeling.updateAttachment(attacher, newShape);
        } else {
          modeling.removeShape(attacher);
        }
      });

      // move attachers if new host has different size
      if (newShape.attachers.length) {

        forEach$1(newShape.attachers, function(attacher) {
          var delta = getNewAttachShapeDelta(attacher, oldShape, newShape);
          modeling.moveShape(attacher, delta, attacher.parent);
        });
      }

    });

    // move shape on host resize
    this.postExecute('shape.resize', function(event) {
      var context = event.context,
          shape = context.shape,
          oldBounds = context.oldBounds,
          newBounds = context.newBounds,
          attachers = shape.attachers,
          hints = context.hints || {};

      if (hints.attachSupport === false) {
        return;
      }

      forEach$1(attachers, function(attacher) {
        var delta = getNewAttachShapeDelta(attacher, oldBounds, newBounds);

        modeling.moveShape(attacher, delta, attacher.parent);

        forEach$1(attacher.labels, function(label) {
          modeling.moveShape(label, delta, label.parent);
        });
      });
    });

    // remove attachments
    this.preExecute('shape.delete', function(event) {

      var shape = event.context.shape;

      saveClear(shape.attachers, function(attacher) {
        modeling.removeShape(attacher);
      });

      if (shape.host) {
        modeling.updateAttachment(shape, null);
      }
    });
  }

  e$3(AttachSupport, CommandInterceptor);

  AttachSupport.$inject = [
    'injector',
    'eventBus',
    'canvas',
    'rules',
    'modeling'
  ];


  /**
   * Return attachers of the given shapes
   *
   * @param {Element[]} shapes
   * @return {Element[]}
   */
  function getAttachers(shapes) {
    return flatten$1(map$1(shapes, function(s) {
      return s.attachers || [];
    }));
  }

  /**
   * Return a combined list of elements and
   * attachers.
   *
   * @param {Element[]} elements
   * @return {Element[]} filtered
   */
  function addAttached(elements) {
    var attachers = getAttachers(elements);

    return unionBy('id', elements, attachers);
  }

  /**
   * Return a filtered list of elements that do not
   * contain attached elements with hosts being part
   * of the selection.
   *
   * @param {Element[]} elements
   *
   * @return {Element[]} filtered
   */
  function removeAttached(elements) {

    var ids = groupBy(elements, 'id');

    return filter(elements, function(element) {
      while (element) {

        // host in selection
        if (element.host && ids[element.host.id]) {
          return false;
        }

        element = element.parent;
      }

      return true;
    });
  }

  function isAttacher(shape) {
    return !!shape.host;
  }

  function includes$2(array, item) {
    return array.indexOf(item) !== -1;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var AttachSupportModule = {
    __depends__: [
      RulesModule$1
    ],
    __init__: [ 'attachSupport' ],
    attachSupport: [ 'type', AttachSupport ]
  };

  /**
   * @typedef {import('../../model/Types').Moddle} Moddle
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   *
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   */

  /**
   * A factory for BPMN elements.
   *
   * @param {Moddle} moddle
   */
  function BpmnFactory(moddle) {
    this._model = moddle;
  }

  BpmnFactory.$inject = [ 'moddle' ];

  /**
   * @param {ModdleElement} element
   *
   * @return {boolean}
   */
  BpmnFactory.prototype._needsId = function(element) {
    return isAny(element, [
      'bpmn:RootElement',
      'bpmn:FlowElement',
      'bpmn:MessageFlow',
      'bpmn:DataAssociation',
      'bpmn:Artifact',
      'bpmn:Participant',
      'bpmn:Lane',
      'bpmn:LaneSet',
      'bpmn:Process',
      'bpmn:Collaboration',
      'bpmndi:BPMNShape',
      'bpmndi:BPMNEdge',
      'bpmndi:BPMNDiagram',
      'bpmndi:BPMNPlane',
      'bpmn:Property',
      'bpmn:CategoryValue'
    ]);
  };

  /**
   * @param {ModdleElement} element
   */
  BpmnFactory.prototype._ensureId = function(element) {
    if (element.id) {
      this._model.ids.claim(element.id, element);
      return;
    }

    // generate semantic ids for elements
    // bpmn:SequenceFlow -> SequenceFlow_ID
    var prefix;

    if (is$1(element, 'bpmn:Activity')) {
      prefix = 'Activity';
    } else if (is$1(element, 'bpmn:Event')) {
      prefix = 'Event';
    } else if (is$1(element, 'bpmn:Gateway')) {
      prefix = 'Gateway';
    } else if (isAny(element, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ])) {
      prefix = 'Flow';
    } else {
      prefix = (element.$type || '').replace(/^[^:]*:/g, '');
    }

    prefix += '_';

    if (!element.id && this._needsId(element)) {
      element.id = this._model.ids.nextPrefixed(prefix, element);
    }
  };

  /**
   * Create BPMN element.
   *
   * @param {string} type
   * @param {Object} [attrs]
   *
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.create = function(type, attrs) {
    var element = this._model.create(type, attrs || {});

    this._ensureId(element);

    return element;
  };

  /**
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiLabel = function() {
    return this.create('bpmndi:BPMNLabel', {
      bounds: this.createDiBounds()
    });
  };

  /**
   * @param {ModdleElement} semantic
   * @param {Object} [attrs]
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiShape = function(semantic, attrs) {
    return this.create('bpmndi:BPMNShape', assign$1({
      bpmnElement: semantic,
      bounds: this.createDiBounds()
    }, attrs));
  };

  /**
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiBounds = function(bounds) {
    return this.create('dc:Bounds', bounds);
  };

  /**
   * @param {Point[]} waypoints
   *
   * @return {ModdleElement[]}
   */
  BpmnFactory.prototype.createDiWaypoints = function(waypoints) {
    var self = this;

    return map$1(waypoints, function(pos) {
      return self.createDiWaypoint(pos);
    });
  };

  /**
   * @param {Point} point
   *
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiWaypoint = function(point) {
    return this.create('dc:Point', pick(point, [ 'x', 'y' ]));
  };

  /**
   * @param {ModdleElement} semantic
   * @param {Object} [attrs]
   *
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiEdge = function(semantic, attrs) {
    return this.create('bpmndi:BPMNEdge', assign$1({
      bpmnElement: semantic,
      waypoint: this.createDiWaypoints([])
    }, attrs));
  };

  /**
   * @param {ModdleElement} semantic
   * @param {Object} [attrs]
   *
   * @return {ModdleElement}
   */
  BpmnFactory.prototype.createDiPlane = function(semantic, attrs) {
    return this.create('bpmndi:BPMNPlane', assign$1({
      bpmnElement: semantic
    }, attrs));
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('./BpmnFactory').default} BpmnFactory
   * @typedef {import('diagram-js/lib/layout/CroppingConnectionDocking').default} CroppingConnectionDocking
   *
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').Parent} Parent
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   */

  /**
   * A handler responsible for updating the underlying BPMN 2.0 XML & DI
   * once changes on the diagram happen.
   *
   * @param {EventBus} eventBus
   * @param {BpmnFactory} bpmnFactory
   * @param {CroppingConnectionDocking} connectionDocking
   */
  function BpmnUpdater(
      eventBus,
      bpmnFactory,
      connectionDocking
  ) {

    CommandInterceptor.call(this, eventBus);

    this._bpmnFactory = bpmnFactory;

    var self = this;


    // connection cropping //////////////////////

    // crop connection ends during create/update
    function cropConnection(e) {
      var context = e.context,
          hints = context.hints || {},
          connection;

      if (!context.cropped && hints.createElementsBehavior !== false) {
        connection = context.connection;
        connection.waypoints = connectionDocking.getCroppedWaypoints(connection);
        context.cropped = true;
      }
    }

    this.executed([
      'connection.layout',
      'connection.create'
    ], cropConnection);

    this.reverted([ 'connection.layout' ], function(e) {
      delete e.context.cropped;
    });



    // BPMN + DI update //////////////////////


    // update parent
    function updateParent(e) {
      var context = e.context;

      self.updateParent(context.shape || context.connection, context.oldParent);
    }

    function reverseUpdateParent(e) {
      var context = e.context;

      var element = context.shape || context.connection,

          // oldParent is the (old) new parent, because we are undoing
          oldParent = context.parent || context.newParent;

      self.updateParent(element, oldParent);
    }

    this.executed([
      'shape.move',
      'shape.create',
      'shape.delete',
      'connection.create',
      'connection.move',
      'connection.delete'
    ], ifBpmn(updateParent));

    this.reverted([
      'shape.move',
      'shape.create',
      'shape.delete',
      'connection.create',
      'connection.move',
      'connection.delete'
    ], ifBpmn(reverseUpdateParent));

    /*
     * ## Updating Parent
     *
     * When morphing a Process into a Collaboration or vice-versa,
     * make sure that both the *semantic* and *di* parent of each element
     * is updated.
     *
     */
    function updateRoot(event) {
      var context = event.context,
          oldRoot = context.oldRoot,
          children = oldRoot.children;

      forEach$1(children, function(child) {
        if (is$1(child, 'bpmn:BaseElement')) {
          self.updateParent(child);
        }
      });
    }

    this.executed([ 'canvas.updateRoot' ], updateRoot);
    this.reverted([ 'canvas.updateRoot' ], updateRoot);


    // update bounds
    function updateBounds(e) {
      var shape = e.context.shape;

      if (!is$1(shape, 'bpmn:BaseElement')) {
        return;
      }

      self.updateBounds(shape);
    }

    this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

      // exclude labels because they're handled separately during shape.changed
      if (event.context.shape.type === 'label') {
        return;
      }

      updateBounds(event);
    }));

    this.reverted([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

      // exclude labels because they're handled separately during shape.changed
      if (event.context.shape.type === 'label') {
        return;
      }

      updateBounds(event);
    }));

    // Handle labels separately. This is necessary, because the label bounds have to be updated
    // every time its shape changes, not only on move, create and resize.
    eventBus.on('shape.changed', function(event) {
      if (event.element.type === 'label') {
        updateBounds({ context: { shape: event.element } });
      }
    });

    // attach / detach connection
    function updateConnection(e) {
      self.updateConnection(e.context);
    }

    this.executed([
      'connection.create',
      'connection.move',
      'connection.delete',
      'connection.reconnect'
    ], ifBpmn(updateConnection));

    this.reverted([
      'connection.create',
      'connection.move',
      'connection.delete',
      'connection.reconnect'
    ], ifBpmn(updateConnection));


    // update waypoints
    function updateConnectionWaypoints(e) {
      self.updateConnectionWaypoints(e.context.connection);
    }

    this.executed([
      'connection.layout',
      'connection.move',
      'connection.updateWaypoints',
    ], ifBpmn(updateConnectionWaypoints));

    this.reverted([
      'connection.layout',
      'connection.move',
      'connection.updateWaypoints',
    ], ifBpmn(updateConnectionWaypoints));

    // update conditional/default flows
    this.executed('connection.reconnect', ifBpmn(function(event) {
      var context = event.context,
          connection = context.connection,
          oldSource = context.oldSource,
          newSource = context.newSource,
          connectionBo = getBusinessObject(connection),
          oldSourceBo = getBusinessObject(oldSource),
          newSourceBo = getBusinessObject(newSource);

      // remove condition from connection on reconnect to new source
      // if new source can NOT have condional sequence flow
      if (connectionBo.conditionExpression && !isAny(newSourceBo, [
        'bpmn:Activity',
        'bpmn:ExclusiveGateway',
        'bpmn:InclusiveGateway'
      ])) {
        context.oldConditionExpression = connectionBo.conditionExpression;

        delete connectionBo.conditionExpression;
      }

      // remove default from old source flow on reconnect to new source
      // if source changed
      if (oldSource !== newSource && oldSourceBo.default === connectionBo) {
        context.oldDefault = oldSourceBo.default;

        delete oldSourceBo.default;
      }
    }));

    this.reverted('connection.reconnect', ifBpmn(function(event) {
      var context = event.context,
          connection = context.connection,
          oldSource = context.oldSource,
          newSource = context.newSource,
          connectionBo = getBusinessObject(connection),
          oldSourceBo = getBusinessObject(oldSource),
          newSourceBo = getBusinessObject(newSource);

      // add condition to connection on revert reconnect to new source
      if (context.oldConditionExpression) {
        connectionBo.conditionExpression = context.oldConditionExpression;
      }

      // add default to old source on revert reconnect to new source
      if (context.oldDefault) {
        oldSourceBo.default = context.oldDefault;

        delete newSourceBo.default;
      }
    }));

    // update attachments
    function updateAttachment(e) {
      self.updateAttachment(e.context);
    }

    this.executed([ 'element.updateAttachment' ], ifBpmn(updateAttachment));
    this.reverted([ 'element.updateAttachment' ], ifBpmn(updateAttachment));


    // update BPMNLabel
    this.executed('element.updateLabel', ifBpmn(updateBPMNLabel));
    this.reverted('element.updateLabel', ifBpmn(updateBPMNLabel));

    function updateBPMNLabel(event) {
      const { element } = event.context,
            label = getLabel(element);
      const di = getDi(element),
            diLabel = di && di.get('label');

      if (isLabelExternal(element) || isPlane$1(element)) {
        return;
      }

      if (label && !diLabel) {
        di.set('label', bpmnFactory.create('bpmndi:BPMNLabel'));
      } else if (!label && diLabel) {
        di.set('label', undefined);
      }
    }
  }

  e$3(BpmnUpdater, CommandInterceptor);

  BpmnUpdater.$inject = [
    'eventBus',
    'bpmnFactory',
    'connectionDocking'
  ];


  // implementation //////////////////////

  /**
   * @param { {
   *   shape: Shape;
   *   host: Shape;
   * } } context
   */
  BpmnUpdater.prototype.updateAttachment = function(context) {

    var shape = context.shape,
        businessObject = shape.businessObject,
        host = shape.host;

    businessObject.attachedToRef = host && host.businessObject;
  };

  /**
   * @param {Element} element
   * @param {Parent} oldParent
   */
  BpmnUpdater.prototype.updateParent = function(element, oldParent) {

    // do not update BPMN 2.0 label parent
    if (isLabel(element)) {
      return;
    }

    // data stores in collaborations are handled separately by DataStoreBehavior
    if (is$1(element, 'bpmn:DataStoreReference') &&
        element.parent &&
        is$1(element.parent, 'bpmn:Collaboration')) {
      return;
    }

    var parentShape = element.parent;

    var businessObject = element.businessObject,
        di = getDi(element),
        parentBusinessObject = parentShape && parentShape.businessObject,
        parentDi = getDi(parentShape);

    if (is$1(element, 'bpmn:FlowNode')) {
      this.updateFlowNodeRefs(businessObject, parentBusinessObject, oldParent && oldParent.businessObject);
    }

    if (is$1(element, 'bpmn:DataOutputAssociation')) {
      if (element.source) {
        parentBusinessObject = element.source.businessObject;
      } else {
        parentBusinessObject = null;
      }
    }

    if (is$1(element, 'bpmn:DataInputAssociation')) {
      if (element.target) {
        parentBusinessObject = element.target.businessObject;
      } else {
        parentBusinessObject = null;
      }
    }

    this.updateSemanticParent(businessObject, parentBusinessObject);

    if (is$1(element, 'bpmn:DataObjectReference') && businessObject.dataObjectRef) {
      this.updateSemanticParent(businessObject.dataObjectRef, parentBusinessObject);
    }

    this.updateDiParent(di, parentDi);
  };

  /**
   * @param {Shape} shape
   */
  BpmnUpdater.prototype.updateBounds = function(shape) {

    var di = getDi(shape),
        embeddedLabelBounds = getEmbeddedLabelBounds(shape);

    // update embedded label bounds if possible
    if (embeddedLabelBounds) {
      var embeddedLabelBoundsDelta = delta(embeddedLabelBounds, di.get('bounds'));

      assign$1(embeddedLabelBounds, {
        x: shape.x + embeddedLabelBoundsDelta.x,
        y: shape.y + embeddedLabelBoundsDelta.y
      });
    }

    var target = isLabel(shape) ? this._getLabel(di) : di;

    var bounds = target.bounds;

    if (!bounds) {
      bounds = this._bpmnFactory.createDiBounds();
      target.set('bounds', bounds);
    }

    assign$1(bounds, {
      x: shape.x,
      y: shape.y,
      width: shape.width,
      height: shape.height
    });
  };

  /**
   * @param {ModdleElement} businessObject
   * @param {ModdleElement} newContainment
   * @param {ModdleElement} oldContainment
   */
  BpmnUpdater.prototype.updateFlowNodeRefs = function(businessObject, newContainment, oldContainment) {

    if (oldContainment === newContainment) {
      return;
    }

    var oldRefs, newRefs;

    if (is$1 (oldContainment, 'bpmn:Lane')) {
      oldRefs = oldContainment.get('flowNodeRef');
      remove$1(oldRefs, businessObject);
    }

    if (is$1(newContainment, 'bpmn:Lane')) {
      newRefs = newContainment.get('flowNodeRef');
      add$1(newRefs, businessObject);
    }
  };

  /**
   * @param {Connection} connection
   * @param {Element} newSource
   * @param {Element} newTarget
   */
  BpmnUpdater.prototype.updateDiConnection = function(connection, newSource, newTarget) {
    var connectionDi = getDi(connection),
        newSourceDi = getDi(newSource),
        newTargetDi = getDi(newTarget);

    if (connectionDi.sourceElement && connectionDi.sourceElement.bpmnElement !== getBusinessObject(newSource)) {
      connectionDi.sourceElement = newSource && newSourceDi;
    }

    if (connectionDi.targetElement && connectionDi.targetElement.bpmnElement !== getBusinessObject(newTarget)) {
      connectionDi.targetElement = newTarget && newTargetDi;
    }

  };

  /**
   * @param {ModdleElement} di
   * @param {ModdleElement} parentDi
   */
  BpmnUpdater.prototype.updateDiParent = function(di, parentDi) {

    if (parentDi && !is$1(parentDi, 'bpmndi:BPMNPlane')) {
      parentDi = parentDi.$parent;
    }

    if (di.$parent === parentDi) {
      return;
    }

    var planeElements = (parentDi || di.$parent).get('planeElement');

    if (parentDi) {
      planeElements.push(di);
      di.$parent = parentDi;
    } else {
      remove$1(planeElements, di);
      di.$parent = null;
    }
  };

  /**
   * @param {ModdleElement} element
   *
   * @return {ModdleElement}
   */
  function getDefinitions(element) {
    while (element && !is$1(element, 'bpmn:Definitions')) {
      element = element.$parent;
    }

    return element;
  }

  /**
   * @param {ModdleElement} container
   *
   * @return {ModdleElement}
   */
  BpmnUpdater.prototype.getLaneSet = function(container) {

    var laneSet, laneSets;

    // bpmn:Lane
    if (is$1(container, 'bpmn:Lane')) {
      laneSet = container.childLaneSet;

      if (!laneSet) {
        laneSet = this._bpmnFactory.create('bpmn:LaneSet');
        container.childLaneSet = laneSet;
        laneSet.$parent = container;
      }

      return laneSet;
    }

    // bpmn:Participant
    if (is$1(container, 'bpmn:Participant')) {
      container = container.processRef;
    }

    // bpmn:FlowElementsContainer
    laneSets = container.get('laneSets');
    laneSet = laneSets[0];

    if (!laneSet) {
      laneSet = this._bpmnFactory.create('bpmn:LaneSet');
      laneSet.$parent = container;
      laneSets.push(laneSet);
    }

    return laneSet;
  };

  /**
   * @param {ModdleElement} businessObject
   * @param {ModdleElement} newParent
   * @param {ModdleElement} visualParent
   */
  BpmnUpdater.prototype.updateSemanticParent = function(businessObject, newParent, visualParent) {

    var containment;

    if (businessObject.$parent === newParent) {
      return;
    }

    if (is$1(businessObject, 'bpmn:DataInput') || is$1(businessObject, 'bpmn:DataOutput')) {

      if (is$1(newParent, 'bpmn:Participant') && 'processRef' in newParent) {
        newParent = newParent.processRef;
      }

      // already in correct ioSpecification
      if ('ioSpecification' in newParent && newParent.ioSpecification === businessObject.$parent) {
        return;
      }
    }

    if (is$1(businessObject, 'bpmn:Lane')) {

      if (newParent) {
        newParent = this.getLaneSet(newParent);
      }

      containment = 'lanes';
    } else if (is$1(businessObject, 'bpmn:FlowElement')) {

      if (newParent) {

        if (is$1(newParent, 'bpmn:Participant')) {
          newParent = newParent.processRef;
        } else if (is$1(newParent, 'bpmn:Lane')) {
          do {

            // unwrap Lane -> LaneSet -> (Lane | FlowElementsContainer)
            newParent = newParent.$parent.$parent;
          } while (is$1(newParent, 'bpmn:Lane'));

        }
      }

      containment = 'flowElements';

    } else if (is$1(businessObject, 'bpmn:Artifact')) {

      while (newParent &&
             !is$1(newParent, 'bpmn:Process') &&
             !is$1(newParent, 'bpmn:SubProcess') &&
             !is$1(newParent, 'bpmn:Collaboration')) {

        if (is$1(newParent, 'bpmn:Participant')) {
          newParent = newParent.processRef;
          break;
        } else {
          newParent = newParent.$parent;
        }
      }

      containment = 'artifacts';
    } else if (is$1(businessObject, 'bpmn:MessageFlow')) {
      containment = 'messageFlows';
    } else if (is$1(businessObject, 'bpmn:Participant')) {
      containment = 'participants';

      // make sure the participants process is properly attached / detached
      // from the XML document

      var process = businessObject.processRef,
          definitions;

      if (process) {
        definitions = getDefinitions(businessObject.$parent || newParent);

        if (businessObject.$parent) {
          remove$1(definitions.get('rootElements'), process);
          process.$parent = null;
        }

        if (newParent) {
          add$1(definitions.get('rootElements'), process);
          process.$parent = definitions;
        }
      }
    } else if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {
      containment = 'dataOutputAssociations';
    } else if (is$1(businessObject, 'bpmn:DataInputAssociation')) {
      containment = 'dataInputAssociations';
    }

    if (!containment) {
      throw new Error(`no parent for <${ businessObject.id }> in <${ newParent.id }>`);
    }

    var children;

    if (businessObject.$parent) {

      // remove from old parent
      children = businessObject.$parent.get(containment);
      remove$1(children, businessObject);
    }

    if (!newParent) {
      businessObject.$parent = null;
    } else {

      // add to new parent
      children = newParent.get(containment);
      children.push(businessObject);
      businessObject.$parent = newParent;
    }

    if (visualParent) {
      var diChildren = visualParent.get(containment);

      remove$1(children, businessObject);

      if (newParent) {

        if (!diChildren) {
          diChildren = [];
          newParent.set(containment, diChildren);
        }

        diChildren.push(businessObject);
      }
    }
  };

  /**
   * @param {Connection} connection
   */
  BpmnUpdater.prototype.updateConnectionWaypoints = function(connection) {
    var di = getDi(connection);

    di.set('waypoint', this._bpmnFactory.createDiWaypoints(connection.waypoints));
  };

  /**
   * @param { {
   *   connection: Connection;
   *   parent: Parent;
   *   newParent: Parent;
   * } } context
   */
  BpmnUpdater.prototype.updateConnection = function(context) {
    var connection = context.connection,
        businessObject = getBusinessObject(connection),
        newSource = connection.source,
        newSourceBo = getBusinessObject(newSource),
        newTarget = connection.target,
        newTargetBo = getBusinessObject(connection.target),
        visualParent;

    if (!is$1(businessObject, 'bpmn:DataAssociation')) {

      var inverseSet = is$1(businessObject, 'bpmn:SequenceFlow');

      if (businessObject.sourceRef !== newSourceBo) {
        if (inverseSet) {
          remove$1(businessObject.sourceRef && businessObject.sourceRef.get('outgoing'), businessObject);

          if (newSourceBo && newSourceBo.get('outgoing')) {
            newSourceBo.get('outgoing').push(businessObject);
          }
        }

        businessObject.sourceRef = newSourceBo;
      }

      if (businessObject.targetRef !== newTargetBo) {
        if (inverseSet) {
          remove$1(businessObject.targetRef && businessObject.targetRef.get('incoming'), businessObject);

          if (newTargetBo && newTargetBo.get('incoming')) {
            newTargetBo.get('incoming').push(businessObject);
          }
        }

        businessObject.targetRef = newTargetBo;
      }
    } else if (is$1(businessObject, 'bpmn:DataInputAssociation')) {

      // handle obnoxious isMsome sourceRef
      businessObject.get('sourceRef')[0] = newSourceBo;

      visualParent = context.parent || context.newParent || newTargetBo;

      this.updateSemanticParent(businessObject, newTargetBo, visualParent);
    } else if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {
      visualParent = context.parent || context.newParent || newSourceBo;

      this.updateSemanticParent(businessObject, newSourceBo, visualParent);

      // targetRef = new target
      businessObject.targetRef = newTargetBo;
    }

    this.updateConnectionWaypoints(connection);

    this.updateDiConnection(connection, newSource, newTarget);
  };


  // helpers //////////////////////

  BpmnUpdater.prototype._getLabel = function(di) {
    if (!di.label) {
      di.label = this._bpmnFactory.createDiLabel();
    }

    return di.label;
  };


  /**
   * Call function if shape or connection is BPMN element.
   *
   * @param  {Function} fn
   *
   * @return {Function}
   */
  function ifBpmn(fn) {

    return function(event) {

      var context = event.context,
          element = context.shape || context.connection || context.element;

      if (is$1(element, 'bpmn:BaseElement')) {
        fn(event);
      }
    };
  }

  /**
   * Return dc:Bounds of bpmndi:BPMNLabel if exists.
   *
   * @param {Shape} shape
   *
   * @return {ModdleElement|undefined}
   */
  function getEmbeddedLabelBounds(shape) {
    if (!is$1(shape, 'bpmn:Activity')) {
      return;
    }

    var di = getDi(shape);

    if (!di) {
      return;
    }

    var label = di.get('label');

    if (!label) {
      return;
    }

    return label.get('bounds');
  }

  /**
   * @typedef {import('diagram-js/lib/util/Types').Dimensions} Dimensions
   *
   * @typedef {import('./BpmnFactory').default} BpmnFactory
   *
   * @typedef {import('../../model/Types').BpmnAttributes} BpmnAttributes
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Label} Label
   * @typedef {import('../../model/Types').Root} Root
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').Moddle} Moddle
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   */

  /**
   * A BPMN-specific element factory.
   *
   * @template {Connection} [T=Connection]
   * @template {Label} [U=Label]
   * @template {Root} [V=Root]
   * @template {Shape} [W=Shape]
   *
   * @extends {BaseElementFactory<T, U, V, W>}
   *
   * @param {BpmnFactory} bpmnFactory
   * @param {Moddle} moddle
   */
  function ElementFactory(bpmnFactory, moddle) {
    ElementFactory$1.call(this);

    this._bpmnFactory = bpmnFactory;
    this._moddle = moddle;
  }

  e$3(ElementFactory, ElementFactory$1);

  ElementFactory.$inject = [
    'bpmnFactory',
    'moddle'
  ];

  ElementFactory.prototype._baseCreate = ElementFactory$1.prototype.create;

  /**
   * Create a root element.
   *
   * @overlord
   * @param {'root'} elementType
   * @param {Partial<Root> & Partial<BpmnAttributes>} [attrs]
   * @return {V}
   */

  /**
   * Create a shape.
   *
   * @overlord
   * @param {'shape'} elementType
   * @param {Partial<Shape> & Partial<BpmnAttributes>} [attrs]
   * @return {W}
   */

  /**
   * Create a connection.
   *
   * @overlord
   * @param {'connection'} elementType
   * @param {Partial<Connection> & Partial<BpmnAttributes>} [attrs]
   * @return {T}
   */

  /**
   * Create a label.
   *
   * @param {'label'} elementType
   * @param {Partial<Label> & Partial<BpmnAttributes>} [attrs]
   * @return {U}
   */
  ElementFactory.prototype.create = function(elementType, attrs) {

    // no special magic for labels,
    // we assume their businessObjects have already been created
    // and wired via attrs
    if (elementType === 'label') {
      var di = attrs.di || this._bpmnFactory.createDiLabel();
      return this._baseCreate(elementType, assign$1({ type: 'label', di: di }, DEFAULT_LABEL_SIZE$1, attrs));
    }

    return this.createElement(elementType, attrs);
  };

  /**
   * Create a BPMN root element.
   *
   * @overlord
   * @param {'root'} elementType
   * @param {Partial<Root> & Partial<BpmnAttributes>} [attrs]
   * @return {V}
   */

  /**
   * Create a BPMN shape.
   *
   * @overlord
   * @param {'shape'} elementType
   * @param {Partial<Shape> & Partial<BpmnAttributes>} [attrs]
   * @return {W}
   */

  /**
   * Create a BPMN connection.
   *
   * @param {'connection'} elementType
   * @param {Partial<Connection> & Partial<BpmnAttributes>} [attrs]
   * @return {T}
   */
  ElementFactory.prototype.createElement = function(elementType, attrs) {

    attrs = assign$1({}, attrs || {});

    var size;

    var businessObject = attrs.businessObject,
        di = attrs.di;

    if (!businessObject) {
      if (!attrs.type) {
        throw new Error('no shape type specified');
      }

      businessObject = this._bpmnFactory.create(attrs.type);

      ensureCompatDiRef(businessObject);
    }

    if (!isModdleDi(di)) {
      var diAttrs = assign$1(
        {},
        di || {},
        { id: businessObject.id + '_di' }
      );

      if (elementType === 'root') {
        di = this._bpmnFactory.createDiPlane(businessObject, diAttrs);
      } else if (elementType === 'connection') {
        di = this._bpmnFactory.createDiEdge(businessObject, diAttrs);
      } else {
        di = this._bpmnFactory.createDiShape(businessObject, diAttrs);
      }
    }

    if (is$1(businessObject, 'bpmn:Group')) {
      attrs = assign$1({
        isFrame: true
      }, attrs);
    }

    attrs = applyAttributes(businessObject, attrs, [
      'processRef',
      'isInterrupting',
      'associationDirection',
      'isForCompensation'
    ]);

    if (attrs.isExpanded) {
      attrs = applyAttribute(di, attrs, 'isExpanded');
    }

    if (isAny(businessObject, [ 'bpmn:Lane', 'bpmn:Participant' ])) {
      attrs = applyAttribute(di, attrs, 'isHorizontal');
    }

    if (is$1(businessObject, 'bpmn:SubProcess')) {
      attrs.collapsed = !isExpanded(businessObject, di);
    }

    if (is$1(businessObject, 'bpmn:ExclusiveGateway')) {
      if (has$1(di, 'isMarkerVisible')) {
        if (di.isMarkerVisible === undefined) {
          di.isMarkerVisible = false;
        }
      } else {
        di.isMarkerVisible = true;
      }
    }

    if (isDefined(attrs.triggeredByEvent)) {
      businessObject.triggeredByEvent = attrs.triggeredByEvent;
      delete attrs.triggeredByEvent;
    }

    if (isDefined(attrs.cancelActivity)) {
      businessObject.cancelActivity = attrs.cancelActivity;
      delete attrs.cancelActivity;
    }

    var eventDefinitions,
        newEventDefinition;

    if (attrs.eventDefinitionType) {
      eventDefinitions = businessObject.get('eventDefinitions') || [];
      newEventDefinition = this._bpmnFactory.create(attrs.eventDefinitionType, attrs.eventDefinitionAttrs);

      if (attrs.eventDefinitionType === 'bpmn:ConditionalEventDefinition') {
        newEventDefinition.condition = this._bpmnFactory.create('bpmn:FormalExpression');
      }

      eventDefinitions.push(newEventDefinition);

      newEventDefinition.$parent = businessObject;
      businessObject.eventDefinitions = eventDefinitions;

      delete attrs.eventDefinitionType;
    }

    size = this.getDefaultSize(businessObject, di);

    attrs = assign$1({
      id: businessObject.id
    }, size, attrs, {
      businessObject: businessObject,
      di: di
    });

    return this._baseCreate(elementType, attrs);
  };

  /**
   * Get the default size of a diagram element.
   *
   * @param {Element} element The element.
   * @param {ModdleElement} di The DI.
   *
   * @return {Dimensions} Default width and height of the element.
   */
  ElementFactory.prototype.getDefaultSize = function(element, di) {

    var bo = getBusinessObject(element);
    di = di || getDi(element);

    if (is$1(bo, 'bpmn:SubProcess')) {
      if (isExpanded(bo, di)) {
        return { width: 350, height: 200 };
      } else {
        return { width: 100, height: 80 };
      }
    }

    if (is$1(bo, 'bpmn:Task')) {
      return { width: 100, height: 80 };
    }

    if (is$1(bo, 'bpmn:Gateway')) {
      return { width: 50, height: 50 };
    }

    if (is$1(bo, 'bpmn:Event')) {
      return { width: 36, height: 36 };
    }

    if (is$1(bo, 'bpmn:Participant')) {
      var isHorizontalPool = di.isHorizontal === undefined || di.isHorizontal === true;
      if (isExpanded(bo, di)) {
        if (isHorizontalPool) {
          return { width: 600, height: 250 };
        }
        return { width: 250, height: 600 };
      } else {
        if (isHorizontalPool) {
          return { width: 400, height: 60 };
        }
        return { width: 60, height: 400 };
      }
    }

    if (is$1(bo, 'bpmn:Lane')) {
      return { width: 400, height: 100 };
    }

    if (is$1(bo, 'bpmn:DataObjectReference')) {
      return { width: 36, height: 50 };
    }

    if (is$1(bo, 'bpmn:DataStoreReference')) {
      return { width: 50, height: 50 };
    }

    if (is$1(bo, 'bpmn:TextAnnotation')) {
      return { width: 100, height: 30 };
    }

    if (is$1(bo, 'bpmn:Group')) {
      return { width: 300, height: 300 };
    }

    return { width: 100, height: 80 };
  };


  /**
   * Create participant.
   *
   * @param {boolean|Partial<Shape> & Partial<BpmnAttributes>} [attrs]
   * Attributes or whether the participant is expanded.
   *
   * @return {W} The created participant.
   */
  ElementFactory.prototype.createParticipantShape = function(attrs) {

    if (!isObject(attrs)) {
      attrs = { isExpanded: attrs };
    }

    attrs = assign$1({ type: 'bpmn:Participant' }, attrs || {});

    // participants are expanded by default
    if (attrs.isExpanded !== false) {
      attrs.processRef = this._bpmnFactory.create('bpmn:Process');
    }

    return this.createShape(attrs);
  };


  // helpers //////////////////////

  /**
   * Apply attributes from a map to the given element, remove attribute from the
   * map on application.
   *
   * @param {Element} element
   * @param {Object} attrs (in/out map of attributes)
   * @param {string[]} attributeNames name of attributes to apply
   *
   * @return {Object} changed attrs
   */
  function applyAttributes(element, attrs, attributeNames) {

    forEach$1(attributeNames, function(property) {
      attrs = applyAttribute(element, attrs, property);
    });

    return attrs;
  }

  /**
   * Apply named property to element and drain it from the attrs collection.
   *
   * @param {Element} element
   * @param {Object} attrs (in/out map of attributes)
   * @param {string} attributeName to apply
   *
   * @return {Object} changed attrs
   */
  function applyAttribute(element, attrs, attributeName) {
    if (attrs[attributeName] === undefined) {
      return attrs;
    }

    element[attributeName] = attrs[attributeName];

    return omit(attrs, [ attributeName ]);
  }

  /**
   * @param {Element} element
   *
   * @return {boolean}
   */
  function isModdleDi(element) {
    return isAny(element, [
      'bpmndi:BPMNShape',
      'bpmndi:BPMNEdge',
      'bpmndi:BPMNDiagram',
      'bpmndi:BPMNPlane',
    ]);
  }

  /**
   * @typedef {import('../../../core/Canvas').default} Canvas
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that align elements in a certain way.
   *
   * @param {Modeling} modeling
   * @param {Canvas} canvas
   */
  function AlignElements(modeling, canvas) {
    this._modeling = modeling;
    this._canvas = canvas;
  }

  AlignElements.$inject = [ 'modeling', 'canvas' ];


  AlignElements.prototype.preExecute = function(context) {
    var modeling = this._modeling;

    var elements = context.elements,
        alignment = context.alignment;


    forEach$1(elements, function(element) {
      var delta = {
        x: 0,
        y: 0
      };

      if (isDefined(alignment.left)) {
        delta.x = alignment.left - element.x;

      } else if (isDefined(alignment.right)) {
        delta.x = (alignment.right - element.width) - element.x;

      } else if (isDefined(alignment.center)) {
        delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;

      } else if (isDefined(alignment.top)) {
        delta.y = alignment.top - element.y;

      } else if (isDefined(alignment.bottom)) {
        delta.y = (alignment.bottom - element.height) - element.y;

      } else if (isDefined(alignment.middle)) {
        delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;
      }

      modeling.moveElements([ element ], delta, element.parent);
    });
  };

  AlignElements.prototype.postExecute = function(context) {

  };

  /**
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Parent} Parent
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('../../../util/Types').Point} Point
   *
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible appending of shapes
   * to a source shape.
   *
   * @param {Modeling} modeling
   */
  function AppendShapeHandler(modeling) {
    this._modeling = modeling;
  }

  AppendShapeHandler.$inject = [ 'modeling' ];


  // api //////////////////////


  /**
   * Creates a new shape.
   *
   * @param {Object} context
   * @param {Partial<Shape>} context.shape The new shape.
   * @param {Element} context.source The element to which to append the new shape to.
   * @param {Parent} context.parent The parent.
   * @param {Point} context.position The position at which to create the new shape.
   */
  AppendShapeHandler.prototype.preExecute = function(context) {

    var source = context.source;

    if (!source) {
      throw new Error('source required');
    }

    var target = context.target || source.parent,
        shape = context.shape,
        hints = context.hints || {};

    shape = context.shape =
      this._modeling.createShape(
        shape,
        context.position,
        target, { attach: hints.attach });

    context.shape = shape;
  };

  AppendShapeHandler.prototype.postExecute = function(context) {
    var hints = context.hints || {};

    if (!existsConnection(context.source, context.shape)) {

      // create connection
      if (hints.connectionTarget === context.source) {
        this._modeling.connect(context.shape, context.source, context.connection);
      } else {
        this._modeling.connect(context.source, context.shape, context.connection);
      }
    }
  };


  function existsConnection(source, target) {
    return some(source.outgoing, function(c) {
      return c.target === target;
    });
  }

  /**
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('../../../util/Types').Point} Point
   *
   * @typedef {import('../Modeling').ModelingHints} ModelingHints
   *
   * @typedef {import('../../../core/Canvas').default} Canvas
   * @typedef {import('../../../layout/BaseLayouter').default} Layouter
   */

  /**
   * @param {Canvas} canvas
   * @param {Layouter} layouter
   */
  function CreateConnectionHandler(canvas, layouter) {
    this._canvas = canvas;
    this._layouter = layouter;
  }

  CreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];


  // api //////////////////////


  /**
   * Creates a new connection between two elements.
   *
   * @param {Object} context
   * @param {Element} context.source The source.
   * @param {Element} context.target The target.
   * @param {Shape} context.parent The parent.
   * @param {number} [context.parentIndex] The optional index at which to add the
   * connection to the parent's children.
   * @param {ModelingHints} [context.hints] The optional hints.
   */
  CreateConnectionHandler.prototype.execute = function(context) {

    var connection = context.connection,
        source = context.source,
        target = context.target,
        parent = context.parent,
        parentIndex = context.parentIndex,
        hints = context.hints;

    if (!source || !target) {
      throw new Error('source and target required');
    }

    if (!parent) {
      throw new Error('parent required');
    }

    connection.source = source;
    connection.target = target;

    if (!connection.waypoints) {
      connection.waypoints = this._layouter.layoutConnection(connection, hints);
    }

    // add connection
    this._canvas.addConnection(connection, parent, parentIndex);

    return connection;
  };

  CreateConnectionHandler.prototype.revert = function(context) {
    var connection = context.connection;

    this._canvas.removeConnection(connection);

    connection.source = null;
    connection.target = null;

    return connection;
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  var round$4 = Math.round;

  /**
   * @param {Modeling} modeling
   */
  function CreateElementsHandler(modeling) {
    this._modeling = modeling;
  }

  CreateElementsHandler.$inject = [
    'modeling'
  ];

  CreateElementsHandler.prototype.preExecute = function(context) {
    var elements = context.elements,
        parent = context.parent,
        parentIndex = context.parentIndex,
        position = context.position,
        hints = context.hints;

    var modeling = this._modeling;

    // make sure each element has x and y
    forEach$1(elements, function(element) {
      if (!isNumber(element.x)) {
        element.x = 0;
      }

      if (!isNumber(element.y)) {
        element.y = 0;
      }
    });

    var visibleElements = filter(elements, function(element) {
      return !element.hidden;
    });

    var bbox = getBBox(visibleElements);

    // center elements around position
    forEach$1(elements, function(element) {
      if (isConnection(element)) {
        element.waypoints = map$1(element.waypoints, function(waypoint) {
          return {
            x: round$4(waypoint.x - bbox.x - bbox.width / 2 + position.x),
            y: round$4(waypoint.y - bbox.y - bbox.height / 2 + position.y)
          };
        });
      }

      assign$1(element, {
        x: round$4(element.x - bbox.x - bbox.width / 2 + position.x),
        y: round$4(element.y - bbox.y - bbox.height / 2 + position.y)
      });
    });

    var parents = getParents$1(elements);

    var cache = {};

    forEach$1(elements, function(element) {
      if (isConnection(element)) {
        cache[ element.id ] = isNumber(parentIndex) ?
          modeling.createConnection(
            cache[ element.source.id ],
            cache[ element.target.id ],
            parentIndex,
            element,
            element.parent || parent,
            hints
          ) :
          modeling.createConnection(
            cache[ element.source.id ],
            cache[ element.target.id ],
            element,
            element.parent || parent,
            hints
          );

        return;
      }

      var createShapeHints = assign$1({}, hints);

      if (parents.indexOf(element) === -1) {
        createShapeHints.autoResize = false;
      }

      if (isLabel(element)) {
        createShapeHints = omit(createShapeHints, [ 'attach' ]);
      }

      cache[ element.id ] = isNumber(parentIndex) ?
        modeling.createShape(
          element,
          pick(element, [ 'x', 'y', 'width', 'height' ]),
          element.parent || parent,
          parentIndex,
          createShapeHints
        ) :
        modeling.createShape(
          element,
          pick(element, [ 'x', 'y', 'width', 'height' ]),
          element.parent || parent,
          createShapeHints
        );
    });

    context.elements = values(cache);
  };

  /**
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../util/Types').Point} Point
   *
   * @typedef {import('../../../core/Canvas').default} Canvas
   */

  var round$3 = Math.round;


  /**
   * A handler that implements reversible addition of shapes.
   *
   * @param {Canvas} canvas
   */
  function CreateShapeHandler(canvas) {
    this._canvas = canvas;
  }

  CreateShapeHandler.$inject = [ 'canvas' ];


  // api //////////////////////


  /**
   * Appends a shape to a target shape
   *
   * @param {Object} context
   * @param {Element} context.parent The parent.
   * @param {Point} context.position The position at which to create the new shape.
   * @param {number} [context.parentIndex] The optional index at which to add the
   * shape to the parent's children.
   */
  CreateShapeHandler.prototype.execute = function(context) {

    var shape = context.shape,
        positionOrBounds = context.position,
        parent = context.parent,
        parentIndex = context.parentIndex;

    if (!parent) {
      throw new Error('parent required');
    }

    if (!positionOrBounds) {
      throw new Error('position required');
    }

    // (1) add at event center position _or_ at given bounds
    if (positionOrBounds.width !== undefined) {
      assign$1(shape, positionOrBounds);
    } else {
      assign$1(shape, {
        x: positionOrBounds.x - round$3(shape.width / 2),
        y: positionOrBounds.y - round$3(shape.height / 2)
      });
    }

    // (2) add to canvas
    this._canvas.addShape(shape, parent, parentIndex);

    return shape;
  };


  /**
   * Undo append by removing the shape
   */
  CreateShapeHandler.prototype.revert = function(context) {

    var shape = context.shape;

    // (3) remove form canvas
    this._canvas.removeShape(shape);

    return shape;
  };

  /**
   * @typedef {import('../../../core/Canvas').default} Canvas
   *
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('../../../model/Types').Parent} Parent
   * @typedef {import('../../../model/Types').Shape} Shape
   * @typedef {import('../../../util/Types').Point} Point
   */

  /**
   * A handler that attaches a label to a given target shape.
   *
   * @param {Canvas} canvas
   */
  function CreateLabelHandler(canvas) {
    CreateShapeHandler.call(this, canvas);
  }

  e$3(CreateLabelHandler, CreateShapeHandler);

  CreateLabelHandler.$inject = [ 'canvas' ];


  // api //////////////////////


  var originalExecute = CreateShapeHandler.prototype.execute;

  /**
   * Append label to element.
   *
   * @param { {
   *   parent: Parent;
   *   position: Point;
   *   shape: Shape;
   *   target: Element;
   * } } context
   */
  CreateLabelHandler.prototype.execute = function(context) {

    var label = context.shape;

    ensureValidDimensions(label);

    label.labelTarget = context.labelTarget;

    return originalExecute.call(this, context);
  };

  var originalRevert = CreateShapeHandler.prototype.revert;

  /**
   * Revert appending by removing label.
   */
  CreateLabelHandler.prototype.revert = function(context) {
    context.shape.labelTarget = null;

    return originalRevert.call(this, context);
  };


  // helpers //////////////////////

  function ensureValidDimensions(label) {

    // make sure a label has valid { width, height } dimensions
    [ 'width', 'height' ].forEach(function(prop) {
      if (typeof label[prop] === 'undefined') {
        label[prop] = 0;
      }
    });
  }

  /**
   * @typedef {import('../../../core/Canvas').default} Canvas
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible deletion of Connections.
   */
  function DeleteConnectionHandler(canvas, modeling) {
    this._canvas = canvas;
    this._modeling = modeling;
  }

  DeleteConnectionHandler.$inject = [
    'canvas',
    'modeling'
  ];


  /**
   * - Remove connections
   */
  DeleteConnectionHandler.prototype.preExecute = function(context) {

    var modeling = this._modeling;

    var connection = context.connection;

    // remove connections
    saveClear(connection.incoming, function(connection) {

      // To make sure that the connection isn't removed twice
      // For example if a container is removed
      modeling.removeConnection(connection, { nested: true });
    });

    saveClear(connection.outgoing, function(connection) {
      modeling.removeConnection(connection, { nested: true });
    });

  };


  DeleteConnectionHandler.prototype.execute = function(context) {

    var connection = context.connection,
        parent = connection.parent;

    context.parent = parent;

    // remember containment
    context.parentIndex = indexOf(parent.children, connection);

    context.source = connection.source;
    context.target = connection.target;

    this._canvas.removeConnection(connection);

    connection.source = null;
    connection.target = null;

    return connection;
  };

  /**
   * Command revert implementation.
   */
  DeleteConnectionHandler.prototype.revert = function(context) {

    var connection = context.connection,
        parent = context.parent,
        parentIndex = context.parentIndex;

    connection.source = context.source;
    connection.target = context.target;

    // restore containment
    add$1(parent.children, connection, parentIndex);

    this._canvas.addConnection(connection, parent);

    return connection;
  };

  /**
   * @typedef {import('../../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * @param {Modeling} modeling
   * @param {ElementRegistry} elementRegistry
   */
  function DeleteElementsHandler(modeling, elementRegistry) {
    this._modeling = modeling;
    this._elementRegistry = elementRegistry;
  }

  DeleteElementsHandler.$inject = [
    'modeling',
    'elementRegistry'
  ];


  DeleteElementsHandler.prototype.postExecute = function(context) {

    var modeling = this._modeling,
        elementRegistry = this._elementRegistry,
        elements = context.elements;

    forEach$1(elements, function(element) {

      // element may have been removed with previous
      // remove operations already (e.g. in case of nesting)
      if (!elementRegistry.get(element.id)) {
        return;
      }

      if (element.waypoints) {
        modeling.removeConnection(element);
      } else {
        modeling.removeShape(element);
      }
    });
  };

  /**
   * @typedef {import('../../../core/Canvas').default} Canvas
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible deletion of shapes.
   *
   * @param {Canvas} canvas
   * @param {Modeling} modeling
   */
  function DeleteShapeHandler(canvas, modeling) {
    this._canvas = canvas;
    this._modeling = modeling;
  }

  DeleteShapeHandler.$inject = [ 'canvas', 'modeling' ];


  /**
   * - Remove connections
   * - Remove all direct children
   */
  DeleteShapeHandler.prototype.preExecute = function(context) {

    var modeling = this._modeling;

    var shape = context.shape;

    // remove connections
    saveClear(shape.incoming, function(connection) {

      // To make sure that the connection isn't removed twice
      // For example if a container is removed
      modeling.removeConnection(connection, { nested: true });
    });

    saveClear(shape.outgoing, function(connection) {
      modeling.removeConnection(connection, { nested: true });
    });

    // remove child shapes and connections
    saveClear(shape.children, function(child) {
      if (isConnection(child)) {
        modeling.removeConnection(child, { nested: true });
      } else {
        modeling.removeShape(child, { nested: true });
      }
    });
  };

  /**
   * Remove shape and remember the parent
   */
  DeleteShapeHandler.prototype.execute = function(context) {
    var canvas = this._canvas;

    var shape = context.shape,
        oldParent = shape.parent;

    context.oldParent = oldParent;

    // remove containment
    context.oldParentIndex = indexOf(oldParent.children, shape);

    // remove shape
    canvas.removeShape(shape);

    return shape;
  };


  /**
   * Command revert implementation
   */
  DeleteShapeHandler.prototype.revert = function(context) {

    var canvas = this._canvas;

    var shape = context.shape,
        oldParent = context.oldParent,
        oldParentIndex = context.oldParentIndex;

    // restore containment
    add$1(oldParent.children, shape, oldParentIndex);

    canvas.addShape(shape, oldParent);

    return shape;
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that distributes elements evenly.
   *
   * @param {Modeling} modeling
   */
  function DistributeElements$1(modeling) {
    this._modeling = modeling;
  }

  DistributeElements$1.$inject = [ 'modeling' ];

  var OFF_AXIS = {
    x: 'y',
    y: 'x'
  };

  DistributeElements$1.prototype.preExecute = function(context) {
    var modeling = this._modeling;

    var groups = context.groups,
        axis = context.axis,
        dimension = context.dimension;

    function updateRange(group, element) {
      group.range.min = Math.min(element[axis], group.range.min);
      group.range.max = Math.max(element[axis] + element[dimension], group.range.max);
    }

    function center(element) {
      return element[axis] + element[dimension] / 2;
    }

    function lastIdx(arr) {
      return arr.length - 1;
    }

    function rangeDiff(range) {
      return range.max - range.min;
    }

    function centerElement(refCenter, element) {
      var delta = { y: 0 };

      delta[axis] = refCenter - center(element);

      if (delta[axis]) {

        delta[OFF_AXIS[axis]] = 0;

        modeling.moveElements([ element ], delta, element.parent);
      }
    }

    var firstGroup = groups[0],
        lastGroupIdx = lastIdx(groups),
        lastGroup = groups[ lastGroupIdx ];

    var margin,
        spaceInBetween,
        groupsSize = 0; // the size of each range

    forEach$1(groups, function(group, idx) {
      var sortedElements,
          refElem,
          refCenter;

      if (group.elements.length < 2) {
        if (idx && idx !== groups.length - 1) {
          updateRange(group, group.elements[0]);

          groupsSize += rangeDiff(group.range);
        }
        return;
      }

      sortedElements = sortBy(group.elements, axis);

      refElem = sortedElements[0];

      if (idx === lastGroupIdx) {
        refElem = sortedElements[lastIdx(sortedElements)];
      }

      refCenter = center(refElem);

      // wanna update the ranges after the shapes have been centered
      group.range = null;

      forEach$1(sortedElements, function(element) {

        centerElement(refCenter, element);

        if (group.range === null) {
          group.range = {
            min: element[axis],
            max: element[axis] + element[dimension]
          };

          return;
        }

        // update group's range after centering the range elements
        updateRange(group, element);
      });

      if (idx && idx !== groups.length - 1) {
        groupsSize += rangeDiff(group.range);
      }
    });

    spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);

    margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));

    if (margin < groups.length - 1) {
      return;
    }

    forEach$1(groups, function(group, groupIdx) {
      var delta = {},
          prevGroup;

      if (group === firstGroup || group === lastGroup) {
        return;
      }

      prevGroup = groups[groupIdx - 1];

      group.range.max = 0;

      forEach$1(group.elements, function(element, idx) {
        delta[OFF_AXIS[axis]] = 0;
        delta[axis] = (prevGroup.range.max - element[axis]) + margin;

        if (group.range.min !== element[axis]) {
          delta[axis] += element[axis] - group.range.min;
        }

        if (delta[axis]) {
          modeling.moveElements([ element ], delta, element.parent);
        }

        group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);
      });
    });
  };

  DistributeElements$1.prototype.postExecute = function(context) {

  };

  /**
   * @typedef {import('../../../core/Canvas').default} Canvas
   * @typedef {import('../../../layout/BaseLayouter').default} Layouter
   */

  /**
   * A handler that implements reversible moving of shapes.
   *
   * @param {Layouter} layouter
   * @param {Canvas} canvas
   */
  function LayoutConnectionHandler(layouter, canvas) {
    this._layouter = layouter;
    this._canvas = canvas;
  }

  LayoutConnectionHandler.$inject = [ 'layouter', 'canvas' ];

  LayoutConnectionHandler.prototype.execute = function(context) {

    var connection = context.connection;

    var oldWaypoints = connection.waypoints;

    assign$1(context, {
      oldWaypoints: oldWaypoints
    });

    connection.waypoints = this._layouter.layoutConnection(connection, context.hints);

    return connection;
  };

  LayoutConnectionHandler.prototype.revert = function(context) {

    var connection = context.connection;

    connection.waypoints = context.oldWaypoints;

    return connection;
  };

  /**
   * A handler that implements reversible moving of connections.
   *
   * The handler differs from the layout connection handler in a sense
   * that it preserves the connection layout.
   */
  function MoveConnectionHandler() { }


  MoveConnectionHandler.prototype.execute = function(context) {

    var connection = context.connection,
        delta = context.delta;

    var newParent = context.newParent || connection.parent,
        newParentIndex = context.newParentIndex,
        oldParent = connection.parent;

    // save old parent in context
    context.oldParent = oldParent;
    context.oldParentIndex = remove$1(oldParent.children, connection);

    // add to new parent at position
    add$1(newParent.children, connection, newParentIndex);

    // update parent
    connection.parent = newParent;

    // update waypoint positions
    forEach$1(connection.waypoints, function(p) {
      p.x += delta.x;
      p.y += delta.y;

      if (p.original) {
        p.original.x += delta.x;
        p.original.y += delta.y;
      }
    });

    return connection;
  };

  MoveConnectionHandler.prototype.revert = function(context) {

    var connection = context.connection,
        newParent = connection.parent,
        oldParent = context.oldParent,
        oldParentIndex = context.oldParentIndex,
        delta = context.delta;

    // remove from newParent
    remove$1(newParent.children, connection);

    // restore previous location in old parent
    add$1(oldParent.children, connection, oldParentIndex);

    // restore parent
    connection.parent = oldParent;

    // revert to old waypoint positions
    forEach$1(connection.waypoints, function(p) {
      p.x -= delta.x;
      p.y -= delta.y;

      if (p.original) {
        p.original.x -= delta.x;
        p.original.y -= delta.y;
      }
    });

    return connection;
  };

  /**
   * @typedef {import('../../../../model/Types').Connection} Connection
   * @typedef {import('../../../../model/Types').Element} Element
   * @typedef {import('../../../../model/Types').Shape} Shape
   */

  function MoveClosure() {

    /**
     * @type {Record<string, Shape>}
     */
    this.allShapes = {};

    /**
     * @type {Record<string, Connection>}
     */
    this.allConnections = {};

    /**
     * @type {Record<string, Element>}
     */
    this.enclosedElements = {};

    /**
     * @type {Record<string, Connection>}
     */
    this.enclosedConnections = {};

    /**
     * @type {Record<string, Element>}
     */
    this.topLevel = {};
  }

  /**
   * @param {Element} element
   * @param {boolean} [isTopLevel]
   *
   * @return {MoveClosure}
   */
  MoveClosure.prototype.add = function(element, isTopLevel) {
    return this.addAll([ element ], isTopLevel);
  };

  /**
   * @param {Element[]} elements
   * @param {boolean} [isTopLevel]
   *
   * @return {MoveClosure}
   */
  MoveClosure.prototype.addAll = function(elements, isTopLevel) {

    var newClosure = getClosure(elements, !!isTopLevel, this);

    assign$1(this, newClosure);

    return this;
  };

  /**
   * @typedef {import('../../../../core/Types').ElementLike} Element
   * @typedef {import('../../../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../../../util/Types').Point} Point
   *
   * @typedef {import('../../Modeling').default} Modeling
   */

  /**
   * A helper that is able to carry out serialized move
   * operations on multiple elements.
   *
   * @param {Modeling} modeling
   */
  function MoveHelper(modeling) {
    this._modeling = modeling;
  }

  /**
   * Move the specified elements and all children by the given delta.
   *
   * This moves all enclosed connections, too and layouts all affected
   * external connections.
   *
   * @template {Element} T
   *
   * @param {T[]} elements
   * @param {Point} delta
   * @param {Shape} newParent The new parent of all elements that are not nested.
   *
   * @return {T[]}
   */
  MoveHelper.prototype.moveRecursive = function(elements, delta, newParent) {
    if (!elements) {
      return [];
    } else {
      return this.moveClosure(this.getClosure(elements), delta, newParent);
    }
  };

  /**
   * Move the given closure of elmements.
   *
   * @param {Object} closure
   * @param {Point} delta
   * @param {Shape} [newParent]
   * @param {Shape} [newHost]
   */
  MoveHelper.prototype.moveClosure = function(closure, delta, newParent, newHost, primaryShape) {
    var modeling = this._modeling;

    var allShapes = closure.allShapes,
        allConnections = closure.allConnections,
        enclosedConnections = closure.enclosedConnections,
        topLevel = closure.topLevel,
        keepParent = false;

    if (primaryShape && primaryShape.parent === newParent) {
      keepParent = true;
    }

    // move all shapes
    forEach$1(allShapes, function(shape) {

      // move the element according to the given delta
      modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {
        recurse: false,
        layout: false
      });
    });

    // move all child connections / layout external connections
    forEach$1(allConnections, function(c) {

      var sourceMoved = !!allShapes[c.source.id],
          targetMoved = !!allShapes[c.target.id];

      if (enclosedConnections[c.id] && sourceMoved && targetMoved) {
        modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);
      } else {
        modeling.layoutConnection(c, {
          connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),
          connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)
        });
      }
    });
  };

  /**
   * Returns the closure for the selected elements
   *
   * @param {Element[]} elements
   *
   * @return {MoveClosure}
   */
  MoveHelper.prototype.getClosure = function(elements) {
    return new MoveClosure().addAll(elements, true);
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible moving of shapes.
   *
   * @param {Modeling} modeling
   */
  function MoveElementsHandler(modeling) {
    this._helper = new MoveHelper(modeling);
  }

  MoveElementsHandler.$inject = [ 'modeling' ];

  MoveElementsHandler.prototype.preExecute = function(context) {
    context.closure = this._helper.getClosure(context.shapes);
  };

  MoveElementsHandler.prototype.postExecute = function(context) {

    var hints = context.hints,
        primaryShape;

    if (hints && hints.primaryShape) {
      primaryShape = hints.primaryShape;
      hints.oldParent = primaryShape.parent;
    }

    this._helper.moveClosure(
      context.closure,
      context.delta,
      context.newParent,
      context.newHost,
      primaryShape
    );
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible moving of shapes.
   *
   * @param {Modeling} modeling
   */
  function MoveShapeHandler(modeling) {
    this._modeling = modeling;

    this._helper = new MoveHelper(modeling);
  }

  MoveShapeHandler.$inject = [ 'modeling' ];


  MoveShapeHandler.prototype.execute = function(context) {

    var shape = context.shape,
        delta = context.delta,
        newParent = context.newParent || shape.parent,
        newParentIndex = context.newParentIndex,
        oldParent = shape.parent;

    context.oldBounds = pick(shape, [ 'x', 'y', 'width', 'height' ]);

    // save old parent in context
    context.oldParent = oldParent;
    context.oldParentIndex = remove$1(oldParent.children, shape);

    // add to new parent at position
    add$1(newParent.children, shape, newParentIndex);

    // update shape parent + position
    assign$1(shape, {
      parent: newParent,
      x: shape.x + delta.x,
      y: shape.y + delta.y
    });

    return shape;
  };

  MoveShapeHandler.prototype.postExecute = function(context) {

    var shape = context.shape,
        delta = context.delta,
        hints = context.hints;

    var modeling = this._modeling;

    if (hints.layout !== false) {

      forEach$1(shape.incoming, function(c) {
        modeling.layoutConnection(c, {
          connectionEnd: getMovedTargetAnchor(c, shape, delta)
        });
      });

      forEach$1(shape.outgoing, function(c) {
        modeling.layoutConnection(c, {
          connectionStart: getMovedSourceAnchor(c, shape, delta)
        });
      });
    }

    if (hints.recurse !== false) {
      this.moveChildren(context);
    }
  };

  MoveShapeHandler.prototype.revert = function(context) {

    var shape = context.shape,
        oldParent = context.oldParent,
        oldParentIndex = context.oldParentIndex,
        delta = context.delta;

    // restore previous location in old parent
    add$1(oldParent.children, shape, oldParentIndex);

    // revert to old position and parent
    assign$1(shape, {
      parent: oldParent,
      x: shape.x - delta.x,
      y: shape.y - delta.y
    });

    return shape;
  };

  MoveShapeHandler.prototype.moveChildren = function(context) {

    var delta = context.delta,
        shape = context.shape;

    this._helper.moveRecursive(shape.children, delta, null);
  };

  MoveShapeHandler.prototype.getNewParent = function(context) {
    return context.newParent || context.shape.parent;
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * Reconnect connection handler.
   *
   * @param {Modeling} modeling
   */
  function ReconnectConnectionHandler(modeling) {
    this._modeling = modeling;
  }

  ReconnectConnectionHandler.$inject = [ 'modeling' ];

  ReconnectConnectionHandler.prototype.execute = function(context) {
    var newSource = context.newSource,
        newTarget = context.newTarget,
        connection = context.connection,
        dockingOrPoints = context.dockingOrPoints;

    if (!newSource && !newTarget) {
      throw new Error('newSource or newTarget required');
    }

    if (isArray$3(dockingOrPoints)) {
      context.oldWaypoints = connection.waypoints;
      connection.waypoints = dockingOrPoints;
    }

    if (newSource) {
      context.oldSource = connection.source;
      connection.source = newSource;
    }

    if (newTarget) {
      context.oldTarget = connection.target;
      connection.target = newTarget;
    }

    return connection;
  };

  ReconnectConnectionHandler.prototype.postExecute = function(context) {
    var connection = context.connection,
        newSource = context.newSource,
        newTarget = context.newTarget,
        dockingOrPoints = context.dockingOrPoints,
        hints = context.hints || {};

    var layoutConnectionHints = {};

    if (hints.connectionStart) {
      layoutConnectionHints.connectionStart = hints.connectionStart;
    }

    if (hints.connectionEnd) {
      layoutConnectionHints.connectionEnd = hints.connectionEnd;
    }

    if (hints.layoutConnection === false) {
      return;
    }

    if (newSource && (!newTarget || hints.docking === 'source')) {
      layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart
        || getDocking(isArray$3(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);
    }

    if (newTarget && (!newSource || hints.docking === 'target')) {
      layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd
        || getDocking(isArray$3(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);
    }

    if (hints.newWaypoints) {
      layoutConnectionHints.waypoints = hints.newWaypoints;
    }

    this._modeling.layoutConnection(connection, layoutConnectionHints);
  };

  ReconnectConnectionHandler.prototype.revert = function(context) {
    var oldSource = context.oldSource,
        oldTarget = context.oldTarget,
        oldWaypoints = context.oldWaypoints,
        connection = context.connection;

    if (oldSource) {
      connection.source = oldSource;
    }

    if (oldTarget) {
      connection.target = oldTarget;
    }

    if (oldWaypoints) {
      connection.waypoints = oldWaypoints;
    }

    return connection;
  };



  // helpers //////////

  function getDocking(point) {
    return point.original || point;
  }

  /**
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../../rules/Rules').default} Rules
   */

  /**
   * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will
   * be kept if possible.
   *
   * @class
   * @constructor
   *
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function ReplaceShapeHandler(modeling, rules) {
    this._modeling = modeling;
    this._rules = rules;
  }

  ReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];


  /**
   * Add new shape.
   *
   * @param {Object} context
   * @param {Shape} context.oldShape
   * @param {Object} context.newData
   * @param {string} context.newData.type
   * @param {number} context.newData.x
   * @param {number} context.newData.y
   * @param {Object} [context.hints]
   */
  ReplaceShapeHandler.prototype.preExecute = function(context) {
    var self = this,
        modeling = this._modeling,
        rules = this._rules;

    var oldShape = context.oldShape,
        newData = context.newData,
        hints = context.hints || {},
        newShape;

    function canReconnect(source, target, connection) {
      return rules.allowed('connection.reconnect', {
        connection: connection,
        source: source,
        target: target
      });
    }

    // (1) add new shape at given position
    var position = {
      x: newData.x,
      y: newData.y
    };

    var oldBounds = {
      x: oldShape.x,
      y: oldShape.y,
      width: oldShape.width,
      height: oldShape.height
    };

    newShape = context.newShape =
      context.newShape ||
      self.createShape(newData, position, oldShape.parent, hints);

    // (2) update host
    if (oldShape.host) {
      modeling.updateAttachment(newShape, oldShape.host);
    }

    // (3) adopt all children from old shape
    var children;

    if (hints.moveChildren !== false) {
      children = oldShape.children.slice();

      modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);
    }

    // (4) reconnect connections to new shape if possible
    var incoming = oldShape.incoming.slice(),
        outgoing = oldShape.outgoing.slice();

    forEach$1(incoming, function(connection) {
      var source = connection.source,
          allowed = canReconnect(source, newShape, connection);

      if (allowed) {
        self.reconnectEnd(
          connection, newShape,
          getResizedTargetAnchor(connection, newShape, oldBounds),
          hints
        );
      }
    });

    forEach$1(outgoing, function(connection) {
      var target = connection.target,
          allowed = canReconnect(newShape, target, connection);

      if (allowed) {
        self.reconnectStart(
          connection, newShape,
          getResizedSourceAnchor(connection, newShape, oldBounds),
          hints
        );
      }
    });
  };


  /**
   * Remove old shape.
   */
  ReplaceShapeHandler.prototype.postExecute = function(context) {
    var oldShape = context.oldShape;

    this._modeling.removeShape(oldShape);
  };


  ReplaceShapeHandler.prototype.execute = function(context) {};


  ReplaceShapeHandler.prototype.revert = function(context) {};


  ReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {
    return this._modeling.createShape(shape, position, target, hints);
  };


  ReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {
    this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);
  };


  ReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {
    this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible resizing of shapes.
   *
   * @param {Modeling} modeling
   */
  function ResizeShapeHandler(modeling) {
    this._modeling = modeling;
  }

  ResizeShapeHandler.$inject = [ 'modeling' ];

  /**
   * {
   *   shape: {....}
   *   newBounds: {
   *     width:  20,
   *     height: 40,
   *     x:       5,
   *     y:      10
   *   }
   *
   * }
   */
  ResizeShapeHandler.prototype.execute = function(context) {
    var shape = context.shape,
        newBounds = context.newBounds,
        minBounds = context.minBounds;

    if (newBounds.x === undefined || newBounds.y === undefined ||
        newBounds.width === undefined || newBounds.height === undefined) {
      throw new Error('newBounds must have {x, y, width, height} properties');
    }

    if (minBounds && (newBounds.width < minBounds.width
      || newBounds.height < minBounds.height)) {
      throw new Error('width and height cannot be less than minimum height and width');
    } else if (!minBounds
      && newBounds.width < 10 || newBounds.height < 10) {
      throw new Error('width and height cannot be less than 10px');
    }

    // save old bbox in context
    context.oldBounds = {
      width:  shape.width,
      height: shape.height,
      x:      shape.x,
      y:      shape.y
    };

    // update shape
    assign$1(shape, {
      width:  newBounds.width,
      height: newBounds.height,
      x:      newBounds.x,
      y:      newBounds.y
    });

    return shape;
  };

  ResizeShapeHandler.prototype.postExecute = function(context) {
    var modeling = this._modeling;

    var shape = context.shape,
        oldBounds = context.oldBounds,
        hints = context.hints || {};

    if (hints.layout === false) {
      return;
    }

    forEach$1(shape.incoming, function(c) {
      modeling.layoutConnection(c, {
        connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)
      });
    });

    forEach$1(shape.outgoing, function(c) {
      modeling.layoutConnection(c, {
        connectionStart: getResizedSourceAnchor(c, shape, oldBounds)
      });
    });

  };

  ResizeShapeHandler.prototype.revert = function(context) {

    var shape = context.shape,
        oldBounds = context.oldBounds;

    // restore previous bbox
    assign$1(shape, {
      width:  oldBounds.width,
      height: oldBounds.height,
      x:      oldBounds.x,
      y:      oldBounds.y
    });

    return shape;
  };

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * Add or remove space by moving and resizing shapes and updating connection waypoints.
   *
   * @param {Modeling} modeling
   */
  function SpaceToolHandler(modeling) {
    this._modeling = modeling;
  }

  SpaceToolHandler.$inject = [ 'modeling' ];

  SpaceToolHandler.prototype.preExecute = function(context) {
    var delta = context.delta,
        direction = context.direction,
        movingShapes = context.movingShapes,
        resizingShapes = context.resizingShapes,
        start = context.start,
        oldBounds = {};

    // (1) move shapes
    this.moveShapes(movingShapes, delta);

    // (2a) save old bounds of resized shapes
    forEach$1(resizingShapes, function(shape) {
      oldBounds[shape.id] = getBounds(shape);
    });

    // (2b) resize shapes
    this.resizeShapes(resizingShapes, delta, direction);

    // (3) update connection waypoints
    this.updateConnectionWaypoints(
      getWaypointsUpdatingConnections(movingShapes, resizingShapes),
      delta,
      direction,
      start,
      movingShapes,
      resizingShapes,
      oldBounds
    );
  };

  SpaceToolHandler.prototype.execute = function() {};
  SpaceToolHandler.prototype.revert = function() {};

  SpaceToolHandler.prototype.moveShapes = function(shapes, delta) {
    var self = this;

    forEach$1(shapes, function(element) {
      self._modeling.moveShape(element, delta, null, {
        autoResize: false,
        layout: false,
        recurse: false
      });
    });
  };

  SpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {
    var self = this;

    forEach$1(shapes, function(shape) {
      var newBounds = resizeBounds(shape, direction, delta);

      self._modeling.resizeShape(shape, newBounds, null, {
        attachSupport: false,
        autoResize: false,
        layout: false
      });
    });
  };

  /**
   * Update connections waypoints according to the rules:
   *   1. Both source and target are moved/resized => move waypoints by the delta
   *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end
   */
  SpaceToolHandler.prototype.updateConnectionWaypoints = function(
      connections,
      delta,
      direction,
      start,
      movingShapes,
      resizingShapes,
      oldBounds
  ) {
    var self = this,
        affectedShapes = movingShapes.concat(resizingShapes);

    forEach$1(connections, function(connection) {
      var source = connection.source,
          target = connection.target,
          waypoints = copyWaypoints(connection),
          axis = getAxisFromDirection(direction),
          layoutHints = {};

      if (includes$1(affectedShapes, source) && includes$1(affectedShapes, target)) {

        // move waypoints
        waypoints = map$1(waypoints, function(waypoint) {
          if (shouldMoveWaypoint(waypoint, start, direction)) {

            // move waypoint
            waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];
          }

          if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {

            // move waypoint original
            waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];
          }

          return waypoint;
        });

        self._modeling.updateWaypoints(connection, waypoints, {
          labelBehavior: false
        });
      } else if (includes$1(affectedShapes, source) || includes$1(affectedShapes, target)) {

        // re-layout connection with moved start/end
        if (includes$1(movingShapes, source)) {
          layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);
        } else if (includes$1(movingShapes, target)) {
          layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);
        } else if (includes$1(resizingShapes, source)) {
          layoutHints.connectionStart = getResizedSourceAnchor(
            connection, source, oldBounds[source.id]
          );
        } else if (includes$1(resizingShapes, target)) {
          layoutHints.connectionEnd = getResizedTargetAnchor(
            connection, target, oldBounds[target.id]
          );
        }

        self._modeling.layoutConnection(connection, layoutHints);
      }
    });
  };


  // helpers //////////

  function copyWaypoint(waypoint) {
    return assign$1({}, waypoint);
  }

  function copyWaypoints(connection) {
    return map$1(connection.waypoints, function(waypoint) {

      waypoint = copyWaypoint(waypoint);

      if (waypoint.original) {
        waypoint.original = copyWaypoint(waypoint.original);
      }

      return waypoint;
    });
  }

  function getAxisFromDirection(direction) {
    switch (direction) {
    case 'n':
      return 'y';
    case 'w':
      return 'x';
    case 's':
      return 'y';
    case 'e':
      return 'x';
    }
  }

  function shouldMoveWaypoint(waypoint, start, direction) {
    var relevantAxis = getAxisFromDirection(direction);

    if (/e|s/.test(direction)) {
      return waypoint[ relevantAxis ] > start;
    } else if (/n|w/.test(direction)) {
      return waypoint[ relevantAxis ] < start;
    }
  }

  function includes$1(array, item) {
    return array.indexOf(item) !== -1;
  }

  function getBounds(shape) {
    return {
      x: shape.x,
      y: shape.y,
      height: shape.height,
      width: shape.width
    };
  }

  /**
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that toggles the collapsed state of an element
   * and the visibility of all its children.
   *
   * @param {Modeling} modeling
   */
  function ToggleShapeCollapseHandler(modeling) {
    this._modeling = modeling;
  }

  ToggleShapeCollapseHandler.$inject = [ 'modeling' ];


  ToggleShapeCollapseHandler.prototype.execute = function(context) {

    var shape = context.shape,
        children = shape.children;

    // recursively remember previous visibility of children
    context.oldChildrenVisibility = getElementsVisibilityRecursive(children);

    // toggle state
    shape.collapsed = !shape.collapsed;

    // recursively hide/show children
    var result = setHiddenRecursive(children, shape.collapsed);

    return [ shape ].concat(result);
  };


  ToggleShapeCollapseHandler.prototype.revert = function(context) {

    var shape = context.shape,
        oldChildrenVisibility = context.oldChildrenVisibility;

    var children = shape.children;

    // recursively set old visability of children
    var result = restoreVisibilityRecursive(children, oldChildrenVisibility);

    // retoggle state
    shape.collapsed = !shape.collapsed;

    return [ shape ].concat(result);
  };


  // helpers //////////////////////

  /**
   * Return a map { elementId -> hiddenState}.
   *
   * @param {Shape[]} elements
   *
   * @return {Object}
   */
  function getElementsVisibilityRecursive(elements) {

    var result = {};

    forEach$1(elements, function(element) {
      result[element.id] = element.hidden;

      if (element.children) {
        result = assign$1({}, result, getElementsVisibilityRecursive(element.children));
      }
    });

    return result;
  }


  function setHiddenRecursive(elements, newHidden) {
    var result = [];
    forEach$1(elements, function(element) {
      element.hidden = newHidden;

      result = result.concat(element);

      if (element.children) {
        result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));
      }
    });

    return result;
  }

  function restoreVisibilityRecursive(elements, lastState) {
    var result = [];
    forEach$1(elements, function(element) {
      element.hidden = lastState[element.id];

      result = result.concat(element);

      if (element.children) {
        result = result.concat(restoreVisibilityRecursive(element.children, lastState));
      }
    });

    return result;
  }

  /**
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that implements reversible attaching/detaching of shapes.
   *
   * @param {Modeling} modeling
   */
  function UpdateAttachmentHandler(modeling) {
    this._modeling = modeling;
  }

  UpdateAttachmentHandler.$inject = [ 'modeling' ];


  UpdateAttachmentHandler.prototype.execute = function(context) {
    var shape = context.shape,
        newHost = context.newHost,
        oldHost = shape.host;

    // (0) detach from old host
    context.oldHost = oldHost;
    context.attacherIdx = removeAttacher(oldHost, shape);

    // (1) attach to new host
    addAttacher(newHost, shape);

    // (2) update host
    shape.host = newHost;

    return shape;
  };

  UpdateAttachmentHandler.prototype.revert = function(context) {
    var shape = context.shape,
        newHost = context.newHost,
        oldHost = context.oldHost,
        attacherIdx = context.attacherIdx;

    // (2) update host
    shape.host = oldHost;

    // (1) attach to new host
    removeAttacher(newHost, shape);

    // (0) detach from old host
    addAttacher(oldHost, shape, attacherIdx);

    return shape;
  };


  function removeAttacher(host, attacher) {

    // remove attacher from host
    return remove$1(host && host.attachers, attacher);
  }

  function addAttacher(host, attacher, idx) {

    if (!host) {
      return;
    }

    var attachers = host.attachers;

    if (!attachers) {
      host.attachers = attachers = [];
    }

    add$1(attachers, attacher, idx);
  }

  function UpdateWaypointsHandler() { }

  UpdateWaypointsHandler.prototype.execute = function(context) {

    var connection = context.connection,
        newWaypoints = context.newWaypoints;

    context.oldWaypoints = connection.waypoints;

    connection.waypoints = newWaypoints;

    return connection;
  };

  UpdateWaypointsHandler.prototype.revert = function(context) {

    var connection = context.connection,
        oldWaypoints = context.oldWaypoints;

    connection.waypoints = oldWaypoints;

    return connection;
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Parent} Parent
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').Label} Label
   *
   * @typedef {import('../../command/CommandStack').default} CommandStack
   * @typedef {import('../../core/ElementFactory').default} ElementFactory
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('../../command/CommandStack').CommandHandlerConstructor} CommandHandlerConstructor
   *
   * @typedef {import('../../util/Types').Dimensions} Dimensions
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Point} Point
   * @typedef {import('../../util/Types').Rect} Rect
   *
   * @typedef { 'x' | 'y' } ModelingDistributeAxis
   *
   * @typedef { 'width' | 'height' } ModelingDistributeDimension
   *
   * @typedef { {
   *   bottom?: number;
   *   center?: number;
   *   left?: number;
   *   middle?: number;
   *   right?: number;
   *   top?: number;
   * } } ModelingAlignAlignment
   *
   * @typedef { {
   *   [key: string]: any;
   * } } ModelingHints
   *
   * @typedef { {
   *   attach?: boolean;
   * } & ModelingHints } ModelingMoveElementsHints
   *
   * @typedef { {
   *   attach?: boolean;
   * } & ModelingHints } ModelingCreateShapeHints
   */

  /**
   * @template {Element} U
   *
   * @typedef { {
   *   elements: U[],
   *   range: {
   *     min: number;
   *     max: number;
   *   } }
   * } ModelingDistributeGroup
   */

  /**
   * The basic modeling entry point.
   *
   * @template {Connection} [T=Connection]
   * @template {Element} [U=Element]
   * @template {Label} [V=Label]
   * @template {Parent} [W=Parent]
   * @template {Shape} [X=Shape]
   *
   * @param {EventBus} eventBus
   * @param {ElementFactory} elementFactory
   * @param {CommandStack} commandStack
   */
  function Modeling$1(eventBus, elementFactory, commandStack) {
    this._eventBus = eventBus;
    this._elementFactory = elementFactory;
    this._commandStack = commandStack;

    var self = this;

    eventBus.on('diagram.init', function() {

      // register modeling handlers
      self.registerHandlers(commandStack);
    });
  }

  Modeling$1.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];

  /**
   * Get a map of all command handlers.
   *
   * @return {Map<string, CommandHandlerConstructor>}
   */
  Modeling$1.prototype.getHandlers = function() {
    return {
      'shape.append': AppendShapeHandler,
      'shape.create': CreateShapeHandler,
      'shape.delete': DeleteShapeHandler,
      'shape.move': MoveShapeHandler,
      'shape.resize': ResizeShapeHandler,
      'shape.replace': ReplaceShapeHandler,
      'shape.toggleCollapse': ToggleShapeCollapseHandler,

      'spaceTool': SpaceToolHandler,

      'label.create': CreateLabelHandler,

      'connection.create': CreateConnectionHandler,
      'connection.delete': DeleteConnectionHandler,
      'connection.move': MoveConnectionHandler,
      'connection.layout': LayoutConnectionHandler,

      'connection.updateWaypoints': UpdateWaypointsHandler,

      'connection.reconnect': ReconnectConnectionHandler,

      'elements.create': CreateElementsHandler,
      'elements.move': MoveElementsHandler,
      'elements.delete': DeleteElementsHandler,

      'elements.distribute': DistributeElements$1,
      'elements.align': AlignElements,

      'element.updateAttachment': UpdateAttachmentHandler
    };
  };

  /**
   * Register handlers with the command stack
   *
   * @param {CommandStack} commandStack
   */
  Modeling$1.prototype.registerHandlers = function(commandStack) {
    forEach$1(this.getHandlers(), function(handler, id) {
      commandStack.registerHandler(id, handler);
    });
  };


  /**
   * Move a shape by the given delta and optionally to a new parent.
   *
   * @param {X} shape
   * @param {Point} delta
   * @param {W} [newParent]
   * @param {number} [newParentIndex]
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {

    if (typeof newParentIndex === 'object') {
      hints = newParentIndex;
      newParentIndex = null;
    }

    var context = {
      shape: shape,
      delta:  delta,
      newParent: newParent,
      newParentIndex: newParentIndex,
      hints: hints || {}
    };

    this._commandStack.execute('shape.move', context);
  };


  /**
   * Update the attachment of a shape.
   *
   * @param {X} shape
   * @param {X} [newHost=undefined]
   */
  Modeling$1.prototype.updateAttachment = function(shape, newHost) {
    var context = {
      shape: shape,
      newHost: newHost
    };

    this._commandStack.execute('element.updateAttachment', context);
  };


  /**
   * Move elements by a given delta and optionally to a new parent.
   *
   * @param {U[]} shapes
   * @param {Point} delta
   * @param {W} [target]
   * @param {ModelingMoveElementsHints} [hints]
   */
  Modeling$1.prototype.moveElements = function(shapes, delta, target, hints) {

    hints = hints || {};

    var attach = hints.attach;

    var newParent = target,
        newHost;

    if (attach === true) {
      newHost = target;
      newParent = target.parent;
    } else if (attach === false) {
      newHost = null;
    }

    var context = {
      shapes: shapes,
      delta: delta,
      newParent: newParent,
      newHost: newHost,
      hints: hints
    };

    this._commandStack.execute('elements.move', context);
  };

  /**
   * Move a shape by the given delta and optionally to a new parent.
   *
   * @param {T} connection
   * @param {Point} delta
   * @param {W} [newParent]
   * @param {number} [newParentIndex]
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {

    if (typeof newParentIndex === 'object') {
      hints = newParentIndex;
      newParentIndex = undefined;
    }

    var context = {
      connection: connection,
      delta: delta,
      newParent: newParent,
      newParentIndex: newParentIndex,
      hints: hints || {}
    };

    this._commandStack.execute('connection.move', context);
  };

  /**
   * Layout a connection.
   *
   * @param {T} connection
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.layoutConnection = function(connection, hints) {
    var context = {
      connection: connection,
      hints: hints || {}
    };

    this._commandStack.execute('connection.layout', context);
  };

  /**
   * Create a connection.
   *
   * @overlord
   *
   * @param {U} source
   * @param {U} target
   * @param {Partial<T>} connection
   * @param {W} parent
   * @param {ModelingHints} [hints]
   *
   * @return {T}
   */

  /**
   * Create a connection.
   *
   * @param {U} source
   * @param {U} target
   * @param {number} parentIndex
   * @param {Partial<T>} connection
   * @param {W} parent
   * @param {ModelingHints} [hints]
   *
   * @return {T}
   */
  Modeling$1.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {

    if (typeof parentIndex === 'object') {
      hints = parent;
      parent = connection;
      connection = parentIndex;
      parentIndex = undefined;
    }

    connection = this._create('connection', connection);

    var context = {
      source: source,
      target: target,
      parent: parent,
      parentIndex: parentIndex,
      connection: connection,
      hints: hints
    };

    this._commandStack.execute('connection.create', context);

    return context.connection;
  };


  /**
   * Create a shape.
   *
   * @overlord
   *
   * @param {Partial<X>} shape
   * @param {Point} position
   * @param {W} target
   * @param {ModelingCreateShapeHints} [hints]
   *
   * @return {X}
   */

  /**
   * Create a shape.
   *
   * @param {Partial<X>} shape
   * @param {Point} position
   * @param {W} target
   * @param {number} parentIndex
   * @param {ModelingCreateShapeHints} [hints]
   *
   * @return {X}
   */
  Modeling$1.prototype.createShape = function(shape, position, target, parentIndex, hints) {

    if (typeof parentIndex !== 'number') {
      hints = parentIndex;
      parentIndex = undefined;
    }

    hints = hints || {};

    var attach = hints.attach,
        parent,
        host;

    shape = this._create('shape', shape);

    if (attach) {
      parent = target.parent;
      host = target;
    } else {
      parent = target;
    }

    var context = {
      position: position,
      shape: shape,
      parent: parent,
      parentIndex: parentIndex,
      host: host,
      hints: hints
    };

    this._commandStack.execute('shape.create', context);

    return context.shape;
  };

  /**
   * Create elements.
   *
   * @param {Partial<U>[]} elements
   * @param {Point} position
   * @param {W} parent
   * @param {number} [parentIndex]
   * @param {ModelingHints} [hints]
   *
   * @return {U[]}
   */
  Modeling$1.prototype.createElements = function(elements, position, parent, parentIndex, hints) {
    if (!isArray$3(elements)) {
      elements = [ elements ];
    }

    if (typeof parentIndex !== 'number') {
      hints = parentIndex;
      parentIndex = undefined;
    }

    hints = hints || {};

    var context = {
      position: position,
      elements: elements,
      parent: parent,
      parentIndex: parentIndex,
      hints: hints
    };

    this._commandStack.execute('elements.create', context);

    return context.elements;
  };

  /**
   * Create a label.
   *
   * @param {U} labelTarget
   * @param {Point} position
   * @param {Partial<V>} label
   * @param {W} [parent]
   *
   * @return {V}
   */
  Modeling$1.prototype.createLabel = function(labelTarget, position, label, parent) {

    label = this._create('label', label);

    var context = {
      labelTarget: labelTarget,
      position: position,
      parent: parent || labelTarget.parent,
      shape: label
    };

    this._commandStack.execute('label.create', context);

    return context.shape;
  };


  /**
   * Create and connect a shape to a source.
   *
   * @param {U} source
   * @param {Partial<X>} shape
   * @param {Point} position
   * @param {W} target
   * @param {ModelingHints} [hints]
   *
   * @return {X}
   */
  Modeling$1.prototype.appendShape = function(source, shape, position, target, hints) {

    hints = hints || {};

    shape = this._create('shape', shape);

    var context = {
      source: source,
      position: position,
      target: target,
      shape: shape,
      connection: hints.connection,
      connectionParent: hints.connectionParent,
      hints: hints
    };

    this._commandStack.execute('shape.append', context);

    return context.shape;
  };

  /**
   * Remove elements.
   *
   * @param {U[]} elements
   */
  Modeling$1.prototype.removeElements = function(elements) {
    var context = {
      elements: elements
    };

    this._commandStack.execute('elements.delete', context);
  };

  /**
   * Distribute elements along a given axis.
   *
   * @param {ModelingDistributeGroup<U>[]} groups
   * @param {ModelingDistributeAxis} axis
   * @param {ModelingDistributeDimension} dimension
   */
  Modeling$1.prototype.distributeElements = function(groups, axis, dimension) {
    var context = {
      groups: groups,
      axis: axis,
      dimension: dimension
    };

    this._commandStack.execute('elements.distribute', context);
  };

  /**
   * Remove a shape.
   *
   * @param {X} shape
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.removeShape = function(shape, hints) {
    var context = {
      shape: shape,
      hints: hints || {}
    };

    this._commandStack.execute('shape.delete', context);
  };

  /**
   * Remove a connection.
   *
   * @param {T} connection
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.removeConnection = function(connection, hints) {
    var context = {
      connection: connection,
      hints: hints || {}
    };

    this._commandStack.execute('connection.delete', context);
  };

  /**
   * Replace a shape.
   *
   * @param {X} oldShape
   * @param {Partial<X>} newShape
   * @param {ModelingHints} [hints]
   *
   * @return {X}
   */
  Modeling$1.prototype.replaceShape = function(oldShape, newShape, hints) {
    var context = {
      oldShape: oldShape,
      newData: newShape,
      hints: hints || {}
    };

    this._commandStack.execute('shape.replace', context);

    return context.newShape;
  };

  /**
   * Align elements.
   *
   * @param {U[]} elements
   * @param {ModelingAlignAlignment} alignment
   */
  Modeling$1.prototype.alignElements = function(elements, alignment) {
    var context = {
      elements: elements,
      alignment: alignment
    };

    this._commandStack.execute('elements.align', context);
  };

  /**
   * Resize a shape.
   *
   * @param {X} shape
   * @param {Rect} newBounds
   * @param {Dimensions} [minBounds]
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {
    var context = {
      shape: shape,
      newBounds: newBounds,
      minBounds: minBounds,
      hints: hints
    };

    this._commandStack.execute('shape.resize', context);
  };

  /**
   * Create space along an horizontally or vertically.
   *
   * @param {X[]} movingShapes
   * @param {X[]} resizingShapes
   * @param {Point} delta
   * @param {Direction} direction
   * @param {number} start
   */
  Modeling$1.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {
    var context = {
      delta: delta,
      direction: direction,
      movingShapes: movingShapes,
      resizingShapes: resizingShapes,
      start: start
    };

    this._commandStack.execute('spaceTool', context);
  };

  /**
   * Update a connetions waypoints.
   *
   * @param {T} connection
   * @param {Point[]} newWaypoints
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.updateWaypoints = function(connection, newWaypoints, hints) {
    var context = {
      connection: connection,
      newWaypoints: newWaypoints,
      hints: hints || {}
    };

    this._commandStack.execute('connection.updateWaypoints', context);
  };

  /**
   * Reconnect a connections source and/or target.
   *
   * @param {T} connection
   * @param {U} source
   * @param {U} target
   * @param {Point|Point[]} dockingOrPoints
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {
    var context = {
      connection: connection,
      newSource: source,
      newTarget: target,
      dockingOrPoints: dockingOrPoints,
      hints: hints || {}
    };

    this._commandStack.execute('connection.reconnect', context);
  };

  /**
   * Reconnect a connections source.
   *
   * @param {T} connection
   * @param {U} newSource
   * @param {Point|Point[]} dockingOrPoints
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {
    if (!hints) {
      hints = {};
    }

    this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign$1(hints, {
      docking: 'source'
    }));
  };

  /**
   * Reconnect a connections target.
   *
   * @param {T} connection
   * @param {U} newTarget
   * @param {Point|Point[]} dockingOrPoints
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {
    if (!hints) {
      hints = {};
    }

    this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign$1(hints, {
      docking: 'target'
    }));
  };

  /**
   * Connect two elements.
   *
   * @param {U} source
   * @param {U} target
   * @param {Partial<T>} [attrs]
   * @param {ModelingHints} [hints]
   *
   * @return {T}
   */
  Modeling$1.prototype.connect = function(source, target, attrs, hints) {
    return this.createConnection(source, target, attrs || {}, source.parent, hints);
  };

  Modeling$1.prototype._create = function(type, attrs) {
    if (isModelElement(attrs)) {
      return attrs;
    } else {
      return this._elementFactory.create(type, attrs);
    }
  };

  /**
   * Collapse or expand a shape.
   *
   * @param {X} shape
   * @param {ModelingHints} [hints]
   */
  Modeling$1.prototype.toggleCollapse = function(shape, hints) {
    var context = {
      shape: shape,
      hints: hints || {}
    };

    this._commandStack.execute('shape.toggleCollapse', context);
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   *
   * @typedef {import('../../../model/Types').Shape} Shape
   * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
   */

  /**
   * @implements {CommandHandler}
   *
   * @param {ElementRegistry} elementRegistry
   */
  function UpdateModdlePropertiesHandler(elementRegistry) {
    this._elementRegistry = elementRegistry;
  }

  UpdateModdlePropertiesHandler.$inject = [ 'elementRegistry' ];

  UpdateModdlePropertiesHandler.prototype.execute = function(context) {

    var element = context.element,
        moddleElement = context.moddleElement,
        properties = context.properties;

    if (!moddleElement) {
      throw new Error('<moddleElement> required');
    }

    // TODO(nikku): we need to ensure that ID properties
    // are properly registered / unregistered via
    // this._moddle.ids.assigned(id)
    var changed = context.changed || this._getVisualReferences(moddleElement).concat(element);
    var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));

    setModdleProperties(moddleElement, properties);

    context.oldProperties = oldProperties;
    context.changed = changed;

    return changed;
  };

  UpdateModdlePropertiesHandler.prototype.revert = function(context) {
    var oldProperties = context.oldProperties,
        moddleElement = context.moddleElement,
        changed = context.changed;

    setModdleProperties(moddleElement, oldProperties);

    return changed;
  };

  /**
   * Return visual references of given moddle element within the diagram.
   *
   * @param {ModdleElement} moddleElement
   *
   * @return {Shape[]}
   */
  UpdateModdlePropertiesHandler.prototype._getVisualReferences = function(moddleElement) {

    var elementRegistry = this._elementRegistry;

    if (is$1(moddleElement, 'bpmn:DataObject')) {
      return getAllDataObjectReferences(moddleElement, elementRegistry);
    }

    return [];
  };


  // helpers /////////////////

  function getModdleProperties(moddleElement, propertyNames) {
    return reduce(propertyNames, function(result, key) {
      result[key] = moddleElement.get(key);
      return result;
    }, {});
  }

  function setModdleProperties(moddleElement, properties) {
    forEach$1(properties, function(value, key) {
      moddleElement.set(key, value);
    });
  }

  function getAllDataObjectReferences(dataObject, elementRegistry) {
    return elementRegistry.filter(function(element) {
      return (
        is$1(element, 'bpmn:DataObjectReference') &&
            getBusinessObject(element).dataObjectRef === dataObject
      );
    });
  }

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   * @typedef {import('diagram-js/lib/command/CommandStack').CommandContext} CommandContext
   *
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../../model/Types').Moddle} Moddle
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
   *
   * @typedef {import('../../../model/Types').Element} Element
   */

  var DEFAULT_FLOW = 'default',
      ID = 'id',
      DI = 'di';

  var NULL_DIMENSIONS$1 = {
    width: 0,
    height: 0
  };

  /**
   * A handler that implements a BPMN 2.0 property update.
   *
   * This should be used to set simple properties on elements with
   * an underlying BPMN business object.
   *
   * Use respective diagram-js provided handlers if you would
   * like to perform automated modeling.
   *
   * @implements {CommandHandler}
   *
   * @param {ElementRegistry} elementRegistry
   * @param {Moddle} moddle
   * @param {Modeling} modeling
   * @param {TextRenderer} textRenderer
   */
  function UpdatePropertiesHandler(
      elementRegistry, moddle,
      modeling, textRenderer) {

    this._elementRegistry = elementRegistry;
    this._moddle = moddle;
    this._modeling = modeling;
    this._textRenderer = textRenderer;
  }

  UpdatePropertiesHandler.$inject = [
    'elementRegistry',
    'moddle',
    'modeling',
    'textRenderer'
  ];


  // api //////////////////////

  /**
   * Update a BPMN element's properties.
   *
   * @param { {
   *   element: Element;
   *   properties: Record<string, any>;
   * } & CommandContext } context
   *
   * @return {Element[]}
   */
  UpdatePropertiesHandler.prototype.execute = function(context) {

    var element = context.element,
        changed = [ element ];

    if (!element) {
      throw new Error('element required');
    }

    var elementRegistry = this._elementRegistry,
        ids = this._moddle.ids;

    var businessObject = element.businessObject,
        properties = unwrapBusinessObjects(context.properties),
        oldProperties = context.oldProperties || getProperties(element, properties);

    if (isIdChange(properties, businessObject)) {
      ids.unclaim(businessObject[ID]);

      elementRegistry.updateId(element, properties[ID]);

      ids.claim(properties[ID], businessObject);
    }

    // correctly indicate visual changes on default flow updates
    if (DEFAULT_FLOW in properties) {

      if (properties[DEFAULT_FLOW]) {
        changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));
      }

      if (businessObject[DEFAULT_FLOW]) {
        changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));
      }
    }

    // update properties
    setProperties(element, properties);

    // store old values
    context.oldProperties = oldProperties;
    context.changed = changed;

    // indicate changed on objects affected by the update
    return changed;
  };


  UpdatePropertiesHandler.prototype.postExecute = function(context) {
    var element = context.element,
        label = element.label;

    var text = label && getBusinessObject(label).name;

    if (!text) {
      return;
    }

    // get layouted text bounds and resize external
    // external label accordingly
    var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);

    this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS$1);
  };

  /**
   * Revert updating a BPMN element's properties.
   *
   * @param { {
   *   element: Element;
   *   properties: Record<string, any>;
   *   oldProperties: Record<string, any>;
   * } & CommandContext } context
   *
   * @return {Element[]}
   */
  UpdatePropertiesHandler.prototype.revert = function(context) {

    var element = context.element,
        properties = context.properties,
        oldProperties = context.oldProperties,
        businessObject = element.businessObject,
        elementRegistry = this._elementRegistry,
        ids = this._moddle.ids;

    // update properties
    setProperties(element, oldProperties);

    if (isIdChange(properties, businessObject)) {
      ids.unclaim(properties[ID]);

      elementRegistry.updateId(element, oldProperties[ID]);

      ids.claim(oldProperties[ID], businessObject);
    }

    return context.changed;
  };


  function isIdChange(properties, businessObject) {
    return ID in properties && properties[ID] !== businessObject[ID];
  }


  function getProperties(element, properties) {
    var propertyNames = keys(properties),
        businessObject = element.businessObject,
        di = getDi(element);

    return reduce(propertyNames, function(result, key) {

      // handle DI separately
      if (key !== DI) {
        result[key] = businessObject.get(key);

      } else {
        result[key] = getDiProperties(di, keys(properties.di));
      }

      return result;
    }, {});
  }


  function getDiProperties(di, propertyNames) {
    return reduce(propertyNames, function(result, key) {
      result[key] = di && di.get(key);

      return result;
    }, {});
  }


  function setProperties(element, properties) {
    var businessObject = element.businessObject,
        di = getDi(element);

    forEach$1(properties, function(value, key) {

      if (key !== DI) {
        businessObject.set(key, value);
      } else {

        // only update, if di exists
        if (di) {
          setDiProperties(di, value);
        }
      }
    });
  }


  function setDiProperties(di, properties) {
    forEach$1(properties, function(value, key) {
      di.set(key, value);
    });
  }


  var referencePropertyNames = [ 'default' ];

  /**
   * Make sure we unwrap the actual business object behind diagram element that
   * may have been passed as arguments.
   *
   * @param  {Record<string, any>} properties
   *
   * @return {Record<string, any>} unwrappedProps
   */
  function unwrapBusinessObjects(properties) {

    var unwrappedProps = assign$1({}, properties);

    referencePropertyNames.forEach(function(name) {
      if (name in properties) {
        unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);
      }
    });

    return unwrappedProps;
  }

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * @implements {CommandHandler}
   *
   * @param {Canvas} canvas
   * @param {Modeling} modeling
   */
  function UpdateCanvasRootHandler(canvas, modeling) {
    this._canvas = canvas;
    this._modeling = modeling;
  }

  UpdateCanvasRootHandler.$inject = [
    'canvas',
    'modeling'
  ];


  UpdateCanvasRootHandler.prototype.execute = function(context) {

    var canvas = this._canvas;

    var newRoot = context.newRoot,
        newRootBusinessObject = newRoot.businessObject,
        oldRoot = canvas.getRootElement(),
        oldRootBusinessObject = oldRoot.businessObject,
        bpmnDefinitions = oldRootBusinessObject.$parent,
        diPlane = getDi(oldRoot);

    // (1) replace process old <> new root
    canvas.setRootElement(newRoot);
    canvas.removeRootElement(oldRoot);

    // (2) update root elements
    add$1(bpmnDefinitions.rootElements, newRootBusinessObject);
    newRootBusinessObject.$parent = bpmnDefinitions;

    remove$1(bpmnDefinitions.rootElements, oldRootBusinessObject);
    oldRootBusinessObject.$parent = null;

    // (3) wire di
    oldRoot.di = null;

    diPlane.bpmnElement = newRootBusinessObject;
    newRoot.di = diPlane;

    context.oldRoot = oldRoot;

    // TODO(nikku): return changed elements?
    // return [ newRoot, oldRoot ];
    return [];
  };


  UpdateCanvasRootHandler.prototype.revert = function(context) {

    var canvas = this._canvas;

    var newRoot = context.newRoot,
        newRootBusinessObject = newRoot.businessObject,
        oldRoot = context.oldRoot,
        oldRootBusinessObject = oldRoot.businessObject,
        bpmnDefinitions = newRootBusinessObject.$parent,
        diPlane = getDi(newRoot);

    // (1) replace process old <> new root
    canvas.setRootElement(oldRoot);
    canvas.removeRootElement(newRoot);

    // (2) update root elements
    remove$1(bpmnDefinitions.rootElements, newRootBusinessObject);
    newRootBusinessObject.$parent = null;

    add$1(bpmnDefinitions.rootElements, oldRootBusinessObject);
    oldRootBusinessObject.$parent = bpmnDefinitions;

    // (3) wire di
    newRoot.di = null;

    diPlane.bpmnElement = oldRootBusinessObject;
    oldRoot.di = diPlane;

    // TODO(nikku): return changed elements?
    // return [ newRoot, oldRoot ];

    return [];
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
   */

  /**
   * A handler that allows us to add a new lane
   * above or below an existing one.
   *
   * @implements {CommandHandler}
   *
   * @param {Modeling} modeling
   * @param {SpaceTool} spaceTool
   */
  function AddLaneHandler(modeling, spaceTool) {
    this._modeling = modeling;
    this._spaceTool = spaceTool;
  }

  AddLaneHandler.$inject = [
    'modeling',
    'spaceTool'
  ];


  AddLaneHandler.prototype.preExecute = function(context) {

    var spaceTool = this._spaceTool,
        modeling = this._modeling;

    var shape = context.shape,
        location = context.location;

    var lanesRoot = getLanesRoot(shape);

    var isRoot = lanesRoot === shape,
        laneParent = isRoot ? shape : shape.parent;

    var existingChildLanes = getChildLanes(laneParent);

    var isHorizontalLane = isHorizontal$3(shape);

    // never mix up horizontal/vertical lanes
    if (isHorizontalLane) {
      if (location === 'left') {
        location = 'top';
      } else if (location === 'right') {
        location = 'bottom';
      }
    } else {
      if (location === 'top') {
        location = 'left';
      } else if (location === 'bottom') {
        location = 'right';
      }
    }

    // (0) add a lane if we currently got none and are adding to root
    if (!existingChildLanes.length) {
      var siblingPosition = isHorizontalLane ? {
        x: shape.x + LANE_INDENTATION,
        y: shape.y,
        width: shape.width - LANE_INDENTATION,
        height: shape.height
      } : {
        x: shape.x,
        y: shape.y + LANE_INDENTATION,
        width: shape.width,
        height: shape.height - LANE_INDENTATION
      };

      modeling.createShape(
        {
          type: 'bpmn:Lane',
          isHorizontal: isHorizontalLane
        },
        siblingPosition,
        laneParent
      );
    }

    // (1) collect affected elements to create necessary space
    var allAffected = [];

    eachElement(lanesRoot, function(element) {
      allAffected.push(element);

      // handle element labels in the diagram root
      if (element.label) {
        allAffected.push(element.label);
      }

      if (element === shape) {
        return [];
      }

      return filter(element.children, function(c) {
        return c !== shape;
      });
    });

    var offset,
        lanePosition,
        spacePos,
        direction,
        axis;

    if (location === 'top') {
      offset = -120;
      lanePosition = shape.y;
      spacePos = lanePosition + 10;
      direction = 'n';
      axis = 'y';
    } else if (location === 'left') {
      offset = -120;
      lanePosition = shape.x;
      spacePos = lanePosition + 10;
      direction = 'w';
      axis = 'x';
    } else if (location === 'bottom') {
      offset = 120;
      lanePosition = shape.y + shape.height;
      spacePos = lanePosition - 10;
      direction = 's';
      axis = 'y';
    } else if (location === 'right') {
      offset = 120;
      lanePosition = shape.x + shape.width;
      spacePos = lanePosition - 10;
      direction = 'e';
      axis = 'x';
    }

    var adjustments = spaceTool.calculateAdjustments(allAffected, axis, offset, spacePos);

    var delta = isHorizontalLane ? { x: 0, y: offset } : { x: offset, y: 0 };

    spaceTool.makeSpace(
      adjustments.movingShapes,
      adjustments.resizingShapes,
      delta,
      direction,
      spacePos
    );

    // (2) create new lane at open space
    var newLanePosition = isHorizontalLane ? {
      x: shape.x + (isRoot ? LANE_INDENTATION : 0),
      y: lanePosition - (location === 'top' ? 120 : 0),
      width: shape.width - (isRoot ? LANE_INDENTATION : 0),
      height: 120
    } : {
      x: lanePosition - (location === 'left' ? 120 : 0),
      y: shape.y + (isRoot ? LANE_INDENTATION : 0),
      width: 120,
      height: shape.height - (isRoot ? LANE_INDENTATION : 0)
    };

    context.newLane = modeling.createShape(
      {
        type: 'bpmn:Lane',
        isHorizontal: isHorizontalLane
      },
      newLanePosition,
      laneParent
    );
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('../Modeling').default} Modeling
   */

  /**
   * A handler that splits a lane into a number of sub-lanes,
   * creating new sub lanes, if necessary.
   *
   * @implements {CommandHandler}
   *
   * @param {Modeling} modeling
   */
  function SplitLaneHandler(modeling) {
    this._modeling = modeling;
  }

  SplitLaneHandler.$inject = [
    'modeling'
  ];


  SplitLaneHandler.prototype.preExecute = function(context) {

    var modeling = this._modeling;

    var shape = context.shape,
        newLanesCount = context.count;

    var childLanes = getChildLanes(shape),
        existingLanesCount = childLanes.length;

    if (existingLanesCount > newLanesCount) {
      throw new Error(`more than <${ newLanesCount }> child lanes`);
    }

    var isHorizontalLane = isHorizontal$3(shape);

    var laneBaseSize = isHorizontalLane ? shape.height : shape.width;
    var newLanesSize = Math.round(laneBaseSize / newLanesCount);

    // Iterate from first to last in child lane order,
    // resizing existing lanes and creating new ones
    // so that they split the parent proportionally.
    //
    // Due to rounding related errors, the last lane
    // needs to take up all the remaining space.
    var laneSize,
        laneBounds,
        newLaneAttrs,
        idx;

    for (idx = 0; idx < newLanesCount; idx++) {

      // if last lane
      if (idx === newLanesCount - 1) {
        laneSize = laneBaseSize - (newLanesSize * idx);
      } else {
        laneSize = newLanesSize;
      }

      laneBounds = isHorizontalLane ? {
        x: shape.x + LANE_INDENTATION,
        y: shape.y + idx * newLanesSize,
        width: shape.width - LANE_INDENTATION,
        height: laneSize
      } : {
        x: shape.x + idx * newLanesSize,
        y: shape.y + LANE_INDENTATION,
        width: laneSize,
        height: shape.height - LANE_INDENTATION
      };

      if (idx < existingLanesCount) {

        // resize existing lane
        modeling.resizeShape(childLanes[idx], laneBounds);
      } else {

        // create a new lane at position
        newLaneAttrs = {
          type: 'bpmn:Lane',
          isHorizontal: isHorizontalLane
        };

        modeling.createShape(newLaneAttrs, laneBounds, shape);
      }
    }
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('../Modeling').default} Modeling
   * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
   *
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   */

  /**
   * A handler that resizes a lane.
   *
   * @implements {CommandHandler}
   *
   * @param {Modeling} modeling
   * @param {SpaceTool} spaceTool
   */
  function ResizeLaneHandler(modeling, spaceTool) {
    this._modeling = modeling;
    this._spaceTool = spaceTool;
  }

  ResizeLaneHandler.$inject = [
    'modeling',
    'spaceTool'
  ];


  ResizeLaneHandler.prototype.preExecute = function(context) {

    var shape = context.shape,
        newBounds = context.newBounds,
        balanced = context.balanced;

    if (balanced !== false) {
      this.resizeBalanced(shape, newBounds);
    } else {
      this.resizeSpace(shape, newBounds);
    }
  };


  /**
   * Resize balanced, adjusting next / previous lane sizes.
   *
   * @param {Shape} shape
   * @param {Rect} newBounds
   */
  ResizeLaneHandler.prototype.resizeBalanced = function(shape, newBounds) {

    var modeling = this._modeling;

    var resizeNeeded = computeLanesResize(shape, newBounds);

    // resize the lane
    modeling.resizeShape(shape, newBounds);

    // resize other lanes as needed
    resizeNeeded.forEach(function(r) {
      modeling.resizeShape(r.shape, r.newBounds);
    });
  };


  /**
   * Resize, making actual space and moving below / above elements.
   *
   * @param {Shape} shape
   * @param {Rect} newBounds
   */
  ResizeLaneHandler.prototype.resizeSpace = function(shape, newBounds) {
    var spaceTool = this._spaceTool;

    var shapeTrbl = asTRBL(shape),
        newTrbl = asTRBL(newBounds);

    var trblDiff = substractTRBL(newTrbl, shapeTrbl);

    var lanesRoot = getLanesRoot(shape);

    var allAffected = [],
        allLanes = [];

    eachElement(lanesRoot, function(element) {
      allAffected.push(element);

      if (is$1(element, 'bpmn:Lane') || is$1(element, 'bpmn:Participant')) {
        allLanes.push(element);
      }

      return element.children;
    });

    var change,
        spacePos,
        direction,
        offset,
        adjustments;

    if (trblDiff.bottom || trblDiff.top) {

      change = trblDiff.bottom || trblDiff.top;
      spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);
      direction = trblDiff.bottom ? 's' : 'n';

      offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;

      adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);

      spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: 0, y: change }, direction);
    }


    if (trblDiff.left || trblDiff.right) {

      change = trblDiff.right || trblDiff.left;
      spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);
      direction = trblDiff.right ? 'e' : 'w';

      offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;

      adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);

      spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: change, y: 0 }, direction);
    }
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   *
   * @typedef {import('../../../model/Types').Shape} Shape
   */

  var FLOW_NODE_REFS_ATTR = 'flowNodeRef',
      LANES_ATTR = 'lanes';


  /**
   * A handler that updates lane refs on changed elements.
   *
   * @implements {CommandHandler}
   *
   * @param {ElementRegistry} elementRegistry
   */
  function UpdateFlowNodeRefsHandler(elementRegistry) {
    this._elementRegistry = elementRegistry;
  }

  UpdateFlowNodeRefsHandler.$inject = [
    'elementRegistry'
  ];

  /**
   * @param {Shape} flowNodeShapes
   * @param {Shape} laneShapes
   *
   * @return { {
   *   flowNode: Shape;
   *   add: Shape[];
   *   remove: Shape[];
   * }[] }
   */
  UpdateFlowNodeRefsHandler.prototype._computeUpdates = function(flowNodeShapes, laneShapes) {

    var handledNodes = [];

    var updates = [];

    var participantCache = {};

    var allFlowNodeShapes = [];

    function isInLaneShape(element, laneShape) {

      var laneTrbl = asTRBL(laneShape);

      var elementMid = {
        x: element.x + element.width / 2,
        y: element.y + element.height / 2
      };

      return elementMid.x > laneTrbl.left &&
             elementMid.x < laneTrbl.right &&
             elementMid.y > laneTrbl.top &&
             elementMid.y < laneTrbl.bottom;
    }

    function addFlowNodeShape(flowNodeShape) {
      if (handledNodes.indexOf(flowNodeShape) === -1) {
        allFlowNodeShapes.push(flowNodeShape);
        handledNodes.push(flowNodeShape);
      }
    }

    function getAllLaneShapes(flowNodeShape) {

      var root = getLanesRoot(flowNodeShape);

      if (!participantCache[root.id]) {
        participantCache[root.id] = collectLanes(root);
      }

      return participantCache[root.id];
    }

    function getNewLanes(flowNodeShape) {
      if (!flowNodeShape.parent) {
        return [];
      }

      var allLaneShapes = getAllLaneShapes(flowNodeShape);

      return allLaneShapes.filter(function(l) {
        return isInLaneShape(flowNodeShape, l);
      }).map(function(shape) {
        return shape.businessObject;
      });
    }

    laneShapes.forEach(function(laneShape) {
      var root = getLanesRoot(laneShape);

      if (!root || handledNodes.indexOf(root) !== -1) {
        return;
      }

      var children = root.children.filter(function(c) {
        return is$1(c, 'bpmn:FlowNode');
      });

      children.forEach(addFlowNodeShape);

      handledNodes.push(root);
    });

    flowNodeShapes.forEach(addFlowNodeShape);


    allFlowNodeShapes.forEach(function(flowNodeShape) {

      var flowNode = flowNodeShape.businessObject;

      var lanes = flowNode.get(LANES_ATTR),
          remove = lanes.slice(),
          add = getNewLanes(flowNodeShape);

      updates.push({ flowNode: flowNode, remove: remove, add: add });
    });

    laneShapes.forEach(function(laneShape) {

      var lane = laneShape.businessObject;

      // lane got removed XX-)
      if (!laneShape.parent) {
        lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {
          updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });
        });
      }
    });

    return updates;
  };

  UpdateFlowNodeRefsHandler.prototype.execute = function(context) {

    var updates = context.updates;

    if (!updates) {
      updates = context.updates = this._computeUpdates(context.flowNodeShapes, context.laneShapes);
    }


    updates.forEach(function(update) {

      var flowNode = update.flowNode,
          lanes = flowNode.get(LANES_ATTR);

      // unwire old
      update.remove.forEach(function(oldLane) {
        remove$1(lanes, oldLane);
        remove$1(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
      });

      // wire new
      update.add.forEach(function(newLane) {
        add$1(lanes, newLane);
        add$1(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
      });
    });

    // TODO(nikku): return changed elements
    // return [ ... ];

    return [];
  };


  UpdateFlowNodeRefsHandler.prototype.revert = function(context) {

    var updates = context.updates;

    updates.forEach(function(update) {

      var flowNode = update.flowNode,
          lanes = flowNode.get(LANES_ATTR);

      // unwire new
      update.add.forEach(function(newLane) {
        remove$1(lanes, newLane);
        remove$1(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
      });

      // wire old
      update.remove.forEach(function(oldLane) {
        add$1(lanes, oldLane);
        add$1(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
      });
    });

    // TODO(nikku): return changed elements
    // return [ ... ];

    return [];
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('../../../model/Types').Moddle} Moddle
   */

  /**
   * @implements {CommandHandler}
   *
   * @param {Moddle} moddle
   */
  function IdClaimHandler(moddle) {
    this._moddle = moddle;
  }

  IdClaimHandler.$inject = [ 'moddle' ];


  IdClaimHandler.prototype.execute = function(context) {
    var ids = this._moddle.ids,
        id = context.id,
        element = context.element,
        claiming = context.claiming;

    if (claiming) {
      ids.claim(id, element);
    } else {
      ids.unclaim(id);
    }

    return [];
  };

  /**
   * Command revert implementation.
   */
  IdClaimHandler.prototype.revert = function(context) {
    var ids = this._moddle.ids,
        id = context.id,
        element = context.element,
        claiming = context.claiming;

    if (claiming) {
      ids.unclaim(id);
    } else {
      ids.claim(id, element);
    }

    return [];
  };

  /**
   * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
   *
   * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
   *
   * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
   */

  var DEFAULT_COLORS = {
    fill: undefined,
    stroke: undefined
  };

  /**
   * @implements {CommandHandler}
   *
   * @param {CommandStack} commandStack
   */
  function SetColorHandler(commandStack) {
    this._commandStack = commandStack;

    this._normalizeColor = function(color) {

      // Remove color for falsy values.
      if (!color) {
        return undefined;
      }

      if (isString(color)) {
        var hexColor = colorToHex(color);

        if (hexColor) {
          return hexColor;
        }
      }

      throw new Error(`invalid color value: ${ color }`);
    };
  }

  SetColorHandler.$inject = [
    'commandStack'
  ];


  SetColorHandler.prototype.postExecute = function(context) {
    var elements = context.elements,
        colors = context.colors || DEFAULT_COLORS;

    var self = this;

    var di = {};

    if ('fill' in colors) {
      assign$1(di, {
        'background-color': this._normalizeColor(colors.fill) });
    }

    if ('stroke' in colors) {
      assign$1(di, {
        'border-color': this._normalizeColor(colors.stroke) });
    }

    forEach$1(elements, function(element) {
      var assignedDi = isConnection(element) ? pick(di, [ 'border-color' ]) : di,
          elementDi = getDi(element);

      // TODO @barmac: remove once we drop bpmn.io properties
      ensureLegacySupport(assignedDi);

      if (isLabel(element)) {

        // set label colors as bpmndi:BPMNLabel#color
        self._commandStack.execute('element.updateModdleProperties', {
          element: element,
          moddleElement: elementDi.label,
          properties: {
            color: di['border-color']
          }
        });
      } else {

        // ignore non-compliant di
        if (!isAny(elementDi, [ 'bpmndi:BPMNEdge', 'bpmndi:BPMNShape' ])) {
          return;
        }

        // set colors bpmndi:BPMNEdge or bpmndi:BPMNShape
        self._commandStack.execute('element.updateProperties', {
          element: element,
          properties: {
            di: assignedDi
          }
        });
      }
    });

  };

  /**
   * Convert color from rgb(a)/hsl to hex. Returns `null` for unknown color names
   * and for colors with alpha less than 1.0. This depends on `<canvas>`
   * serialization of the `context.fillStyle`.
   * Cf. https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-fillstyle
   *
   * @example
   *
   * ```javascript
   * colorToHex('fuchsia'); // "#ff00ff"
   *
   * colorToHex('rgba(1, 2, 3, 0.4)'); // null
   * ```
   *
   * @param {string} color
   *
   * @return {string|null}
   */
  function colorToHex(color) {
    var context = document.createElement('canvas').getContext('2d');

    // (0) Start with transparent to account for browser default values.
    context.fillStyle = 'transparent';

    // (1) Assign color so that it's serialized.
    context.fillStyle = color;

    // (2) Return null for non-hex serialization result.
    return /^#[0-9a-fA-F]{6}$/.test(context.fillStyle) ? context.fillStyle : null;
  }

  /**
   * Add legacy properties if required.
   *
   * @param {ModdleElement} di
   */
  function ensureLegacySupport(di) {
    if ('border-color' in di) {
      di.stroke = di['border-color'];
    }

    if ('background-color' in di) {
      di.fill = di['background-color'];
    }
  }

  var NULL_DIMENSIONS = {
    width: 0,
    height: 0
  };

  /**
   * @typedef {import('../../modeling/Modeling').default} Modeling
   * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
   * @typedef {import('../../modeling/BpmnFactory').default} BpmnFactory
   *
   * @typedef {import('../../../model/Types').Element} Element
   */

  /**
   * A handler that updates the text of a BPMN element.
   *
   * @param {Modeling} modeling
   * @param {TextRenderer} textRenderer
   * @param {BpmnFactory} bpmnFactory
   */
  function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {

    /**
     * Set the label and return the changed elements.
     *
     * Element parameter can be label itself or connection (i.e. sequence flow).
     *
     * @param {Element} element
     * @param {string} text
     */
    function setText(element, text) {

      // external label if present
      var label = element.label || element;

      var labelTarget = element.labelTarget || element;

      setLabel(label, text);

      return [ label, labelTarget ];
    }

    function preExecute(ctx) {
      var element = ctx.element,
          businessObject = element.businessObject,
          newLabel = ctx.newLabel;

      if (!isLabel(element)
          && isLabelExternal(element)
          && !hasExternalLabel(element)
          && !isEmptyText$1(newLabel)) {

        // create label
        var paddingTop = 7;

        var labelCenter = getExternalLabelMid(element);

        labelCenter = {
          x: labelCenter.x,
          y: labelCenter.y + paddingTop
        };

        modeling.createLabel(element, labelCenter, {
          id: businessObject.id + '_label',
          businessObject: businessObject,
          di: element.di
        });
      }
    }

    function execute(ctx) {
      ctx.oldLabel = getLabel(ctx.element);
      return setText(ctx.element, ctx.newLabel);
    }

    function revert(ctx) {
      return setText(ctx.element, ctx.oldLabel);
    }

    function postExecute(ctx) {
      var element = ctx.element,
          label = element.label || element,
          newLabel = ctx.newLabel,
          newBounds = ctx.newBounds,
          hints = ctx.hints || {};

      // ignore internal labels for elements except text annotations
      if (!isLabel(label) && !is$1(label, 'bpmn:TextAnnotation')) {
        return;
      }

      if (isLabel(label) && isEmptyText$1(newLabel)) {

        if (hints.removeShape !== false) {
          modeling.removeShape(label, { unsetLabel: false });
        }

        return;
      }

      var text = getLabel(element);

      // resize element based on label _or_ pre-defined bounds
      if (typeof newBounds === 'undefined') {
        newBounds = textRenderer.getExternalLabelBounds(label, text);
      }

      // setting newBounds to false or _null_ will
      // disable the postExecute resize operation
      if (newBounds) {
        modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);
      }
    }

    // API

    this.preExecute = preExecute;
    this.execute = execute;
    this.revert = revert;
    this.postExecute = postExecute;
  }

  UpdateLabelHandler.$inject = [
    'modeling',
    'textRenderer',
    'bpmnFactory'
  ];


  // helpers //////////

  function isEmptyText$1(label) {
    return !label || !label.trim();
  }

  /**
   * @typedef {import('../rules/BpmnRules').default} BpmnRules
   * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
   * @typedef {import('./ElementFactory').default} ElementFactory
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('diagram-js/lib/features/modeling/Modeling').ModelingHints} ModelingHints
   *
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Label} Label
   * @typedef {import('../../model/Types').Parent} Parent
   * @typedef {import('../../model/Types').Root} Root
   * @typedef {import('../../model/Types').Shape} Shape
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   *
   * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
   *
   * @typedef {import('../../util/Types').Colors} Colors
   *
   * @typedef { {
   *   removeShape?: boolean;
   * } } UpdateLabelHints
   */

  /**
   * The BPMN 2.0 modeling entry point.
   *
   * @template {Connection} [T=Connection]
   * @template {Element} [U=Element]
   * @template {Label} [V=Label]
   * @template {Parent} [W=Parent]
   * @template {Shape} [X=Shape]
   *
   * @extends {BaseModeling<T, U, V, W, X>}
   *
   * @param {EventBus} eventBus
   * @param {ElementFactory} elementFactory
   * @param {CommandStack} commandStack
   * @param {BpmnRules} bpmnRules
   */
  function Modeling(
      eventBus,
      elementFactory,
      commandStack,
      bpmnRules
  ) {

    Modeling$1.call(this, eventBus, elementFactory, commandStack);

    this._bpmnRules = bpmnRules;
  }

  e$3(Modeling, Modeling$1);

  Modeling.$inject = [
    'eventBus',
    'elementFactory',
    'commandStack',
    'bpmnRules'
  ];


  Modeling.prototype.getHandlers = function() {
    var handlers = Modeling$1.prototype.getHandlers.call(this);

    handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;
    handlers['element.updateProperties'] = UpdatePropertiesHandler;
    handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;
    handlers['lane.add'] = AddLaneHandler;
    handlers['lane.resize'] = ResizeLaneHandler;
    handlers['lane.split'] = SplitLaneHandler;
    handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;
    handlers['id.updateClaim'] = IdClaimHandler;
    handlers['element.setColor'] = SetColorHandler;
    handlers['element.updateLabel'] = UpdateLabelHandler;

    return handlers;
  };

  /**
   * Update an element's label.
   *
   * @param {Element} element The element.
   * @param {string} newLabel The new label.
   * @param {Rect} [newBounds] The optional bounds of the label.
   * @param {UpdateLabelHints} [hints] The optional hints.
   */
  Modeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {
    this._commandStack.execute('element.updateLabel', {
      element: element,
      newLabel: newLabel,
      newBounds: newBounds,
      hints: hints || {}
    });
  };

  /**
   * @param {Element} source
   * @param {Element} target
   * @param {Partial<Connection>} [attrs]
   * @param {ModelingHints} [hints]
   *
   * @return {T}
   */
  Modeling.prototype.connect = function(source, target, attrs, hints) {

    var bpmnRules = this._bpmnRules;

    if (!attrs) {
      attrs = bpmnRules.canConnect(source, target);
    }

    if (!attrs) {
      return;
    }

    return this.createConnection(source, target, attrs, source.parent, hints);
  };

  /**
   * Update a model element's properties.
   *
   * @param {Element} element The element.
   * @param {ModdleElement} moddleElement The model element.
   * @param {Object} properties The updated properties.
   */
  Modeling.prototype.updateModdleProperties = function(element, moddleElement, properties) {
    this._commandStack.execute('element.updateModdleProperties', {
      element: element,
      moddleElement: moddleElement,
      properties: properties
    });
  };

  /**
   * Update an element's properties.
   *
   * @param {Element} element The element.
   * @param {Object} properties The updated properties.
   */
  Modeling.prototype.updateProperties = function(element, properties) {
    this._commandStack.execute('element.updateProperties', {
      element: element,
      properties: properties
    });
  };

  /**
   * Resize a lane.
   *
   * @param {Shape} laneShape The lane.
   * @param {Rect} newBounds The new bounds of the lane.
   * @param {boolean} [balanced] Wether to resize neighboring lanes.
   */
  Modeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {
    this._commandStack.execute('lane.resize', {
      shape: laneShape,
      newBounds: newBounds,
      balanced: balanced
    });
  };

  /**
   * Add a lane.
   *
   * @param {Shape} targetLaneShape The shape to add the lane to.
   * @param {string} location The location.
   *
   * @return {Shape} The added lane.
   */
  Modeling.prototype.addLane = function(targetLaneShape, location) {
    var context = {
      shape: targetLaneShape,
      location: location
    };

    this._commandStack.execute('lane.add', context);

    return context.newLane;
  };

  /**
   * Split a lane.
   *
   * @param {Shape} targetLane The lane to split.
   * @param {number} count The number of lanes to split the lane into. Must not
   * exceed the number of existing lanes.
   */
  Modeling.prototype.splitLane = function(targetLane, count) {
    this._commandStack.execute('lane.split', {
      shape: targetLane,
      count: count
    });
  };

  /**
   * Turn a process into a collaboration.
   *
   * @return {Root} The root of the collaboration.
   */
  Modeling.prototype.makeCollaboration = function() {

    var collaborationElement = this._create('root', {
      type: 'bpmn:Collaboration'
    });

    var context = {
      newRoot: collaborationElement
    };

    this._commandStack.execute('canvas.updateRoot', context);

    return collaborationElement;
  };

  /**
   * Transform a collaboration into a process.
   *
   * @return {Root} The root of the process.
   */
  Modeling.prototype.makeProcess = function() {

    var processElement = this._create('root', {
      type: 'bpmn:Process'
    });

    var context = {
      newRoot: processElement
    };

    this._commandStack.execute('canvas.updateRoot', context);

    return processElement;
  };

  /**
   * Update the referenced lanes of each flow node.
   *
   * @param {Shape[]} flowNodeShapes The flow nodes to update.
   * @param {Shape[]} laneShapes The lanes.
   */
  Modeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {

    this._commandStack.execute('lane.updateRefs', {
      flowNodeShapes: flowNodeShapes,
      laneShapes: laneShapes
    });
  };

  /**
   * Claim an ID.
   *
   * @param {string} id The ID to claim.
   * @param {ModdleElement} moddleElement The model element the ID is claimed for.
   */
  Modeling.prototype.claimId = function(id, moddleElement) {
    this._commandStack.execute('id.updateClaim', {
      id: id,
      element: moddleElement,
      claiming: true
    });
  };

  /**
   * Unclaim an ID.
   *
   * @param {string} id The ID to unclaim.
   * @param {ModdleElement} moddleElement The model element the ID is claimed for.
   */
  Modeling.prototype.unclaimId = function(id, moddleElement) {
    this._commandStack.execute('id.updateClaim', {
      id: id,
      element: moddleElement
    });
  };

  /**
   * Set the color(s) of one or many elements.
   *
   * @param {Element[]} elements The elements to set the color(s) for.
   * @param {Colors} colors The color(s) to set.
   */
  Modeling.prototype.setColor = function(elements, colors) {
    if (!elements.length) {
      elements = [ elements ];
    }

    this._commandStack.execute('element.setColor', {
      elements: elements,
      colors: colors
    });
  };

  /**
   * @typedef {import('../core/Types').ElementLike} Element
   * @typedef {import('../core/Types').ConnectionLike} Connection
   *
   * @typedef {import('../util').Point} Point
   *
   * @typedef { {
   *   connectionStart?: Point;
   *   connectionEnd?: Point;
   *   source?: Element;
   *   target?: Element;
   * } } LayoutConnectionHints
   */



  /**
   * A base connection layouter implementation
   * that layouts the connection by directly connecting
   * mid(source) + mid(target).
   */
  function BaseLayouter() {}


  /**
   * Return the new layouted waypoints for the given connection.
   *
   * The connection passed is still unchanged; you may figure out about
   * the new connection start / end via the layout hints provided.
   *
   * @param {Connection} connection
   * @param {LayoutConnectionHints} [hints]
   *
   * @return {Point[]} The waypoints of the laid out connection.
   */
  BaseLayouter.prototype.layoutConnection = function(connection, hints) {

    hints = hints || {};

    return [
      hints.connectionStart || getMid(hints.source || connection.source),
      hints.connectionEnd || getMid(hints.target || connection.target)
    ];
  };

  /**
   * @typedef {import('../util/Types').Point} Point
   * @typedef {import('../util/Types').Rect} Rect
   */

  var MIN_SEGMENT_LENGTH = 20,
      POINT_ORIENTATION_PADDING = 5;

  var round$2 = Math.round;

  var INTERSECTION_THRESHOLD = 20,
      ORIENTATION_THRESHOLD = {
        'h:h': 20,
        'v:v': 20,
        'h:v': -10,
        'v:h': -10
      };

  function needsTurn(orientation, startDirection) {
    return !{
      t: /top/,
      r: /right/,
      b: /bottom/,
      l: /left/,
      h: /./,
      v: /./
    }[startDirection].test(orientation);
  }

  function canLayoutStraight(direction, targetOrientation) {
    return {
      t: /top/,
      r: /right/,
      b: /bottom/,
      l: /left/,
      h: /left|right/,
      v: /top|bottom/
    }[direction].test(targetOrientation);
  }

  function getSegmentBendpoints(a, b, directions) {
    var orientation = getOrientation(b, a, POINT_ORIENTATION_PADDING);

    var startDirection = directions.split(':')[0];

    var xmid = round$2((b.x - a.x) / 2 + a.x),
        ymid = round$2((b.y - a.y) / 2 + a.y);

    var segmentEnd, segmentDirections;

    var layoutStraight = canLayoutStraight(startDirection, orientation),
        layoutHorizontal = /h|r|l/.test(startDirection),
        layoutTurn = false;

    var turnNextDirections = false;

    if (layoutStraight) {
      segmentEnd = layoutHorizontal ? { x: xmid, y: a.y } : { x: a.x, y: ymid };

      segmentDirections = layoutHorizontal ? 'h:h' : 'v:v';
    } else {
      layoutTurn = needsTurn(orientation, startDirection);

      segmentDirections = layoutHorizontal ? 'h:v' : 'v:h';

      if (layoutTurn) {

        if (layoutHorizontal) {
          turnNextDirections = ymid === a.y;

          segmentEnd = {
            x: a.x + MIN_SEGMENT_LENGTH * (/l/.test(startDirection) ? -1 : 1),
            y: turnNextDirections ? ymid + MIN_SEGMENT_LENGTH : ymid
          };
        } else {
          turnNextDirections = xmid === a.x;

          segmentEnd = {
            x: turnNextDirections ? xmid + MIN_SEGMENT_LENGTH : xmid,
            y: a.y + MIN_SEGMENT_LENGTH * (/t/.test(startDirection) ? -1 : 1)
          };
        }

      } else {
        segmentEnd = {
          x: xmid,
          y: ymid
        };
      }
    }

    return {
      waypoints: getBendpoints(a, segmentEnd, segmentDirections).concat(segmentEnd),
      directions:  segmentDirections,
      turnNextDirections: turnNextDirections
    };
  }

  function getStartSegment(a, b, directions) {
    return getSegmentBendpoints(a, b, directions);
  }

  function getEndSegment(a, b, directions) {
    var invertedSegment = getSegmentBendpoints(b, a, invertDirections(directions));

    return {
      waypoints: invertedSegment.waypoints.slice().reverse(),
      directions: invertDirections(invertedSegment.directions),
      turnNextDirections: invertedSegment.turnNextDirections
    };
  }

  function getMidSegment(startSegment, endSegment) {

    var startDirection = startSegment.directions.split(':')[1],
        endDirection = endSegment.directions.split(':')[0];

    if (startSegment.turnNextDirections) {
      startDirection = startDirection == 'h' ? 'v' : 'h';
    }

    if (endSegment.turnNextDirections) {
      endDirection = endDirection == 'h' ? 'v' : 'h';
    }

    var directions = startDirection + ':' + endDirection;

    var bendpoints = getBendpoints(
      startSegment.waypoints[startSegment.waypoints.length - 1],
      endSegment.waypoints[0],
      directions
    );

    return {
      waypoints: bendpoints,
      directions: directions
    };
  }

  function invertDirections(directions) {
    return directions.split(':').reverse().join(':');
  }

  /**
   * Handle simple layouts with maximum two bendpoints.
   */
  function getSimpleBendpoints(a, b, directions) {

    var xmid = round$2((b.x - a.x) / 2 + a.x),
        ymid = round$2((b.y - a.y) / 2 + a.y);

    // one point, right or left from a
    if (directions === 'h:v') {
      return [ { x: b.x, y: a.y } ];
    }

    // one point, above or below a
    if (directions === 'v:h') {
      return [ { x: a.x, y: b.y } ];
    }

    // vertical segment between a and b
    if (directions === 'h:h') {
      return [
        { x: xmid, y: a.y },
        { x: xmid, y: b.y }
      ];
    }

    // horizontal segment between a and b
    if (directions === 'v:v') {
      return [
        { x: a.x, y: ymid },
        { x: b.x, y: ymid }
      ];
    }

    throw new Error('invalid directions: can only handle varians of [hv]:[hv]');
  }


  /**
   * Returns the mid points for a manhattan connection between two points.
   *
   * @example h:h (horizontal:horizontal)
   *
   * [a]----[x]
   *         |
   *        [x]----[b]
   *
   * @example h:v (horizontal:vertical)
   *
   * [a]----[x]
   *         |
   *        [b]
   *
   * @example h:r (horizontal:right)
   *
   * [a]----[x]
   *         |
   *    [b]-[x]
   *
   * @param {Point} a
   * @param {Point} b
   * @param {string} directions
   *
   * @return {Point[]}
   */
  function getBendpoints(a, b, directions) {
    directions = directions || 'h:h';

    if (!isValidDirections(directions)) {
      throw new Error(
        'unknown directions: <' + directions + '>: ' +
        'must be specified as <start>:<end> ' +
        'with start/end in { h,v,t,r,b,l }'
      );
    }

    // compute explicit directions, involving trbl dockings
    // using a three segmented layouting algorithm
    if (isExplicitDirections(directions)) {
      var startSegment = getStartSegment(a, b, directions),
          endSegment = getEndSegment(a, b, directions),
          midSegment = getMidSegment(startSegment, endSegment);

      return [].concat(
        startSegment.waypoints,
        midSegment.waypoints,
        endSegment.waypoints
      );
    }

    // handle simple [hv]:[hv] cases that can be easily computed
    return getSimpleBendpoints(a, b, directions);
  }

  /**
   * Create a connection between the two points according
   * to the manhattan layout (only horizontal and vertical) edges.
   *
   * @param {Point} a
   * @param {Point} b
   * @param {string} [directions='h:h'] Specifies manhattan directions for each
   * point as {direction}:{direction}. A direction for a point is either
   * `h` (horizontal) or `v` (vertical).
   *
   * @return {Point[]}
   */
  function connectPoints(a, b, directions) {

    var points = getBendpoints(a, b, directions);

    points.unshift(a);
    points.push(b);

    return withoutRedundantPoints(points);
  }


  /**
   * Connect two rectangles using a manhattan layouted connection.
   *
   * @param {Rect} source source rectangle
   * @param {Rect} target target rectangle
   * @param {Point} [start] source docking
   * @param {Point} [end] target docking
   * @param {Object} [hints]
   * @param {string} [hints.preserveDocking=source] preserve docking on selected side
   * @param {string[]} [hints.preferredLayouts]
   * @param {Point|boolean} [hints.connectionStart] whether the start changed
   * @param {Point|boolean} [hints.connectionEnd] whether the end changed
   *
   * @return {Point[]} connection points
   */
  function connectRectangles(source, target, start, end, hints) {

    var preferredLayouts = hints && hints.preferredLayouts || [];

    var preferredLayout = without(preferredLayouts, 'straight')[0] || 'h:h';

    var threshold = ORIENTATION_THRESHOLD[preferredLayout] || 0;

    var orientation = getOrientation(source, target, threshold);

    var directions = getDirections(orientation, preferredLayout);

    start = start || getMid(source);
    end = end || getMid(target);

    var directionSplit = directions.split(':');

    // compute actual docking points for start / end
    // this ensures we properly layout only parts of the
    // connection that lies in between the two rectangles
    var startDocking = getDockingPoint(start, source, directionSplit[0], invertOrientation(orientation)),
        endDocking = getDockingPoint(end, target, directionSplit[1], orientation);

    return connectPoints(startDocking, endDocking, directions);
  }


  /**
   * Repair the connection between two rectangles, of which one has been updated.
   *
   * @param {Rect} source
   * @param {Rect} target
   * @param {Point} [start]
   * @param {Point} [end]
   * @param {Point[]} [waypoints]
   * @param {Object} [hints]
   * @param {string[]} [hints.preferredLayouts] The list of preferred layouts.
   * @param {boolean} [hints.connectionStart]
   * @param {boolean} [hints.connectionEnd]
   *
   * @return {Point[]} The waypoints of the repaired connection.
   */
  function repairConnection(source, target, start, end, waypoints, hints) {

    if (isArray$3(start)) {
      waypoints = start;
      hints = end;

      start = getMid(source);
      end = getMid(target);
    }

    hints = assign$1({ preferredLayouts: [] }, hints);
    waypoints = waypoints || [];

    var preferredLayouts = hints.preferredLayouts,
        preferStraight = preferredLayouts.indexOf('straight') !== -1,
        repairedWaypoints;

    // just layout non-existing or simple connections
    // attempt to render straight lines, if required

    // attempt to layout a straight line
    repairedWaypoints = preferStraight && tryLayoutStraight(source, target, start, end, hints);

    if (repairedWaypoints) {
      return repairedWaypoints;
    }

    // try to layout from end
    repairedWaypoints = hints.connectionEnd && tryRepairConnectionEnd(target, source, end, waypoints);

    if (repairedWaypoints) {
      return repairedWaypoints;
    }

    // try to layout from start
    repairedWaypoints = hints.connectionStart && tryRepairConnectionStart(source, target, start, waypoints);

    if (repairedWaypoints) {
      return repairedWaypoints;
    }

    // or whether nothing seems to have changed
    if (!hints.connectionStart && !hints.connectionEnd && waypoints && waypoints.length) {
      return waypoints;
    }

    // simply reconnect if nothing else worked
    return connectRectangles(source, target, start, end, hints);
  }


  function inRange(a, start, end) {
    return a >= start && a <= end;
  }

  function isInRange(axis, a, b) {
    var size = {
      x: 'width',
      y: 'height'
    };

    return inRange(a[axis], b[axis], b[axis] + b[size[axis]]);
  }

  /**
   * Lay out a straight connection.
   *
   * @param {Rect} source
   * @param {Rect} target
   * @param {Point} start
   * @param {Point} end
   * @param {Object} [hints]
   * @param {string} [hints.preserveDocking]
   *
   * @return {Point[]|null} The waypoints or null if layout isn't possible.
   */
  function tryLayoutStraight(source, target, start, end, hints) {
    var axis = {},
        primaryAxis,
        orientation;

    orientation = getOrientation(source, target);

    // only layout a straight connection if shapes are
    // horizontally or vertically aligned
    if (!/^(top|bottom|left|right)$/.test(orientation)) {
      return null;
    }

    if (/top|bottom/.test(orientation)) {
      primaryAxis = 'x';
    }

    if (/left|right/.test(orientation)) {
      primaryAxis = 'y';
    }

    if (hints.preserveDocking === 'target') {

      if (!isInRange(primaryAxis, end, source)) {
        return null;
      }

      axis[primaryAxis] = end[primaryAxis];

      return [
        {
          x: axis.x !== undefined ? axis.x : start.x,
          y: axis.y !== undefined ? axis.y : start.y,
          original: {
            x: axis.x !== undefined ? axis.x : start.x,
            y: axis.y !== undefined ? axis.y : start.y
          }
        },
        {
          x: end.x,
          y: end.y
        }
      ];

    } else {

      if (!isInRange(primaryAxis, start, target)) {
        return null;
      }

      axis[primaryAxis] = start[primaryAxis];

      return [
        {
          x: start.x,
          y: start.y
        },
        {
          x: axis.x !== undefined ? axis.x : end.x,
          y: axis.y !== undefined ? axis.y : end.y,
          original: {
            x: axis.x !== undefined ? axis.x : end.x,
            y: axis.y !== undefined ? axis.y : end.y
          }
        }
      ];
    }

  }

  /**
   * Repair a connection from start.
   *
   * @param {Rect} moved
   * @param {Rect} other
   * @param {Point} newDocking
   * @param {Point[]} points originalPoints from moved to other
   *
   * @return {Point[]|null} The waypoints of the repaired connection.
   */
  function tryRepairConnectionStart(moved, other, newDocking, points) {
    return _tryRepairConnectionSide(moved, other, newDocking, points);
  }

  /**
   * Repair a connection from end.
   *
   * @param {Rect} moved
   * @param {Rect} other
   * @param {Point} newDocking
   * @param {Point[]} points originalPoints from moved to other
   *
   * @return {Point[]|null} The waypoints of the repaired connection.
   */
  function tryRepairConnectionEnd(moved, other, newDocking, points) {
    var waypoints = points.slice().reverse();

    waypoints = _tryRepairConnectionSide(moved, other, newDocking, waypoints);

    return waypoints ? waypoints.reverse() : null;
  }

  /**
   * Repair a connection from one side that moved.
   *
   * @param {Rect} moved
   * @param {Rect} other
   * @param {Point} newDocking
   * @param {Point[]} points originalPoints from moved to other
   *
   * @return {Point[]} The waypoints of the repaired connection.
   */
  function _tryRepairConnectionSide(moved, other, newDocking, points) {

    function needsRelayout(points) {
      if (points.length < 3) {
        return true;
      }

      if (points.length > 4) {
        return false;
      }

      // relayout if two points overlap
      // this is most likely due to
      return !!find$1(points, function(p, idx) {
        var q = points[idx - 1];

        return q && pointDistance(p, q) < 3;
      });
    }

    function repairBendpoint(candidate, oldPeer, newPeer) {

      var alignment = pointsAligned(oldPeer, candidate);

      switch (alignment) {
      case 'v':

        // repair horizontal alignment
        return { x: newPeer.x, y: candidate.y };
      case 'h':

        // repair vertical alignment
        return { x: candidate.x, y: newPeer.y };
      }

      return { x: candidate.x, y: candidate. y };
    }

    function removeOverlapping(points, a, b) {
      var i;

      for (i = points.length - 2; i !== 0; i--) {

        // intersects (?) break, remove all bendpoints up to this one and relayout
        if (pointInRect(points[i], a, INTERSECTION_THRESHOLD) ||
            pointInRect(points[i], b, INTERSECTION_THRESHOLD)) {

          // return sliced old connection
          return points.slice(i);
        }
      }

      return points;
    }

    // (0) only repair what has layoutable bendpoints

    // (1) if only one bendpoint and on shape moved onto other shapes axis
    //     (horizontally / vertically), relayout

    if (needsRelayout(points)) {
      return null;
    }

    var oldDocking = points[0],
        newPoints = points.slice(),
        slicedPoints;

    // (2) repair only last line segment and only if it was layouted before

    newPoints[0] = newDocking;
    newPoints[1] = repairBendpoint(newPoints[1], oldDocking, newDocking);


    // (3) if shape intersects with any bendpoint after repair,
    //     remove all segments up to this bendpoint and repair from there
    slicedPoints = removeOverlapping(newPoints, moved, other);

    if (slicedPoints !== newPoints) {
      newPoints = _tryRepairConnectionSide(moved, other, newDocking, slicedPoints);
    }

    // (4) do NOT repair if repaired bendpoints are aligned
    if (newPoints && pointsAligned(newPoints)) {
      return null;
    }

    return newPoints;
  }


  /**
   * Returns the manhattan directions connecting two rectangles
   * with the given orientation.
   *
   * Will always return the default layout, if it is specific
   * regarding sides already (trbl).
   *
   * @example
   *
   * ```javascript
   * getDirections('top'); // -> 'v:v'
   * getDirections('intersect'); // -> 't:t'
   *
   * getDirections('top-right', 'v:h'); // -> 'v:h'
   * getDirections('top-right', 'h:h'); // -> 'h:h'
   * ```
   *
   * @param {string} orientation
   * @param {string} defaultLayout
   *
   * @return {string}
   */
  function getDirections(orientation, defaultLayout) {

    // don't override specific trbl directions
    if (isExplicitDirections(defaultLayout)) {
      return defaultLayout;
    }

    switch (orientation) {
    case 'intersect':
      return 't:t';

    case 'top':
    case 'bottom':
      return 'v:v';

    case 'left':
    case 'right':
      return 'h:h';

    // 'top-left'
    // 'top-right'
    // 'bottom-left'
    // 'bottom-right'
    default:
      return defaultLayout;
    }
  }

  function isValidDirections(directions) {
    return directions && /^h|v|t|r|b|l:h|v|t|r|b|l$/.test(directions);
  }

  function isExplicitDirections(directions) {
    return directions && /t|r|b|l/.test(directions);
  }

  function invertOrientation(orientation) {
    return {
      'top': 'bottom',
      'bottom': 'top',
      'left': 'right',
      'right': 'left',
      'top-left': 'bottom-right',
      'bottom-right': 'top-left',
      'top-right': 'bottom-left',
      'bottom-left': 'top-right',
    }[orientation];
  }

  function getDockingPoint(point, rectangle, dockingDirection, targetOrientation) {

    // ensure we end up with a specific docking direction
    // based on the targetOrientation, if <h|v> is being passed

    if (dockingDirection === 'h') {
      dockingDirection = /left/.test(targetOrientation) ? 'l' : 'r';
    }

    if (dockingDirection === 'v') {
      dockingDirection = /top/.test(targetOrientation) ? 't' : 'b';
    }

    if (dockingDirection === 't') {
      return { original: point, x: point.x, y: rectangle.y };
    }

    if (dockingDirection === 'r') {
      return { original: point, x: rectangle.x + rectangle.width, y: point.y };
    }

    if (dockingDirection === 'b') {
      return { original: point, x: point.x, y: rectangle.y + rectangle.height };
    }

    if (dockingDirection === 'l') {
      return { original: point, x: rectangle.x, y: point.y };
    }

    throw new Error('unexpected dockingDirection: <' + dockingDirection + '>');
  }


  /**
   * Return list of waypoints with redundant ones filtered out.
   *
   * @example
   *
   * Original points:
   *
   *   [x] ----- [x] ------ [x]
   *                         |
   *                        [x] ----- [x] - [x]
   *
   * Filtered:
   *
   *   [x] ---------------- [x]
   *                         |
   *                        [x] ----------- [x]
   *
   * @param {Point[]} waypoints
   *
   * @return {Point[]}
   */
  function withoutRedundantPoints(waypoints) {
    return waypoints.reduce(function(points, p, idx) {

      var previous = points[points.length - 1],
          next = waypoints[idx + 1];

      if (!pointsOnLine(previous, next, p, 0)) {
        points.push(p);
      }

      return points;
    }, []);
  }

  /**
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   *
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   *
   * @typedef {import('../../model/Types').Connection} Connection
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('diagram-js/lib/layout/BaseLayouter').LayoutConnectionHints} LayoutConnectionHints
   *
   * @typedef { {
   *   source?: Element;
   *   target?: Element;
   *   waypoints?: Point[];
   *   connectionStart?: Point;
   *   connectionEnd?: Point;
   * } & LayoutConnectionHints } BpmnLayoutConnectionHints
   */

  var ATTACH_ORIENTATION_PADDING = -10,
      BOUNDARY_TO_HOST_THRESHOLD$1 = 40;

  // layout all connection between flow elements h:h, except for
  // (1) outgoing of boundary events -> layout based on attach orientation and target orientation
  // (2) incoming/outgoing of gateways -> v:h for outgoing, h:v for incoming
  // (3) loops connect sides clockwise
  var PREFERRED_LAYOUTS_HORIZONTAL = {
    default: [ 'h:h' ],
    fromGateway: [ 'v:h' ],
    toGateway: [ 'h:v' ],
    loop: {
      fromTop: [ 't:r' ],
      fromRight: [ 'r:b' ],
      fromLeft: [ 'l:t' ],
      fromBottom: [ 'b:l' ]
    },
    boundaryLoop: {
      alternateHorizontalSide: 'b',
      alternateVerticalSide: 'l',
      default: 'v'
    },
    messageFlow: [ 'straight', 'v:v' ],
    subProcess: [ 'straight', 'h:h' ],
    isHorizontal: true
  };

  // for vertical layouts, switch h and v and loop counter-clockwise
  var PREFERRED_LAYOUTS_VERTICAL = {
    default: [ 'v:v' ],
    fromGateway: [ 'h:v' ],
    toGateway: [ 'v:h' ],
    loop: {
      fromTop: [ 't:l' ],
      fromRight: [ 'r:t' ],
      fromLeft: [ 'l:b' ],
      fromBottom: [ 'b:r' ]
    },
    boundaryLoop: {
      alternateHorizontalSide: 't',
      alternateVerticalSide: 'r',
      default: 'h'
    },
    messageFlow: [ 'straight', 'h:h' ],
    subProcess: [ 'straight', 'v:v' ],
    isHorizontal: false
  };

  var oppositeOrientationMapping = {
    'top': 'bottom',
    'top-right': 'bottom-left',
    'top-left': 'bottom-right',
    'right': 'left',
    'bottom': 'top',
    'bottom-right': 'top-left',
    'bottom-left': 'top-right',
    'left': 'right'
  };

  var orientationDirectionMapping = {
    top: 't',
    right: 'r',
    bottom: 'b',
    left: 'l'
  };

  function BpmnLayouter(elementRegistry) {
    this._elementRegistry = elementRegistry;
  }

  e$3(BpmnLayouter, BaseLayouter);

  /**
   * Returns waypoints of laid out connection.
   *
   * @param {Connection} connection
   * @param {BpmnLayoutConnectionHints} [hints]
   *
   * @return {Point[]}
   */
  BpmnLayouter.prototype.layoutConnection = function(connection, hints) {
    if (!hints) {
      hints = {};
    }

    var source = hints.source || connection.source,
        target = hints.target || connection.target,
        waypoints = hints.waypoints || connection.waypoints,
        connectionStart = hints.connectionStart,
        connectionEnd = hints.connectionEnd,
        elementRegistry = this._elementRegistry;

    var manhattanOptions,
        updatedWaypoints;

    if (!connectionStart) {
      connectionStart = getConnectionDocking(waypoints && waypoints[ 0 ], source);
    }

    if (!connectionEnd) {
      connectionEnd = getConnectionDocking(waypoints && waypoints[ waypoints.length - 1 ], target);
    }

    if (is$1(connection, 'bpmn:Association') ||
        is$1(connection, 'bpmn:DataAssociation')) {

      if (waypoints && !isCompensationAssociation(source, target)) {
        return [].concat([ connectionStart ], waypoints.slice(1, -1), [ connectionEnd ]);
      }
    }

    var layout = isDirectionHorizontal(source, elementRegistry) ? PREFERRED_LAYOUTS_HORIZONTAL : PREFERRED_LAYOUTS_VERTICAL;

    if (is$1(connection, 'bpmn:MessageFlow')) {
      manhattanOptions = getMessageFlowManhattanOptions(source, target, layout);
    } else if (is$1(connection, 'bpmn:SequenceFlow') || isCompensationAssociation(source, target)) {

      if (source === target) {
        manhattanOptions = {
          preferredLayouts: getLoopPreferredLayout(source, connection, layout)
        };
      } else if (is$1(source, 'bpmn:BoundaryEvent')) {
        manhattanOptions = {
          preferredLayouts: getBoundaryEventPreferredLayouts(source, target, connectionEnd, layout)
        };
      } else if (isExpandedSubProcess$1(source) || isExpandedSubProcess$1(target)) {
        manhattanOptions = {
          preferredLayouts: layout.subProcess,
          preserveDocking: getSubProcessPreserveDocking(source)
        };
      } else if (is$1(source, 'bpmn:Gateway')) {
        manhattanOptions = {
          preferredLayouts: layout.fromGateway
        };
      } else if (is$1(target, 'bpmn:Gateway')) {
        manhattanOptions = {
          preferredLayouts: layout.toGateway
        };
      } else {
        manhattanOptions = {
          preferredLayouts: layout.default
        };
      }
    }

    if (manhattanOptions) {
      manhattanOptions = assign$1(manhattanOptions, hints);

      updatedWaypoints = withoutRedundantPoints(repairConnection(
        source,
        target,
        connectionStart,
        connectionEnd,
        waypoints,
        manhattanOptions
      ));
    }

    return updatedWaypoints || [ connectionStart, connectionEnd ];
  };


  // helpers //////////

  function getAttachOrientation(attachedElement) {
    var hostElement = attachedElement.host;

    return getOrientation(getMid(attachedElement), hostElement, ATTACH_ORIENTATION_PADDING);
  }

  function getMessageFlowManhattanOptions(source, target, layout) {
    return {
      preferredLayouts: layout.messageFlow,
      preserveDocking: getMessageFlowPreserveDocking(source, target)
    };
  }

  function getMessageFlowPreserveDocking(source, target) {

    // (1) docking element connected to participant has precedence
    if (is$1(target, 'bpmn:Participant')) {
      return 'source';
    }

    if (is$1(source, 'bpmn:Participant')) {
      return 'target';
    }

    // (2) docking element connected to expanded sub-process has precedence
    if (isExpandedSubProcess$1(target)) {
      return 'source';
    }

    if (isExpandedSubProcess$1(source)) {
      return 'target';
    }

    // (3) docking event has precedence
    if (is$1(target, 'bpmn:Event')) {
      return 'target';
    }

    if (is$1(source, 'bpmn:Event')) {
      return 'source';
    }

    return null;
  }

  function getSubProcessPreserveDocking(source) {
    return isExpandedSubProcess$1(source) ? 'target' : 'source';
  }

  function getConnectionDocking(point, shape) {
    return point ? (point.original || point) : getMid(shape);
  }

  function isCompensationAssociation(source, target) {
    return is$1(target, 'bpmn:Activity') &&
      is$1(source, 'bpmn:BoundaryEvent') &&
      target.businessObject.isForCompensation;
  }

  function isExpandedSubProcess$1(element) {
    return is$1(element, 'bpmn:SubProcess') && isExpanded(element);
  }

  function isSame(a, b) {
    return a === b;
  }

  function isAnyOrientation(orientation, orientations) {
    return orientations.indexOf(orientation) !== -1;
  }

  function getHorizontalOrientation(orientation) {
    var matches = /right|left/.exec(orientation);

    return matches && matches[0];
  }

  function getVerticalOrientation(orientation) {
    var matches = /top|bottom/.exec(orientation);

    return matches && matches[0];
  }

  function isOppositeOrientation(a, b) {
    return oppositeOrientationMapping[a] === b;
  }

  function isOppositeHorizontalOrientation(a, b) {
    var horizontalOrientation = getHorizontalOrientation(a);

    var oppositeHorizontalOrientation = oppositeOrientationMapping[horizontalOrientation];

    return b.indexOf(oppositeHorizontalOrientation) !== -1;
  }

  function isOppositeVerticalOrientation(a, b) {
    var verticalOrientation = getVerticalOrientation(a);

    var oppositeVerticalOrientation = oppositeOrientationMapping[verticalOrientation];

    return b.indexOf(oppositeVerticalOrientation) !== -1;
  }

  function isHorizontalOrientation(orientation) {
    return orientation === 'right' || orientation === 'left';
  }

  function getLoopPreferredLayout(source, connection, layout) {
    var waypoints = connection.waypoints;

    var orientation = waypoints && waypoints.length && getOrientation(waypoints[0], source);

    if (orientation === 'top') {
      return layout.loop.fromTop;
    } else if (orientation === 'right') {
      return layout.loop.fromRight;
    } else if (orientation === 'left') {
      return layout.loop.fromLeft;
    }

    return layout.loop.fromBottom;
  }

  function getBoundaryEventPreferredLayouts(source, target, end, layout) {
    var sourceMid = getMid(source),
        targetMid = getMid(target),
        attachOrientation = getAttachOrientation(source),
        sourceLayout,
        targetLayout;

    var isLoop = isSame(source.host, target);

    var attachedToSide = isAnyOrientation(attachOrientation, [ 'top', 'right', 'bottom', 'left' ]);

    var targetOrientation = getOrientation(targetMid, sourceMid, {
      x: source.width / 2 + target.width / 2,
      y: source.height / 2 + target.height / 2
    });

    if (isLoop) {
      return getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end, layout);
    }

    // source layout
    sourceLayout = getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide, layout.isHorizontal);

    // target layout
    targetLayout = getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide, layout.isHorizontal);

    return [ sourceLayout + ':' + targetLayout ];
  }

  function getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end, layout) {
    var orientation = attachedToSide ? attachOrientation : layout.isHorizontal ? getVerticalOrientation(attachOrientation) : getHorizontalOrientation(attachOrientation),
        sourceLayout = orientationDirectionMapping[ orientation ],
        targetLayout;

    if (attachedToSide) {
      if (isHorizontalOrientation(attachOrientation)) {
        targetLayout = shouldConnectToSameSide('y', source, target, end) ? 'h' : layout.boundaryLoop.alternateHorizontalSide;
      } else {
        targetLayout = shouldConnectToSameSide('x', source, target, end) ? 'v' : layout.boundaryLoop.alternateVerticalSide;
      }
    } else {
      targetLayout = layout.boundaryLoop.default;
    }

    return [ sourceLayout + ':' + targetLayout ];
  }

  function shouldConnectToSameSide(axis, source, target, end) {
    var threshold = BOUNDARY_TO_HOST_THRESHOLD$1;

    return !(
      areCloseOnAxis(axis, end, target, threshold) ||
      areCloseOnAxis(axis, end, {
        x: target.x + target.width,
        y: target.y + target.height
      }, threshold) ||
      areCloseOnAxis(axis, end, getMid(source), threshold)
    );
  }

  function areCloseOnAxis(axis, a, b, threshold) {
    return Math.abs(a[ axis ] - b[ axis ]) < threshold;
  }

  function getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide, isHorizontal) {

    // attached to either top, right, bottom or left side
    if (attachedToSide) {
      return orientationDirectionMapping[ attachOrientation ];
    }

    // attached to either top-right, top-left, bottom-right or bottom-left corner

    var verticalAttachOrientation = getVerticalOrientation(attachOrientation),
        horizontalAttachOrientation = getHorizontalOrientation(attachOrientation),
        verticalTargetOrientation = getVerticalOrientation(targetOrientation),
        horizontalTargetOrientation = getHorizontalOrientation(targetOrientation);

    if (isHorizontal) {

      // same vertical or opposite horizontal orientation
      if (
        isSame(verticalAttachOrientation, verticalTargetOrientation) ||
        isOppositeOrientation(horizontalAttachOrientation, horizontalTargetOrientation)
      ) {
        return orientationDirectionMapping[ verticalAttachOrientation ];
      }
    } else {

      // same horizontal or opposite vertical orientation
      if (
        isSame(horizontalAttachOrientation, horizontalTargetOrientation) ||
        isOppositeOrientation(verticalAttachOrientation, verticalTargetOrientation)
      ) {
        return orientationDirectionMapping[ horizontalAttachOrientation ];
      }
    }

    // fallback
    return orientationDirectionMapping[ isHorizontal ? horizontalAttachOrientation : verticalAttachOrientation ];
  }

  function getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide, isHorizontal) {

    // attached to either top, right, bottom or left side
    if (attachedToSide) {
      if (isHorizontalOrientation(attachOrientation)) {

        // orientation is right or left

        // opposite horizontal orientation or same orientation
        if (
          isOppositeHorizontalOrientation(attachOrientation, targetOrientation) ||
          isSame(attachOrientation, targetOrientation)
        ) {
          return 'h';
        }

        // fallback
        return 'v';
      } else {

        // orientation is top or bottom

        // opposite vertical orientation or same orientation
        if (
          isOppositeVerticalOrientation(attachOrientation, targetOrientation) ||
          isSame(attachOrientation, targetOrientation)
        ) {
          return 'v';
        }

        // fallback
        return 'h';
      }
    }

    // attached to either top-right, top-left, bottom-right or bottom-left corner
    // and orientation is same on the counter-axis

    if (isHorizontal) {
      if (isSame(getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation))) {
        return 'h';
      } else {
        return 'v';
      }
    } else {
      if (isSame(getHorizontalOrientation(attachOrientation), getHorizontalOrientation(targetOrientation))) {
        return 'v';
      } else {
        return 'h';
      }
    }
  }

  BpmnLayouter.$inject = [ 'elementRegistry' ];

  /**
   * @typedef {import('../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../core/GraphicsFactory').default} GraphicsFactory
   */

  function dockingToPoint(docking) {

    // use the dockings actual point and
    // retain the original docking
    return assign$1({ original: docking.point.original || docking.point }, docking.actual);
  }


  /**
   * A {@link ConnectionDocking} that crops connection waypoints based on
   * the path(s) of the connection source and target.
   *
   * @param {ElementRegistry} elementRegistry
   * @param {GraphicsFactory} graphicsFactory
   */
  function CroppingConnectionDocking(elementRegistry, graphicsFactory) {
    this._elementRegistry = elementRegistry;
    this._graphicsFactory = graphicsFactory;
  }

  CroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];


  /**
   * @inheritDoc ConnectionDocking#getCroppedWaypoints
   */
  CroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {

    source = source || connection.source;
    target = target || connection.target;

    var sourceDocking = this.getDockingPoint(connection, source, true),
        targetDocking = this.getDockingPoint(connection, target);

    var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);

    croppedWaypoints.unshift(dockingToPoint(sourceDocking));
    croppedWaypoints.push(dockingToPoint(targetDocking));

    return croppedWaypoints;
  };

  /**
   * Return the connection docking point on the specified shape
   *
   * @inheritDoc ConnectionDocking#getDockingPoint
   */
  CroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {

    var waypoints = connection.waypoints,
        dockingIdx,
        dockingPoint,
        croppedPoint;

    dockingIdx = dockStart ? 0 : waypoints.length - 1;
    dockingPoint = waypoints[dockingIdx];

    croppedPoint = this._getIntersection(shape, connection, dockStart);

    return {
      point: dockingPoint,
      actual: croppedPoint || dockingPoint,
      idx: dockingIdx
    };
  };


  // helpers //////////////////////

  CroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {

    var shapePath = this._getShapePath(shape),
        connectionPath = this._getConnectionPath(connection);

    return getElementLineIntersection(shapePath, connectionPath, takeFirst);
  };

  CroppingConnectionDocking.prototype._getConnectionPath = function(connection) {
    return this._graphicsFactory.getConnectionPath(connection);
  };

  CroppingConnectionDocking.prototype._getShapePath = function(shape) {
    return this._graphicsFactory.getShapePath(shape);
  };

  CroppingConnectionDocking.prototype._getGfx = function(element) {
    return this._elementRegistry.getGraphics(element);
  };

  var modeling = {
    __init__: [
      'modeling',
      'bpmnUpdater'
    ],
    __depends__: [
      BehaviorModule,
      RulesModule,
      DiOrderingModule,
      OrderingModule,
      ReplaceModule,
      CommandModule,
      LabelSupportModule,
      AttachSupportModule,
      SelectionModule,
      ChangeSupportModule,
      SpaceToolModule
    ],
    bpmnFactory: [ 'type', BpmnFactory ],
    bpmnUpdater: [ 'type', BpmnUpdater ],
    elementFactory: [ 'type', ElementFactory ],
    modeling: [ 'type', Modeling ],
    layouter: [ 'type', BpmnLayouter ],
    connectionDocking: [ 'type', CroppingConnectionDocking ]
  };

  const round$1 = Math.round;

  /**
   * @typedef {import('diagram-js/lib/features/complex-preview/ComplexPreview').default} ComplexPreview
   * @typedef {import('diagram-js/lib/layout/ConnectionDocking').default} ConnectionDocking
   * @typedef {import('../modeling/ElementFactory').default} ElementFactory
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../modeling/BpmnLayouter').default} BpmnLayouter
   * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
   *
   * @typedef {import('../../model/Types').Shape} Shape
   */

  /**
   * A preview for appending.
   *
   * @param {ComplexPreview} complexPreview
   * @param {ConnectionDocking} connectionDocking
   * @param {ElementFactory} elementFactory
   * @param {EventBus} eventBus
   * @param {BpmnLayouter} layouter
   * @param {Rules} rules
   */
  function AppendPreview(complexPreview, connectionDocking, elementFactory, eventBus, layouter, rules) {
    this._complexPreview = complexPreview;
    this._connectionDocking = connectionDocking;
    this._elementFactory = elementFactory;
    this._eventBus = eventBus;
    this._layouter = layouter;
    this._rules = rules;
  }

  /**
   * Create a preview of appending a shape of the given type to the given source.
   *
   * @param {Shape} source
   * @param {string} type
   * @param {Partial<Shape>} options
   */
  AppendPreview.prototype.create = function(source, type, options) {
    const complexPreview = this._complexPreview,
          connectionDocking = this._connectionDocking,
          elementFactory = this._elementFactory,
          eventBus = this._eventBus,
          layouter = this._layouter,
          rules = this._rules;

    const shape = elementFactory.createShape(assign$1({ type }, options));

    const position = eventBus.fire('autoPlace', {
      source,
      shape
    });

    if (!position) {
      return;
    }

    assign$1(shape, {
      x: position.x - round$1(shape.width / 2),
      y: position.y - round$1(shape.height / 2)
    });

    const connectionCreateAllowed = rules.allowed('connection.create', {
      source,
      target: shape,
      hints: {
        targetParent: source.parent
      }
    });

    let connection = null;

    if (connectionCreateAllowed) {
      connection = elementFactory.createConnection(connectionCreateAllowed);

      connection.waypoints = layouter.layoutConnection(connection, {
        source,
        target: shape
      });

      connection.waypoints = connectionDocking.getCroppedWaypoints(connection, source, shape);
    }

    complexPreview.create({
      created: [
        shape,
        connection
      ].filter((element) => !isNil(element))
    });
  };

  AppendPreview.prototype.cleanUp = function() {
    this._complexPreview.cleanUp();
  };

  AppendPreview.$inject = [
    'complexPreview',
    'connectionDocking',
    'elementFactory',
    'eventBus',
    'layouter',
    'rules'
  ];

  var AppendPreviewModule = {
    __depends__: [
      AutoPlaceModule,
      ComplexPreviewModule,
      modeling
    ],
    __init__: [ 'appendPreview' ],
    appendPreview: [ 'type', AppendPreview ]
  };

  var min = Math.min,
      max = Math.max;

  function preventDefault$1(e) {
    e.preventDefault();
  }

  function stopPropagation(e) {
    e.stopPropagation();
  }

  function isTextNode(node) {
    return node.nodeType === Node.TEXT_NODE;
  }

  function toArray(nodeList) {
    return [].slice.call(nodeList);
  }

  /**
   * Initializes a container for a content editable div.
   *
   * Structure:
   *
   * container
   *   parent
   *     content
   *     resize-handle
   *
   * @param {object} options
   * @param {DOMElement} options.container The DOM element to append the contentContainer to
   * @param {Function} options.keyHandler Handler for key events
   * @param {Function} options.resizeHandler Handler for resize events
   */
  function TextBox(options) {
    this.container = options.container;

    this.parent = domify$1(
      '<div class="djs-direct-editing-parent">' +
        '<div class="djs-direct-editing-content" contenteditable="true"></div>' +
      '</div>'
    );

    this.content = query('[contenteditable]', this.parent);

    this.keyHandler = options.keyHandler || function() {};
    this.resizeHandler = options.resizeHandler || function() {};

    this.autoResize = bind$2(this.autoResize, this);
    this.handlePaste = bind$2(this.handlePaste, this);
  }


  /**
   * Create a text box with the given position, size, style and text content
   *
   * @param {Object} bounds
   * @param {Number} bounds.x absolute x position
   * @param {Number} bounds.y absolute y position
   * @param {Number} [bounds.width] fixed width value
   * @param {Number} [bounds.height] fixed height value
   * @param {Number} [bounds.maxWidth] maximum width value
   * @param {Number} [bounds.maxHeight] maximum height value
   * @param {Number} [bounds.minWidth] minimum width value
   * @param {Number} [bounds.minHeight] minimum height value
   * @param {Object} [style]
   * @param {String} value text content
   *
   * @return {DOMElement} The created content DOM element
   */
  TextBox.prototype.create = function(bounds, style, value, options) {
    var self = this;

    var parent = this.parent,
        content = this.content,
        container = this.container;

    options = this.options = options || {};

    style = this.style = style || {};

    var parentStyle = pick(style, [
      'width',
      'height',
      'maxWidth',
      'maxHeight',
      'minWidth',
      'minHeight',
      'left',
      'top',
      'backgroundColor',
      'position',
      'overflow',
      'border',
      'wordWrap',
      'textAlign',
      'outline',
      'transform'
    ]);

    assign$1(parent.style, {
      width: bounds.width + 'px',
      height: bounds.height + 'px',
      maxWidth: bounds.maxWidth + 'px',
      maxHeight: bounds.maxHeight + 'px',
      minWidth: bounds.minWidth + 'px',
      minHeight: bounds.minHeight + 'px',
      left: bounds.x + 'px',
      top: bounds.y + 'px',
      backgroundColor: '#ffffff',
      position: 'absolute',
      overflow: 'visible',
      border: '1px solid #ccc',
      boxSizing: 'border-box',
      wordWrap: 'normal',
      textAlign: 'center',
      outline: 'none'
    }, parentStyle);

    var contentStyle = pick(style, [
      'fontFamily',
      'fontSize',
      'fontWeight',
      'lineHeight',
      'padding',
      'paddingTop',
      'paddingRight',
      'paddingBottom',
      'paddingLeft'
    ]);

    assign$1(content.style, {
      boxSizing: 'border-box',
      width: '100%',
      outline: 'none',
      wordWrap: 'break-word'
    }, contentStyle);

    if (options.centerVertically) {
      assign$1(content.style, {
        position: 'absolute',
        top: '50%',
        transform: 'translate(0, -50%)'
      }, contentStyle);
    }

    content.innerText = value;

    event.bind(content, 'keydown', this.keyHandler);
    event.bind(content, 'mousedown', stopPropagation);
    event.bind(content, 'paste', self.handlePaste);

    if (options.autoResize) {
      event.bind(content, 'input', this.autoResize);
    }

    if (options.resizable) {
      this.resizable(style);
    }

    container.appendChild(parent);

    // set selection to end of text
    this.setSelection(content.lastChild, content.lastChild && content.lastChild.length);

    return parent;
  };

  /**
   * Intercept paste events to remove formatting from pasted text.
   */
  TextBox.prototype.handlePaste = function(e) {
    var options = this.options,
        style = this.style;

    e.preventDefault();

    var text;

    if (e.clipboardData) {

      // Chrome, Firefox, Safari
      text = e.clipboardData.getData('text/plain');
    } else {

      // Internet Explorer
      text = window.clipboardData.getData('Text');
    }

    this.insertText(text);

    if (options.autoResize) {
      var hasResized = this.autoResize(style);

      if (hasResized) {
        this.resizeHandler(hasResized);
      }
    }
  };

  TextBox.prototype.insertText = function(text) {
    text = normalizeEndOfLineSequences(text);

    // insertText command not supported by Internet Explorer
    var success = document.execCommand('insertText', false, text);

    if (success) {
      return;
    }

    this._insertTextIE(text);
  };

  TextBox.prototype._insertTextIE = function(text) {

    // Internet Explorer
    var range = this.getSelection(),
        startContainer = range.startContainer,
        endContainer = range.endContainer,
        startOffset = range.startOffset,
        endOffset = range.endOffset,
        commonAncestorContainer = range.commonAncestorContainer;

    var childNodesArray = toArray(commonAncestorContainer.childNodes);

    var container,
        offset;

    if (isTextNode(commonAncestorContainer)) {
      var containerTextContent = startContainer.textContent;

      startContainer.textContent =
        containerTextContent.substring(0, startOffset)
        + text
        + containerTextContent.substring(endOffset);

      container = startContainer;
      offset = startOffset + text.length;

    } else if (startContainer === this.content && endContainer === this.content) {
      var textNode = document.createTextNode(text);

      this.content.insertBefore(textNode, childNodesArray[startOffset]);

      container = textNode;
      offset = textNode.textContent.length;
    } else {
      var startContainerChildIndex = childNodesArray.indexOf(startContainer),
          endContainerChildIndex = childNodesArray.indexOf(endContainer);

      childNodesArray.forEach(function(childNode, index) {

        if (index === startContainerChildIndex) {
          childNode.textContent =
            startContainer.textContent.substring(0, startOffset) +
            text +
            endContainer.textContent.substring(endOffset);
        } else if (index > startContainerChildIndex && index <= endContainerChildIndex) {
          remove$2(childNode);
        }
      });

      container = startContainer;
      offset = startOffset + text.length;
    }

    if (container && offset !== undefined) {

      // is necessary in Internet Explorer
      setTimeout(function() {
        self.setSelection(container, offset);
      });
    }
  };

  /**
   * Automatically resize element vertically to fit its content.
   */
  TextBox.prototype.autoResize = function() {
    var parent = this.parent,
        content = this.content;

    var fontSize = parseInt(this.style.fontSize) || 12;

    if (content.scrollHeight > parent.offsetHeight ||
        content.scrollHeight < parent.offsetHeight - fontSize) {
      var bounds = parent.getBoundingClientRect();

      var height = content.scrollHeight;
      parent.style.height = height + 'px';

      this.resizeHandler({
        width: bounds.width,
        height: bounds.height,
        dx: 0,
        dy: height - bounds.height
      });
    }
  };

  /**
   * Make an element resizable by adding a resize handle.
   */
  TextBox.prototype.resizable = function() {
    var self = this;

    var parent = this.parent,
        resizeHandle = this.resizeHandle;

    var minWidth = parseInt(this.style.minWidth) || 0,
        minHeight = parseInt(this.style.minHeight) || 0,
        maxWidth = parseInt(this.style.maxWidth) || Infinity,
        maxHeight = parseInt(this.style.maxHeight) || Infinity;

    if (!resizeHandle) {
      resizeHandle = this.resizeHandle = domify$1(
        '<div class="djs-direct-editing-resize-handle"></div>'
      );

      var startX, startY, startWidth, startHeight;

      var onMouseDown = function(e) {
        preventDefault$1(e);
        stopPropagation(e);

        startX = e.clientX;
        startY = e.clientY;

        var bounds = parent.getBoundingClientRect();

        startWidth = bounds.width;
        startHeight = bounds.height;

        event.bind(document, 'mousemove', onMouseMove);
        event.bind(document, 'mouseup', onMouseUp);
      };

      var onMouseMove = function(e) {
        preventDefault$1(e);
        stopPropagation(e);

        var newWidth = min(max(startWidth + e.clientX - startX, minWidth), maxWidth);
        var newHeight = min(max(startHeight + e.clientY - startY, minHeight), maxHeight);

        parent.style.width = newWidth + 'px';
        parent.style.height = newHeight + 'px';

        self.resizeHandler({
          width: startWidth,
          height: startHeight,
          dx: e.clientX - startX,
          dy: e.clientY - startY
        });
      };

      var onMouseUp = function(e) {
        preventDefault$1(e);
        stopPropagation(e);

        event.unbind(document,'mousemove', onMouseMove, false);
        event.unbind(document, 'mouseup', onMouseUp, false);
      };

      event.bind(resizeHandle, 'mousedown', onMouseDown);
    }

    assign$1(resizeHandle.style, {
      position: 'absolute',
      bottom: '0px',
      right: '0px',
      cursor: 'nwse-resize',
      width: '0',
      height: '0',
      borderTop: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent',
      borderRight: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
      borderBottom: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
      borderLeft: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent'
    });

    parent.appendChild(resizeHandle);
  };


  /**
   * Clear content and style of the textbox, unbind listeners and
   * reset CSS style.
   */
  TextBox.prototype.destroy = function() {
    var parent = this.parent,
        content = this.content,
        resizeHandle = this.resizeHandle;

    // clear content
    content.innerText = '';

    // clear styles
    parent.removeAttribute('style');
    content.removeAttribute('style');

    event.unbind(content, 'keydown', this.keyHandler);
    event.unbind(content, 'mousedown', stopPropagation);
    event.unbind(content, 'input', this.autoResize);
    event.unbind(content, 'paste', this.handlePaste);

    if (resizeHandle) {
      resizeHandle.removeAttribute('style');

      remove$2(resizeHandle);
    }

    remove$2(parent);
  };


  TextBox.prototype.getValue = function() {
    return this.content.innerText.trim();
  };


  TextBox.prototype.getSelection = function() {
    var selection = window.getSelection(),
        range = selection.getRangeAt(0);

    return range;
  };


  TextBox.prototype.setSelection = function(container, offset) {
    var range = document.createRange();

    if (container === null) {
      range.selectNodeContents(this.content);
    } else {
      range.setStart(container, offset);
      range.setEnd(container, offset);
    }

    var selection = window.getSelection();

    selection.removeAllRanges();
    selection.addRange(range);
  };

  // helpers //////////

  function normalizeEndOfLineSequences(string) {
    return string.replace(/\r\n|\r|\n/g, '\n');
  }

  /**
   * A direct editing component that allows users
   * to edit an elements text directly in the diagram
   *
   * @param {EventBus} eventBus the event bus
   * @param {Canvas} canvas the canvas
   */
  function DirectEditing(eventBus, canvas) {

    this._eventBus = eventBus;
    this._canvas = canvas;

    this._providers = [];
    this._textbox = new TextBox({
      container: canvas.getContainer(),
      keyHandler: bind$2(this._handleKey, this),
      resizeHandler: bind$2(this._handleResize, this)
    });
  }

  DirectEditing.$inject = [ 'eventBus', 'canvas' ];


  /**
   * Register a direct editing provider

   * @param {Object} provider the provider, must expose an #activate(element) method that returns
   *                          an activation context ({ bounds: {x, y, width, height }, text }) if
   *                          direct editing is available for the given element.
   *                          Additionally the provider must expose a #update(element, value) method
   *                          to receive direct editing updates.
   */
  DirectEditing.prototype.registerProvider = function(provider) {
    this._providers.push(provider);
  };


  /**
   * Returns true if direct editing is currently active
   *
   * @param {djs.model.Base} [element]
   *
   * @return {boolean}
   */
  DirectEditing.prototype.isActive = function(element) {
    return !!(this._active && (!element || this._active.element === element));
  };


  /**
   * Cancel direct editing, if it is currently active
   */
  DirectEditing.prototype.cancel = function() {
    if (!this._active) {
      return;
    }

    this._fire('cancel');
    this.close();
  };


  DirectEditing.prototype._fire = function(event, context) {
    this._eventBus.fire('directEditing.' + event, context || { active: this._active });
  };

  DirectEditing.prototype.close = function() {
    this._textbox.destroy();

    this._fire('deactivate');

    this._active = null;

    this.resizable = undefined;

    // restoreFocus API is available from diagram-js@15.0.0
    this._canvas.restoreFocus && this._canvas.restoreFocus();
  };


  DirectEditing.prototype.complete = function() {

    var active = this._active;

    if (!active) {
      return;
    }

    var containerBounds,
        previousBounds = active.context.bounds,
        newBounds = this.$textbox.getBoundingClientRect(),
        newText = this.getValue(),
        previousText = active.context.text;

    if (
      newText !== previousText ||
      newBounds.height !== previousBounds.height ||
      newBounds.width !== previousBounds.width
    ) {
      containerBounds = this._textbox.container.getBoundingClientRect();

      active.provider.update(active.element, newText, active.context.text, {
        x: newBounds.left - containerBounds.left,
        y: newBounds.top - containerBounds.top,
        width: newBounds.width,
        height: newBounds.height
      });
    }

    this._fire('complete');

    this.close();
  };


  DirectEditing.prototype.getValue = function() {
    return this._textbox.getValue();
  };


  DirectEditing.prototype._handleKey = function(e) {

    // stop bubble
    e.stopPropagation();

    var key = e.keyCode || e.charCode;

    // ESC
    if (key === 27) {
      e.preventDefault();
      return this.cancel();
    }

    // Enter
    if (key === 13 && !e.shiftKey) {
      e.preventDefault();
      return this.complete();
    }
  };


  DirectEditing.prototype._handleResize = function(event) {
    this._fire('resize', event);
  };


  /**
   * Activate direct editing on the given element
   *
   * @param {Object} ElementDescriptor the descriptor for a shape or connection
   * @return {Boolean} true if the activation was possible
   */
  DirectEditing.prototype.activate = function(element) {
    if (this.isActive()) {
      this.cancel();
    }

    // the direct editing context
    var context;

    var provider = find$1(this._providers, function(p) {
      return ((context = p.activate(element))) ? p : null;
    });

    // check if activation took place
    if (context) {
      this.$textbox = this._textbox.create(
        context.bounds,
        context.style,
        context.text,
        context.options
      );

      this._active = {
        element: element,
        context: context,
        provider: provider
      };

      if (context.options && context.options.resizable) {
        this.resizable = true;
      }

      this._fire('activate');
    }

    return !!context;
  };

  var DirectEditingModule = {
    __depends__: [
      InteractionEventsModule$1
    ],
    __init__: [ 'directEditing' ],
    directEditing: [ 'type', DirectEditing ]
  };

  /**
   * @typedef {import('../../../model/Types').Element} Element
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget
   *
   * @typedef {(entry: PopupMenuTarget) => boolean} DifferentTypeValidator
   */

  /**
   * Returns true, if an element is from a different type
   * than a target definition. Takes into account the type,
   * event definition type and triggeredByEvent property.
   *
   * @param {Element} element
   *
   * @return {DifferentTypeValidator}
   */
  function isDifferentType(element) {

    return function(entry) {
      var target = entry.target;

      var businessObject = getBusinessObject(element),
          eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];

      var isTypeEqual = businessObject.$type === target.type;

      var isEventDefinitionEqual = (
        (eventDefinition && eventDefinition.$type) === target.eventDefinitionType
      );

      var isTriggeredByEventEqual = (

        // coherse to <false>
        !!target.triggeredByEvent === !!businessObject.triggeredByEvent
      );

      var isExpandedEqual = (
        target.isExpanded === undefined ||
        target.isExpanded === isExpanded(element)
      );

      return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;
    };
  }

  /**
   * @typedef { () => string } LabelGetter
   *
   * @typedef { {
   *   label: string | LabelGetter;
   *   actionName: string;
   *   className: string;
   *   target?: {
   *     type: string;
   *     isExpanded?: boolean;
   *     isInterrupting?: boolean;
   *     triggeredByEvent?: boolean;
   *     cancelActivity?: boolean;
   *     eventDefinitionType?: string;
   *     eventDefinitionAttrs?: Record<string, any>
   *   };
   * } } ReplaceOption
   */

  /**
   * @type {ReplaceOption[]}
   */
  var START_EVENT = [
    {
      label: 'Start event',
      actionName: 'replace-with-none-start',
      className: 'bpmn-icon-start-event-none',
      target: {
        type: 'bpmn:StartEvent'
      }
    },
    {
      label: 'Intermediate throw event',
      actionName: 'replace-with-none-intermediate-throwing',
      className: 'bpmn-icon-intermediate-event-none',
      target: {
        type: 'bpmn:IntermediateThrowEvent'
      }
    },
    {
      label: 'End event',
      actionName: 'replace-with-none-end',
      className: 'bpmn-icon-end-event-none',
      target: {
        type: 'bpmn:EndEvent'
      }
    },
    {
      label: 'Message start event',
      actionName: 'replace-with-message-start',
      className: 'bpmn-icon-start-event-message',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition'
      }
    },
    {
      label: 'Timer start event',
      actionName: 'replace-with-timer-start',
      className: 'bpmn-icon-start-event-timer',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition'
      }
    },
    {
      label: 'Conditional start event',
      actionName: 'replace-with-conditional-start',
      className: 'bpmn-icon-start-event-condition',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition'
      }
    },
    {
      label: 'Signal start event',
      actionName: 'replace-with-signal-start',
      className: 'bpmn-icon-start-event-signal',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var START_EVENT_SUB_PROCESS = [
    {
      label: 'Start event',
      actionName: 'replace-with-none-start',
      className: 'bpmn-icon-start-event-none',
      target: {
        type: 'bpmn:StartEvent'
      }
    },
    {
      label: 'Intermediate throw event',
      actionName: 'replace-with-none-intermediate-throwing',
      className: 'bpmn-icon-intermediate-event-none',
      target: {
        type: 'bpmn:IntermediateThrowEvent'
      }
    },
    {
      label: 'End event',
      actionName: 'replace-with-none-end',
      className: 'bpmn-icon-end-event-none',
      target: {
        type: 'bpmn:EndEvent'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var INTERMEDIATE_EVENT = [
    {
      label: 'Start event',
      actionName: 'replace-with-none-start',
      className: 'bpmn-icon-start-event-none',
      target: {
        type: 'bpmn:StartEvent'
      }
    },
    {
      label: 'Intermediate throw event',
      actionName: 'replace-with-none-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-none',
      target: {
        type: 'bpmn:IntermediateThrowEvent'
      }
    },
    {
      label: 'End event',
      actionName: 'replace-with-none-end',
      className: 'bpmn-icon-end-event-none',
      target: {
        type: 'bpmn:EndEvent'
      }
    },
    {
      label: 'Message intermediate catch event',
      actionName: 'replace-with-message-intermediate-catch',
      className: 'bpmn-icon-intermediate-event-catch-message',
      target: {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition'
      }
    },
    {
      label: 'Message intermediate throw event',
      actionName: 'replace-with-message-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-throw-message',
      target: {
        type: 'bpmn:IntermediateThrowEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition'
      }
    },
    {
      label: 'Timer intermediate catch event',
      actionName: 'replace-with-timer-intermediate-catch',
      className: 'bpmn-icon-intermediate-event-catch-timer',
      target: {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition'
      }
    },
    {
      label: 'Escalation intermediate throw event',
      actionName: 'replace-with-escalation-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-throw-escalation',
      target: {
        type: 'bpmn:IntermediateThrowEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition'
      }
    },
    {
      label: 'Conditional intermediate catch event',
      actionName: 'replace-with-conditional-intermediate-catch',
      className: 'bpmn-icon-intermediate-event-catch-condition',
      target: {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition'
      }
    },
    {
      label: 'Link intermediate catch event',
      actionName: 'replace-with-link-intermediate-catch',
      className: 'bpmn-icon-intermediate-event-catch-link',
      target: {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: 'bpmn:LinkEventDefinition',
        eventDefinitionAttrs: {
          name: ''
        }
      }
    },
    {
      label: 'Link intermediate throw event',
      actionName: 'replace-with-link-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-throw-link',
      target: {
        type: 'bpmn:IntermediateThrowEvent',
        eventDefinitionType: 'bpmn:LinkEventDefinition',
        eventDefinitionAttrs: {
          name: ''
        }
      }
    },
    {
      label: 'Compensation intermediate throw event',
      actionName: 'replace-with-compensation-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-throw-compensation',
      target: {
        type: 'bpmn:IntermediateThrowEvent',
        eventDefinitionType: 'bpmn:CompensateEventDefinition'
      }
    },
    {
      label: 'Signal intermediate catch event',
      actionName: 'replace-with-signal-intermediate-catch',
      className: 'bpmn-icon-intermediate-event-catch-signal',
      target: {
        type: 'bpmn:IntermediateCatchEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition'
      }
    },
    {
      label: 'Signal intermediate throw event',
      actionName: 'replace-with-signal-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-throw-signal',
      target: {
        type: 'bpmn:IntermediateThrowEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var END_EVENT = [
    {
      label: 'Start event',
      actionName: 'replace-with-none-start',
      className: 'bpmn-icon-start-event-none',
      target: {
        type: 'bpmn:StartEvent'
      }
    },
    {
      label: 'Intermediate throw event',
      actionName: 'replace-with-none-intermediate-throw',
      className: 'bpmn-icon-intermediate-event-none',
      target: {
        type: 'bpmn:IntermediateThrowEvent'
      }
    },
    {
      label: 'End event',
      actionName: 'replace-with-none-end',
      className: 'bpmn-icon-end-event-none',
      target: {
        type: 'bpmn:EndEvent'
      }
    },
    {
      label: 'Message end event',
      actionName: 'replace-with-message-end',
      className: 'bpmn-icon-end-event-message',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition'
      }
    },
    {
      label: 'Escalation end event',
      actionName: 'replace-with-escalation-end',
      className: 'bpmn-icon-end-event-escalation',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition'
      }
    },
    {
      label: 'Error end event',
      actionName: 'replace-with-error-end',
      className: 'bpmn-icon-end-event-error',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:ErrorEventDefinition'
      }
    },
    {
      label: 'Cancel end event',
      actionName: 'replace-with-cancel-end',
      className: 'bpmn-icon-end-event-cancel',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:CancelEventDefinition'
      }
    },
    {
      label: 'Compensation end event',
      actionName: 'replace-with-compensation-end',
      className: 'bpmn-icon-end-event-compensation',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:CompensateEventDefinition'
      }
    },
    {
      label: 'Signal end event',
      actionName: 'replace-with-signal-end',
      className: 'bpmn-icon-end-event-signal',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition'
      }
    },
    {
      label: 'Terminate end event',
      actionName: 'replace-with-terminate-end',
      className: 'bpmn-icon-end-event-terminate',
      target: {
        type: 'bpmn:EndEvent',
        eventDefinitionType: 'bpmn:TerminateEventDefinition'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var GATEWAY = [
    {
      label: 'Exclusive gateway',
      actionName: 'replace-with-exclusive-gateway',
      className: 'bpmn-icon-gateway-xor',
      target: {
        type: 'bpmn:ExclusiveGateway'
      }
    },
    {
      label: 'Parallel gateway',
      actionName: 'replace-with-parallel-gateway',
      className: 'bpmn-icon-gateway-parallel',
      target: {
        type: 'bpmn:ParallelGateway'
      }
    },
    {
      label: 'Inclusive gateway',
      actionName: 'replace-with-inclusive-gateway',
      className: 'bpmn-icon-gateway-or',
      target: {
        type: 'bpmn:InclusiveGateway'
      }
    },
    {
      label: 'Complex gateway',
      actionName: 'replace-with-complex-gateway',
      className: 'bpmn-icon-gateway-complex',
      target: {
        type: 'bpmn:ComplexGateway'
      }
    },
    {
      label: 'Event-based gateway',
      actionName: 'replace-with-event-based-gateway',
      className: 'bpmn-icon-gateway-eventbased',
      target: {
        type: 'bpmn:EventBasedGateway',
        instantiate: false,
        eventGatewayType: 'Exclusive'
      }
    }

    // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194
    // {
    //   label: 'Event based instantiating Gateway',
    //   actionName: 'replace-with-exclusive-event-based-gateway',
    //   className: 'bpmn-icon-exclusive-event-based',
    //   target: {
    //     type: 'bpmn:EventBasedGateway'
    //   },
    //   options: {
    //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }
    //   }
    // },
    // {
    //   label: 'Parallel Event based instantiating Gateway',
    //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',
    //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',
    //   target: {
    //     type: 'bpmn:EventBasedGateway'
    //   },
    //   options: {
    //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }
    //   }
    // }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var SUBPROCESS_EXPANDED = [
    {
      label: 'Transaction',
      actionName: 'replace-with-transaction',
      className: 'bpmn-icon-transaction',
      target: {
        type: 'bpmn:Transaction',
        isExpanded: true
      }
    },
    {
      label: 'Event sub-process',
      actionName: 'replace-with-event-subprocess',
      className: 'bpmn-icon-event-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        triggeredByEvent: true,
        isExpanded: true
      }
    },
    {
      label: 'Ad-hoc sub-process',
      actionName: 'replace-with-ad-hoc-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:AdHocSubProcess',
        isExpanded: true
      }
    },
    {
      label: 'Sub-process (collapsed)',
      actionName: 'replace-with-collapsed-subprocess',
      className: 'bpmn-icon-subprocess-collapsed',
      target: {
        type: 'bpmn:SubProcess',
        isExpanded: false
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var AD_HOC_SUBPROCESS_EXPANDED = [
    {
      label: 'Sub-process',
      actionName: 'replace-with-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        isExpanded: true
      }
    },
    {
      label: 'Transaction',
      actionName: 'replace-with-transaction',
      className: 'bpmn-icon-transaction',
      target: {
        type: 'bpmn:Transaction',
        isExpanded: true
      }
    },
    {
      label: 'Event sub-process',
      actionName: 'replace-with-event-subprocess',
      className: 'bpmn-icon-event-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        triggeredByEvent: true,
        isExpanded: true
      }
    },
    {
      label: 'Ad-hoc sub-process (collapsed)',
      actionName: 'replace-with-collapsed-ad-hoc-subprocess',
      className: 'bpmn-icon-subprocess-collapsed',
      target: {
        type: 'bpmn:AdHocSubProcess',
        isExpanded: false
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var TRANSACTION = [
    {
      label: 'Transaction',
      actionName: 'replace-with-transaction',
      className: 'bpmn-icon-transaction',
      target: {
        type: 'bpmn:Transaction',
        isExpanded: true
      }
    },
    {
      label: 'Sub-process',
      actionName: 'replace-with-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        isExpanded: true
      }
    },
    {
      label: 'Ad-hoc sub-process',
      actionName: 'replace-with-ad-hoc-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:AdHocSubProcess',
        isExpanded: true
      }
    },
    {
      label: 'Event sub-process',
      actionName: 'replace-with-event-subprocess',
      className: 'bpmn-icon-event-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        triggeredByEvent: true,
        isExpanded: true
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var EVENT_SUB_PROCESS = TRANSACTION;

  /**
   * @type {ReplaceOption[]}
   */
  var TASK = [
    {
      label: 'Task',
      actionName: 'replace-with-task',
      className: 'bpmn-icon-task',
      target: {
        type: 'bpmn:Task'
      }
    },
    {
      label: 'User task',
      actionName: 'replace-with-user-task',
      className: 'bpmn-icon-user',
      target: {
        type: 'bpmn:UserTask'
      }
    },
    {
      label: 'Service task',
      actionName: 'replace-with-service-task',
      className: 'bpmn-icon-service',
      target: {
        type: 'bpmn:ServiceTask'
      }
    },
    {
      label: 'Send task',
      actionName: 'replace-with-send-task',
      className: 'bpmn-icon-send',
      target: {
        type: 'bpmn:SendTask'
      }
    },
    {
      label: 'Receive task',
      actionName: 'replace-with-receive-task',
      className: 'bpmn-icon-receive',
      target: {
        type: 'bpmn:ReceiveTask'
      }
    },
    {
      label: 'Manual task',
      actionName: 'replace-with-manual-task',
      className: 'bpmn-icon-manual',
      target: {
        type: 'bpmn:ManualTask'
      }
    },
    {
      label: 'Business rule task',
      actionName: 'replace-with-rule-task',
      className: 'bpmn-icon-business-rule',
      target: {
        type: 'bpmn:BusinessRuleTask'
      }
    },
    {
      label: 'Script task',
      actionName: 'replace-with-script-task',
      className: 'bpmn-icon-script',
      target: {
        type: 'bpmn:ScriptTask'
      }
    },
    {
      label: 'Call activity',
      actionName: 'replace-with-call-activity',
      className: 'bpmn-icon-call-activity',
      target: {
        type: 'bpmn:CallActivity'
      }
    },
    {
      label: 'Sub-process (collapsed)',
      actionName: 'replace-with-collapsed-subprocess',
      className: 'bpmn-icon-subprocess-collapsed',
      target: {
        type: 'bpmn:SubProcess',
        isExpanded: false
      }
    },
    {
      label: 'Sub-process (expanded)',
      actionName: 'replace-with-expanded-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:SubProcess',
        isExpanded: true
      }
    },
    {
      label: 'Ad-hoc sub-process (collapsed)',
      actionName: 'replace-with-collapsed-ad-hoc-subprocess',
      className: 'bpmn-icon-subprocess-collapsed',
      target: {
        type: 'bpmn:AdHocSubProcess',
        isExpanded: false
      }
    },
    {
      label: 'Ad-hoc sub-process (expanded)',
      actionName: 'replace-with-ad-hoc-subprocess',
      className: 'bpmn-icon-subprocess-expanded',
      target: {
        type: 'bpmn:AdHocSubProcess',
        isExpanded: true
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var DATA_OBJECT_REFERENCE = [
    {
      label: 'Data store reference',
      actionName: 'replace-with-data-store-reference',
      className: 'bpmn-icon-data-store',
      target: {
        type: 'bpmn:DataStoreReference'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var DATA_STORE_REFERENCE = [
    {
      label: 'Data object reference',
      actionName: 'replace-with-data-object-reference',
      className: 'bpmn-icon-data-object',
      target: {
        type: 'bpmn:DataObjectReference'
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var BOUNDARY_EVENT = [
    {
      label: 'Message boundary event',
      actionName: 'replace-with-message-boundary',
      className: 'bpmn-icon-intermediate-event-catch-message',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Timer boundary event',
      actionName: 'replace-with-timer-boundary',
      className: 'bpmn-icon-intermediate-event-catch-timer',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Escalation boundary event',
      actionName: 'replace-with-escalation-boundary',
      className: 'bpmn-icon-intermediate-event-catch-escalation',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Conditional boundary event',
      actionName: 'replace-with-conditional-boundary',
      className: 'bpmn-icon-intermediate-event-catch-condition',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Error boundary event',
      actionName: 'replace-with-error-boundary',
      className: 'bpmn-icon-intermediate-event-catch-error',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:ErrorEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Cancel boundary event',
      actionName: 'replace-with-cancel-boundary',
      className: 'bpmn-icon-intermediate-event-catch-cancel',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:CancelEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Signal boundary event',
      actionName: 'replace-with-signal-boundary',
      className: 'bpmn-icon-intermediate-event-catch-signal',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Compensation boundary event',
      actionName: 'replace-with-compensation-boundary',
      className: 'bpmn-icon-intermediate-event-catch-compensation',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:CompensateEventDefinition',
        cancelActivity: true
      }
    },
    {
      label: 'Message boundary event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-message-boundary',
      className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition',
        cancelActivity: false
      }
    },
    {
      label: 'Timer boundary event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-timer-boundary',
      className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition',
        cancelActivity: false
      }
    },
    {
      label: 'Escalation boundary event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-escalation-boundary',
      className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition',
        cancelActivity: false
      }
    },
    {
      label: 'Conditional boundary event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-conditional-boundary',
      className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition',
        cancelActivity: false
      }
    },
    {
      label: 'Signal boundary event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-signal-boundary',
      className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',
      target: {
        type: 'bpmn:BoundaryEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition',
        cancelActivity: false
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var EVENT_SUB_PROCESS_START_EVENT = [
    {
      label: 'Message start event',
      actionName: 'replace-with-message-start',
      className: 'bpmn-icon-start-event-message',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Timer start event',
      actionName: 'replace-with-timer-start',
      className: 'bpmn-icon-start-event-timer',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Conditional start event',
      actionName: 'replace-with-conditional-start',
      className: 'bpmn-icon-start-event-condition',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Signal start event',
      actionName: 'replace-with-signal-start',
      className: 'bpmn-icon-start-event-signal',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Error start event',
      actionName: 'replace-with-error-start',
      className: 'bpmn-icon-start-event-error',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:ErrorEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Escalation start event',
      actionName: 'replace-with-escalation-start',
      className: 'bpmn-icon-start-event-escalation',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Compensation start event',
      actionName: 'replace-with-compensation-start',
      className: 'bpmn-icon-start-event-compensation',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:CompensateEventDefinition',
        isInterrupting: true
      }
    },
    {
      label: 'Message start event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-message-start',
      className: 'bpmn-icon-start-event-non-interrupting-message',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:MessageEventDefinition',
        isInterrupting: false
      }
    },
    {
      label: 'Timer start event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-timer-start',
      className: 'bpmn-icon-start-event-non-interrupting-timer',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:TimerEventDefinition',
        isInterrupting: false
      }
    },
    {
      label: 'Conditional start event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-conditional-start',
      className: 'bpmn-icon-start-event-non-interrupting-condition',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:ConditionalEventDefinition',
        isInterrupting: false
      }
    },
    {
      label: 'Signal start event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-signal-start',
      className: 'bpmn-icon-start-event-non-interrupting-signal',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:SignalEventDefinition',
        isInterrupting: false
      }
    },
    {
      label: 'Escalation start event (non-interrupting)',
      actionName: 'replace-with-non-interrupting-escalation-start',
      className: 'bpmn-icon-start-event-non-interrupting-escalation',
      target: {
        type: 'bpmn:StartEvent',
        eventDefinitionType: 'bpmn:EscalationEventDefinition',
        isInterrupting: false
      }
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var SEQUENCE_FLOW = [
    {
      label: 'Sequence flow',
      actionName: 'replace-with-sequence-flow',
      className: 'bpmn-icon-connection'
    },
    {
      label: 'Default flow',
      actionName: 'replace-with-default-flow',
      className: 'bpmn-icon-default-flow'
    },
    {
      label: 'Conditional flow',
      actionName: 'replace-with-conditional-flow',
      className: 'bpmn-icon-conditional-flow'
    }
  ];

  /**
   * @type {ReplaceOption[]}
   */
  var PARTICIPANT = [
    {
      label: 'Expanded pool/participant',
      actionName: 'replace-with-expanded-pool',
      className: 'bpmn-icon-participant',
      target: {
        type: 'bpmn:Participant',
        isExpanded: true
      }
    },
    {
      label: function(element) {
        var label = 'Empty pool/participant';

        if (element.children && element.children.length) {
          label += ' (removes content)';
        }

        return label;
      },
      actionName: 'replace-with-collapsed-pool',

      // TODO(@janstuemmel): maybe design new icon
      className: 'bpmn-icon-lane',
      target: {
        type: 'bpmn:Participant',
        isExpanded: false
      }
    }
  ];

  /**
   * @type {{ [key: string]: ReplaceOption[]}}
   */
  var TYPED_EVENT = {
    'bpmn:MessageEventDefinition': [
      {
        label: 'Message start event',
        actionName: 'replace-with-message-start',
        className: 'bpmn-icon-start-event-message',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:MessageEventDefinition'
        }
      },
      {
        label: 'Message intermediate catch event',
        actionName: 'replace-with-message-intermediate-catch',
        className: 'bpmn-icon-intermediate-event-catch-message',
        target: {
          type: 'bpmn:IntermediateCatchEvent',
          eventDefinitionType: 'bpmn:MessageEventDefinition'
        }
      },
      {
        label: 'Message intermediate throw event',
        actionName: 'replace-with-message-intermediate-throw',
        className: 'bpmn-icon-intermediate-event-throw-message',
        target: {
          type: 'bpmn:IntermediateThrowEvent',
          eventDefinitionType: 'bpmn:MessageEventDefinition'
        }
      },
      {
        label: 'Message end event',
        actionName: 'replace-with-message-end',
        className: 'bpmn-icon-end-event-message',
        target: {
          type: 'bpmn:EndEvent',
          eventDefinitionType: 'bpmn:MessageEventDefinition'
        }
      }
    ],
    'bpmn:TimerEventDefinition': [
      {
        label: 'Timer start event',
        actionName: 'replace-with-timer-start',
        className: 'bpmn-icon-start-event-timer',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:TimerEventDefinition'
        }
      },
      {
        label: 'Timer intermediate catch event',
        actionName: 'replace-with-timer-intermediate-catch',
        className: 'bpmn-icon-intermediate-event-catch-timer',
        target: {
          type: 'bpmn:IntermediateCatchEvent',
          eventDefinitionType: 'bpmn:TimerEventDefinition'
        }
      }
    ],
    'bpmn:ConditionalEventDefinition': [
      {
        label: 'Conditional start event',
        actionName: 'replace-with-conditional-start',
        className: 'bpmn-icon-start-event-condition',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:ConditionalEventDefinition'
        }
      },
      {
        label: 'Conditional intermediate catch event',
        actionName: 'replace-with-conditional-intermediate-catch',
        className: 'bpmn-icon-intermediate-event-catch-condition',
        target: {
          type: 'bpmn:IntermediateCatchEvent',
          eventDefinitionType: 'bpmn:ConditionalEventDefinition'
        }
      }
    ],
    'bpmn:SignalEventDefinition': [
      {
        label: 'Signal start event',
        actionName: 'replace-with-signal-start',
        className: 'bpmn-icon-start-event-signal',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:SignalEventDefinition'
        }
      },
      {
        label: 'Signal intermediate catch event',
        actionName: 'replace-with-signal-intermediate-catch',
        className: 'bpmn-icon-intermediate-event-catch-signal',
        target: {
          type: 'bpmn:IntermediateCatchEvent',
          eventDefinitionType: 'bpmn:SignalEventDefinition'
        }
      },
      {
        label: 'Signal intermediate throw event',
        actionName: 'replace-with-signal-intermediate-throw',
        className: 'bpmn-icon-intermediate-event-throw-signal',
        target: {
          type: 'bpmn:IntermediateThrowEvent',
          eventDefinitionType: 'bpmn:SignalEventDefinition'
        }
      },
      {
        label: 'Signal end event',
        actionName: 'replace-with-signal-end',
        className: 'bpmn-icon-end-event-signal',
        target: {
          type: 'bpmn:EndEvent',
          eventDefinitionType: 'bpmn:SignalEventDefinition'
        }
      }
    ],
    'bpmn:ErrorEventDefinition': [
      {
        label: 'Error start event',
        actionName: 'replace-with-error-start',
        className: 'bpmn-icon-start-event-error',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:ErrorEventDefinition'
        }
      },
      {
        label: 'Error end event',
        actionName: 'replace-with-error-end',
        className: 'bpmn-icon-end-event-error',
        target: {
          type: 'bpmn:EndEvent',
          eventDefinitionType: 'bpmn:ErrorEventDefinition'
        }
      }
    ],
    'bpmn:EscalationEventDefinition': [
      {
        label: 'Escalation start event',
        actionName: 'replace-with-escalation-start',
        className: 'bpmn-icon-start-event-escalation',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:EscalationEventDefinition'
        }
      },
      {
        label: 'Escalation intermediate throw event',
        actionName: 'replace-with-escalation-intermediate-throw',
        className: 'bpmn-icon-intermediate-event-throw-escalation',
        target: {
          type: 'bpmn:IntermediateThrowEvent',
          eventDefinitionType: 'bpmn:EscalationEventDefinition'
        }
      },
      {
        label: 'Escalation end event',
        actionName: 'replace-with-escalation-end',
        className: 'bpmn-icon-end-event-escalation',
        target: {
          type: 'bpmn:EndEvent',
          eventDefinitionType: 'bpmn:EscalationEventDefinition'
        }
      }
    ],
    'bpmn:CompensateEventDefinition': [
      {
        label: 'Compensation start event',
        actionName: 'replace-with-compensation-start',
        className: 'bpmn-icon-start-event-compensation',
        target: {
          type: 'bpmn:StartEvent',
          eventDefinitionType: 'bpmn:CompensateEventDefinition'
        }
      },
      {
        label: 'Compensation intermediate throw event',
        actionName: 'replace-with-compensation-intermediate-throw',
        className: 'bpmn-icon-intermediate-event-throw-compensation',
        target: {
          type: 'bpmn:IntermediateThrowEvent',
          eventDefinitionType: 'bpmn:CompensateEventDefinition'
        }
      },
      {
        label: 'Compensation end event',
        actionName: 'replace-with-compensation-end',
        className: 'bpmn-icon-end-event-compensation',
        target: {
          type: 'bpmn:EndEvent',
          eventDefinitionType: 'bpmn:CompensateEventDefinition'
        }
      }
    ]
  };

  var Icons = {
    'start-event-non-interrupting': `
  <svg viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg">
    <g transform="translate(0 995.64)">
      <path d="m1899 28.357c21.545 567.43-598.38 1023.5-1133.6 835.92-548.09-147.21-801.57-873.95-463.59-1330 302.62-480.3 1071.7-507.54 1407.6-49.847 122.14 153.12 190.07 348.07 189.59 543.91z" fill="none" stroke="currentColor" stroke-dasharray="418.310422, 361.2328165" stroke-linecap="round" stroke-width="100"/>
    </g>
  </svg>`,
    'intermediate-event-non-interrupting': `
  <svg viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg">
     <g transform="translate(0 995.64)" fill="none" stroke="currentColor" stroke-linecap="round">
        <circle cx="1024" cy="28.357" r="875" stroke-dasharray="418.310422, 361.2328165" stroke-width="100"/>
        <circle cx="1024" cy="28.357" r="685" stroke-dasharray="348.31044857,261.23283643" stroke-dashoffset="500" stroke-width="100"/>
     </g>
  </svg>`
  };

  /**
   * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../replace/BpmnReplace').default} BpmnReplace
   * @typedef {import('diagram-js/lib/features/Rules').default} Rules
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   * @typedef {import('../copy-paste/ModdleCopy').default} ModdleCopy
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Moddle} Moddle
   *
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').PopupMenuEntries} PopupMenuEntries
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').PopupMenuEntry} PopupMenuEntry
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').PopupMenuEntryAction} PopupMenuEntryAction
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').PopupMenuHeaderEntries} PopupMenuHeaderEntries
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').default} PopupMenuProvider
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget
   *
   * @typedef {import('./ReplaceOptions').ReplaceOption} ReplaceOption
   */

  /**
   * A BPMN-specific popup menu provider.
   *
   * @implements {PopupMenuProvider}
   *
   * @param {BpmnFactory} bpmnFactory
   * @param {PopupMenu} popupMenu
   * @param {Modeling} modeling
   * @param {Moddle} moddle
   * @param {BpmnReplace} bpmnReplace
   * @param {Rules} rules
   * @param {Translate} translate
   * @param {ModdleCopy} moddleCopy
   */
  function ReplaceMenuProvider(
      bpmnFactory, popupMenu, modeling, moddle,
      bpmnReplace, rules, translate, moddleCopy) {

    this._bpmnFactory = bpmnFactory;
    this._popupMenu = popupMenu;
    this._modeling = modeling;
    this._moddle = moddle;
    this._bpmnReplace = bpmnReplace;
    this._rules = rules;
    this._translate = translate;
    this._moddleCopy = moddleCopy;

    this._register();
  }

  ReplaceMenuProvider.$inject = [
    'bpmnFactory',
    'popupMenu',
    'modeling',
    'moddle',
    'bpmnReplace',
    'rules',
    'translate',
    'moddleCopy'
  ];

  ReplaceMenuProvider.prototype._register = function() {
    this._popupMenu.registerProvider('bpmn-replace', this);
  };

  /**
   * @param {PopupMenuTarget} target
   *
   * @return {PopupMenuEntries}
   */
  ReplaceMenuProvider.prototype.getPopupMenuEntries = function(target) {

    var businessObject = target.businessObject;

    var rules = this._rules;

    var sameTypeEventOptions = [],
        eventDefinitionType;

    var filteredReplaceOptions = [];

    if (isArray$3(target) || !rules.allowed('shape.replace', { element: target })) {
      return {};
    }

    var differentType = isDifferentType(target);

    if (is$1(businessObject, 'bpmn:DataObjectReference')) {
      return this._createEntries(target, DATA_OBJECT_REFERENCE);
    }

    if (is$1(businessObject, 'bpmn:DataStoreReference') && !is$1(target.parent, 'bpmn:Collaboration')) {
      return this._createEntries(target, DATA_STORE_REFERENCE);
    }

    // typed start, intermediate, and end events
    if (is$1(businessObject, 'bpmn:Event') && !is$1(businessObject, 'bpmn:BoundaryEvent')) {
      eventDefinitionType = businessObject.get('eventDefinitions')[0]?.$type;

      sameTypeEventOptions = TYPED_EVENT[eventDefinitionType] || [];

      if (!isEventSubProcess(businessObject.$parent) && is$1(businessObject.$parent, 'bpmn:SubProcess')) {
        sameTypeEventOptions = filter(sameTypeEventOptions, function(option) {
          return option.target.type !== 'bpmn:StartEvent';
        });
      }
    }

    // start events outside sub processes
    if (is$1(businessObject, 'bpmn:StartEvent') && !is$1(businessObject.$parent, 'bpmn:SubProcess')) {

      filteredReplaceOptions = filter(
        START_EVENT.concat(sameTypeEventOptions),
        differentType
      );

      return this._createEntries(target, filteredReplaceOptions);
    }

    // expanded/collapsed pools
    if (is$1(businessObject, 'bpmn:Participant')) {

      filteredReplaceOptions = filter(PARTICIPANT, function(replaceOption) {
        return isExpanded(target) !== replaceOption.target.isExpanded;
      });

      return this._createEntries(target, filteredReplaceOptions);
    }

    // start events inside event sub processes
    if (is$1(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {
      filteredReplaceOptions = filter(
        EVENT_SUB_PROCESS_START_EVENT.concat(sameTypeEventOptions), function(replaceOption) {

          var target = replaceOption.target;

          var isInterrupting = target.isInterrupting !== false;

          var isInterruptingEqual = businessObject.isInterrupting === isInterrupting;

          // filters elements which types and event definition are equal but have have different interrupting types
          return differentType(replaceOption) || !differentType(replaceOption) && !isInterruptingEqual;

        }
      );

      return this._createEntries(target, filteredReplaceOptions);
    }

    // start events inside sub processes
    if (is$1(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)
        && is$1(businessObject.$parent, 'bpmn:SubProcess')) {
      filteredReplaceOptions = filter(
        START_EVENT_SUB_PROCESS.concat(sameTypeEventOptions),
        differentType
      );

      return this._createEntries(target, filteredReplaceOptions);
    }

    // end events
    if (is$1(businessObject, 'bpmn:EndEvent')) {

      filteredReplaceOptions = filter(END_EVENT.concat(sameTypeEventOptions), function(replaceOption) {
        var target = replaceOption.target;

        // hide cancel end events outside transactions
        if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is$1(businessObject.$parent, 'bpmn:Transaction')) {
          return false;
        }

        return differentType(replaceOption);
      });

      return this._createEntries(target, filteredReplaceOptions);
    }

    // boundary events
    if (is$1(businessObject, 'bpmn:BoundaryEvent')) {

      filteredReplaceOptions = filter(BOUNDARY_EVENT, function(replaceOption) {

        var target = replaceOption.target;

        if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' &&
           !is$1(businessObject.attachedToRef, 'bpmn:Transaction')) {
          return false;
        }
        var cancelActivity = target.cancelActivity !== false;

        var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;

        return differentType(replaceOption) || !differentType(replaceOption) && !isCancelActivityEqual;
      });

      return this._createEntries(target, filteredReplaceOptions);
    }

    // intermediate events
    if (is$1(businessObject, 'bpmn:IntermediateCatchEvent') ||
        is$1(businessObject, 'bpmn:IntermediateThrowEvent')) {

      filteredReplaceOptions = filter(
        INTERMEDIATE_EVENT.concat(sameTypeEventOptions),
        differentType
      );

      return this._createEntries(target, filteredReplaceOptions);
    }

    // gateways
    if (is$1(businessObject, 'bpmn:Gateway')) {

      filteredReplaceOptions = filter(GATEWAY, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    // transactions
    if (is$1(businessObject, 'bpmn:Transaction')) {

      filteredReplaceOptions = filter(TRANSACTION, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    // expanded event sub processes
    if (isEventSubProcess(businessObject) && isExpanded(target)) {

      filteredReplaceOptions = filter(EVENT_SUB_PROCESS, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    // expanded ad hoc sub processes
    if (is$1(businessObject, 'bpmn:AdHocSubProcess') && isExpanded(target)) {

      filteredReplaceOptions = filter(AD_HOC_SUBPROCESS_EXPANDED, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    // expanded sub processes
    if (is$1(businessObject, 'bpmn:SubProcess') && isExpanded(target)) {

      filteredReplaceOptions = filter(SUBPROCESS_EXPANDED, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    // collapsed sub process or collapsed ad hoc sub process
    if (is$1(businessObject, 'bpmn:SubProcess') && !isExpanded(target)) {

      filteredReplaceOptions = filter(TASK, function(replaceOption) {

        var isTargetSameType = replaceOption.target.type === target.type;
        var isTargetExpanded = replaceOption.target.isExpanded === true;

        // Collapsed subprocess cannot be replaced with itself or expanded subprocess of different type.
        return isTargetSameType === isTargetExpanded;
      });

      return this._createEntries(target, filteredReplaceOptions);
    }

    // sequence flows
    if (is$1(businessObject, 'bpmn:SequenceFlow')) {
      return this._createSequenceFlowEntries(target, SEQUENCE_FLOW);
    }

    // flow nodes
    if (is$1(businessObject, 'bpmn:FlowNode')) {
      filteredReplaceOptions = filter(TASK, differentType);

      return this._createEntries(target, filteredReplaceOptions);
    }

    return {};
  };

  /**
   * @param {PopupMenuTarget} target
   *
   * @return {PopupMenuHeaderEntries}
   */
  ReplaceMenuProvider.prototype.getPopupMenuHeaderEntries = function(target) {

    var headerEntries = {};

    if (is$1(target, 'bpmn:Activity') && !isEventSubProcess(target)) {
      headerEntries = {
        ...headerEntries,
        ...this._getLoopCharacteristicsHeaderEntries(target)
      };
    }

    if (is$1(target, 'bpmn:DataObjectReference')) {
      headerEntries = {
        ...headerEntries,
        ...this._getCollectionHeaderEntries(target)
      };
    }

    if (is$1(target, 'bpmn:Participant')) {
      headerEntries = {
        ...headerEntries,
        ...this._getParticipantMultiplicityHeaderEntries(target)
      };
    }

    if (canBeNonInterrupting(target)) {
      headerEntries = {
        ...headerEntries,
        ...this._getNonInterruptingHeaderEntries(target)
      };
    }

    return headerEntries;
  };


  /**
   * Create popup menu entries for the given target.
   *
   * @param  {PopupMenuTarget} target
   * @param  {ReplaceOption[]} replaceOptions
   *
   * @return {PopupMenuEntries}
   */
  ReplaceMenuProvider.prototype._createEntries = function(target, replaceOptions) {
    var entries = {};

    var self = this;

    forEach$1(replaceOptions, function(replaceOption) {
      entries[ replaceOption.actionName ] = self._createEntry(replaceOption, target);
    });

    return entries;
  };

  /**
   * Creates popup menu entries for the given sequence flow.
   *
   * @param  {PopupMenuTarget} target
   * @param  {ReplaceOption[]} replaceOptions
   *
   * @return {PopupMenuEntries}
   */
  ReplaceMenuProvider.prototype._createSequenceFlowEntries = function(target, replaceOptions) {

    var businessObject = getBusinessObject(target);

    var entries = {};

    var modeling = this._modeling,
        moddle = this._moddle;

    var self = this;

    forEach$1(replaceOptions, function(replaceOption) {

      switch (replaceOption.actionName) {
      case 'replace-with-default-flow':
        if (businessObject.sourceRef.default !== businessObject &&
              (is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||
               is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||
               is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||
               is$1(businessObject.sourceRef, 'bpmn:Activity'))) {

          entries = {
            ...entries,
            [ replaceOption.actionName ]: self._createEntry(replaceOption, target, function() {
              modeling.updateProperties(target.source, { default: businessObject });
            })
          };
        }
        break;
      case 'replace-with-conditional-flow':
        if (!businessObject.conditionExpression && is$1(businessObject.sourceRef, 'bpmn:Activity')) {

          entries = {
            ...entries,
            [ replaceOption.actionName ]: self._createEntry(replaceOption, target, function() {
              var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });

              modeling.updateProperties(target, { conditionExpression: conditionExpression });
            })
          };
        }
        break;
      default:

        // conditional flow -> sequence flow
        if (is$1(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {
          entries = {
            ...entries,
            [ replaceOption.actionName ]: self._createEntry(replaceOption, target, function() {
              modeling.updateProperties(target, { conditionExpression: undefined });
            })
          };
        }

        // default flow -> sequence flow
        if ((is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||
             is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||
             is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||
             is$1(businessObject.sourceRef, 'bpmn:Activity')) &&
             businessObject.sourceRef.default === businessObject) {
          entries = {
            ...entries,
            [ replaceOption.actionName ]: self._createEntry(replaceOption, target, function() {
              modeling.updateProperties(target.source, { default: undefined });
            })
          };
        }
      }
    });

    return entries;
  };

  /**
   * Create a popup menu entry for the given replace option.
   *
   * @param  {ReplaceOption} replaceOption
   * @param  {PopupMenuTarget} target
   * @param  {PopupMenuEntryAction} [action]
   *
   * @return {PopupMenuEntry}
   */
  ReplaceMenuProvider.prototype._createEntry = function(replaceOption, target, action) {
    var translate = this._translate;
    var replaceElement = this._bpmnReplace.replaceElement;

    var replaceAction = function() {
      return replaceElement(target, replaceOption.target);
    };

    var label = replaceOption.label;
    if (label && typeof label === 'function') {
      label = label(target);
    }

    action = action || replaceAction;

    return {
      label: translate(label),
      className: replaceOption.className,
      action: action
    };
  };

  /**
   * Get popup menu header entries for the loop characteristics of the given BPMN element.
   *
   * @param  {PopupMenuTarget} target
   *
   * @return {PopupMenuHeaderEntries}
   */
  ReplaceMenuProvider.prototype._getLoopCharacteristicsHeaderEntries = function(target) {

    var self = this;
    var translate = this._translate;

    function toggleLoopCharacteristics(event, entry) {
      if (entry.active) {
        self._modeling.updateProperties(target, { loopCharacteristics: undefined });

        return;
      }

      var loopCharacteristics = target.businessObject.get('loopCharacteristics');

      if (loopCharacteristics && is$1(loopCharacteristics, entry.options.loopCharacteristics)) {
        self._modeling.updateModdleProperties(target, loopCharacteristics, { isSequential: entry.options.isSequential });
      } else {
        loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics, {
          isSequential: entry.options.isSequential
        });

        self._modeling.updateProperties(target, { loopCharacteristics: loopCharacteristics });
      }
    }

    var businessObject = getBusinessObject(target),
        loopCharacteristics = businessObject.loopCharacteristics;

    var isSequential,
        isLoop,
        isParallel;

    if (loopCharacteristics) {
      isSequential = loopCharacteristics.isSequential;
      isLoop = loopCharacteristics.isSequential === undefined;
      isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;
    }


    return {
      'toggle-parallel-mi' : {
        className: 'bpmn-icon-parallel-mi-marker',
        title: translate('Parallel multi-instance'),
        active: isParallel,
        action: toggleLoopCharacteristics,
        options: {
          loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',
          isSequential: false
        }
      },
      'toggle-sequential-mi': {
        className: 'bpmn-icon-sequential-mi-marker',
        title: translate('Sequential multi-instance'),
        active: isSequential,
        action: toggleLoopCharacteristics,
        options: {
          loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',
          isSequential: true
        }
      },
      'toggle-loop': {
        className: 'bpmn-icon-loop-marker',
        title: translate('Loop'),
        active: isLoop,
        action: toggleLoopCharacteristics,
        options: {
          loopCharacteristics: 'bpmn:StandardLoopCharacteristics'
        }
      }
    };
  };

  /**
   * Get popup menu header entries for the collection property of the given BPMN element.
   *
   * @param  {PopupMenuTarget} target
   *
   * @return {PopupMenuHeaderEntries}
   */
  ReplaceMenuProvider.prototype._getCollectionHeaderEntries = function(target) {

    var self = this;
    var translate = this._translate;

    var dataObject = target.businessObject.dataObjectRef;

    if (!dataObject) {
      return {};
    }

    function toggleIsCollection(event, entry) {
      self._modeling.updateModdleProperties(
        target,
        dataObject,
        { isCollection: !entry.active });
    }

    var isCollection = dataObject.isCollection;

    return {
      'toggle-is-collection': {
        className: 'bpmn-icon-parallel-mi-marker',
        title: translate('Collection'),
        active: isCollection,
        action: toggleIsCollection,
      }
    };
  };

  /**
   * Get popup menu header entries for the participant multiplicity property of the given BPMN element.
   *
   * @param  {PopupMenuTarget} target
   *
   * @return {PopupMenuHeaderEntries}
   */
  ReplaceMenuProvider.prototype._getParticipantMultiplicityHeaderEntries = function(target) {

    var self = this;
    var bpmnFactory = this._bpmnFactory;
    var translate = this._translate;

    function toggleParticipantMultiplicity(event, entry) {
      var isActive = entry.active;
      var participantMultiplicity;

      if (!isActive) {
        participantMultiplicity = bpmnFactory.create('bpmn:ParticipantMultiplicity');
      }

      self._modeling.updateProperties(
        target,
        { participantMultiplicity: participantMultiplicity });
    }

    var participantMultiplicity = target.businessObject.participantMultiplicity;

    return {
      'toggle-participant-multiplicity': {
        className: 'bpmn-icon-parallel-mi-marker',
        title: translate('Participant multiplicity'),
        active: !!participantMultiplicity,
        action: toggleParticipantMultiplicity,
      }
    };
  };

  ReplaceMenuProvider.prototype._getNonInterruptingHeaderEntries = function(element) {
    const translate = this._translate;
    const businessObject = getBusinessObject(element);
    const self = this;

    const interruptingProperty = getInterruptingProperty(element);

    const icon = is$1(element, 'bpmn:BoundaryEvent') ? Icons['intermediate-event-non-interrupting'] : Icons['start-event-non-interrupting'];

    const isNonInterrupting = !businessObject[interruptingProperty];

    return {
      'toggle-non-interrupting': {
        imageHtml: icon,
        title: translate('Toggle non-interrupting'),
        active: isNonInterrupting,
        action: function() {
          self._modeling.updateProperties(element, {
            [interruptingProperty]: !!isNonInterrupting
          });
        }
      }
    };
  };

  var PopupMenuModule = {
    __depends__: [
      PopupMenuModule$1,
      ReplaceModule,
      AutoPlaceModule
    ],
    __init__: [
      'replaceMenuProvider'
    ],
    replaceMenuProvider: [ 'type', ReplaceMenuProvider ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPad').default} ContextPad
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../modeling/ElementFactory').default} ElementFactory
   * @typedef {import('../append-preview/AppendPreview').default} AppendPreview
   * @typedef {import('diagram-js/lib/features/connect/Connect').default} Connect
   * @typedef {import('diagram-js/lib/features/create/Create').default} Create
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu
   * @typedef {import('diagram-js/lib/features/canvas/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').ModdleElement} ModdleElement
   *
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').default<Element>} BaseContextPadProvider
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').ContextPadEntries} ContextPadEntries
   * @typedef {import('diagram-js/lib/features/context-pad/ContextPadProvider').ContextPadEntry} ContextPadEntry
   *
   * @typedef { { autoPlace?: boolean; } } ContextPadConfig
   */

  /**
   * BPMN-specific context pad provider.
   *
   * @implements {BaseContextPadProvider}
   *
   * @param {ContextPadConfig} config
   * @param {Injector} injector
   * @param {EventBus} eventBus
   * @param {ContextPad} contextPad
   * @param {Modeling} modeling
   * @param {ElementFactory} elementFactory
   * @param {Connect} connect
   * @param {Create} create
   * @param {PopupMenu} popupMenu
   * @param {Canvas} canvas
   * @param {Rules} rules
   * @param {Translate} translate
   * @param {AppendPreview} appendPreview
   */
  function ContextPadProvider(
      config, injector, eventBus,
      contextPad, modeling, elementFactory,
      connect, create, popupMenu,
      canvas, rules, translate, appendPreview) {

    config = config || {};

    contextPad.registerProvider(this);

    this._contextPad = contextPad;

    this._modeling = modeling;

    this._elementFactory = elementFactory;
    this._connect = connect;
    this._create = create;
    this._popupMenu = popupMenu;
    this._canvas = canvas;
    this._rules = rules;
    this._translate = translate;
    this._eventBus = eventBus;
    this._appendPreview = appendPreview;

    if (config.autoPlace !== false) {
      this._autoPlace = injector.get('autoPlace', false);
    }

    eventBus.on('create.end', 250, function(event) {
      var context = event.context,
          shape = context.shape;

      if (!hasPrimaryModifier(event) || !contextPad.isOpen(shape)) {
        return;
      }

      var entries = contextPad.getEntries(shape);

      if (entries.replace) {
        entries.replace.action.click(event, shape);
      }
    });

    eventBus.on('contextPad.close', function() {
      appendPreview.cleanUp();
    });
  }

  ContextPadProvider.$inject = [
    'config.contextPad',
    'injector',
    'eventBus',
    'contextPad',
    'modeling',
    'elementFactory',
    'connect',
    'create',
    'popupMenu',
    'canvas',
    'rules',
    'translate',
    'appendPreview'
  ];

  /**
   * @param {Element[]} elements
   *
   * @return {ContextPadEntries}
   */
  ContextPadProvider.prototype.getMultiElementContextPadEntries = function(elements) {
    var modeling = this._modeling;

    var actions = {};

    if (this._isDeleteAllowed(elements)) {
      assign$1(actions, {
        'delete': {
          group: 'edit',
          className: 'bpmn-icon-trash',
          title: this._translate('Delete'),
          action: {
            click: function(event, elements) {
              modeling.removeElements(elements.slice());
            }
          }
        }
      });
    }

    return actions;
  };

  /**
   * @param {Element[]} elements
   *
   * @return {boolean}
   */
  ContextPadProvider.prototype._isDeleteAllowed = function(elements) {

    var baseAllowed = this._rules.allowed('elements.delete', {
      elements: elements
    });

    if (isArray$3(baseAllowed)) {
      return every(elements, el => baseAllowed.includes(el));
    }

    return baseAllowed;
  };

  /**
   * @param {Element} element
   *
   * @return {ContextPadEntries}
   */
  ContextPadProvider.prototype.getContextPadEntries = function(element) {
    var contextPad = this._contextPad,
        modeling = this._modeling,
        elementFactory = this._elementFactory,
        connect = this._connect,
        create = this._create,
        popupMenu = this._popupMenu,
        autoPlace = this._autoPlace,
        translate = this._translate,
        appendPreview = this._appendPreview;

    var actions = {};

    if (element.type === 'label') {
      if (this._isDeleteAllowed([ element ])) {
        assign$1(actions, deleteAction());
      }

      return actions;
    }

    var businessObject = element.businessObject;

    function startConnect(event, element) {
      connect.start(event, element);
    }

    function removeElement(e, element) {
      modeling.removeElements([ element ]);
    }

    function deleteAction() {
      return {
        'delete': {
          group: 'edit',
          className: 'bpmn-icon-trash',
          title: translate('Delete'),
          action: {
            click: removeElement
          }
        }
      };
    }

    function getReplaceMenuPosition(element) {

      var Y_OFFSET = 5;

      var pad = contextPad.getPad(element).html;

      var padRect = pad.getBoundingClientRect();

      var pos = {
        x: padRect.left,
        y: padRect.bottom + Y_OFFSET
      };

      return pos;
    }

    /**
     * Create an append action.
     *
     * @param {string} type
     * @param {string} className
     * @param {string} title
     * @param {Object} [options]
     *
     * @return {ContextPadEntry}
     */
    function appendAction(type, className, title, options) {

      function appendStart(event, element) {

        var shape = elementFactory.createShape(assign$1({ type: type }, options));

        create.start(event, shape, {
          source: element
        });
      }

      var append = autoPlace ? function(_, element) {
        var shape = elementFactory.createShape(assign$1({ type: type }, options));

        autoPlace.append(element, shape);
      } : appendStart;

      var previewAppend = autoPlace ? function(_, element) {

        // mouseover
        appendPreview.create(element, type, options);

        return () => {

          // mouseout
          appendPreview.cleanUp();
        };
      } : null;

      return {
        group: 'model',
        className: className,
        title: title,
        action: {
          dragstart: appendStart,
          click: append,
          hover: previewAppend
        }
      };
    }

    function splitLaneHandler(count) {

      return function(_, element) {

        // actual split
        modeling.splitLane(element, count);

        // refresh context pad after split to
        // get rid of split icons
        contextPad.open(element, true);
      };
    }


    if (isAny(businessObject, [ 'bpmn:Lane', 'bpmn:Participant' ]) && isExpanded(element)) {

      var childLanes = getChildLanes(element);

      assign$1(actions, {
        'lane-insert-above': {
          group: 'lane-insert-above',
          className: 'bpmn-icon-lane-insert-above',
          title: translate('Add lane above'),
          action: {
            click: function(event, element) {
              modeling.addLane(element, 'top');
            }
          }
        }
      });

      if (childLanes.length < 2) {

        if (isHorizontal$3(element) ? element.height >= 120 : element.width >= 120) {
          assign$1(actions, {
            'lane-divide-two': {
              group: 'lane-divide',
              className: 'bpmn-icon-lane-divide-two',
              title: translate('Divide into two lanes'),
              action: {
                click: splitLaneHandler(2)
              }
            }
          });
        }

        if (isHorizontal$3(element) ? element.height >= 180 : element.width >= 180) {
          assign$1(actions, {
            'lane-divide-three': {
              group: 'lane-divide',
              className: 'bpmn-icon-lane-divide-three',
              title: translate('Divide into three lanes'),
              action: {
                click: splitLaneHandler(3)
              }
            }
          });
        }
      }

      assign$1(actions, {
        'lane-insert-below': {
          group: 'lane-insert-below',
          className: 'bpmn-icon-lane-insert-below',
          title: translate('Add lane below'),
          action: {
            click: function(event, element) {
              modeling.addLane(element, 'bottom');
            }
          }
        }
      });

    }

    if (is$1(businessObject, 'bpmn:FlowNode')) {

      if (is$1(businessObject, 'bpmn:EventBasedGateway')) {

        assign$1(actions, {
          'append.receive-task': appendAction(
            'bpmn:ReceiveTask',
            'bpmn-icon-receive-task',
            translate('Append receive task')
          ),
          'append.message-intermediate-event': appendAction(
            'bpmn:IntermediateCatchEvent',
            'bpmn-icon-intermediate-event-catch-message',
            translate('Append message intermediate catch event'),
            { eventDefinitionType: 'bpmn:MessageEventDefinition' }
          ),
          'append.timer-intermediate-event': appendAction(
            'bpmn:IntermediateCatchEvent',
            'bpmn-icon-intermediate-event-catch-timer',
            translate('Append timer intermediate catch event'),
            { eventDefinitionType: 'bpmn:TimerEventDefinition' }
          ),
          'append.condition-intermediate-event': appendAction(
            'bpmn:IntermediateCatchEvent',
            'bpmn-icon-intermediate-event-catch-condition',
            translate('Append conditional intermediate catch event'),
            { eventDefinitionType: 'bpmn:ConditionalEventDefinition' }
          ),
          'append.signal-intermediate-event': appendAction(
            'bpmn:IntermediateCatchEvent',
            'bpmn-icon-intermediate-event-catch-signal',
            translate('Append signal intermediate catch event'),
            { eventDefinitionType: 'bpmn:SignalEventDefinition' }
          )
        });
      } else if (isEventType(businessObject, 'bpmn:BoundaryEvent', 'bpmn:CompensateEventDefinition')) {

        assign$1(actions, {
          'append.compensation-activity':
              appendAction(
                'bpmn:Task',
                'bpmn-icon-task',
                translate('Append compensation activity'),
                {
                  isForCompensation: true
                }
              )
        });
      } else if (!is$1(businessObject, 'bpmn:EndEvent') &&
          !businessObject.isForCompensation &&
          !isEventType(businessObject, 'bpmn:IntermediateThrowEvent', 'bpmn:LinkEventDefinition') &&
          !isEventSubProcess(businessObject)) {

        assign$1(actions, {
          'append.end-event': appendAction(
            'bpmn:EndEvent',
            'bpmn-icon-end-event-none',
            translate('Append end event')
          ),
          'append.gateway': appendAction(
            'bpmn:ExclusiveGateway',
            'bpmn-icon-gateway-none',
            translate('Append gateway')
          ),
          'append.append-task': appendAction(
            'bpmn:Task',
            'bpmn-icon-task',
            translate('Append task')
          ),
          'append.intermediate-event': appendAction(
            'bpmn:IntermediateThrowEvent',
            'bpmn-icon-intermediate-event-none',
            translate('Append intermediate/boundary event')
          )
        });
      }
    }

    if (!popupMenu.isEmpty(element, 'bpmn-replace')) {

      // Replace menu entry
      assign$1(actions, {
        'replace': {
          group: 'edit',
          className: 'bpmn-icon-screw-wrench',
          title: translate('Change element'),
          action: {
            click: function(event, element) {

              var position = assign$1(getReplaceMenuPosition(element), {
                cursor: { x: event.x, y: event.y }
              });

              popupMenu.open(element, 'bpmn-replace', position, {
                title: translate('Change element'),
                width: 300,
                search: true
              });
            }
          }
        }
      });
    }

    if (is$1(businessObject, 'bpmn:SequenceFlow')) {
      assign$1(actions, {
        'append.text-annotation': appendAction(
          'bpmn:TextAnnotation',
          'bpmn-icon-text-annotation',
          translate('Add text annotation')
        )
      });
    }

    if (is$1(businessObject, 'bpmn:MessageFlow')) {
      assign$1(actions, {
        'append.text-annotation': appendAction(
          'bpmn:TextAnnotation',
          'bpmn-icon-text-annotation',
          translate('Add text annotation')
        )
      });
    }

    if (
      isAny(businessObject, [
        'bpmn:FlowNode',
        'bpmn:InteractionNode',
        'bpmn:DataObjectReference',
        'bpmn:DataStoreReference',
      ])
    ) {
      assign$1(actions, {
        'append.text-annotation': appendAction(
          'bpmn:TextAnnotation',
          'bpmn-icon-text-annotation',
          translate('Add text annotation')
        ),
        'connect': {
          group: 'connect',
          className: 'bpmn-icon-connection-multi',
          title: translate('Connect to other element'),
          action: {
            click: startConnect,
            dragstart: startConnect,
          },
        },
      });
    }

    if (is$1(businessObject, 'bpmn:TextAnnotation')) {
      assign$1(actions, {
        'connect': {
          group: 'connect',
          className: 'bpmn-icon-connection-multi',
          title: translate('Connect using association'),
          action: {
            click: startConnect,
            dragstart: startConnect,
          },
        },
      });
    }

    if (isAny(businessObject, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {
      assign$1(actions, {
        'connect': {
          group: 'connect',
          className: 'bpmn-icon-connection-multi',
          title: translate('Connect using data input association'),
          action: {
            click: startConnect,
            dragstart: startConnect
          }
        }
      });
    }

    if (is$1(businessObject, 'bpmn:Group')) {
      assign$1(actions, {
        'append.text-annotation': appendAction(
          'bpmn:TextAnnotation',
          'bpmn-icon-text-annotation',
          translate('Add text annotation')
        )
      });
    }

    if (this._isDeleteAllowed([ element ])) {
      assign$1(actions, deleteAction());
    }

    return actions;
  };


  // helpers /////////

  /**
   * @param {ModdleElement} businessObject
   * @param {string} type
   * @param {string} eventDefinitionType
   *
   * @return {boolean}
   */
  function isEventType(businessObject, type, eventDefinitionType) {

    var isType = businessObject.$instanceOf(type);
    var isDefinition = false;

    var definitions = businessObject.eventDefinitions || [];
    forEach$1(definitions, function(def) {
      if (def.$type === eventDefinitionType) {
        isDefinition = true;
      }
    });

    return isType && isDefinition;
  }

  var ContextPadModule = {
    __depends__: [
      AppendPreviewModule,
      DirectEditingModule,
      ContextPadModule$1,
      SelectionModule,
      ConnectModule,
      CreateModule,
      PopupMenuModule
    ],
    __init__: [ 'contextPadProvider' ],
    contextPadProvider: [ 'type', ContextPadProvider ]
  };

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').Dimension} Dimension
   * @typedef {import('../../util/Types').Rect} Rect
   *
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   *
   * @typedef { {
   *   min: number;
   *   max: number;
   * } } Range
   *
   * @typedef { {
   *   elements: Element[];
   *   range: Range;
   * } } Group
   */

  var AXIS_DIMENSIONS = {
    horizontal: [ 'x', 'width' ],
    vertical: [ 'y', 'height' ]
  };

  var THRESHOLD = 5;


  /**
   * Groups and filters elements and then trigger even distribution.
   *
   * @param {Modeling} modeling
   * @param {Rules} rules
   */
  function DistributeElements(modeling, rules) {
    this._modeling = modeling;

    this._filters = [];

    this.registerFilter(function(elements) {
      var allowed = rules.allowed('elements.distribute', { elements: elements });

      if (isArray$3(allowed)) {
        return allowed;
      }

      return allowed ? elements : [];
    });
  }

  DistributeElements.$inject = [ 'modeling', 'rules' ];


  /**
   * Registers filter functions that allow external parties to filter
   * out certain elements.
   *
   * @param {(distributableElements: Element[], axis: Axis, dimension: Dimension) => Element[]} filterFn
   */
  DistributeElements.prototype.registerFilter = function(filterFn) {
    if (typeof filterFn !== 'function') {
      throw new Error('the filter has to be a function');
    }

    this._filters.push(filterFn);
  };

  /**
   * Distributes the elements with a given orientation
   *
   * @param {Element[]} elements
   * @param {string} orientation
   */
  DistributeElements.prototype.trigger = function(elements, orientation) {
    var modeling = this._modeling;

    var groups,
        distributableElements;

    if (elements.length < 3) {
      return;
    }

    this._setOrientation(orientation);

    distributableElements = this._filterElements(elements);

    groups = this._createGroups(distributableElements);

    // nothing to distribute
    if (groups.length <= 2) {
      return;
    }

    modeling.distributeElements(groups, this._axis, this._dimension);

    return groups;
  };

  /**
   * Filters the elements with provided filters by external parties
   *
   * @param {Element[]} elements
   *
   * @return {Element[]}
   */
  DistributeElements.prototype._filterElements = function(elements) {
    var filters = this._filters,
        axis = this._axis,
        dimension = this._dimension,
        distributableElements = [].concat(elements);

    if (!filters.length) {
      return elements;
    }

    forEach$1(filters, function(filterFn) {
      distributableElements = filterFn(distributableElements, axis, dimension);
    });

    return distributableElements;
  };


  /**
   * Create range (min, max) groups. Also tries to group elements
   * together that share the same range.
   *
   * @example
   *
   * ```javascript
   *   const groups = [
   *     {
   *       range: { min: 100, max: 200 },
   *       elements: [ { id: 'shape1', ... } ]
   *     }
   *   ]
   * ```
   *
   * @param {Element[]} elements
   *
   * @return {Group[]}
   */
  DistributeElements.prototype._createGroups = function(elements) {
    var rangeGroups = [],
        self = this,
        axis = this._axis,
        dimension = this._dimension;

    if (!axis) {
      throw new Error('must have a defined "axis" and "dimension"');
    }

    // sort by 'left->right' or 'top->bottom'
    var sortedElements = sortBy(elements, axis);

    forEach$1(sortedElements, function(element, idx) {
      var elementRange = self._findRange(element, axis, dimension),
          range;

      var previous = rangeGroups[rangeGroups.length - 1];

      if (previous && self._hasIntersection(previous.range, elementRange)) {
        rangeGroups[rangeGroups.length - 1].elements.push(element);
      } else {
        range = { range: elementRange, elements: [ element ] };

        rangeGroups.push(range);
      }
    });

    return rangeGroups;
  };


  /**
   * Maps a direction to the according axis and dimension.
   *
   * @param {'horizontal' | 'vertical'} direction 'horizontal' or 'vertical'
   */
  DistributeElements.prototype._setOrientation = function(direction) {
    var orientation = AXIS_DIMENSIONS[direction];

    this._axis = orientation[0];
    this._dimension = orientation[1];
  };


  /**
   * Checks if the two ranges intercept each other.
   *
   * @param {Range} rangeA
   * @param {Range} rangeB
   *
   * @return {boolean}
   */
  DistributeElements.prototype._hasIntersection = function(rangeA, rangeB) {
    return Math.max(rangeA.min, rangeA.max) >= Math.min(rangeB.min, rangeB.max) &&
           Math.min(rangeA.min, rangeA.max) <= Math.max(rangeB.min, rangeB.max);
  };


  /**
   * Returns the min and max values for an element
   *
   * @param {Element} element
   *
   * @return {Range}
   */
  DistributeElements.prototype._findRange = function(element) {
    var axis = element[this._axis],
        dimension = element[this._dimension];

    return {
      min: axis + THRESHOLD,
      max: axis + dimension - THRESHOLD
    };
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var DistributeElementsModule$1 = {
    __init__: [ 'distributeElements' ],
    distributeElements: [ 'type', DistributeElements ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * Registers element exclude filters for elements that currently do not support
   * distribution.
   *
   * @param {EventBus} eventBus
   */
  function BpmnDistributeElements(eventBus) {
    RuleProvider.call(this, eventBus);
  }

  BpmnDistributeElements.$inject = [ 'eventBus' ];

  e$3(BpmnDistributeElements, RuleProvider);

  BpmnDistributeElements.prototype.init = function() {
    this.addRule('elements.distribute', function(context) {
      var elements = context.elements;

      elements = filter(elements, function(element) {
        var cannotDistribute = isAny(element, [
          'bpmn:Association',
          'bpmn:BoundaryEvent',
          'bpmn:DataInputAssociation',
          'bpmn:DataOutputAssociation',
          'bpmn:Lane',
          'bpmn:MessageFlow',
          'bpmn:SequenceFlow',
          'bpmn:TextAnnotation'
        ]);

        return !(element.labelTarget || cannotDistribute);
      });

      // filter out elements which are children of any of the selected elements
      elements = getParents$1(elements);

      if (elements.length < 3) {
        return false;
      }

      return elements;
    });
  };

  /**
   * To change the icons, modify the SVGs in `./resources`, execute `npx svgo -f resources --datauri enc -o dist`,
   * and then replace respective icons with the optimized data URIs in `./dist`.
   */
  var icons = {
    horizontal: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
                <polyline points="450 400 450 150 1350 150 1350 400" style="fill:none;stroke:currentColor;stroke-width:100;stroke-linejoin:round;"/>
                <rect x="150" y="450" width="600" height="1200" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
                <rect x="1050" y="450" width="600" height="800" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
              </svg>`,
    vertical: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1800 1800">
              <polyline points="400 1350 150 1350 150 450 400 450" style="fill:none;stroke:currentColor;stroke-width:100;stroke-linejoin:round;"/>
              <rect x="450" y="150" width="1200" height="600" rx="1" style="fill:none;stroke:currentColor;stroke-width:100;"></rect>
              <rect x="450" y="1050" width="800" height="600" rx="1" style="fill:currentColor;stroke:currentColor;stroke-width:100;opacity:.5;"></rect>
            </svg>`
  };

  /**
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').default} PopupMenu
   * @typedef {import('./BpmnDistributeElements').default} DistributeElements
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
   *
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').PopupMenuEntries} PopupMenuEntries
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenuProvider').default} PopupMenuProvider
   * @typedef {import('diagram-js/lib/features/popup-menu/PopupMenu').PopupMenuTarget} PopupMenuTarget
   */

  var LOW_PRIORITY$7 = 900;

  /**
   * A provider for the distribute elements popup menu.
   *
   * @implements {PopupMenuProvider}
   *
   * @param {PopupMenu} popupMenu
   * @param {DistributeElements} distributeElements
   * @param {Translate} translate
   * @param {Rules} rules
   */
  function DistributeElementsMenuProvider(
      popupMenu, distributeElements, translate, rules) {
    this._distributeElements = distributeElements;
    this._translate = translate;
    this._popupMenu = popupMenu;
    this._rules = rules;

    popupMenu.registerProvider('align-elements', LOW_PRIORITY$7, this);
  }

  DistributeElementsMenuProvider.$inject = [
    'popupMenu',
    'distributeElements',
    'translate',
    'rules'
  ];

  /**
   * @param {PopupMenuTarget} target
   *
   * @return {PopupMenuEntries}
   */
  DistributeElementsMenuProvider.prototype.getPopupMenuEntries = function(target) {
    var entries = {};

    if (this._isAllowed(target)) {
      assign$1(entries, this._getEntries(target));
    }

    return entries;
  };

  DistributeElementsMenuProvider.prototype._isAllowed = function(elements) {
    return this._rules.allowed('elements.distribute', { elements: elements });
  };

  DistributeElementsMenuProvider.prototype._getEntries = function(elements) {
    var distributeElements = this._distributeElements,
        translate = this._translate,
        popupMenu = this._popupMenu;

    var entries = {
      'distribute-elements-horizontal': {
        group: 'distribute',
        title: translate('Distribute elements horizontally'),
        className: 'bjs-align-elements-menu-entry',
        imageHtml: icons['horizontal'],
        action: function(event, entry) {
          distributeElements.trigger(elements, 'horizontal');
          popupMenu.close();
        }
      },
      'distribute-elements-vertical': {
        group: 'distribute',
        title: translate('Distribute elements vertically'),
        imageHtml: icons['vertical'],
        action: function(event, entry) {
          distributeElements.trigger(elements, 'vertical');
          popupMenu.close();
        }
      },
    };

    return entries;
  };

  var DistributeElementsModule = {
    __depends__: [
      PopupMenuModule$1,
      DistributeElementsModule$1
    ],
    __init__: [
      'bpmnDistributeElements',
      'distributeElementsMenuProvider'
    ],
    bpmnDistributeElements: [ 'type', BpmnDistributeElements ],
    distributeElementsMenuProvider: [ 'type', DistributeElementsMenuProvider ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var NOT_REGISTERED_ERROR = 'is not a registered action',
      IS_REGISTERED_ERROR = 'is already registered';


  /**
   * An interface that provides access to modeling actions by decoupling
   * the one who requests the action to be triggered and the trigger itself.
   *
   * It's possible to add new actions by registering them with ´registerAction´
   * and likewise unregister existing ones with ´unregisterAction´.
   *
   *
   * ## Life-Cycle and configuration
   *
   * The editor actions will wait for diagram initialization before
   * registering default actions _and_ firing an `editorActions.init` event.
   *
   * Interested parties may listen to the `editorActions.init` event with
   * low priority to check, which actions got registered. Other components
   * may use the event to register their own actions via `registerAction`.
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function EditorActions(eventBus, injector) {

    // initialize actions
    this._actions = {};

    var self = this;

    eventBus.on('diagram.init', function() {

      // all diagram modules got loaded; check which ones
      // are available and register the respective default actions
      self._registerDefaultActions(injector);

      // ask interested parties to register available editor
      // actions on diagram initialization
      eventBus.fire('editorActions.init', {
        editorActions: self
      });
    });

  }

  EditorActions.$inject = [
    'eventBus',
    'injector'
  ];

  /**
   * Register default actions.
   *
   * @param {Injector} injector
   */
  EditorActions.prototype._registerDefaultActions = function(injector) {

    // (1) retrieve optional components to integrate with

    var commandStack = injector.get('commandStack', false);
    var modeling = injector.get('modeling', false);
    var selection = injector.get('selection', false);
    var zoomScroll = injector.get('zoomScroll', false);
    var copyPaste = injector.get('copyPaste', false);
    var canvas = injector.get('canvas', false);
    var rules = injector.get('rules', false);
    var keyboardMove = injector.get('keyboardMove', false);
    var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);

    // (2) check components and register actions

    if (commandStack) {
      this.register('undo', function() {
        commandStack.undo();
      });

      this.register('redo', function() {
        commandStack.redo();
      });
    }

    if (copyPaste && selection) {
      this.register('copy', function() {
        var selectedElements = selection.get();

        if (selectedElements.length) {
          return copyPaste.copy(selectedElements);
        }
      });
    }

    if (copyPaste) {
      this.register('paste', function() {
        copyPaste.paste();
      });
    }

    if (zoomScroll) {
      this.register('stepZoom', function(opts) {
        zoomScroll.stepZoom(opts.value);
      });
    }

    if (canvas) {
      this.register('zoom', function(opts) {
        canvas.zoom(opts.value);
      });
    }

    if (modeling && selection && rules) {
      this.register('removeSelection', function() {

        var selectedElements = selection.get();

        if (!selectedElements.length) {
          return;
        }

        var allowed = rules.allowed('elements.delete', { elements: selectedElements }),
            removableElements;

        if (allowed === false) {
          return;
        }
        else if (isArray$3(allowed)) {
          removableElements = allowed;
        }
        else {
          removableElements = selectedElements;
        }

        if (removableElements.length) {
          modeling.removeElements(removableElements.slice());
        }
      });
    }

    if (keyboardMove) {
      this.register('moveCanvas', function(opts) {
        keyboardMove.moveCanvas(opts);
      });
    }

    if (keyboardMoveSelection) {
      this.register('moveSelection', function(opts) {
        keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);
      });
    }

  };


  /**
   * Triggers a registered action
   *
   * @param {string} action
   * @param {Object} opts
   *
   * @return {unknown} Returns what the registered listener returns
   */
  EditorActions.prototype.trigger = function(action, opts) {
    if (!this._actions[action]) {
      throw error(action, NOT_REGISTERED_ERROR);
    }

    return this._actions[action](opts);
  };


  /**
   * Registers a collections of actions.
   * The key of the object will be the name of the action.
   *
   * @example
   *
   * ```javascript
   * var actions = {
   *   spaceTool: function() {
   *     spaceTool.activateSelection();
   *   },
   *   lassoTool: function() {
   *     lassoTool.activateSelection();
   *   }
   * ];
   *
   * editorActions.register(actions);
   *
   * editorActions.isRegistered('spaceTool'); // true
   * ```
   *
   * @param {Object} actions
   */
  EditorActions.prototype.register = function(actions, listener) {
    var self = this;

    if (typeof actions === 'string') {
      return this._registerAction(actions, listener);
    }

    forEach$1(actions, function(listener, action) {
      self._registerAction(action, listener);
    });
  };

  /**
   * Registers a listener to an action key
   *
   * @param {string} action
   * @param {Function} listener
   */
  EditorActions.prototype._registerAction = function(action, listener) {
    if (this.isRegistered(action)) {
      throw error(action, IS_REGISTERED_ERROR);
    }

    this._actions[action] = listener;
  };

  /**
   * Unregister an existing action
   *
   * @param {string} action
   */
  EditorActions.prototype.unregister = function(action) {
    if (!this.isRegistered(action)) {
      throw error(action, NOT_REGISTERED_ERROR);
    }

    this._actions[action] = undefined;
  };

  /**
   * Returns the identifiers of all currently registered editor actions
   *
   * @return {string[]}
   */
  EditorActions.prototype.getActions = function() {
    return Object.keys(this._actions);
  };

  /**
   * Checks wether the given action is registered
   *
   * @param {string} action
   *
   * @return {boolean}
   */
  EditorActions.prototype.isRegistered = function(action) {
    return !!this._actions[action];
  };


  function error(action, message) {
    return new Error(action + ' ' + message);
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var EditorActionsModule$1 = {
    __init__: [ 'editorActions' ],
    editorActions: [ 'type', EditorActions ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   */

  /**
   * Registers and executes BPMN specific editor actions.
   *
   * @param {Injector} injector
   */
  function BpmnEditorActions(injector) {
    injector.invoke(EditorActions, this);
  }

  e$3(BpmnEditorActions, EditorActions);

  BpmnEditorActions.$inject = [
    'injector'
  ];

  /**
   * Register default actions.
   *
   * @param {Injector} injector
   */
  BpmnEditorActions.prototype._registerDefaultActions = function(injector) {

    // (0) invoke super method

    EditorActions.prototype._registerDefaultActions.call(this, injector);

    // (1) retrieve optional components to integrate with

    var canvas = injector.get('canvas', false);
    var elementRegistry = injector.get('elementRegistry', false);
    var selection = injector.get('selection', false);
    var spaceTool = injector.get('spaceTool', false);
    var lassoTool = injector.get('lassoTool', false);
    var handTool = injector.get('handTool', false);
    var globalConnect = injector.get('globalConnect', false);
    var distributeElements = injector.get('distributeElements', false);
    var alignElements = injector.get('alignElements', false);
    var directEditing = injector.get('directEditing', false);
    var searchPad = injector.get('searchPad', false);
    var modeling = injector.get('modeling', false);
    var contextPad = injector.get('contextPad', false);

    // (2) check components and register actions

    if (canvas && elementRegistry && selection) {
      this._registerAction('selectElements', function() {

        // select all elements except for the invisible
        // root element
        var rootElement = canvas.getRootElement();

        var elements = elementRegistry.filter(function(element) {
          return element !== rootElement;
        });

        selection.select(elements);

        return elements;
      });
    }

    if (spaceTool) {
      this._registerAction('spaceTool', function() {
        spaceTool.toggle();
      });
    }

    if (lassoTool) {
      this._registerAction('lassoTool', function() {
        lassoTool.toggle();
      });
    }

    if (handTool) {
      this._registerAction('handTool', function() {
        handTool.toggle();
      });
    }

    if (globalConnect) {
      this._registerAction('globalConnectTool', function() {
        globalConnect.toggle();
      });
    }

    if (selection && distributeElements) {
      this._registerAction('distributeElements', function(opts) {
        var currentSelection = selection.get(),
            type = opts.type;

        if (currentSelection.length) {
          distributeElements.trigger(currentSelection, type);
        }
      });
    }

    if (selection && alignElements) {
      this._registerAction('alignElements', function(opts) {
        var currentSelection = selection.get(),
            aligneableElements = [],
            type = opts.type;

        if (currentSelection.length) {
          aligneableElements = filter(currentSelection, function(element) {
            return !is$1(element, 'bpmn:Lane');
          });

          alignElements.trigger(aligneableElements, type);
        }
      });
    }

    if (selection && modeling) {
      this._registerAction('setColor', function(opts) {
        var currentSelection = selection.get();

        if (currentSelection.length) {
          modeling.setColor(currentSelection, opts);
        }
      });
    }

    if (selection && directEditing) {
      this._registerAction('directEditing', function() {
        var currentSelection = selection.get();

        if (currentSelection.length) {
          directEditing.activate(currentSelection[0]);
        }
      });
    }

    if (searchPad) {
      this._registerAction('find', function() {
        searchPad.toggle();
      });
    }

    if (canvas && modeling) {
      this._registerAction('moveToOrigin', function() {
        var rootElement = canvas.getRootElement(),
            boundingBox,
            elements;

        if (is$1(rootElement, 'bpmn:Collaboration')) {
          elements = elementRegistry.filter(function(element) {
            return is$1(element.parent, 'bpmn:Collaboration');
          });
        } else {
          elements = elementRegistry.filter(function(element) {
            return element !== rootElement && !is$1(element.parent, 'bpmn:SubProcess');
          });
        }

        boundingBox = getBBox(elements);

        modeling.moveElements(
          elements,
          { x: -boundingBox.x, y: -boundingBox.y },
          rootElement
        );
      });
    }

    if (selection && contextPad) {
      this._registerAction('replaceElement', function(event) {
        contextPad.triggerEntry('replace', 'click', event);
      });
    }

  };

  var EditorActionsModule = {
    __depends__: [
      EditorActionsModule$1
    ],
    editorActions: [ 'type', BpmnEditorActions ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  /**
   * @param {EventBus} eventBus
   */
  function BpmnGridSnapping(eventBus) {
    eventBus.on([
      'create.init',
      'shape.move.init'
    ], function(event) {
      var context = event.context,
          shape = event.shape;

      if (isAny(shape, [
        'bpmn:Participant',
        'bpmn:SubProcess',
        'bpmn:TextAnnotation'
      ])) {
        if (!context.gridSnappingContext) {
          context.gridSnappingContext = {};
        }

        context.gridSnappingContext.snapLocation = 'top-left';
      }
    });
  }

  BpmnGridSnapping.$inject = [ 'eventBus' ];

  var SPACING = 10;

  function quantize(value, quantum, fn) {
    if (!fn) {
      fn = 'round';
    }

    return Math[ fn ](value / quantum) * quantum;
  }

  /**
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   */

  var LOWER_PRIORITY = 1200;
  var LOW_PRIORITY$6 = 800;

  /**
   * Basic grid snapping that covers connecting, creating, moving, resizing shapes, moving bendpoints
   * and connection segments.
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Object} config
   */
  function GridSnapping(elementRegistry, eventBus, config) {

    var active = !config || config.active !== false;

    this._eventBus = eventBus;

    var self = this;

    eventBus.on('diagram.init', LOW_PRIORITY$6, function() {
      self.setActive(active);
    });

    eventBus.on([
      'create.move',
      'create.end',
      'bendpoint.move.move',
      'bendpoint.move.end',
      'connect.move',
      'connect.end',
      'connectionSegment.move.move',
      'connectionSegment.move.end',
      'resize.move',
      'resize.end',
      'shape.move.move',
      'shape.move.end'
    ], LOWER_PRIORITY, function(event) {
      var originalEvent = event.originalEvent;

      if (!self.active || (originalEvent && isCmd(originalEvent))) {
        return;
      }

      var context = event.context,
          gridSnappingContext = context.gridSnappingContext;

      if (!gridSnappingContext) {
        gridSnappingContext = context.gridSnappingContext = {};
      }

      [ 'x', 'y' ].forEach(function(axis) {
        var options = {};

        // allow snapping with offset
        var snapOffset = getSnapOffset(event, axis, elementRegistry);

        if (snapOffset) {
          options.offset = snapOffset;
        }

        // allow snapping with min and max
        var snapConstraints = getSnapConstraints(event, axis);

        if (snapConstraints) {
          assign$1(options, snapConstraints);
        }

        if (!isSnapped(event, axis)) {
          self.snapEvent(event, axis, options);
        }
      });
    });
  }

  /**
   * Snap an events x or y with optional min, max and offset.
   *
   * @param {Object} event
   * @param {string} axis
   * @param {number} [options.min]
   * @param {number} [options.max]
   * @param {number} [options.offset]
   */
  GridSnapping.prototype.snapEvent = function(event, axis, options) {
    var snappedValue = this.snapValue(event[ axis ], options);

    setSnapped(event, axis, snappedValue);
  };

  /**
   * Expose grid spacing for third parties (i.e. extensions).
   *
   * @return {number} spacing of grid dots
   */
  GridSnapping.prototype.getGridSpacing = function() {
    return SPACING;
  };

  /**
   * Snap value with optional min, max and offset.
   *
   * @param {number} value
   * @param {Object} options
   * @param {number} [options.min]
   * @param {number} [options.max]
   * @param {number} [options.offset]
   */
  GridSnapping.prototype.snapValue = function(value, options) {
    var offset = 0;

    if (options && options.offset) {
      offset = options.offset;
    }

    value += offset;

    value = quantize(value, SPACING);

    var min, max;

    if (options && options.min) {
      min = options.min;

      if (isNumber(min)) {
        min = quantize(min + offset, SPACING, 'ceil');

        value = Math.max(value, min);
      }
    }

    if (options && options.max) {
      max = options.max;

      if (isNumber(max)) {
        max = quantize(max + offset, SPACING, 'floor');

        value = Math.min(value, max);
      }
    }

    value -= offset;

    return value;
  };

  GridSnapping.prototype.isActive = function() {
    return this.active;
  };

  GridSnapping.prototype.setActive = function(active) {
    this.active = active;

    this._eventBus.fire('gridSnapping.toggle', { active: active });
  };

  GridSnapping.prototype.toggleActive = function() {
    this.setActive(!this.active);
  };

  GridSnapping.$inject = [
    'elementRegistry',
    'eventBus',
    'config.gridSnapping'
  ];

  // helpers //////////

  /**
   * Get minimum and maximum snap constraints.
   * Constraints are cached.
   *
   * @param {Object} event
   * @param {Object} event.context
   * @param {string} axis
   *
   * @return {boolean|Object}
   */
  function getSnapConstraints(event, axis) {
    var context = event.context,
        createConstraints = context.createConstraints,
        resizeConstraints = context.resizeConstraints || {},
        gridSnappingContext = context.gridSnappingContext,
        snapConstraints = gridSnappingContext.snapConstraints;

    // cache snap constraints
    if (snapConstraints && snapConstraints[ axis ]) {
      return snapConstraints[ axis ];
    }

    if (!snapConstraints) {
      snapConstraints = gridSnappingContext.snapConstraints = {};
    }

    if (!snapConstraints[ axis ]) {
      snapConstraints[ axis ] = {};
    }

    var direction = context.direction;

    // create
    if (createConstraints) {
      if (isHorizontal$2(axis)) {
        snapConstraints.x.min = createConstraints.left;
        snapConstraints.x.max = createConstraints.right;
      } else {
        snapConstraints.y.min = createConstraints.top;
        snapConstraints.y.max = createConstraints.bottom;
      }
    }

    // resize
    var minResizeConstraints = resizeConstraints.min,
        maxResizeConstraints = resizeConstraints.max;

    if (minResizeConstraints) {
      if (isHorizontal$2(axis)) {

        if (isWest(direction)) {
          snapConstraints.x.max = minResizeConstraints.left;
        } else {
          snapConstraints.x.min = minResizeConstraints.right;
        }

      } else {

        if (isNorth(direction)) {
          snapConstraints.y.max = minResizeConstraints.top;
        } else {
          snapConstraints.y.min = minResizeConstraints.bottom;
        }

      }
    }

    if (maxResizeConstraints) {
      if (isHorizontal$2(axis)) {

        if (isWest(direction)) {
          snapConstraints.x.min = maxResizeConstraints.left;
        } else {
          snapConstraints.x.max = maxResizeConstraints.right;
        }

      } else {

        if (isNorth(direction)) {
          snapConstraints.y.min = maxResizeConstraints.top;
        } else {
          snapConstraints.y.max = maxResizeConstraints.bottom;
        }

      }
    }

    return snapConstraints[ axis ];
  }

  /**
   * Get snap offset.
   * Offset is cached.
   *
   * @param {Object} event
   * @param {string} axis
   * @param {ElementRegistry} elementRegistry
   *
   * @return {number}
   */
  function getSnapOffset(event, axis, elementRegistry) {
    var context = event.context,
        shape = event.shape,
        gridSnappingContext = context.gridSnappingContext,
        snapLocation = gridSnappingContext.snapLocation,
        snapOffset = gridSnappingContext.snapOffset;

    // cache snap offset
    if (snapOffset && isNumber(snapOffset[ axis ])) {
      return snapOffset[ axis ];
    }

    if (!snapOffset) {
      snapOffset = gridSnappingContext.snapOffset = {};
    }

    if (!isNumber(snapOffset[ axis ])) {
      snapOffset[ axis ] = 0;
    }

    if (!shape) {
      return snapOffset[ axis ];
    }

    if (!elementRegistry.get(shape.id)) {

      if (isHorizontal$2(axis)) {
        snapOffset[ axis ] += shape[ axis ] + shape.width / 2;
      } else {
        snapOffset[ axis ] += shape[ axis ] + shape.height / 2;
      }
    }

    if (!snapLocation) {
      return snapOffset[ axis ];
    }

    if (axis === 'x') {
      if (/left/.test(snapLocation)) {
        snapOffset[ axis ] -= shape.width / 2;
      } else if (/right/.test(snapLocation)) {
        snapOffset[ axis ] += shape.width / 2;
      }
    } else {
      if (/top/.test(snapLocation)) {
        snapOffset[ axis ] -= shape.height / 2;
      } else if (/bottom/.test(snapLocation)) {
        snapOffset[ axis ] += shape.height / 2;
      }
    }

    return snapOffset[ axis ];
  }

  function isHorizontal$2(axis) {
    return axis === 'x';
  }

  function isNorth(direction) {
    return direction.indexOf('n') !== -1;
  }

  function isWest(direction) {
    return direction.indexOf('w') !== -1;
  }

  /**
   * @typedef {import('../../../model/Types').Shape} Shape
   *
   * @typedef {import('../../../util/Types').Rect} Rect
   *
   * @typedef {import('../../../core/EventBus').default} EventBus
   * @typedef {import('../../grid-snapping/GridSnapping').default} GridSnapping
   */

  /**
   * Integrates resizing with grid snapping.
   *
   * @param {EventBus} eventBus
   * @param {GridSnapping} gridSnapping
   */
  function ResizeBehavior(eventBus, gridSnapping) {
    CommandInterceptor.call(this, eventBus);

    this._gridSnapping = gridSnapping;

    var self = this;

    this.preExecute('shape.resize', function(event) {
      var context = event.context,
          hints = context.hints || {},
          autoResize = hints.autoResize;

      if (!autoResize) {
        return;
      }

      var shape = context.shape,
          newBounds = context.newBounds;

      if (isString(autoResize)) {
        context.newBounds = self.snapComplex(newBounds, autoResize);
      } else {
        context.newBounds = self.snapSimple(shape, newBounds);
      }
    });
  }

  ResizeBehavior.$inject = [
    'eventBus',
    'gridSnapping',
    'modeling'
  ];

  e$3(ResizeBehavior, CommandInterceptor);

  /**
   * Snap width and height in relation to center.
   *
   * @param {Shape} shape
   * @param {Rect} newBounds
   *
   * @return {Rect} Snapped bounds.
   */
  ResizeBehavior.prototype.snapSimple = function(shape, newBounds) {
    var gridSnapping = this._gridSnapping;

    newBounds.width = gridSnapping.snapValue(newBounds.width, {
      min: newBounds.width
    });

    newBounds.height = gridSnapping.snapValue(newBounds.height, {
      min: newBounds.height
    });

    newBounds.x = shape.x + (shape.width / 2) - (newBounds.width / 2);
    newBounds.y = shape.y + (shape.height / 2) - (newBounds.height / 2);

    return newBounds;
  };

  /**
   * Snap x, y, width and height according to given directions.
   *
   * @param {Rect} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @return {Rect} Snapped bounds.
   */
  ResizeBehavior.prototype.snapComplex = function(newBounds, directions) {
    if (/w|e/.test(directions)) {
      newBounds = this.snapHorizontally(newBounds, directions);
    }

    if (/n|s/.test(directions)) {
      newBounds = this.snapVertically(newBounds, directions);
    }

    return newBounds;
  };

  /**
   * Snap in one or both directions horizontally.
   *
   * @param {Rect} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @return {Rect} Snapped bounds.
   */
  ResizeBehavior.prototype.snapHorizontally = function(newBounds, directions) {
    var gridSnapping = this._gridSnapping,
        west = /w/.test(directions),
        east = /e/.test(directions);

    var snappedNewBounds = {};

    snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {
      min: newBounds.width
    });

    if (east) {

      // handle <we>
      if (west) {
        snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {
          max: newBounds.x
        });

        snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {
          min: newBounds.x - snappedNewBounds.x
        });
      }

      // handle <e>
      else {
        newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;
      }
    }

    // assign snapped x and width
    assign$1(newBounds, snappedNewBounds);

    return newBounds;
  };

  /**
   * Snap in one or both directions vertically.
   *
   * @param {Rect} newBounds
   * @param {string} directions - Directions as {n|w|s|e}.
   *
   * @return {Rect} Snapped bounds.
   */
  ResizeBehavior.prototype.snapVertically = function(newBounds, directions) {
    var gridSnapping = this._gridSnapping,
        north = /n/.test(directions),
        south = /s/.test(directions);

    var snappedNewBounds = {};

    snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {
      min: newBounds.height
    });

    if (north) {

      // handle <ns>
      if (south) {
        snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {
          max: newBounds.y
        });

        snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {
          min: newBounds.y - snappedNewBounds.y
        });
      }

      // handle <n>
      else {
        newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;
      }
    }

    // assign snapped y and height
    assign$1(newBounds, snappedNewBounds);

    return newBounds;
  };

  /**
   * @typedef {import('../../../core/EventBus').default} EventBus
   * @typedef {import('../../grid-snapping/GridSnapping').default} GridSnapping
   */

  var HIGH_PRIORITY$6 = 2000;

  /**
   * Integrates space tool with grid snapping.
   *
   * @param {EventBus} eventBus
   * @param {GridSnapping} gridSnapping
   */
  function SpaceToolBehavior(eventBus, gridSnapping) {
    eventBus.on([
      'spaceTool.move',
      'spaceTool.end'
    ], HIGH_PRIORITY$6, function(event) {
      var context = event.context;

      if (!context.initialized) {
        return;
      }

      var axis = context.axis;

      var snapped;

      if (axis === 'x') {

        // snap delta x to multiple of 10
        snapped = gridSnapping.snapValue(event.dx);

        event.x = event.x + snapped - event.dx;
        event.dx = snapped;
      } else {

        // snap delta y to multiple of 10
        snapped = gridSnapping.snapValue(event.dy);

        event.y = event.y + snapped - event.dy;
        event.dy = snapped;
      }
    });
  }

  SpaceToolBehavior.$inject = [
    'eventBus',
    'gridSnapping'
  ];

  var GridSnappingBehaviorModule$1 = {
    __init__: [
      'gridSnappingResizeBehavior',
      'gridSnappingSpaceToolBehavior'
    ],
    gridSnappingResizeBehavior: [ 'type', ResizeBehavior ],
    gridSnappingSpaceToolBehavior: [ 'type', SpaceToolBehavior ]
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var GridSnappingModule$1 = {
    __depends__: [ GridSnappingBehaviorModule$1 ],
    __init__: [ 'gridSnapping' ],
    gridSnapping: [ 'type', GridSnapping ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping
   *
   * @typedef {import('diagram-js/lib/util/Types').Axis} Axis
   */

  var HIGH_PRIORITY$5 = 2000;

  /**
   * @param {EventBus} eventBus
   * @param {GridSnapping} gridSnapping
   * @param {ElementRegistry} elementRegistry
   */
  function GridSnappingAutoPlaceBehavior(eventBus, gridSnapping, elementRegistry) {
    eventBus.on('autoPlace', HIGH_PRIORITY$5, function(context) {
      var source = context.source,
          sourceMid = getMid(source),
          shape = context.shape;

      var position = getNewShapePosition(source, shape, elementRegistry);

      [ 'x', 'y' ].forEach(function(axis) {
        var options = {};

        // do not snap if x/y equal
        if (position[ axis ] === sourceMid[ axis ]) {
          return;
        }

        if (position[ axis ] > sourceMid[ axis ]) {
          options.min = position[ axis ];
        } else {
          options.max = position[ axis ];
        }

        if (is$1(shape, 'bpmn:TextAnnotation')) {

          if (isHorizontal$1(axis)) {
            options.offset = -shape.width / 2;
          } else {
            options.offset = -shape.height / 2;
          }

        }

        position[ axis ] = gridSnapping.snapValue(position[ axis ], options);

      });

      // must be returned to be considered by auto place
      return position;
    });
  }

  GridSnappingAutoPlaceBehavior.$inject = [
    'eventBus',
    'gridSnapping',
    'elementRegistry'
  ];

  // helpers //////////

  /**
   * @param {Axis} axis
   *
   * @return {boolean}
   */
  function isHorizontal$1(axis) {
    return axis === 'x';
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping
   */

  var HIGHER_PRIORITY$4 = 1750;

  /**
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {GridSnapping} gridSnapping
   */
  function GridSnappingParticipantBehavior(canvas, eventBus, gridSnapping) {
    eventBus.on([
      'create.start',
      'shape.move.start'
    ], HIGHER_PRIORITY$4, function(event) {
      var context = event.context,
          shape = context.shape,
          rootElement = canvas.getRootElement();

      if (!is$1(shape, 'bpmn:Participant') ||
        !is$1(rootElement, 'bpmn:Process') ||
        !rootElement.children.length) {
        return;
      }

      var createConstraints = context.createConstraints;

      if (!createConstraints) {
        return;
      }

      shape.width = gridSnapping.snapValue(shape.width, { min: shape.width });
      shape.height = gridSnapping.snapValue(shape.height, { min: shape.height });
    });
  }

  GridSnappingParticipantBehavior.$inject = [
    'canvas',
    'eventBus',
    'gridSnapping'
  ];

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/grid-snapping/GridSnapping').default} GridSnapping
   * @typedef {import('../../modeling/Modeling').default} Modeling
   *
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   */

  var HIGH_PRIORITY$4 = 3000;


  /**
   * Snaps connections with Manhattan layout.
   *
   * @param {EventBus} eventBus
   * @param {GridSnapping} gridSnapping
   * @param {Modeling} modeling
   */
  function GridSnappingLayoutConnectionBehavior(eventBus, gridSnapping, modeling) {
    CommandInterceptor.call(this, eventBus);

    this._gridSnapping = gridSnapping;

    var self = this;

    this.postExecuted([
      'connection.create',
      'connection.layout'
    ], HIGH_PRIORITY$4, function(event) {
      var context = event.context,
          connection = context.connection,
          hints = context.hints || {},
          waypoints = connection.waypoints;

      if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {
        return;
      }

      if (!hasMiddleSegments(waypoints)) {
        return;
      }

      modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));
    });
  }

  GridSnappingLayoutConnectionBehavior.$inject = [
    'eventBus',
    'gridSnapping',
    'modeling'
  ];

  e$3(GridSnappingLayoutConnectionBehavior, CommandInterceptor);

  /**
   * Snap middle segments of a given connection.
   *
   * @param {Point[]} waypoints
   *
   * @return {Point[]}
   */
  GridSnappingLayoutConnectionBehavior.prototype.snapMiddleSegments = function(waypoints) {
    var gridSnapping = this._gridSnapping,
        snapped;

    waypoints = waypoints.slice();

    for (var i = 1; i < waypoints.length - 2; i++) {

      snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);

      waypoints[i] = snapped[0];
      waypoints[i + 1] = snapped[1];
    }

    return waypoints;
  };


  // helpers //////////

  /**
   * Check whether a connection has a middle segments.
   *
   * @param {Point[]} waypoints
   *
   * @return {boolean}
   */
  function hasMiddleSegments(waypoints) {
    return waypoints.length > 3;
  }

  /**
   * Check whether an alignment is horizontal.
   *
   * @param {string} aligned
   *
   * @return {boolean}
   */
  function horizontallyAligned(aligned) {
    return aligned === 'h';
  }

  /**
   * Check whether an alignment is vertical.
   *
   * @param {string} aligned
   *
   * @return {boolean}
   */
  function verticallyAligned(aligned) {
    return aligned === 'v';
  }

  /**
   * Get middle segments from a given connection.
   *
   * @param {Point[]} waypoints
   *
   * @return {Point[]}
   */
  function snapSegment(gridSnapping, segmentStart, segmentEnd) {

    var aligned = pointsAligned(segmentStart, segmentEnd);

    var snapped = {};

    if (horizontallyAligned(aligned)) {

      // snap horizontally
      snapped.y = gridSnapping.snapValue(segmentStart.y);
    }

    if (verticallyAligned(aligned)) {

      // snap vertically
      snapped.x = gridSnapping.snapValue(segmentStart.x);
    }

    if ('x' in snapped || 'y' in snapped) {
      segmentStart = assign$1({}, segmentStart, snapped);
      segmentEnd = assign$1({}, segmentEnd, snapped);
    }

    return [ segmentStart, segmentEnd ];
  }

  var GridSnappingBehaviorModule = {
    __init__: [
      'gridSnappingAutoPlaceBehavior',
      'gridSnappingParticipantBehavior',
      'gridSnappingLayoutConnectionBehavior',
    ],
    gridSnappingAutoPlaceBehavior: [ 'type', GridSnappingAutoPlaceBehavior ],
    gridSnappingParticipantBehavior: [ 'type', GridSnappingParticipantBehavior ],
    gridSnappingLayoutConnectionBehavior: [ 'type', GridSnappingLayoutConnectionBehavior ]
  };

  var GridSnappingModule = {
    __depends__: [
      GridSnappingModule$1,
      GridSnappingBehaviorModule
    ],
    __init__: [ 'bpmnGridSnapping' ],
    bpmnGridSnapping: [ 'type', BpmnGridSnapping ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/interaction-events/InteractionEvents').default} InteractionEvents
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   */

  var LABEL_WIDTH = 30,
      LABEL_HEIGHT = 30;


  /**
   * BPMN-specific hit zones and interaction fixes.
   *
   * @param {EventBus} eventBus
   * @param {InteractionEvents} interactionEvents
   */
  function BpmnInteractionEvents(eventBus, interactionEvents) {

    this._interactionEvents = interactionEvents;

    var self = this;

    eventBus.on([
      'interactionEvents.createHit',
      'interactionEvents.updateHit'
    ], function(context) {
      var element = context.element,
          gfx = context.gfx;

      if (is$1(element, 'bpmn:Lane')) {
        return self._createParticipantHit(element, gfx);
      } else if (is$1(element, 'bpmn:Participant')) {
        if (isExpanded(element)) {
          return self._createParticipantHit(element, gfx);
        } else {
          return self._createDefaultHit(element, gfx);
        }
      } else if (is$1(element, 'bpmn:SubProcess')) {
        if (isExpanded(element)) {
          return self._createSubProcessHit(element, gfx);
        } else {
          return self._createDefaultHit(element, gfx);
        }
      }
    });

  }

  BpmnInteractionEvents.$inject = [
    'eventBus',
    'interactionEvents'
  ];

  /**
   * @param {Element} element
   * @param {SVGElement} gfx
   *
   * @return {boolean}
   */
  BpmnInteractionEvents.prototype._createDefaultHit = function(element, gfx) {
    this._interactionEvents.removeHits(gfx);

    this._interactionEvents.createDefaultHit(element, gfx);

    // indicate that we created a hit
    return true;
  };

  /**
   * @param {Shape} element
   * @param {SVGElement} gfx
   *
   * @return {boolean}
   */
  BpmnInteractionEvents.prototype._createParticipantHit = function(element, gfx) {

    // remove existing hits
    this._interactionEvents.removeHits(gfx);

    // add body hit
    this._interactionEvents.createBoxHit(gfx, 'no-move', {
      width: element.width,
      height: element.height
    });

    // add outline hit
    this._interactionEvents.createBoxHit(gfx, 'click-stroke', {
      width: element.width,
      height: element.height
    });

    // add label hit
    var box = isHorizontal$3(element) ? {
      width: LABEL_WIDTH,
      height: element.height
    } : {
      width: element.width,
      height: LABEL_HEIGHT
    };

    this._interactionEvents.createBoxHit(gfx, 'all', box);

    // indicate that we created a hit
    return true;
  };

  /**
   * @param {Shape} element
   * @param {SVGElement} gfx
   *
   * @return {boolean}
   */
  BpmnInteractionEvents.prototype._createSubProcessHit = function(element, gfx) {

    // remove existing hits
    this._interactionEvents.removeHits(gfx);

    // add body hit
    this._interactionEvents.createBoxHit(gfx, 'no-move', {
      width: element.width,
      height: element.height
    });

    // add outline hit
    this._interactionEvents.createBoxHit(gfx, 'click-stroke', {
      width: element.width,
      height: element.height
    });

    // add label hit
    this._interactionEvents.createBoxHit(gfx, 'all', {
      width: element.width,
      height: LABEL_HEIGHT
    });

    // indicate that we created a hit
    return true;
  };

  var InteractionEventsModule = {
    __init__: [ 'bpmnInteractionEvents' ],
    bpmnInteractionEvents: [ 'type', BpmnInteractionEvents ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   * @typedef {import('diagram-js/lib/features/editor-actions/EditorActions').default} EditorActions
   * @typedef {import('diagram-js/lib/features/keyboard/Keyboard').default} Keyboard
   */

  /**
   * BPMN 2.0 specific keyboard bindings.
   *
   * @param {Injector} injector
   */
  function BpmnKeyboardBindings(injector) {
    injector.invoke(KeyboardBindings, this);
  }

  e$3(BpmnKeyboardBindings, KeyboardBindings);

  BpmnKeyboardBindings.$inject = [
    'injector'
  ];


  /**
   * Register available keyboard bindings.
   *
   * @param {Keyboard} keyboard
   * @param {EditorActions} editorActions
   */
  BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {

    // inherit default bindings
    KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);

    /**
     * Add keyboard binding if respective editor action
     * is registered.
     *
     * @param {string} action name
     * @param {Function} fn that implements the key binding
     */
    function addListener(action, fn) {

      if (editorActions.isRegistered(action)) {
        keyboard.addListener(fn);
      }
    }

    // select all elements
    // CTRL + A
    addListener('selectElements', function(context) {

      var event = context.keyEvent;

      if (keyboard.isKey([ 'a', 'A' ], event) && keyboard.isCmd(event)) {
        editorActions.trigger('selectElements');

        return true;
      }
    });

    // search labels
    // CTRL + F
    addListener('find', function(context) {

      var event = context.keyEvent;

      if (keyboard.isKey([ 'f', 'F' ], event) && keyboard.isCmd(event)) {
        editorActions.trigger('find');

        return true;
      }
    });

    // activate space tool
    // S
    addListener('spaceTool', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 's', 'S' ], event)) {
        editorActions.trigger('spaceTool');

        return true;
      }
    });

    // activate lasso tool
    // L
    addListener('lassoTool', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 'l', 'L' ], event)) {
        editorActions.trigger('lassoTool');

        return true;
      }
    });

    // activate hand tool
    // H
    addListener('handTool', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 'h', 'H' ], event)) {
        editorActions.trigger('handTool');

        return true;
      }
    });

    // activate global connect tool
    // C
    addListener('globalConnectTool', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 'c', 'C' ], event)) {
        editorActions.trigger('globalConnectTool');

        return true;
      }
    });

    // activate direct editing
    // E
    addListener('directEditing', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 'e', 'E' ], event)) {
        editorActions.trigger('directEditing');

        return true;
      }
    });

    // activate replace element
    // R
    addListener('replaceElement', function(context) {

      var event = context.keyEvent;

      if (keyboard.hasModifier(event)) {
        return;
      }

      if (keyboard.isKey([ 'r', 'R' ], event)) {
        editorActions.trigger('replaceElement', event);

        return true;
      }
    });

  };

  var KeyboardModule = {
    __depends__: [
      KeyboardModule$1
    ],
    __init__: [ 'keyboardBindings' ],
    keyboardBindings: [ 'type', BpmnKeyboardBindings ]
  };

  /**
   * @typedef {import('../keyboard/Keyboard').default} Keyboard
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   * @typedef {import('../selection/Selection').default} Selection
   */

  var DEFAULT_CONFIG = {
    moveSpeed: 1,
    moveSpeedAccelerated: 10
  };

  var HIGHER_PRIORITY$3 = 1500;

  var LEFT = 'left';
  var UP = 'up';
  var RIGHT = 'right';
  var DOWN = 'down';

  var KEY_TO_DIRECTION = {
    ArrowLeft: LEFT,
    Left: LEFT,
    ArrowUp: UP,
    Up: UP,
    ArrowRight: RIGHT,
    Right: RIGHT,
    ArrowDown: DOWN,
    Down: DOWN
  };

  var DIRECTIONS_DELTA = {
    left: function(speed) {
      return {
        x: -speed,
        y: 0
      };
    },
    up: function(speed) {
      return {
        x: 0,
        y: -speed
      };
    },
    right: function(speed) {
      return {
        x: speed,
        y: 0
      };
    },
    down: function(speed) {
      return {
        x: 0,
        y: speed
      };
    }
  };


  /**
   * Enables to move selection with keyboard arrows.
   * Use with Shift for modified speed (default=1, with Shift=10).
   * Pressed Cmd/Ctrl turns the feature off.
   *
   * @param {Object} config
   * @param {number} [config.moveSpeed=1]
   * @param {number} [config.moveSpeedAccelerated=10]
   * @param {Keyboard} keyboard
   * @param {Modeling} modeling
   * @param {Rules} rules
   * @param {Selection} selection
   */
  function KeyboardMoveSelection(
      config,
      keyboard,
      modeling,
      rules,
      selection
  ) {

    var self = this;

    this._config = assign$1({}, DEFAULT_CONFIG, config || {});

    keyboard.addListener(HIGHER_PRIORITY$3, function(event) {

      var keyEvent = event.keyEvent;

      var direction = KEY_TO_DIRECTION[keyEvent.key];

      if (!direction) {
        return;
      }

      if (keyboard.isCmd(keyEvent)) {
        return;
      }

      var accelerated = keyboard.isShift(keyEvent);

      self.moveSelection(direction, accelerated);

      return true;
    });


    /**
     * Move selected elements in the given direction,
     * optionally specifying accelerated movement.
     *
     * @param {string} direction
     * @param {boolean} [accelerated=false]
     */
    this.moveSelection = function(direction, accelerated) {

      var selectedElements = selection.get();

      if (!selectedElements.length) {
        return;
      }

      var speed = this._config[
        accelerated ?
          'moveSpeedAccelerated' :
          'moveSpeed'
      ];

      var delta = DIRECTIONS_DELTA[direction](speed);

      var canMove = rules.allowed('elements.move', {
        shapes: selectedElements
      });

      if (canMove) {
        modeling.moveElements(selectedElements, delta);
      }
    };

  }

  KeyboardMoveSelection.$inject = [
    'config.keyboardMoveSelection',
    'keyboard',
    'modeling',
    'rules',
    'selection'
  ];

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var KeyboardMoveSelectionModule = {
    __depends__: [
      KeyboardModule$1,
      SelectionModule
    ],
    __init__: [
      'keyboardMoveSelection'
    ],
    keyboardMoveSelection: [ 'type', KeyboardMoveSelection ]
  };

  /**
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../../util/Types').Direction} Direction
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   */

  var DEFAULT_MIN_WIDTH = 10;


  /**
   * A component that provides resizing of shapes on the canvas.
   *
   * The following components are part of shape resize:
   *
   *  * adding resize handles,
   *  * creating a visual during resize
   *  * checking resize rules
   *  * committing a change once finished
   *
   *
   * ## Customizing
   *
   * It's possible to customize the resizing behaviour by intercepting 'resize.start'
   * and providing the following parameters through the 'context':
   *
   *   * minDimensions ({ width, height }): minimum shape dimensions
   *
   *   * childrenBoxPadding ({ left, top, bottom, right } || number):
   *     gap between the minimum bounding box and the container
   *
   * f.ex:
   *
   * ```javascript
   * eventBus.on('resize.start', 1500, function(event) {
   *   var context = event.context,
   *
   *  context.minDimensions = { width: 140, height: 120 };
   *
   *  // Passing general padding
   *  context.childrenBoxPadding = 30;
   *
   *  // Passing padding to a specific side
   *  context.childrenBoxPadding.left = 20;
   * });
   * ```
   *
   * @param {EventBus} eventBus
   * @param {Rules} rules
   * @param {Modeling} modeling
   * @param {Dragging} dragging
   */
  function Resize(eventBus, rules, modeling, dragging) {

    this._dragging = dragging;
    this._rules = rules;

    var self = this;


    /**
     * Handle resize move by specified delta.
     *
     * @param {Object} context
     * @param {Point} delta
     */
    function handleMove(context, delta) {

      var shape = context.shape,
          direction = context.direction,
          resizeConstraints = context.resizeConstraints,
          newBounds;

      context.delta = delta;

      newBounds = resizeBounds$1(shape, direction, delta);

      // ensure constraints during resize
      context.newBounds = ensureConstraints$2(newBounds, resizeConstraints);

      // update + cache executable state
      context.canExecute = self.canResize(context);
    }

    /**
     * Handle resize start.
     *
     * @param {Object} context
     */
    function handleStart(context) {

      var resizeConstraints = context.resizeConstraints,

          // evaluate minBounds for backwards compatibility
          minBounds = context.minBounds;

      if (resizeConstraints !== undefined) {
        return;
      }

      if (minBounds === undefined) {
        minBounds = self.computeMinResizeBox(context);
      }

      context.resizeConstraints = {
        min: asTRBL(minBounds)
      };
    }

    /**
     * Handle resize end.
     *
     * @param {Object} context
     */
    function handleEnd(context) {
      var shape = context.shape,
          canExecute = context.canExecute,
          newBounds = context.newBounds;

      if (canExecute) {

        // ensure we have actual pixel values for new bounds
        // (important when zoom level was > 1 during move)
        newBounds = roundBounds(newBounds);

        if (!boundsChanged(shape, newBounds)) {

          // no resize necessary
          return;
        }

        // perform the actual resize
        modeling.resizeShape(shape, newBounds);
      }
    }


    eventBus.on('resize.start', function(event) {
      handleStart(event.context);
    });

    eventBus.on('resize.move', function(event) {
      var delta = {
        x: event.dx,
        y: event.dy
      };

      handleMove(event.context, delta);
    });

    eventBus.on('resize.end', function(event) {
      handleEnd(event.context);
    });

  }


  Resize.prototype.canResize = function(context) {
    var rules = this._rules;

    var ctx = pick(context, [ 'newBounds', 'shape', 'delta', 'direction' ]);

    return rules.allowed('shape.resize', ctx);
  };

  /**
   * Activate a resize operation.
   *
   * You may specify additional contextual information and must specify a
   * resize direction during activation of the resize event.
   *
   * @param {MouseEvent|TouchEvent} event
   * @param {Shape} shape
   * @param {Object|Direction} contextOrDirection
   */
  Resize.prototype.activate = function(event, shape, contextOrDirection) {
    var dragging = this._dragging,
        context,
        direction;

    if (typeof contextOrDirection === 'string') {
      contextOrDirection = {
        direction: contextOrDirection
      };
    }

    context = assign$1({ shape: shape }, contextOrDirection);

    direction = context.direction;

    if (!direction) {
      throw new Error('must provide a direction (n|w|s|e|nw|se|ne|sw)');
    }

    dragging.init(event, getReferencePoint(shape, direction), 'resize', {
      autoActivate: true,
      cursor: getCursor(direction),
      data: {
        shape: shape,
        context: context
      }
    });
  };

  Resize.prototype.computeMinResizeBox = function(context) {
    var shape = context.shape,
        direction = context.direction,
        minDimensions,
        childrenBounds;

    minDimensions = context.minDimensions || {
      width: DEFAULT_MIN_WIDTH,
      height: DEFAULT_MIN_WIDTH
    };

    // get children bounds
    childrenBounds = computeChildrenBBox(shape, context.childrenBoxPadding);

    // get correct minimum bounds from given resize direction
    // basically ensures that the minBounds is max(childrenBounds, minDimensions)
    return getMinResizeBounds(direction, shape, minDimensions, childrenBounds);
  };


  Resize.$inject = [
    'eventBus',
    'rules',
    'modeling',
    'dragging'
  ];

  // helpers //////////

  function boundsChanged(shape, newBounds) {
    return shape.x !== newBounds.x ||
      shape.y !== newBounds.y ||
      shape.width !== newBounds.width ||
      shape.height !== newBounds.height;
  }

  function getReferencePoint(shape, direction) {
    var mid = getMid(shape),
        trbl = asTRBL(shape);

    var referencePoint = {
      x: mid.x,
      y: mid.y
    };

    if (direction.indexOf('n') !== -1) {
      referencePoint.y = trbl.top;
    } else if (direction.indexOf('s') !== -1) {
      referencePoint.y = trbl.bottom;
    }

    if (direction.indexOf('e') !== -1) {
      referencePoint.x = trbl.right;
    } else if (direction.indexOf('w') !== -1) {
      referencePoint.x = trbl.left;
    }

    return referencePoint;
  }

  function getCursor(direction) {
    var prefix = 'resize-';

    if (direction === 'n' || direction === 's') {
      return prefix + 'ns';
    } else if (direction === 'e' || direction === 'w') {
      return prefix + 'ew';
    } else if (direction === 'nw' || direction === 'se') {
      return prefix + 'nwse';
    } else {
      return prefix + 'nesw';
    }
  }

  var MARKER_RESIZING = 'djs-resizing',
      MARKER_RESIZE_NOT_OK = 'resize-not-ok';

  var LOW_PRIORITY$5 = 500;

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../preview-support/PreviewSupport').default} PreviewSupport
   */

  /**
   * Provides previews for resizing shapes when resizing.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {PreviewSupport} previewSupport
   */
  function ResizePreview(eventBus, canvas, previewSupport) {

    /**
     * Update resizer frame.
     *
     * @param {Object} context
     */
    function updateFrame(context) {

      var shape = context.shape,
          bounds = context.newBounds,
          frame = context.frame;

      if (!frame) {
        frame = context.frame = previewSupport.addFrame(shape, canvas.getActiveLayer());

        canvas.addMarker(shape, MARKER_RESIZING);
      }

      if (bounds.width > 5) {
        attr$1(frame, { x: bounds.x, width: bounds.width });
      }

      if (bounds.height > 5) {
        attr$1(frame, { y: bounds.y, height: bounds.height });
      }

      if (context.canExecute) {
        classes$1(frame).remove(MARKER_RESIZE_NOT_OK);
      } else {
        classes$1(frame).add(MARKER_RESIZE_NOT_OK);
      }
    }

    /**
     * Remove resizer frame.
     *
     * @param {Object} context
     */
    function removeFrame(context) {
      var shape = context.shape,
          frame = context.frame;

      if (frame) {
        remove$3(context.frame);
      }

      canvas.removeMarker(shape, MARKER_RESIZING);
    }

    // add and update previews
    eventBus.on('resize.move', LOW_PRIORITY$5, function(event) {
      updateFrame(event.context);
    });

    // remove previews
    eventBus.on('resize.cleanup', function(event) {
      removeFrame(event.context);
    });

  }

  ResizePreview.$inject = [
    'eventBus',
    'canvas',
    'previewSupport'
  ];

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../resize/Resize').default} Resize
   * @typedef {import('../selection/Selection').default} Selection
   */

  var HANDLE_OFFSET = -6,
      HANDLE_SIZE = 8,
      HANDLE_HIT_SIZE = 20;

  var CLS_RESIZER = 'djs-resizer';

  var directions = [ 'n', 'w', 's', 'e', 'nw', 'ne', 'se', 'sw' ];


  /**
   * This component is responsible for adding resize handles.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Selection} selection
   * @param {Resize} resize
   */
  function ResizeHandles(eventBus, canvas, selection, resize) {

    this._resize = resize;
    this._canvas = canvas;

    var self = this;

    eventBus.on('selection.changed', function(e) {
      var newSelection = e.newSelection;

      // remove old selection markers
      self.removeResizers();

      // add new selection markers ONLY if single selection
      if (newSelection.length === 1) {
        forEach$1(newSelection, bind$2(self.addResizer, self));
      }
    });

    eventBus.on('shape.changed', function(e) {
      var shape = e.element;

      if (selection.isSelected(shape)) {
        self.removeResizers();

        self.addResizer(shape);
      }
    });
  }


  ResizeHandles.prototype.makeDraggable = function(element, gfx, direction) {
    var resize = this._resize;

    function startResize(event) {

      // only trigger on left mouse button
      if (isPrimaryButton(event)) {
        resize.activate(event, element, direction);
      }
    }

    event.bind(gfx, 'mousedown', startResize);
    event.bind(gfx, 'touchstart', startResize);
  };


  ResizeHandles.prototype._createResizer = function(element, x, y, direction) {
    var resizersParent = this._getResizersParent();

    var offset = getHandleOffset(direction);

    var group = create$1('g');

    classes$1(group).add(CLS_RESIZER);
    classes$1(group).add(CLS_RESIZER + '-' + element.id);
    classes$1(group).add(CLS_RESIZER + '-' + direction);

    append(resizersParent, group);

    var visual = create$1('rect');

    attr$1(visual, {
      x: -8 / 2 + offset.x,
      y: -8 / 2 + offset.y,
      width: HANDLE_SIZE,
      height: HANDLE_SIZE
    });

    classes$1(visual).add(CLS_RESIZER + '-visual');

    append(group, visual);

    var hit = create$1('rect');

    attr$1(hit, {
      x: -20 / 2 + offset.x,
      y: -20 / 2 + offset.y,
      width: HANDLE_HIT_SIZE,
      height: HANDLE_HIT_SIZE
    });

    classes$1(hit).add(CLS_RESIZER + '-hit');

    append(group, hit);

    transform(group, x, y);

    return group;
  };

  ResizeHandles.prototype.createResizer = function(element, direction) {
    var point = getReferencePoint(element, direction);

    var resizer = this._createResizer(element, point.x, point.y, direction);

    this.makeDraggable(element, resizer, direction);
  };

  // resize handles implementation ///////////////////////////////

  /**
   * Add resizers for a given element.
   *
   * @param {Element} element
   */
  ResizeHandles.prototype.addResizer = function(element) {
    var self = this;

    if (isConnection(element) || !this._resize.canResize({ shape: element })) {
      return;
    }

    forEach$1(directions, function(direction) {
      self.createResizer(element, direction);
    });
  };

  /**
   * Remove all resizers
   */
  ResizeHandles.prototype.removeResizers = function() {
    var resizersParent = this._getResizersParent();

    clear$1(resizersParent);
  };

  ResizeHandles.prototype._getResizersParent = function() {
    return this._canvas.getLayer('resizers');
  };

  ResizeHandles.$inject = [
    'eventBus',
    'canvas',
    'selection',
    'resize'
  ];

  // helpers //////////

  function getHandleOffset(direction) {
    var offset = {
      x: 0,
      y: 0
    };

    if (direction.indexOf('e') !== -1) {
      offset.x = 6;
    } else if (direction.indexOf('w') !== -1) {
      offset.x = HANDLE_OFFSET;
    }

    if (direction.indexOf('s') !== -1) {
      offset.y = 6;
    } else if (direction.indexOf('n') !== -1) {
      offset.y = HANDLE_OFFSET;
    }

    return offset;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var ResizeModule = {
    __depends__: [
      RulesModule$1,
      DraggingModule,
      PreviewSupportModule
    ],
    __init__: [
      'resize',
      'resizePreview',
      'resizeHandles'
    ],
    resize: [ 'type', Resize ],
    resizePreview: [ 'type', ResizePreview ],
    resizeHandles: [ 'type', ResizeHandles ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js-direct-editing/lib/DirectEditing').default} DirectEditing
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('diagram-js/lib/features/resize/ResizeHandles').default} ResizeHandles
   * @typedef {import('../../draw/TextRenderer').default} TextRenderer
   *
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef { {
   *   bounds: {
   *     x: number;
   *     y: number;
   *     width: number;
   *     height: number;
   *     minWidth?: number;
   *     minHeight?: number;
   *   };
   *   style: Object;
   * } } DirectEditingContext
   */

  var HIGH_PRIORITY$3 = 2000;

  /**
   * @param {EventBus} eventBus
   * @param {BpmnFactory} bpmnFactory
   * @param {Canvas} canvas
   * @param {DirectEditing} directEditing
   * @param {Modeling} modeling
   * @param {ResizeHandles} resizeHandles
   * @param {TextRenderer} textRenderer
   */
  function LabelEditingProvider(
      eventBus, bpmnFactory, canvas, directEditing,
      modeling, resizeHandles, textRenderer) {

    this._bpmnFactory = bpmnFactory;
    this._canvas = canvas;
    this._modeling = modeling;
    this._textRenderer = textRenderer;

    directEditing.registerProvider(this);

    // listen to dblclick on non-root elements
    eventBus.on('element.dblclick', function(event) {
      activateDirectEdit(event.element, true);
    });

    // complete on followup canvas operation
    eventBus.on([
      'autoPlace.start',
      'canvas.viewbox.changing',
      'drag.init',
      'element.mousedown',
      'popupMenu.open',
      'root.set',
      'selection.changed'
    ], function() {
      if (directEditing.isActive()) {
        directEditing.complete();
      }
    });

    eventBus.on([
      'shape.remove',
      'connection.remove'
    ], HIGH_PRIORITY$3, function(event) {

      if (directEditing.isActive(event.element)) {
        directEditing.cancel();
      }
    });

    // cancel on command stack changes
    eventBus.on([ 'commandStack.changed' ], function(e) {
      if (directEditing.isActive()) {
        directEditing.cancel();
      }
    });


    eventBus.on('directEditing.activate', function(event) {
      resizeHandles.removeResizers();
    });

    eventBus.on('create.end', 500, function(event) {

      var context = event.context,
          element = context.shape,
          canExecute = event.context.canExecute,
          isTouch = event.isTouch;

      // TODO(nikku): we need to find a way to support the
      // direct editing on mobile devices; right now this will
      // break for desworkflowediting on mobile devices
      // as it breaks the user interaction workflow

      // TODO(nikku): we should temporarily focus the edited element
      // here and release the focused viewport after the direct edit
      // operation is finished
      if (isTouch) {
        return;
      }

      if (!canExecute) {
        return;
      }

      if (context.hints && context.hints.createElementsBehavior === false) {
        return;
      }

      activateDirectEdit(element);
    });

    eventBus.on('autoPlace.end', 500, function(event) {
      activateDirectEdit(event.shape);
    });


    function activateDirectEdit(element, force) {
      if (force ||
          isAny(element, [ 'bpmn:Task', 'bpmn:TextAnnotation', 'bpmn:Participant' ]) ||
          isCollapsedSubProcess(element)) {

        directEditing.activate(element);
      }
    }

  }

  LabelEditingProvider.$inject = [
    'eventBus',
    'bpmnFactory',
    'canvas',
    'directEditing',
    'modeling',
    'resizeHandles',
    'textRenderer'
  ];


  /**
   * Activate direct editing for activities and text annotations.
   *
   * @param {Element} element
   *
   * @return { {
   *   text: string;
   *   options?: {
   *     autoResize?: boolean;
   *     centerVertically?: boolean;
   *     resizable?: boolean;
   *   }
   * } & DirectEditingContext }
   */
  LabelEditingProvider.prototype.activate = function(element) {

    // text
    var text = getLabel(element);

    if (text === undefined) {
      return;
    }

    var context = {
      text: text
    };

    // bounds
    var bounds = this.getEditingBBox(element);

    assign$1(context, bounds);

    var options = {};
    var style = context.style || {};

    // Remove background and border
    assign$1(style, {
      backgroundColor: null,
      border: null
    });

    // tasks
    if (
      isAny(element, [
        'bpmn:Task',
        'bpmn:Participant',
        'bpmn:Lane',
        'bpmn:CallActivity'
      ]) ||
      isCollapsedSubProcess(element)
    ) {
      assign$1(options, {
        centerVertically: true
      });
    }

    // external labels
    if (isLabelExternal(element)) {
      assign$1(options, {
        autoResize: true
      });

      // keep background and border for external labels
      assign$1(style, {
        backgroundColor: '#ffffff',
        border: '1px solid #ccc'
      });
    }

    // text annotations
    if (is$1(element, 'bpmn:TextAnnotation')) {
      assign$1(options, {
        resizable: true,
        autoResize: true
      });

      // keep background and border for text annotations
      assign$1(style, {
        backgroundColor: '#ffffff',
        border: '1px solid #ccc'
      });
    }

    assign$1(context, {
      options: options,
      style: style
    });

    return context;
  };


  /**
   * Get the editing bounding box based on the element's size and position.
   *
   * @param {Element} element
   *
   * @return {DirectEditingContext}
   */
  LabelEditingProvider.prototype.getEditingBBox = function(element) {
    var canvas = this._canvas;

    var target = element.label || element;

    var bbox = canvas.getAbsoluteBBox(target);

    var mid = {
      x: bbox.x + bbox.width / 2,
      y: bbox.y + bbox.height / 2
    };

    // default position
    var bounds = { x: bbox.x, y: bbox.y };

    var zoom = canvas.zoom();

    var defaultStyle = this._textRenderer.getDefaultStyle(),
        externalStyle = this._textRenderer.getExternalStyle();

    // take zoom into account
    var externalFontSize = externalStyle.fontSize * zoom,
        externalLineHeight = externalStyle.lineHeight,
        defaultFontSize = defaultStyle.fontSize * zoom,
        defaultLineHeight = defaultStyle.lineHeight;

    var style = {
      fontFamily: this._textRenderer.getDefaultStyle().fontFamily,
      fontWeight: this._textRenderer.getDefaultStyle().fontWeight
    };

    // adjust for expanded pools AND lanes
    if (is$1(element, 'bpmn:Lane') || isExpandedPool(element)) {
      var isHorizontalLane = isHorizontal$3(element);

      var laneBounds = isHorizontalLane ? {
        width: bbox.height,
        height: 30 * zoom,
        x: bbox.x - bbox.height / 2 + (15 * zoom),
        y: mid.y - (30 * zoom) / 2
      } : {
        width: bbox.width,
        height: 30 * zoom
      };

      assign$1(bounds, laneBounds);

      assign$1(style, {
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight,
        paddingTop: (7 * zoom) + 'px',
        paddingBottom: (7 * zoom) + 'px',
        paddingLeft: (5 * zoom) + 'px',
        paddingRight: (5 * zoom) + 'px',
        transform: isHorizontalLane ? 'rotate(-90deg)' : null
      });
    }


    // internal labels for collapsed participants
    if (isCollapsedPool(element)) {
      var isHorizontalPool = isHorizontal$3(element);

      var poolBounds = isHorizontalPool ? {
        width: bbox.width,
        height: bbox.height
      } : {
        width: bbox.height,
        height: bbox.width,
        x: mid.x - bbox.height / 2,
        y: mid.y - bbox.width / 2
      };

      assign$1(bounds, poolBounds);

      assign$1(style, {
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight,
        paddingTop: (7 * zoom) + 'px',
        paddingBottom: (7 * zoom) + 'px',
        paddingLeft: (5 * zoom) + 'px',
        paddingRight: (5 * zoom) + 'px',
        transform: isHorizontalPool ? null : 'rotate(-90deg)'
      });
    }


    // internal labels for tasks and collapsed call activities
    // and sub processes
    if (isAny(element, [ 'bpmn:Task', 'bpmn:CallActivity' ]) ||
        isCollapsedSubProcess(element)) {

      assign$1(bounds, {
        width: bbox.width,
        height: bbox.height
      });

      assign$1(style, {
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight,
        paddingTop: (7 * zoom) + 'px',
        paddingBottom: (7 * zoom) + 'px',
        paddingLeft: (5 * zoom) + 'px',
        paddingRight: (5 * zoom) + 'px'
      });
    }


    // internal labels for expanded sub processes
    if (isExpandedSubProcess(element)) {
      assign$1(bounds, {
        width: bbox.width,
        x: bbox.x
      });

      assign$1(style, {
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight,
        paddingTop: (7 * zoom) + 'px',
        paddingBottom: (7 * zoom) + 'px',
        paddingLeft: (5 * zoom) + 'px',
        paddingRight: (5 * zoom) + 'px'
      });
    }

    var width = 90 * zoom,
        paddingTop = 7 * zoom,
        paddingBottom = 4 * zoom;

    // external labels for events, data elements, gateways, groups and connections
    if (target.labelTarget) {
      assign$1(bounds, {
        width: width,
        height: bbox.height + paddingTop + paddingBottom,
        x: mid.x - width / 2,
        y: bbox.y - paddingTop
      });

      assign$1(style, {
        fontSize: externalFontSize + 'px',
        lineHeight: externalLineHeight,
        paddingTop: paddingTop + 'px',
        paddingBottom: paddingBottom + 'px'
      });
    }

    // external label not yet created
    if (isLabelExternal(target)
        && !hasExternalLabel(target)
        && !isLabel(target)) {

      var externalLabelMid = getExternalLabelMid(element);

      var absoluteBBox = canvas.getAbsoluteBBox({
        x: externalLabelMid.x,
        y: externalLabelMid.y,
        width: 0,
        height: 0
      });

      var height = externalFontSize + paddingTop + paddingBottom;

      assign$1(bounds, {
        width: width,
        height: height,
        x: absoluteBBox.x - width / 2,
        y: absoluteBBox.y - height / 2
      });

      assign$1(style, {
        fontSize: externalFontSize + 'px',
        lineHeight: externalLineHeight,
        paddingTop: paddingTop + 'px',
        paddingBottom: paddingBottom + 'px'
      });
    }

    // text annotations
    if (is$1(element, 'bpmn:TextAnnotation')) {
      assign$1(bounds, {
        width: bbox.width,
        height: bbox.height,
        minWidth: 30 * zoom,
        minHeight: 10 * zoom
      });

      assign$1(style, {
        textAlign: 'left',
        paddingTop: (5 * zoom) + 'px',
        paddingBottom: (7 * zoom) + 'px',
        paddingLeft: (7 * zoom) + 'px',
        paddingRight: (5 * zoom) + 'px',
        fontSize: defaultFontSize + 'px',
        lineHeight: defaultLineHeight
      });
    }

    return { bounds: bounds, style: style };
  };


  LabelEditingProvider.prototype.update = function(
      element, newLabel,
      activeContextText, bounds) {

    var newBounds,
        bbox;

    if (is$1(element, 'bpmn:TextAnnotation')) {

      bbox = this._canvas.getAbsoluteBBox(element);

      newBounds = {
        x: element.x,
        y: element.y,
        width: element.width / bbox.width * bounds.width,
        height: element.height / bbox.height * bounds.height
      };
    }

    if (isEmptyText(newLabel)) {
      newLabel = null;
    }

    this._modeling.updateLabel(element, newLabel, newBounds);
  };



  // helpers //////////

  function isCollapsedSubProcess(element) {
    return is$1(element, 'bpmn:SubProcess') && !isExpanded(element);
  }

  function isExpandedSubProcess(element) {
    return is$1(element, 'bpmn:SubProcess') && isExpanded(element);
  }

  function isCollapsedPool(element) {
    return is$1(element, 'bpmn:Participant') && !isExpanded(element);
  }

  function isExpandedPool(element) {
    return is$1(element, 'bpmn:Participant') && isExpanded(element);
  }

  function isEmptyText(label) {
    return !label || !label.trim();
  }

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('../../draw/PathMap').default} PathMap
   */

  var MARKER_HIDDEN = 'djs-element-hidden',
      MARKER_LABEL_HIDDEN = 'djs-label-hidden';

  /**
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {PathMap} pathMap
   */
  function LabelEditingPreview(eventBus, canvas, pathMap) {

    var self = this;

    var defaultLayer = canvas.getDefaultLayer();

    var element, absoluteElementBBox, gfx;

    eventBus.on('directEditing.activate', function(context) {
      var activeProvider = context.active;

      element = activeProvider.element.label || activeProvider.element;

      // text annotation
      if (is$1(element, 'bpmn:TextAnnotation')) {
        absoluteElementBBox = canvas.getAbsoluteBBox(element);

        gfx = create$1('g');

        var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.0,
            my: 0.0
          }
        });

        var path = self.path = create$1('path');

        attr$1(path, {
          d: textPathData,
          strokeWidth: 2,
          stroke: getStrokeColor(element)
        });

        append(gfx, path);

        append(defaultLayer, gfx);

        translate$1(gfx, element.x, element.y);
      }

      if (is$1(element, 'bpmn:TextAnnotation') ||
          element.labelTarget) {
        canvas.addMarker(element, MARKER_HIDDEN);
      } else if (is$1(element, 'bpmn:Task') ||
                 is$1(element, 'bpmn:CallActivity') ||
                 is$1(element, 'bpmn:SubProcess') ||
                 is$1(element, 'bpmn:Participant') ||
                 is$1(element, 'bpmn:Lane')) {
        canvas.addMarker(element, MARKER_LABEL_HIDDEN);
      }
    });

    eventBus.on('directEditing.resize', function(context) {

      // text annotation
      if (is$1(element, 'bpmn:TextAnnotation')) {
        var height = context.height,
            dy = context.dy;

        var newElementHeight = Math.max(element.height / absoluteElementBBox.height * (height + dy), 0);

        var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: newElementHeight,
          position: {
            mx: 0.0,
            my: 0.0
          }
        });

        attr$1(self.path, {
          d: textPathData
        });
      }
    });

    eventBus.on([ 'directEditing.complete', 'directEditing.cancel' ], function(context) {
      var activeProvider = context.active;

      if (activeProvider) {
        canvas.removeMarker(activeProvider.element.label || activeProvider.element, MARKER_HIDDEN);
        canvas.removeMarker(element, MARKER_LABEL_HIDDEN);
      }

      element = undefined;
      absoluteElementBBox = undefined;

      if (gfx) {
        remove$3(gfx);

        gfx = undefined;
      }
    });
  }

  LabelEditingPreview.$inject = [
    'eventBus',
    'canvas',
    'pathMap'
  ];


  // helpers //////////

  function getStrokeColor(element, defaultColor) {
    var di = getDi(element);

    return di.get('stroke') || defaultColor || 'black';
  }

  var LabelEditingModule = {
    __depends__: [
      ChangeSupportModule,
      ResizeModule,
      DirectEditingModule
    ],
    __init__: [
      'labelEditingProvider',
      'labelEditingPreview'
    ],
    labelEditingProvider: [ 'type', LabelEditingProvider ],
    labelEditingPreview: [ 'type', LabelEditingPreview ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('../../util/Types').RectTRBL} RectTRBL
   *
   * @typedef { {
   *   html: string | HTMLElement;
   *   position: RectTRBL;
   *   show?: {
   *     minZoom?: number;
   *     maxZoom?: number;
   *   };
   *   timeout?: number;
   * } } Tooltip
   */

  // document wide unique tooltip ids
  var ids = new IdGenerator('tt');


  function createRoot(parentNode) {
    var root = domify$1(
      '<div class="djs-tooltip-container" />'
    );

    assign(root, {
      position: 'absolute',
      width: '0',
      height: '0'
    });

    parentNode.insertBefore(root, parentNode.firstChild);

    return root;
  }


  function setPosition(el, x, y) {
    assign(el, { left: x + 'px', top: y + 'px' });
  }

  function setVisible(el, visible) {
    el.style.display = visible === false ? 'none' : '';
  }


  var tooltipClass = 'djs-tooltip',
      tooltipSelector = '.' + tooltipClass;

  /**
   * A service that allows users to render tool tips on the diagram.
   *
   * The tooltip service will take care of updating the tooltip positioning
   * during navigation + zooming.
   *
   * @example
   *
   * ```javascript
   *
   * // add a pink badge on the top left of the shape
   * tooltips.add({
   *   position: {
   *     x: 50,
   *     y: 100
   *   },
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
   * });
   *
   * // or with optional life span
   * tooltips.add({
   *   position: {
   *     top: -5,
   *     left: -5
   *   },
   *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>',
   *   ttl: 2000
   * });
   *
   * // remove a tool tip
   * var id = tooltips.add(...);
   *
   * tooltips.remove(id);
   * ```
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function Tooltips(eventBus, canvas) {

    this._eventBus = eventBus;
    this._canvas = canvas;

    this._ids = ids;

    this._tooltipDefaults = {
      show: {
        minZoom: 0.7,
        maxZoom: 5.0
      }
    };

    /**
     * @type {Record<string, Tooltip>}
     */
    this._tooltips = {};

    // root html element for all tooltips
    this._tooltipRoot = createRoot(canvas.getContainer());


    var self = this;

    delegate.bind(this._tooltipRoot, tooltipSelector, 'mousedown', function(event) {
      event.stopPropagation();
    });

    delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseover', function(event) {
      self.trigger('mouseover', event);
    });

    delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseout', function(event) {
      self.trigger('mouseout', event);
    });

    this._init();
  }


  Tooltips.$inject = [ 'eventBus', 'canvas' ];


  /**
   * Adds an HTML tooltip to the diagram.
   *
   * @param {Tooltip} tooltip
   *
   * @return {string} ID of the tooltip.
   */
  Tooltips.prototype.add = function(tooltip) {

    if (!tooltip.position) {
      throw new Error('must specifiy tooltip position');
    }

    if (!tooltip.html) {
      throw new Error('must specifiy tooltip html');
    }

    var id = this._ids.next();

    tooltip = assign$1({}, this._tooltipDefaults, tooltip, {
      id: id
    });

    this._addTooltip(tooltip);

    if (tooltip.timeout) {
      this.setTimeout(tooltip);
    }

    return id;
  };

  /**
   * @param {string} action
   * @param {Event} event
   */
  Tooltips.prototype.trigger = function(action, event) {

    var node = event.delegateTarget || event.target;

    var tooltip = this.get(attr(node, 'data-tooltip-id'));

    if (!tooltip) {
      return;
    }

    if (action === 'mouseover' && tooltip.timeout) {
      this.clearTimeout(tooltip);
    }

    if (action === 'mouseout' && tooltip.timeout) {

      // cut timeout after mouse out
      tooltip.timeout = 1000;

      this.setTimeout(tooltip);
    }
  };

  /**
   * Get tooltip with given ID.
   *
   * @param {Tooltip|string} id
   *
   * @return {Tooltip|undefined}
   */
  Tooltips.prototype.get = function(id) {

    if (typeof id !== 'string') {
      id = id.id;
    }

    return this._tooltips[id];
  };

  /**
   * @param {Tooltip} tooltip
   */
  Tooltips.prototype.clearTimeout = function(tooltip) {

    tooltip = this.get(tooltip);

    if (!tooltip) {
      return;
    }

    var removeTimer = tooltip.removeTimer;

    if (removeTimer) {
      clearTimeout(removeTimer);
      tooltip.removeTimer = null;
    }
  };

  /**
   * @param {Tooltip} tooltip
   */
  Tooltips.prototype.setTimeout = function(tooltip) {

    tooltip = this.get(tooltip);

    if (!tooltip) {
      return;
    }

    this.clearTimeout(tooltip);

    var self = this;

    tooltip.removeTimer = setTimeout(function() {
      self.remove(tooltip);
    }, tooltip.timeout);
  };

  /**
   * Remove tooltip with given ID.
   *
   * @param {string | Tooltip} id
   */
  Tooltips.prototype.remove = function(id) {

    var tooltip = this.get(id);

    if (tooltip) {
      remove$2(tooltip.html);
      remove$2(tooltip.htmlContainer);

      delete tooltip.htmlContainer;

      delete this._tooltips[tooltip.id];
    }
  };


  Tooltips.prototype.show = function() {
    setVisible(this._tooltipRoot);
  };


  Tooltips.prototype.hide = function() {
    setVisible(this._tooltipRoot, false);
  };


  Tooltips.prototype._updateRoot = function(viewbox) {
    var a = viewbox.scale || 1;
    var d = viewbox.scale || 1;

    var matrix = 'matrix(' + a + ',0,0,' + d + ',' + (-1 * viewbox.x * a) + ',' + (-1 * viewbox.y * d) + ')';

    this._tooltipRoot.style.transform = matrix;
    this._tooltipRoot.style['-ms-transform'] = matrix;
  };


  Tooltips.prototype._addTooltip = function(tooltip) {

    var id = tooltip.id,
        html = tooltip.html,
        htmlContainer,
        tooltipRoot = this._tooltipRoot;

    // unwrap jquery (for those who need it)
    if (html.get && html.constructor.prototype.jquery) {
      html = html.get(0);
    }

    // create proper html elements from
    // tooltip HTML strings
    if (isString(html)) {
      html = domify$1(html);
    }

    htmlContainer = domify$1('<div data-tooltip-id="' + id + '" class="' + tooltipClass + '">');
    assign(htmlContainer, { position: 'absolute' });

    htmlContainer.appendChild(html);

    if (tooltip.type) {
      classes(htmlContainer).add('djs-tooltip-' + tooltip.type);
    }

    if (tooltip.className) {
      classes(htmlContainer).add(tooltip.className);
    }

    tooltip.htmlContainer = htmlContainer;

    tooltipRoot.appendChild(htmlContainer);

    this._tooltips[id] = tooltip;

    this._updateTooltip(tooltip);
  };


  Tooltips.prototype._updateTooltip = function(tooltip) {

    var position = tooltip.position,
        htmlContainer = tooltip.htmlContainer;

    // update overlay html based on tooltip x, y

    setPosition(htmlContainer, position.x, position.y);
  };


  Tooltips.prototype._updateTooltipVisibilty = function(viewbox) {

    forEach$1(this._tooltips, function(tooltip) {
      var show = tooltip.show,
          htmlContainer = tooltip.htmlContainer,
          visible = true;

      if (show) {
        if (show.minZoom > viewbox.scale ||
            show.maxZoom < viewbox.scale) {
          visible = false;
        }

        setVisible(htmlContainer, visible);
      }
    });
  };

  Tooltips.prototype._init = function() {

    var self = this;

    // scroll/zoom integration

    function updateViewbox(viewbox) {
      self._updateRoot(viewbox);
      self._updateTooltipVisibilty(viewbox);

      self.show();
    }

    this._eventBus.on('canvas.viewbox.changing', function(event) {
      self.hide();
    });

    this._eventBus.on('canvas.viewbox.changed', function(event) {
      updateViewbox(event.viewbox);
    });
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var TooltipsModule = {
    __init__: [ 'tooltips' ],
    tooltips: [ 'type', Tooltips ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/features/tooltips/Tooltips').default} Tooltips
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   */

  var COLLAB_ERR_MSG = 'flow elements must be children of pools/participants';
  var DATA_OBJECT_ERR_MSG = 'Data object must be placed within a pool/participant.';

  /**
   * @param {EventBus} eventBus
   * @param {Tooltips} tooltips
   * @param {Translate} translate
   */
  function ModelingFeedback(eventBus, tooltips, translate) {

    function showError(position, message, timeout) {
      tooltips.add({
        position: {
          x: position.x + 5,
          y: position.y + 5
        },
        type: 'error',
        timeout: 2000,
        html: '<div>' + message + '</div>'
      });
    }

    eventBus.on([ 'shape.move.rejected', 'create.rejected' ], function(event) {
      var context = event.context,
          shape = context.shape,
          target = context.target;

      if (is$1(target, 'bpmn:Collaboration')) {
        if (is$1(shape, 'bpmn:FlowNode')) {
          showError(event, translate(COLLAB_ERR_MSG));
        } else if (is$1(shape, 'bpmn:DataObjectReference')) {
          showError(event, translate(DATA_OBJECT_ERR_MSG));
        }
      }
    });

  }

  ModelingFeedback.$inject = [
    'eventBus',
    'tooltips',
    'translate'
  ];

  var ModelingFeedbackModule = {
    __depends__: [
      TooltipsModule
    ],
    __init__: [
      'modelingFeedback'
    ],
    modelingFeedback: [ 'type', ModelingFeedback ]
  };

  var LOW_PRIORITY$4 = 500;

  var DEFAULT_PRIORITY$2 = 1000;

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('./OutlineProvider').default} OutlineProvider
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../../draw/Styles').default} Styles
   */

  /**
   * @class
   *
   * A plugin that adds an outline to shapes and connections that may be activated and styled
   * via CSS classes.
   *
   * @param {EventBus} eventBus
   * @param {Styles} styles
   */
  function Outline(eventBus, styles) {

    this._eventBus = eventBus;

    this.offset = 5;

    var OUTLINE_STYLE = styles.cls('djs-outline', [ 'no-fill' ]);

    var self = this;

    /**
     * @param {SVGElement} gfx
     *
     * @return {SVGElement} outline
     */
    function createOutline(gfx) {
      var outline = create$1('rect');

      attr$1(outline, assign$1({
        x: 0,
        y: 0,
        rx: 4,
        width: 100,
        height: 100
      }, OUTLINE_STYLE));

      return outline;
    }

    // A low priortity is necessary, because outlines of labels have to be updated
    // after the label bounds have been updated in the renderer.
    eventBus.on([ 'shape.added', 'shape.changed' ], LOW_PRIORITY$4, function(event) {
      var element = event.element,
          gfx = event.gfx;

      var outline = query('.djs-outline', gfx);

      if (!outline) {
        outline = self.getOutline(element) || createOutline();
        append(gfx, outline);
      }

      self.updateShapeOutline(outline, element);
    });

    eventBus.on([ 'connection.added', 'connection.changed' ], function(event) {
      var element = event.element,
          gfx = event.gfx;

      var outline = query('.djs-outline', gfx);

      if (!outline) {
        outline = createOutline();
        append(gfx, outline);
      }

      self.updateConnectionOutline(outline, element);
    });
  }


  /**
   * Updates the outline of a shape respecting the dimension of the
   * element and an outline offset.
   *
   * @param {SVGElement} outline
   * @param {Element} element
   */
  Outline.prototype.updateShapeOutline = function(outline, element) {

    var updated = false;
    var providers = this._getProviders();

    if (providers.length) {
      forEach$1(providers, function(provider) {
        updated = updated || provider.updateOutline(element, outline);
      });
    }

    if (!updated) {
      attr$1(outline, {
        x: -this.offset,
        y: -this.offset,
        width: element.width + this.offset * 2,
        height: element.height + this.offset * 2
      });
    }
  };

  /**
   * Updates the outline of a connection respecting the bounding box of
   * the connection and an outline offset.
   * Register an outline provider with the given priority.
   *
   * @param {SVGElement} outline
   * @param {Element} connection
   */
  Outline.prototype.updateConnectionOutline = function(outline, connection) {
    var bbox = getBBox(connection);

    attr$1(outline, {
      x: bbox.x - this.offset,
      y: bbox.y - this.offset,
      width: bbox.width + this.offset * 2,
      height: bbox.height + this.offset * 2
    });
  };

  /**
   * Register an outline provider with the given priority.
   *
   * @param {number} priority
   * @param {OutlineProvider} provider
   */
  Outline.prototype.registerProvider = function(priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$2;
    }

    this._eventBus.on('outline.getProviders', priority, function(event) {
      event.providers.push(provider);
    });
  };

  /**
   * Returns the registered outline providers.
   *
   * @returns {OutlineProvider[]}
   */
  Outline.prototype._getProviders = function() {
    var event = this._eventBus.createEvent({
      type: 'outline.getProviders',
      providers: []
    });

    this._eventBus.fire(event);

    return event.providers;
  };

  /**
   * Returns the outline for an element.
   *
   * @param {Element} element
   */
  Outline.prototype.getOutline = function(element) {
    var outline;
    var providers = this._getProviders();

    forEach$1(providers, function(provider) {

      if (!isFunction(provider.getOutline)) {
        return;
      }

      outline = outline || provider.getOutline(element);
    });

    return outline;
  };

  Outline.$inject = [ 'eventBus', 'styles', 'elementRegistry' ];

  var SELECTION_OUTLINE_PADDING = 6;

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../selection/Selection').default} Selection
   * @typedef {import('../../core/Canvas').default} Canvas
   */

  /**
   * @class
   *
   * A plugin that adds an outline to shapes and connections that may be activated and styled
   * via CSS classes.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Selection} selection
   */
  function MultiSelectionOutline(eventBus, canvas, selection) {
    this._canvas = canvas;

    var self = this;

    eventBus.on('element.changed', function(event) {
      if (selection.isSelected(event.element)) {
        self._updateMultiSelectionOutline(selection.get());
      }
    });

    eventBus.on('selection.changed', function(event) {
      var newSelection = event.newSelection;

      self._updateMultiSelectionOutline(newSelection);
    });
  }



  MultiSelectionOutline.prototype._updateMultiSelectionOutline = function(selection) {
    var layer = this._canvas.getLayer('selectionOutline');

    clear$1(layer);

    var enabled = selection.length > 1;

    var container = this._canvas.getContainer();

    classes$1(container)[enabled ? 'add' : 'remove']('djs-multi-select');

    if (!enabled) {
      return;
    }

    var bBox = addSelectionOutlinePadding(getBBox(selection));

    var rect = create$1('rect');

    attr$1(rect, assign$1({
      rx: 3
    }, bBox));

    classes$1(rect).add('djs-selection-outline');

    append(layer, rect);
  };


  MultiSelectionOutline.$inject = [ 'eventBus', 'canvas', 'selection' ];

  // helpers //////////

  function addSelectionOutlinePadding(bBox) {
    return {
      x: bBox.x - SELECTION_OUTLINE_PADDING,
      y: bBox.y - SELECTION_OUTLINE_PADDING,
      width: bBox.width + SELECTION_OUTLINE_PADDING * 2,
      height: bBox.height + SELECTION_OUTLINE_PADDING * 2
    };
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var Ouline = {
    __depends__: [
      SelectionModule
    ],
    __init__: [ 'outline', 'multiSelectionOutline' ],
    outline: [ 'type', Outline ],
    multiSelectionOutline: [ 'type', MultiSelectionOutline ]
  };

  /**
   * @typedef {import('../../core/Types').ElementLike} Element
   * @typedef {import('../../core/Types').ShapeLike} Shape
   *
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../modeling/Modeling').default} Modeling
   * @typedef {import('../rules/Rules').default} Rules
   * @typedef {import('../selection/Selection').default} Selection
   */

  var LOW_PRIORITY$3 = 500,
      MEDIUM_PRIORITY = 1250,
      HIGH_PRIORITY$2 = 1500;

  var round = Math.round;

  function mid(element) {
    return {
      x: element.x + round(element.width / 2),
      y: element.y + round(element.height / 2)
    };
  }

  /**
   * A plugin that makes shapes draggable / droppable.
   *
   * @param {EventBus} eventBus
   * @param {Dragging} dragging
   * @param {Modeling} modeling
   * @param {Selection} selection
   * @param {Rules} rules
   */
  function MoveEvents(
      eventBus, dragging, modeling,
      selection, rules) {

    // rules

    function canMove(shapes, delta, position, target) {

      return rules.allowed('elements.move', {
        shapes: shapes,
        delta: delta,
        position: position,
        target: target
      });
    }


    // move events

    // assign a high priority to this handler to setup the environment
    // others may hook up later, e.g. at default priority and modify
    // the move environment.
    //
    // This sets up the context with
    //
    // * shape: the primary shape being moved
    // * shapes: a list of shapes to be moved
    // * validatedShapes: a list of shapes that are being checked
    //                    against the rules before and during move
    //
    eventBus.on('shape.move.start', HIGH_PRIORITY$2, function(event) {

      var context = event.context,
          shape = event.shape,
          shapes = selection.get().slice();

      // move only single shape if the dragged element
      // is not part of the current selection
      if (shapes.indexOf(shape) === -1) {
        shapes = [ shape ];
      }

      // ensure we remove nested elements in the collection
      // and add attachers for a proper dragger
      shapes = removeNested(shapes);

      // attach shapes to drag context
      assign$1(context, {
        shapes: shapes,
        validatedShapes: shapes,
        shape: shape
      });
    });


    // assign a high priority to this handler to setup the environment
    // others may hook up later, e.g. at default priority and modify
    // the move environment
    //
    eventBus.on('shape.move.start', MEDIUM_PRIORITY, function(event) {

      var context = event.context,
          validatedShapes = context.validatedShapes,
          canExecute;

      canExecute = context.canExecute = canMove(validatedShapes);

      // check if we can move the elements
      if (!canExecute) {
        return false;
      }
    });

    // assign a low priority to this handler
    // to let others modify the move event before we update
    // the context
    //
    eventBus.on('shape.move.move', LOW_PRIORITY$3, function(event) {

      var context = event.context,
          validatedShapes = context.validatedShapes,
          hover = event.hover,
          delta = { x: event.dx, y: event.dy },
          position = { x: event.x, y: event.y },
          canExecute;

      // check if we can move the elements
      canExecute = canMove(validatedShapes, delta, position, hover);

      context.delta = delta;
      context.canExecute = canExecute;

      // simply ignore move over
      if (canExecute === null) {
        context.target = null;

        return;
      }

      context.target = hover;
    });

    eventBus.on('shape.move.end', function(event) {

      var context = event.context;

      var delta = context.delta,
          canExecute = context.canExecute,
          isAttach = canExecute === 'attach',
          shapes = context.shapes;

      if (canExecute === false) {
        return false;
      }

      // ensure we have actual pixel values deltas
      // (important when zoom level was > 1 during move)
      delta.x = round(delta.x);
      delta.y = round(delta.y);

      if (delta.x === 0 && delta.y === 0) {

        // didn't move
        return;
      }

      modeling.moveElements(shapes, delta, context.target, {
        primaryShape: context.shape,
        attach: isAttach
      });
    });


    // move activation

    eventBus.on('element.mousedown', function(event) {

      if (!isPrimaryButton(event)) {
        return;
      }

      var originalEvent = getOriginal$1(event);

      if (!originalEvent) {
        throw new Error('must supply DOM mousedown event');
      }

      return start(originalEvent, event.element);
    });

    /**
     * Start move.
     *
     * @param {MouseEvent|TouchEvent} event
     * @param {Shape} element
     * @param {boolean} [activate]
     * @param {Object} [context]
     */
    function start(event, element, activate, context) {
      if (isObject(activate)) {
        context = activate;
        activate = false;
      }

      // do not move connections or the root element
      if (element.waypoints || !element.parent) {
        return;
      }

      // ignore non-draggable hits
      if (classes$1(event.target).has('djs-hit-no-move')) {
        return;
      }

      var referencePoint = mid(element);

      dragging.init(event, referencePoint, 'shape.move', {
        cursor: 'grabbing',
        autoActivate: activate,
        data: {
          shape: element,
          context: context || {}
        }
      });

      // we've handled the event
      return true;
    }

    // API

    this.start = start;
  }

  MoveEvents.$inject = [
    'eventBus',
    'dragging',
    'modeling',
    'selection',
    'rules'
  ];


  /**
   * Return a filtered list of elements that do not contain
   * those nested into others.
   *
   * @param {Element[]} elements
   *
   * @return {Element[]} filtered
   */
  function removeNested(elements) {

    var ids = groupBy(elements, 'id');

    return filter(elements, function(element) {
      while ((element = element.parent)) {

        // parent in selection
        if (ids[element.id]) {
          return false;
        }
      }

      return true;
    });
  }

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../preview-support/PreviewSupport').default} PreviewSupport
   * @typedef {import('../../draw/Styles').default} Styles
   */

  var LOW_PRIORITY$2 = 499;

  var MARKER_DRAGGING = 'djs-dragging',
      MARKER_OK$1 = 'drop-ok',
      MARKER_NOT_OK$1 = 'drop-not-ok',
      MARKER_NEW_PARENT = 'new-parent',
      MARKER_ATTACH = 'attach-ok';


  /**
   * Provides previews for moving shapes when moving.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Styles} styles
   * @param {PreviewSupport} previewSupport
   */
  function MovePreview(
      eventBus, canvas, styles, previewSupport) {

    function getVisualDragShapes(shapes) {
      var elements = getAllDraggedElements(shapes);

      var filteredElements = removeEdges(elements);

      return filteredElements;
    }

    function getAllDraggedElements(shapes) {
      var allShapes = selfAndAllChildren(shapes, true);

      var allConnections = allShapes.flatMap(shape =>
        (shape.incoming || []).concat(shape.outgoing || [])
      );

      var allElements = allShapes.concat(allConnections);
      var uniqueElements = [ ...new Set(allElements) ];

      return uniqueElements;
    }

    /**
     * Sets drop marker on an element.
     */
    function setMarker(element, marker) {

      [ MARKER_ATTACH, MARKER_OK$1, MARKER_NOT_OK$1, MARKER_NEW_PARENT ].forEach(function(m) {

        if (m === marker) {
          canvas.addMarker(element, m);
        } else {
          canvas.removeMarker(element, m);
        }
      });
    }

    /**
     * Make an element draggable.
     *
     * @param {Object} context
     * @param {Element} element
     * @param {boolean} addMarker
     */
    function makeDraggable(context, element, addMarker) {

      previewSupport.addDragger(element, context.dragGroup);

      if (addMarker) {
        canvas.addMarker(element, MARKER_DRAGGING);
      }

      if (context.allDraggedElements) {
        context.allDraggedElements.push(element);
      } else {
        context.allDraggedElements = [ element ];
      }
    }

    // assign a low priority to this handler
    // to let others modify the move context before
    // we draw things
    eventBus.on('shape.move.start', LOW_PRIORITY$2, function(event) {
      var context = event.context,
          dragShapes = context.shapes,
          allDraggedElements = context.allDraggedElements;

      var visuallyDraggedShapes = getVisualDragShapes(dragShapes);

      if (!context.dragGroup) {
        var dragGroup = create$1('g');

        attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

        var activeLayer = canvas.getActiveLayer();

        append(activeLayer, dragGroup);

        context.dragGroup = dragGroup;
      }

      // add previews
      visuallyDraggedShapes.forEach(function(shape) {
        previewSupport.addDragger(shape, context.dragGroup);
      });

      // cache all dragged elements / gfx
      // so that we can quickly undo their state changes later
      if (!allDraggedElements) {
        allDraggedElements = getAllDraggedElements(dragShapes);
      } else {
        allDraggedElements = flatten$1([
          allDraggedElements,
          getAllDraggedElements(dragShapes)
        ]);
      }

      // add dragging marker
      forEach$1(allDraggedElements, function(e) {
        canvas.addMarker(e, MARKER_DRAGGING);
      });

      context.allDraggedElements = allDraggedElements;

      // determine, if any of the dragged elements have different parents
      context.differentParents = haveDifferentParents(dragShapes);
    });

    // update previews
    eventBus.on('shape.move.move', LOW_PRIORITY$2, function(event) {

      var context = event.context,
          dragGroup = context.dragGroup,
          target = context.target,
          parent = context.shape.parent,
          canExecute = context.canExecute;

      if (target) {
        if (canExecute === 'attach') {
          setMarker(target, MARKER_ATTACH);
        } else if (context.canExecute && parent && target.id !== parent.id) {
          setMarker(target, MARKER_NEW_PARENT);
        } else {
          setMarker(target, context.canExecute ? MARKER_OK$1 : MARKER_NOT_OK$1);
        }
      }

      translate$1(dragGroup, event.dx, event.dy);
    });

    eventBus.on([ 'shape.move.out', 'shape.move.cleanup' ], function(event) {
      var context = event.context,
          target = context.target;

      if (target) {
        setMarker(target, null);
      }
    });

    // remove previews
    eventBus.on('shape.move.cleanup', function(event) {

      var context = event.context,
          allDraggedElements = context.allDraggedElements,
          dragGroup = context.dragGroup;


      // remove dragging marker
      forEach$1(allDraggedElements, function(e) {
        canvas.removeMarker(e, MARKER_DRAGGING);
      });

      if (dragGroup) {
        remove$3(dragGroup);
      }
    });


    // API //////////////////////

    /**
     * Make an element draggable.
     *
     * @param {Object} context
     * @param {Element} element
     * @param {boolean} addMarker
     */
    this.makeDraggable = makeDraggable;
  }

  MovePreview.$inject = [
    'eventBus',
    'canvas',
    'styles',
    'previewSupport'
  ];


  // helpers //////////////////////

  /**
   * returns elements minus all connections
   * where source or target is not elements
   */
  function removeEdges(elements) {

    var filteredElements = filter(elements, function(element) {

      if (!isConnection(element)) {
        return true;
      } else {

        return (
          find$1(elements, matchPattern({ id: element.source.id })) &&
          find$1(elements, matchPattern({ id: element.target.id }))
        );
      }
    });

    return filteredElements;
  }

  function haveDifferentParents(elements) {
    return size(groupBy(elements, function(e) { return e.parent && e.parent.id; })) !== 1;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var MoveModule = {
    __depends__: [
      InteractionEventsModule$1,
      SelectionModule,
      Ouline,
      RulesModule$1,
      DraggingModule,
      PreviewSupportModule
    ],
    __init__: [
      'move',
      'movePreview'
    ],
    move: [ 'type', MoveEvents ],
    movePreview: [ 'type', MovePreview ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   *
   * @typedef {import('./PaletteProvider').PaletteEntries} PaletteEntries
   * @typedef {import('./PaletteProvider').default} PaletteProvider
   */

  var TOGGLE_SELECTOR = '.djs-palette-toggle',
      ENTRY_SELECTOR = '.entry',
      ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;

  var PALETTE_PREFIX = 'djs-palette-',
      PALETTE_SHOWN_CLS = 'shown',
      PALETTE_OPEN_CLS = 'open',
      PALETTE_TWO_COLUMN_CLS = 'two-column';

  var DEFAULT_PRIORITY$1 = 1000;


  /**
   * A palette containing modeling elements.
   *
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   */
  function Palette(eventBus, canvas) {

    this._eventBus = eventBus;
    this._canvas = canvas;

    var self = this;

    eventBus.on('tool-manager.update', function(event) {
      var tool = event.tool;

      self.updateToolHighlight(tool);
    });

    eventBus.on('i18n.changed', function() {
      self._update();
    });

    eventBus.on('diagram.init', function() {

      self._diagramInitialized = true;

      self._rebuild();
    });
  }

  Palette.$inject = [ 'eventBus', 'canvas' ];

  /**
   * @overlord
   *
   * Register a palette provider with default priority. See
   * {@link PaletteProvider} for examples.
   *
   * @param {PaletteProvider} provider
   */

  /**
   * Register a palette provider with the given priority. See
   * {@link PaletteProvider} for examples.
   *
   * @param {number} priority
   * @param {PaletteProvider} provider
   */
  Palette.prototype.registerProvider = function(priority, provider) {
    if (!provider) {
      provider = priority;
      priority = DEFAULT_PRIORITY$1;
    }

    this._eventBus.on('palette.getProviders', priority, function(event) {
      event.providers.push(provider);
    });

    this._rebuild();
  };


  /**
   * Returns the palette entries.
   *
   * @return {PaletteEntries}
   */
  Palette.prototype.getEntries = function() {
    var providers = this._getProviders();

    return providers.reduce(addPaletteEntries, {});
  };

  Palette.prototype._rebuild = function() {

    if (!this._diagramInitialized) {
      return;
    }

    var providers = this._getProviders();

    if (!providers.length) {
      return;
    }

    if (!this._container) {
      this._init();
    }

    this._update();
  };

  /**
   * Initialize palette.
   */
  Palette.prototype._init = function() {

    var self = this;

    var eventBus = this._eventBus;

    var parentContainer = this._getParentContainer();

    var container = this._container = domify$1(Palette.HTML_MARKUP);

    parentContainer.appendChild(container);
    classes(parentContainer).add(PALETTE_PREFIX + PALETTE_SHOWN_CLS);

    delegate.bind(container, ELEMENT_SELECTOR, 'click', function(event) {

      var target = event.delegateTarget;

      if (matches$1(target, TOGGLE_SELECTOR)) {
        return self.toggle();
      }

      self.trigger('click', event);
    });

    // prevent drag propagation
    event.bind(container, 'mousedown', function(event) {
      event.stopPropagation();
    });

    // prevent drag propagation
    delegate.bind(container, ENTRY_SELECTOR, 'dragstart', function(event) {
      self.trigger('dragstart', event);
    });

    eventBus.on('canvas.resized', this._layoutChanged, this);

    eventBus.fire('palette.create', {
      container: container
    });
  };

  Palette.prototype._getProviders = function(id) {

    var event = this._eventBus.createEvent({
      type: 'palette.getProviders',
      providers: []
    });

    this._eventBus.fire(event);

    return event.providers;
  };

  /**
   * Update palette state.
   *
   * @param { {
   *   open?: boolean;
   *   twoColumn?: boolean;
   * } } [state]
   */
  Palette.prototype._toggleState = function(state) {

    state = state || {};

    var parent = this._getParentContainer(),
        container = this._container;

    var eventBus = this._eventBus;

    var twoColumn;

    var cls = classes(container),
        parentCls = classes(parent);

    if ('twoColumn' in state) {
      twoColumn = state.twoColumn;
    } else {
      twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});
    }

    // always update two column
    cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);
    parentCls.toggle(PALETTE_PREFIX + PALETTE_TWO_COLUMN_CLS, twoColumn);

    if ('open' in state) {
      cls.toggle(PALETTE_OPEN_CLS, state.open);
      parentCls.toggle(PALETTE_PREFIX + PALETTE_OPEN_CLS, state.open);
    }

    eventBus.fire('palette.changed', {
      twoColumn: twoColumn,
      open: this.isOpen()
    });
  };

  Palette.prototype._update = function() {

    var entriesContainer = query('.djs-palette-entries', this._container),
        entries = this._entries = this.getEntries();

    clear(entriesContainer);

    forEach$1(entries, function(entry, id) {

      var grouping = entry.group || 'default';

      var container = query('[data-group=' + escapeCSS(grouping) + ']', entriesContainer);
      if (!container) {
        container = domify$1('<div class="group"></div>');
        attr(container, 'data-group', grouping);

        entriesContainer.appendChild(container);
      }

      var html = entry.html || (
        entry.separator ?
          '<hr class="separator" />' :
          '<div class="entry" draggable="true"></div>');


      var control = domify$1(html);
      container.appendChild(control);

      if (!entry.separator) {
        attr(control, 'data-action', id);

        if (entry.title) {
          attr(control, 'title', entry.title);
        }

        if (entry.className) {
          addClasses(control, entry.className);
        }

        if (entry.imageUrl) {
          var image = domify$1('<img>');
          attr(image, 'src', entry.imageUrl);

          control.appendChild(image);
        }
      }
    });

    // open after update
    this.open();
  };


  /**
   * Trigger an action available on the palette
   *
   * @param {string} action
   * @param {Event} event
   * @param {boolean} [autoActivate=false]
   */
  Palette.prototype.trigger = function(action, event, autoActivate) {
    var entry,
        originalEvent,
        button = event.delegateTarget || event.target;

    if (!button) {
      return event.preventDefault();
    }

    entry = attr(button, 'data-action');
    originalEvent = event.originalEvent || event;

    return this.triggerEntry(entry, action, originalEvent, autoActivate);
  };

  /**
   * @param {string} entryId
   * @param {string} action
   * @param {Event} event
   * @param {boolean} [autoActivate=false]
   */
  Palette.prototype.triggerEntry = function(entryId, action, event, autoActivate) {
    var entries = this._entries,
        entry,
        handler;

    entry = entries[entryId];

    // when user clicks on the palette and not on an action
    if (!entry) {
      return;
    }

    handler = entry.action;

    if (this._eventBus.fire('palette.trigger', { entry, event }) === false) {
      return;
    }

    // simple action (via callback function)
    if (isFunction(handler)) {
      if (action === 'click') {
        return handler(event, autoActivate);
      }
    } else {
      if (handler[action]) {
        return handler[action](event, autoActivate);
      }
    }

    // silence other actions
    event.preventDefault();
  };

  Palette.prototype._layoutChanged = function() {
    this._toggleState({});
  };

  /**
   * Do we need to collapse to two columns?
   *
   * @param {number} availableHeight
   * @param {PaletteEntries} entries
   *
   * @return {boolean}
   */
  Palette.prototype._needsCollapse = function(availableHeight, entries) {

    // top margin + bottom toggle + bottom margin
    // implementors must override this method if they
    // change the palette styles
    var margin = 20 + 10 + 20;

    var entriesHeight = Object.keys(entries).length * 46;

    return availableHeight < entriesHeight + margin;
  };

  /**
   * Close the palette.
   */
  Palette.prototype.close = function() {
    this._toggleState({
      open: false,
      twoColumn: false
    });
  };

  /**
   * Open the palette.
   */
  Palette.prototype.open = function() {
    this._toggleState({ open: true });
  };

  /**
   * Toggle the palette.
   */
  Palette.prototype.toggle = function() {
    if (this.isOpen()) {
      this.close();
    } else {
      this.open();
    }
  };

  /**
   * @param {string} tool
   *
   * @return {boolean}
   */
  Palette.prototype.isActiveTool = function(tool) {
    return tool && this._activeTool === tool;
  };

  /**
   * @param {string} name
   */
  Palette.prototype.updateToolHighlight = function(name) {
    var entriesContainer,
        toolsContainer;

    if (!this._toolsContainer) {
      entriesContainer = query('.djs-palette-entries', this._container);

      this._toolsContainer = query('[data-group=tools]', entriesContainer);
    }

    toolsContainer = this._toolsContainer;

    forEach$1(toolsContainer.children, function(tool) {
      var actionName = tool.getAttribute('data-action');

      if (!actionName) {
        return;
      }

      var toolClasses = classes(tool);

      actionName = actionName.replace('-tool', '');

      if (toolClasses.contains('entry') && actionName === name) {
        toolClasses.add('highlighted-entry');
      } else {
        toolClasses.remove('highlighted-entry');
      }
    });
  };


  /**
   * Return `true` if the palette is opened.
   *
   * @example
   *
   * ```javascript
   * palette.open();
   *
   * if (palette.isOpen()) {
   *   // yes, we are open
   * }
   * ```
   *
   * @return {boolean}
   */
  Palette.prototype.isOpen = function() {
    return classes(this._container).has(PALETTE_OPEN_CLS);
  };

  /**
   * Get parent element of palette.
   *
   * @return {HTMLElement}
   */
  Palette.prototype._getParentContainer = function() {
    return this._canvas.getContainer();
  };


  /* markup definition */

  Palette.HTML_MARKUP =
    '<div class="djs-palette">' +
      '<div class="djs-palette-entries"></div>' +
      '<div class="djs-palette-toggle"></div>' +
    '</div>';


  // helpers //////////////////////

  function addClasses(element, classNames) {

    var classes$1 = classes(element);

    var actualClassNames = isArray$3(classNames) ? classNames : classNames.split(/\s+/g);
    actualClassNames.forEach(function(cls) {
      classes$1.add(cls);
    });
  }

  function addPaletteEntries(entries, provider) {

    var entriesOrUpdater = provider.getPaletteEntries();

    if (isFunction(entriesOrUpdater)) {
      return entriesOrUpdater(entries);
    }

    forEach$1(entriesOrUpdater, function(entry, id) {
      entries[id] = entry;
    });

    return entries;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var PaletteModule$1 = {
    __init__: [ 'palette' ],
    palette: [ 'type', Palette ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../mouse/Mouse').default} Mouse
   * @typedef {import('../selection/Selection').default} Selection
   * @typedef {import('../tool-manager/ToolManager').default} ToolManager
   *
   * @typedef {import('../../util/Types').Rect} Rect
   */

  var LASSO_TOOL_CURSOR = 'crosshair';

  /**
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {ElementRegistry} elementRegistry
   * @param {Selection} selection
   * @param {ToolManager} toolManager
   * @param {Mouse} mouse
   */
  function LassoTool(
      eventBus, canvas, dragging,
      elementRegistry, selection, toolManager,
      mouse) {

    this._selection = selection;
    this._dragging = dragging;
    this._mouse = mouse;

    var self = this;

    // lasso visuals implementation

    /**
    * A helper that realizes the selection box visual
    */
    var visuals = {

      create: function(context) {
        var container = canvas.getActiveLayer(),
            frame;

        frame = context.frame = create$1('rect');
        attr$1(frame, {
          class: 'djs-lasso-overlay',
          width:  1,
          height: 1,
          x: 0,
          y: 0
        });

        append(container, frame);
      },

      update: function(context) {
        var frame = context.frame,
            bbox = context.bbox;

        attr$1(frame, {
          x: bbox.x,
          y: bbox.y,
          width: bbox.width,
          height: bbox.height
        });
      },

      remove: function(context) {

        if (context.frame) {
          remove$3(context.frame);
        }
      }
    };

    toolManager.registerTool('lasso', {
      tool: 'lasso.selection',
      dragging: 'lasso'
    });

    eventBus.on('lasso.selection.end', function(event) {
      var target = event.originalEvent.target;

      // only reactive on diagram click
      // on some occasions, event.hover is not set and we have to check if the target is an svg
      if (!event.hover && !(target instanceof SVGElement)) {
        return;
      }

      eventBus.once('lasso.selection.ended', function() {
        self.activateLasso(event.originalEvent, true);
      });
    });

    // lasso interaction implementation

    eventBus.on('lasso.end', 0, function(event) {

      var context = event.context;

      var bbox = toBBox(event);

      var elements = elementRegistry.filter(function(element) {
        return element;
      });

      var add = hasSecondaryModifier(event);

      self.select(elements, bbox, add ? context.selection : []);
    });

    eventBus.on('lasso.start', function(event) {

      var context = event.context;

      context.bbox = toBBox(event);
      visuals.create(context);

      context.selection = selection.get();
    });

    eventBus.on('lasso.move', function(event) {

      var context = event.context;

      context.bbox = toBBox(event);
      visuals.update(context);
    });

    eventBus.on('lasso.cleanup', function(event) {

      var context = event.context;

      visuals.remove(context);
    });


    // event integration

    eventBus.on('element.mousedown', 1500, function(event) {

      if (!hasSecondaryModifier(event)) {
        return;
      }

      self.activateLasso(event.originalEvent);

      // we've handled the event
      return true;
    });
  }

  LassoTool.$inject = [
    'eventBus',
    'canvas',
    'dragging',
    'elementRegistry',
    'selection',
    'toolManager',
    'mouse'
  ];

  /**
   * Activate lasso.
   *
   * @param {MouseEvent} event
   * @param {boolean} [autoActivate=false]
   */
  LassoTool.prototype.activateLasso = function(event, autoActivate) {

    this._dragging.init(event, 'lasso', {
      autoActivate: autoActivate,
      cursor: LASSO_TOOL_CURSOR,
      data: {
        context: {}
      }
    });
  };

  /**
   * Activate selection.
   *
   * @param {MouseEvent} event
   * @param {boolean} [autoActivate=false]
   */
  LassoTool.prototype.activateSelection = function(event, autoActivate) {

    this._dragging.init(event, 'lasso.selection', {
      trapClick: false,
      autoActivate: autoActivate,
      cursor: LASSO_TOOL_CURSOR,
      data: {
        context: {}
      },
      keepSelection: true
    });
  };

  /**
   * Select elements within the given bounds.
   *
   * @param {Element[]} elements
   * @param {Rect} bbox
   * @param {Element[]} [previousSelection]
   */
  LassoTool.prototype.select = function(elements, bbox, previousSelection = []) {
    var selectedElements = getEnclosedElements(elements, bbox);

    this._selection.select([
      ...previousSelection,
      ...values(selectedElements)
    ]);
  };

  /**
   * Toggle the lasso tool.
   */
  LassoTool.prototype.toggle = function() {
    if (this.isActive()) {
      return this._dragging.cancel();
    }

    var mouseEvent = this._mouse.getLastMoveEvent();

    this.activateSelection(mouseEvent, !!mouseEvent);
  };

  /**
   * Check if the lasso tool is active.
   *
   * @returns {boolean}
   */
  LassoTool.prototype.isActive = function() {
    var context = this._dragging.context();

    return context && /^lasso/.test(context.prefix);
  };


  function toBBox(event) {

    var start = {

      x: event.x - event.dx,
      y: event.y - event.dy
    };

    var end = {
      x: event.x,
      y: event.y
    };

    var bbox;

    if ((start.x <= end.x && start.y < end.y) ||
        (start.x < end.x && start.y <= end.y)) {

      bbox = {
        x: start.x,
        y: start.y,
        width:  end.x - start.x,
        height: end.y - start.y
      };
    } else if ((start.x >= end.x && start.y < end.y) ||
               (start.x > end.x && start.y <= end.y)) {

      bbox = {
        x: end.x,
        y: start.y,
        width:  start.x - end.x,
        height: end.y - start.y
      };
    } else if ((start.x <= end.x && start.y > end.y) ||
               (start.x < end.x && start.y >= end.y)) {

      bbox = {
        x: start.x,
        y: end.y,
        width:  end.x - start.x,
        height: start.y - end.y
      };
    } else if ((start.x >= end.x && start.y > end.y) ||
               (start.x > end.x && start.y >= end.y)) {

      bbox = {
        x: end.x,
        y: end.y,
        width:  start.x - end.x,
        height: start.y - end.y
      };
    } else {

      bbox = {
        x: end.x,
        y: end.y,
        width:  0,
        height: 0
      };
    }
    return bbox;
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var LassoToolModule = {
    __depends__: [
      ToolManagerModule,
      MouseModule
    ],
    __init__: [ 'lassoTool' ],
    lassoTool: [ 'type', LassoTool ]
  };

  /**
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../mouse/Mouse').default} Mouse
   * @typedef {import('../tool-manager/ToolManager').default} ToolManager
   */

  var HIGH_PRIORITY$1 = 1500;
  var HAND_CURSOR = 'grab';

  /**
   * @param {EventBus} eventBus
   * @param {Canvas} canvas
   * @param {Dragging} dragging
   * @param {Injector} injector
   * @param {ToolManager} toolManager
   * @param {Mouse} mouse
   */
  function HandTool(
      eventBus, canvas, dragging,
      injector, toolManager, mouse) {

    this._dragging = dragging;
    this._mouse = mouse;

    var self = this,
        keyboard = injector.get('keyboard', false);

    toolManager.registerTool('hand', {
      tool: 'hand',
      dragging: 'hand.move'
    });

    eventBus.on('element.mousedown', HIGH_PRIORITY$1, function(event) {

      if (!hasPrimaryModifier(event)) {
        return;
      }

      self.activateMove(event.originalEvent, true);

      return false;
    });

    keyboard && keyboard.addListener(HIGH_PRIORITY$1, function(e) {
      if (!isSpace$1(e.keyEvent) || self.isActive()) {
        return;
      }

      var mouseEvent = self._mouse.getLastMoveEvent();

      self.activateMove(mouseEvent, !!mouseEvent);
    }, 'keyboard.keydown');

    keyboard && keyboard.addListener(HIGH_PRIORITY$1, function(e) {
      if (!isSpace$1(e.keyEvent) || !self.isActive()) {
        return;
      }

      self.toggle();
    }, 'keyboard.keyup');

    eventBus.on('hand.end', function(event) {
      var target = event.originalEvent.target;

      // only reactive on diagram click
      // on some occasions, event.hover is not set and we have to check if the target is an svg
      if (!event.hover && !(target instanceof SVGElement)) {
        return false;
      }

      eventBus.once('hand.ended', function() {
        self.activateMove(event.originalEvent, { reactivate: true });
      });

    });

    eventBus.on('hand.move.move', function(event) {
      var scale = canvas.viewbox().scale;

      canvas.scroll({
        dx: event.dx * scale,
        dy: event.dy * scale
      });
    });

    eventBus.on('hand.move.end', function(event) {
      var context = event.context,
          reactivate = context.reactivate;

      // Don't reactivate if the user is using the keyboard keybinding
      if (!hasPrimaryModifier(event) && reactivate) {

        eventBus.once('hand.move.ended', function(event) {
          self.activateHand(event.originalEvent, true, true);
        });

      }

      return false;
    });

  }

  HandTool.$inject = [
    'eventBus',
    'canvas',
    'dragging',
    'injector',
    'toolManager',
    'mouse'
  ];

  /**
   *
   * @param event
   * @param {boolean} [autoActivate]
   * @param {object} [context]
   */
  HandTool.prototype.activateMove = function(event, autoActivate, context) {
    if (typeof autoActivate === 'object') {
      context = autoActivate;
      autoActivate = false;
    }

    this._dragging.init(event, 'hand.move', {
      autoActivate: autoActivate,
      cursor: HAND_CURSOR,
      data: {
        context: context || {}
      }
    });
  };

  /**
   *
   * @param event
   * @param {boolean} [autoActivate]
   * @param {boolean} [reactivate]
   */
  HandTool.prototype.activateHand = function(event, autoActivate, reactivate) {
    this._dragging.init(event, 'hand', {
      trapClick: false,
      autoActivate: autoActivate,
      cursor: HAND_CURSOR,
      data: {
        context: {
          reactivate: reactivate
        }
      }
    });
  };

  HandTool.prototype.toggle = function() {
    if (this.isActive()) {
      return this._dragging.cancel();
    }

    var mouseEvent = this._mouse.getLastMoveEvent();

    this.activateHand(mouseEvent, !!mouseEvent);
  };

  HandTool.prototype.isActive = function() {
    var context = this._dragging.context();

    if (context) {
      return /^(hand|hand\.move)$/.test(context.prefix);
    }

    return false;
  };

  // helpers //////////

  function isSpace$1(keyEvent) {
    return isKey('Space', keyEvent);
  }

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var HandToolModule = {
    __depends__: [
      ToolManagerModule,
      MouseModule
    ],
    __init__: [ 'handTool' ],
    handTool: [ 'type', HandTool ]
  };

  var MARKER_OK = 'connect-ok',
      MARKER_NOT_OK = 'connect-not-ok';

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../connect/Connect').default} Connect
   * @typedef {import('../dragging/Dragging').default} Dragging
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../mouse/Mouse').default} Mouse
   * @typedef {import('../rules/Rules').default} Rules
   * @typedef {import('../tool-manager/ToolManager').default} ToolManager
   *
   * @typedef {import('../../model/Types').Element} Element
   */

  /**
   * @class
   * @constructor
   *
   * @param {EventBus} eventBus
   * @param {Dragging} dragging
   * @param {Connect} connect
   * @param {Canvas} canvas
   * @param {ToolManager} toolManager
   * @param {Rules} rules
   * @param {Mouse} mouse
   */
  function GlobalConnect(
      eventBus, dragging, connect,
      canvas, toolManager, rules,
      mouse) {

    var self = this;

    this._dragging = dragging;
    this._rules = rules;
    this._mouse = mouse;

    toolManager.registerTool('global-connect', {
      tool: 'global-connect',
      dragging: 'global-connect.drag'
    });

    eventBus.on('global-connect.hover', function(event) {
      var context = event.context,
          startTarget = event.hover;

      var canStartConnect = context.canStartConnect = self.canStartConnect(startTarget);

      // simply ignore hover
      if (canStartConnect === null) {
        return;
      }

      context.startTarget = startTarget;

      canvas.addMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);
    });


    eventBus.on([ 'global-connect.out', 'global-connect.cleanup' ], function(event) {
      var startTarget = event.context.startTarget,
          canStartConnect = event.context.canStartConnect;

      if (startTarget) {
        canvas.removeMarker(startTarget, canStartConnect ? MARKER_OK : MARKER_NOT_OK);
      }
    });


    eventBus.on([ 'global-connect.ended' ], function(event) {
      var context = event.context,
          startTarget = context.startTarget,
          startPosition = {
            x: event.x,
            y: event.y
          };

      var canStartConnect = self.canStartConnect(startTarget);

      if (!canStartConnect) {
        return;
      }

      eventBus.once('element.out', function() {
        eventBus.once([ 'connect.ended', 'connect.canceled' ], function() {
          eventBus.fire('global-connect.drag.ended');
        });

        connect.start(null, startTarget, startPosition);
      });

      return false;
    });
  }

  GlobalConnect.$inject = [
    'eventBus',
    'dragging',
    'connect',
    'canvas',
    'toolManager',
    'rules',
    'mouse'
  ];

  /**
   * Initiates tool activity.
   */
  GlobalConnect.prototype.start = function(event, autoActivate) {
    this._dragging.init(event, 'global-connect', {
      autoActivate: autoActivate,
      trapClick: false,
      data: {
        context: {}
      }
    });
  };

  GlobalConnect.prototype.toggle = function() {

    if (this.isActive()) {
      return this._dragging.cancel();
    }

    var mouseEvent = this._mouse.getLastMoveEvent();

    return this.start(mouseEvent, !!mouseEvent);
  };

  GlobalConnect.prototype.isActive = function() {
    var context = this._dragging.context();

    return context && /^global-connect/.test(context.prefix);
  };

  /**
   * Check if source element can initiate connection.
   *
   * @param {Element} startTarget
   * @return {boolean}
   */
  GlobalConnect.prototype.canStartConnect = function(startTarget) {
    return this._rules.allowed('connection.start', { source: startTarget });
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var GlobalConnectModule = {
    __depends__: [
      ConnectModule,
      RulesModule$1,
      DraggingModule,
      ToolManagerModule,
      MouseModule
    ],
    globalConnect: [ 'type', GlobalConnect ]
  };

  /**
   * @typedef {import('diagram-js/lib/features/palette/Palette').default} Palette
   * @typedef {import('diagram-js/lib/features/create/Create').default} Create
   * @typedef {import('diagram-js/lib/core/ElementFactory').default} ElementFactory
   * @typedef {import('../space-tool/BpmnSpaceTool').default} SpaceTool
   * @typedef {import('diagram-js/lib/features/lasso-tool/LassoTool').default} LassoTool
   * @typedef {import('diagram-js/lib/features/hand-tool/HandTool').default} HandTool
   * @typedef {import('diagram-js/lib/features/global-connect/GlobalConnect').default} GlobalConnect
   * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
   *
   * @typedef {import('diagram-js/lib/features/palette/Palette').PaletteEntries} PaletteEntries
   */

  /**
   * A palette provider for BPMN 2.0 elements.
   *
   * @param {Palette} palette
   * @param {Create} create
   * @param {ElementFactory} elementFactory
   * @param {SpaceTool} spaceTool
   * @param {LassoTool} lassoTool
   * @param {HandTool} handTool
   * @param {GlobalConnect} globalConnect
   * @param {Translate} translate
   */
  function PaletteProvider(
      palette, create, elementFactory,
      spaceTool, lassoTool, handTool,
      globalConnect, translate) {

    this._palette = palette;
    this._create = create;
    this._elementFactory = elementFactory;
    this._spaceTool = spaceTool;
    this._lassoTool = lassoTool;
    this._handTool = handTool;
    this._globalConnect = globalConnect;
    this._translate = translate;

    palette.registerProvider(this);
  }

  PaletteProvider.$inject = [
    'palette',
    'create',
    'elementFactory',
    'spaceTool',
    'lassoTool',
    'handTool',
    'globalConnect',
    'translate'
  ];

  /**
   * @return {PaletteEntries}
   */
  PaletteProvider.prototype.getPaletteEntries = function() {

    var actions = {},
        create = this._create,
        elementFactory = this._elementFactory,
        spaceTool = this._spaceTool,
        lassoTool = this._lassoTool,
        handTool = this._handTool,
        globalConnect = this._globalConnect,
        translate = this._translate;

    function createAction(type, group, className, title, options) {

      function createListener(event) {
        var shape = elementFactory.createShape(assign$1({ type: type }, options));
        create.start(event, shape);
      }

      return {
        group: group,
        className: className,
        title: title,
        action: {
          dragstart: createListener,
          click: createListener
        }
      };
    }

    function createSubprocess(event) {
      var subProcess = elementFactory.createShape({
        type: 'bpmn:SubProcess',
        x: 0,
        y: 0,
        isExpanded: true
      });

      var startEvent = elementFactory.createShape({
        type: 'bpmn:StartEvent',
        x: 40,
        y: 82,
        parent: subProcess
      });

      create.start(event, [ subProcess, startEvent ], {
        hints: {
          autoSelect: [ subProcess ]
        }
      });
    }

    function createParticipant(event) {
      create.start(event, elementFactory.createParticipantShape());
    }

    assign$1(actions, {
      'hand-tool': {
        group: 'tools',
        className: 'bpmn-icon-hand-tool',
        title: translate('Activate hand tool'),
        action: {
          click: function(event) {
            handTool.activateHand(event);
          }
        }
      },
      'lasso-tool': {
        group: 'tools',
        className: 'bpmn-icon-lasso-tool',
        title: translate('Activate lasso tool'),
        action: {
          click: function(event) {
            lassoTool.activateSelection(event);
          }
        }
      },
      'space-tool': {
        group: 'tools',
        className: 'bpmn-icon-space-tool',
        title: translate('Activate create/remove space tool'),
        action: {
          click: function(event) {
            spaceTool.activateSelection(event);
          }
        }
      },
      'global-connect-tool': {
        group: 'tools',
        className: 'bpmn-icon-connection-multi',
        title: translate('Activate global connect tool'),
        action: {
          click: function(event) {
            globalConnect.start(event);
          }
        }
      },
      'tool-separator': {
        group: 'tools',
        separator: true
      },
      'create.start-event': createAction(
        'bpmn:StartEvent', 'event', 'bpmn-icon-start-event-none',
        translate('Create start event')
      ),
      'create.intermediate-event': createAction(
        'bpmn:IntermediateThrowEvent', 'event', 'bpmn-icon-intermediate-event-none',
        translate('Create intermediate/boundary event')
      ),
      'create.end-event': createAction(
        'bpmn:EndEvent', 'event', 'bpmn-icon-end-event-none',
        translate('Create end event')
      ),
      'create.exclusive-gateway': createAction(
        'bpmn:ExclusiveGateway', 'gateway', 'bpmn-icon-gateway-none',
        translate('Create gateway')
      ),
      'create.task': createAction(
        'bpmn:Task', 'activity', 'bpmn-icon-task',
        translate('Create task')
      ),
      'create.data-object': createAction(
        'bpmn:DataObjectReference', 'data-object', 'bpmn-icon-data-object',
        translate('Create data object reference')
      ),
      'create.data-store': createAction(
        'bpmn:DataStoreReference', 'data-store', 'bpmn-icon-data-store',
        translate('Create data store reference')
      ),
      'create.subprocess-expanded': {
        group: 'activity',
        className: 'bpmn-icon-subprocess-expanded',
        title: translate('Create expanded sub-process'),
        action: {
          dragstart: createSubprocess,
          click: createSubprocess
        }
      },
      'create.participant-expanded': {
        group: 'collaboration',
        className: 'bpmn-icon-participant',
        title: translate('Create pool/participant'),
        action: {
          dragstart: createParticipant,
          click: createParticipant
        }
      },
      'create.group': createAction(
        'bpmn:Group', 'artifact', 'bpmn-icon-group',
        translate('Create group')
      ),
    });

    return actions;
  };

  var PaletteModule = {
    __depends__: [
      PaletteModule$1,
      CreateModule,
      SpaceToolModule,
      LassoToolModule,
      HandToolModule,
      GlobalConnectModule,
      TranslateModule
    ],
    __init__: [ 'paletteProvider' ],
    paletteProvider: [ 'type', PaletteProvider ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/core/ElementFactory').default} ElementFactory
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/features/preview-support/PreviewSupport').default} PreviewSupport
   */

  var LOW_PRIORITY$1 = 250;

  /**
   * @param {EventBus} eventBus
   * @param {ElementRegistry} elementRegistry
   * @param {ElementFactory} elementFactory
   * @param {Canvas} canvas
   * @param {PreviewSupport} previewSupport
   */
  function BpmnReplacePreview(
      eventBus, elementRegistry, elementFactory,
      canvas, previewSupport) {

    CommandInterceptor.call(this, eventBus);

    /**
     * Replace the visuals of all elements in the context which can be replaced
     *
     * @param  {Object} context
     */
    function replaceVisual(context) {

      var replacements = context.canExecute.replacements;

      forEach$1(replacements, function(replacement) {

        var id = replacement.oldElementId;

        var newElement = {
          type: replacement.newElementType
        };

        // if the visual of the element is already replaced
        if (context.visualReplacements[id]) {
          return;
        }

        var element = elementRegistry.get(id);

        assign$1(newElement, { x: element.x, y: element.y });

        // create a temporary shape
        var tempShape = elementFactory.createShape(newElement);

        canvas.addShape(tempShape, element.parent);

        // select the original SVG element related to the element and hide it
        var gfx = query('[data-element-id="' + escapeCSS(element.id) + '"]', context.dragGroup);

        if (gfx) {
          attr$1(gfx, { display: 'none' });
        }

        // clone the gfx of the temporary shape and add it to the drag group
        var dragger = previewSupport.addDragger(tempShape, context.dragGroup);

        context.visualReplacements[id] = dragger;

        canvas.removeShape(tempShape);
      });
    }

    /**
     * Restore the original visuals of the previously replaced elements
     *
     * @param  {Object} context
     */
    function restoreVisual(context) {

      var visualReplacements = context.visualReplacements;

      forEach$1(visualReplacements, function(dragger, id) {

        var originalGfx = query('[data-element-id="' + escapeCSS(id) + '"]', context.dragGroup);

        if (originalGfx) {
          attr$1(originalGfx, { display: 'inline' });
        }

        dragger.remove();

        if (visualReplacements[id]) {
          delete visualReplacements[id];
        }
      });
    }

    eventBus.on('shape.move.move', LOW_PRIORITY$1, function(event) {

      var context = event.context,
          canExecute = context.canExecute;

      if (!context.visualReplacements) {
        context.visualReplacements = {};
      }

      if (canExecute && canExecute.replacements) {
        replaceVisual(context);
      } else {
        restoreVisual(context);
      }
    });
  }

  BpmnReplacePreview.$inject = [
    'eventBus',
    'elementRegistry',
    'elementFactory',
    'canvas',
    'previewSupport'
  ];

  e$3(BpmnReplacePreview, CommandInterceptor);

  var ReplacePreviewModule = {
    __depends__: [
      PreviewSupportModule
    ],
    __init__: [ 'bpmnReplacePreview' ],
    bpmnReplacePreview: [ 'type', BpmnReplacePreview ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   *
   * @typedef {import('diagram-js/lib/core/EventBus').Event} Event
   *
   * @typedef {import('../../model/Types').Shape} Shape
   *
   * @typedef {import('diagram-js/lib/util/Types').Axis} Axis
   * @typedef {import('diagram-js/lib/util/Types').Point} Point
   */

  var HIGHER_PRIORITY$2 = 1250;

  var BOUNDARY_TO_HOST_THRESHOLD = 40;

  var TARGET_BOUNDS_PADDING = 20,
      TASK_BOUNDS_PADDING = 10;

  var TARGET_CENTER_PADDING = 20;

  var AXES = [ 'x', 'y' ];

  var abs = Math.abs;

  /**
   * Snap during connect.
   *
   * @param {EventBus} eventBus
   */
  function BpmnConnectSnapping(eventBus) {
    eventBus.on([
      'connect.hover',
      'connect.move',
      'connect.end',
    ], HIGHER_PRIORITY$2, function(event) {
      var context = event.context,
          canExecute = context.canExecute,
          start = context.start,
          hover = context.hover,
          source = context.source,
          target = context.target;

      // do NOT snap on CMD
      if (event.originalEvent && isCmd(event.originalEvent)) {
        return;
      }

      if (!context.initialConnectionStart) {
        context.initialConnectionStart = context.connectionStart;
      }

      // snap hover
      if (canExecute && hover) {
        snapToShape(event, hover, getTargetBoundsPadding(hover));
      }

      if (hover && isAnyType(canExecute, [
        'bpmn:Association',
        'bpmn:DataInputAssociation',
        'bpmn:DataOutputAssociation',
        'bpmn:SequenceFlow'
      ])) {
        context.connectionStart = mid$2(start);

        // snap hover
        if (isAny(hover, [ 'bpmn:Event', 'bpmn:Gateway' ])) {
          snapToPosition(event, mid$2(hover));
        }

        // snap hover
        if (isAny(hover, [ 'bpmn:Task', 'bpmn:SubProcess' ])) {
          snapToTargetMid(event, hover);
        }

        // snap source and target
        if (is$1(source, 'bpmn:BoundaryEvent') && target === source.host) {
          snapBoundaryEventLoop(event);
        }

      } else if (isType(canExecute, 'bpmn:MessageFlow')) {

        if (is$1(start, 'bpmn:Event')) {

          // snap start
          context.connectionStart = mid$2(start);
        }

        if (is$1(hover, 'bpmn:Event')) {

          // snap hover
          snapToPosition(event, mid$2(hover));
        }

      } else {

        // un-snap source
        context.connectionStart = context.initialConnectionStart;
      }
    });
  }

  BpmnConnectSnapping.$inject = [ 'eventBus' ];


  // helpers //////////

  /**
   * Snap to the given target if the event is inside the bounds of the target.
   *
   * @param {Event} event
   * @param {Shape} target
   * @param {number} padding
   */
  function snapToShape(event, target, padding) {
    AXES.forEach(function(axis) {
      var dimensionForAxis = getDimensionForAxis(axis, target);

      if (event[ axis ] < target[ axis ] + padding) {
        setSnapped(event, axis, target[ axis ] + padding);
      } else if (event[ axis ] > target[ axis ] + dimensionForAxis - padding) {
        setSnapped(event, axis, target[ axis ] + dimensionForAxis - padding);
      }
    });
  }

  /**
   * Snap to the target mid if the event is in the target mid.
   *
   * @param {Event} event
   * @param {Shape} target
   */
  function snapToTargetMid(event, target) {
    var targetMid = mid$2(target);

    AXES.forEach(function(axis) {
      if (isMid(event, target, axis)) {
        setSnapped(event, axis, targetMid[ axis ]);
      }
    });
  }

  /**
   * Snap to prevent a loop overlapping a boundary event.
   *
   * @param {Event} event
   */
  function snapBoundaryEventLoop(event) {
    var context = event.context,
        source = context.source,
        target = context.target;

    if (isReverse(context)) {
      return;
    }

    var sourceMid = mid$2(source),
        orientation = getOrientation(sourceMid, target, -10),
        axes = [];

    if (/top|bottom/.test(orientation)) {
      axes.push('x');
    }

    if (/left|right/.test(orientation)) {
      axes.push('y');
    }

    axes.forEach(function(axis) {
      var coordinate = event[ axis ], newCoordinate;

      if (abs(coordinate - sourceMid[ axis ]) < BOUNDARY_TO_HOST_THRESHOLD) {
        if (coordinate > sourceMid[ axis ]) {
          newCoordinate = sourceMid[ axis ] + BOUNDARY_TO_HOST_THRESHOLD;
        }
        else {
          newCoordinate = sourceMid[ axis ] - BOUNDARY_TO_HOST_THRESHOLD;
        }

        setSnapped(event, axis, newCoordinate);
      }
    });
  }

  /**
   * @param {Event} event
   * @param {Point} position
   */
  function snapToPosition(event, position) {
    setSnapped(event, 'x', position.x);
    setSnapped(event, 'y', position.y);
  }

  function isType(attrs, type) {
    return attrs && attrs.type === type;
  }

  function isAnyType(attrs, types) {
    return some(types, function(type) {
      return isType(attrs, type);
    });
  }

  /**
   * @param {Axis} axis
   * @param {Shape} element
   *
   * @return {number}
   */
  function getDimensionForAxis(axis, element) {
    return axis === 'x' ? element.width : element.height;
  }

  /**
   * @param {Shape} target
   *
   * @return {number}
   */
  function getTargetBoundsPadding(target) {
    if (is$1(target, 'bpmn:Task')) {
      return TASK_BOUNDS_PADDING;
    } else {
      return TARGET_BOUNDS_PADDING;
    }
  }

  /**
   * @param {Event} event
   * @param {Shape} target
   * @param {Axis} axis
   *
   * @return {boolean}
   */
  function isMid(event, target, axis) {
    return event[ axis ] > target[ axis ] + TARGET_CENTER_PADDING
      && event[ axis ] < target[ axis ] + getDimensionForAxis(axis, target) - TARGET_CENTER_PADDING;
  }

  function isReverse(context) {
    var hover = context.hover,
        source = context.source;

    return hover && source && hover === source;
  }

  /**
   * @typedef {import('../../model/Types').Element} Element
   *
   * @typedef {import('../../util/Types').Axis} Axis
   * @typedef {import('../../util/Types').DirectionTRBL} DirectionTRBL
   * @typedef {import('../../util/Types').Point} Point
   *
   * @typedef {DirectionTRBL & 'mid'} SnapLocation
   */

  /**
   * A snap context, containing the (possibly incomplete)
   * mappings of drop targets (to identify the snapping)
   * to computed snap points.
   */
  function SnapContext() {

    /**
     * @type {Record<string, SnapPoints>}
     */
    this._targets = {};

    /**
     * @type {Record<SnapLocation, Point>}
     */
    this._snapOrigins = {};

    /**
     * @type {SnapLocation[]}
     */
    this._snapLocations = [];

    /**
     * @type {Record<SnapLocation, Point[]>}
     */
    this._defaultSnaps = {};
  }

  /**
   * Get the snap origin for a given location.
   *
   * @param {SnapLocation} snapLocation
   *
   * @return {Point}
   */
  SnapContext.prototype.getSnapOrigin = function(snapLocation) {
    return this._snapOrigins[snapLocation];
  };

  /**
   * Set the snap origin for a given location.
   *
   * @param {SnapLocation} snapLocation
   * @param {Point} snapOrigin
   */
  SnapContext.prototype.setSnapOrigin = function(snapLocation, snapOrigin) {
    this._snapOrigins[snapLocation] = snapOrigin;

    if (this._snapLocations.indexOf(snapLocation) === -1) {
      this._snapLocations.push(snapLocation);
    }
  };

  /**
   * Add a default snap point.
   *
   * @param {SnapLocation} snapLocation
   * @param {Point} point
   */
  SnapContext.prototype.addDefaultSnap = function(snapLocation, point) {

    var snapValues = this._defaultSnaps[snapLocation];

    if (!snapValues) {
      snapValues = this._defaultSnaps[snapLocation] = [];
    }

    snapValues.push(point);
  };

  /**
   * Get the snap locations for this context.
   *
   * @return {SnapLocation[]}
   */
  SnapContext.prototype.getSnapLocations = function() {
    return this._snapLocations;
  };

  /**
   * Set the snap locations for this context.
   *
   * The order of locations determines precedence.
   *
   * @param {SnapLocation[]} snapLocations
   */
  SnapContext.prototype.setSnapLocations = function(snapLocations) {
    this._snapLocations = snapLocations;
  };

  /**
   * Get snap points for the given target.
   *
   * @param {Element|string} target
   *
   * @return {SnapPoints}
   */
  SnapContext.prototype.pointsForTarget = function(target) {

    var targetId = target.id || target;

    var snapPoints = this._targets[targetId];

    if (!snapPoints) {
      snapPoints = this._targets[targetId] = new SnapPoints();
      snapPoints.initDefaults(this._defaultSnaps);
    }

    return snapPoints;
  };


  /**
   * Add points to snap to.
   */
  function SnapPoints() {

    /**
     * Example:
     *
     * ```javascript
     * {
     *   'top-right': {
     *     x: [ 100, 200, 300 ]
     *     y: [ 100, 200, 300 ]
     *   }
     * }
     * ```
     *
     * @type {Record<string, Record<Axis, number[]>>}
     */
    this._snapValues = {};
  }

  /**
   * Add a snap point.
   *
   * @param {SnapLocation} snapLocation
   * @param {Point} point
   */
  SnapPoints.prototype.add = function(snapLocation, point) {

    var snapValues = this._snapValues[snapLocation];

    if (!snapValues) {
      snapValues = this._snapValues[snapLocation] = { x: [], y: [] };
    }

    if (snapValues.x.indexOf(point.x) === -1) {
      snapValues.x.push(point.x);
    }

    if (snapValues.y.indexOf(point.y) === -1) {
      snapValues.y.push(point.y);
    }
  };

  /**
   * Snap a point's x or y value.
   *
   * @param {Point} point
   * @param {SnapLocation} snapLocation
   * @param {Axis} axis
   * @param {number} tolerance
   *
   * @return {number}
   */
  SnapPoints.prototype.snap = function(point, snapLocation, axis, tolerance) {
    var snappingValues = this._snapValues[snapLocation];

    return snappingValues && snapTo(point[axis], snappingValues[axis], tolerance);
  };

  /**
   * Initialize default snap points.
   *
   * @param {Record<SnapLocation, Point[]>} defaultSnaps
   */
  SnapPoints.prototype.initDefaults = function(defaultSnaps) {

    var self = this;

    forEach$1(defaultSnaps || {}, function(snapPoints, snapLocation) {
      forEach$1(snapPoints, function(point) {
        self.add(snapLocation, point);
      });
    });
  };

  /**
   * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('./Snapping').default} Snapping
   */

  var HIGHER_PRIORITY$1 = 1250;


  /**
   * Snap during create and move.
   *
   * @param {ElementRegistry} elementRegistry
   * @param {EventBus} eventBus
   * @param {Snapping} snapping
   */
  function CreateMoveSnapping(elementRegistry, eventBus, snapping) {
    var self = this;

    this._elementRegistry = elementRegistry;

    eventBus.on([
      'create.start',
      'shape.move.start'
    ], function(event) {
      self.initSnap(event);
    });

    eventBus.on([
      'create.move',
      'create.end',
      'shape.move.move',
      'shape.move.end'
    ], HIGHER_PRIORITY$1, function(event) {
      var context = event.context,
          shape = context.shape,
          snapContext = context.snapContext,
          target = context.target;

      if (event.originalEvent && isCmd(event.originalEvent)) {
        return;
      }

      if (isSnapped(event) || !target) {
        return;
      }

      var snapPoints = snapContext.pointsForTarget(target);

      if (!snapPoints.initialized) {
        snapPoints = self.addSnapTargetPoints(snapPoints, shape, target);

        snapPoints.initialized = true;
      }

      snapping.snap(event, snapPoints);
    });

    eventBus.on([
      'create.cleanup',
      'shape.move.cleanup'
    ], function() {
      snapping.hide();
    });
  }

  CreateMoveSnapping.$inject = [
    'elementRegistry',
    'eventBus',
    'snapping'
  ];

  CreateMoveSnapping.prototype.initSnap = function(event) {
    var elementRegistry = this._elementRegistry;

    var context = event.context,
        shape = context.shape,
        snapContext = context.snapContext;

    if (!snapContext) {
      snapContext = context.snapContext = new SnapContext();
    }

    var shapeMid;

    if (elementRegistry.get(shape.id)) {

      // move
      shapeMid = mid$2(shape, event);
    } else {

      // create
      shapeMid = {
        x: event.x + mid$2(shape).x,
        y: event.y + mid$2(shape).y
      };
    }

    var shapeTopLeft = {
          x: shapeMid.x - shape.width / 2,
          y: shapeMid.y - shape.height / 2
        },
        shapeBottomRight = {
          x: shapeMid.x + shape.width / 2,
          y: shapeMid.y + shape.height / 2
        };

    snapContext.setSnapOrigin('mid', {
      x: shapeMid.x - event.x,
      y: shapeMid.y - event.y
    });

    // snap labels to mid only
    if (isLabel(shape)) {
      return snapContext;
    }

    snapContext.setSnapOrigin('top-left', {
      x: shapeTopLeft.x - event.x,
      y: shapeTopLeft.y - event.y
    });

    snapContext.setSnapOrigin('bottom-right', {
      x: shapeBottomRight.x - event.x,
      y: shapeBottomRight.y - event.y
    });

    return snapContext;
  };

  CreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {
    var snapTargets = this.getSnapTargets(shape, target);

    forEach$1(snapTargets, function(snapTarget) {

      // handle labels
      if (isLabel(snapTarget)) {

        if (isLabel(shape)) {
          snapPoints.add('mid', mid$2(snapTarget));
        }

        return;
      }

      // handle connections
      if (isConnection(snapTarget)) {

        // ignore single segment connections
        if (snapTarget.waypoints.length < 3) {
          return;
        }

        // ignore first and last waypoint
        var waypoints = snapTarget.waypoints.slice(1, -1);

        forEach$1(waypoints, function(waypoint) {
          snapPoints.add('mid', waypoint);
        });

        return;
      }

      // handle shapes
      snapPoints.add('mid', mid$2(snapTarget));
    });

    if (!isNumber(shape.x) || !isNumber(shape.y)) {
      return snapPoints;
    }

    // snap to original position when moving
    if (this._elementRegistry.get(shape.id)) {
      snapPoints.add('mid', mid$2(shape));
    }

    return snapPoints;
  };

  CreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {
    return getChildren$1(target).filter(function(child) {
      return !isHidden$2(child);
    });
  };

  // helpers //////////

  function isHidden$2(element) {
    return !!element.hidden;
  }

  /**
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   * @typedef {import('didi').Injector} Injector
   *
   * @typedef {import('diagram-js/lib/features/snapping/SnapContext').default} SnapContext
   * @typedef {import('diagram-js/lib/features/snapping/SnapContext').SnapPoints} SnapPoints
   *
   * @typedef {import('diagram-js/lib/core/EventBus').Event} Event
   *
   * @typedef {import('../../model/Types').Element} Element
   * @typedef {import('../../model/Types').Shape} Shape
   */

  var HIGH_PRIORITY = 1500;


  /**
   * Snap during create and move.
   *
   * @param {EventBus} eventBus
   * @param {Injector} injector
   */
  function BpmnCreateMoveSnapping(eventBus, injector) {
    injector.invoke(CreateMoveSnapping, this);

    // creating first participant
    eventBus.on([ 'create.move', 'create.end' ], HIGH_PRIORITY, setSnappedIfConstrained);

    // snap boundary events
    eventBus.on([
      'create.move',
      'create.end',
      'shape.move.move',
      'shape.move.end'
    ], HIGH_PRIORITY, function(event) {
      var context = event.context,
          canExecute = context.canExecute,
          target = context.target;

      var canAttach = canExecute && (canExecute === 'attach' || canExecute.attach);

      if (canAttach && !isSnapped(event)) {
        snapBoundaryEvent(event, target);
      }
    });
  }

  e$3(BpmnCreateMoveSnapping, CreateMoveSnapping);

  BpmnCreateMoveSnapping.$inject = [
    'eventBus',
    'injector'
  ];

  /**
   * @param {Event} event
   *
   * @return {SnapContext}
   */
  BpmnCreateMoveSnapping.prototype.initSnap = function(event) {
    var snapContext = CreateMoveSnapping.prototype.initSnap.call(this, event);

    var shape = event.shape;

    var isMove = !!this._elementRegistry.get(shape.id);

    // snap to docking points
    forEach$1(shape.outgoing, function(connection) {
      var docking = connection.waypoints[0];

      docking = docking.original || docking;

      snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));
    });

    forEach$1(shape.incoming, function(connection) {
      var docking = connection.waypoints[connection.waypoints.length - 1];

      docking = docking.original || docking;

      snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));
    });

    if (is$1(shape, 'bpmn:Participant')) {

      // snap to borders with higher priority
      snapContext.setSnapLocations([ 'top-left', 'bottom-right', 'mid' ]);
    }

    return snapContext;
  };

  /**
   * @param {SnapPoints} snapPoints
   * @param {Shape} shape
   * @param {Shape} target
   *
   * @return {SnapPoints}
   */
  BpmnCreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {
    CreateMoveSnapping.prototype.addSnapTargetPoints.call(this, snapPoints, shape, target);

    var snapTargets = this.getSnapTargets(shape, target);

    forEach$1(snapTargets, function(snapTarget) {

      // handle TRBL alignment
      //
      // * with container elements
      // * with text annotations
      if (isContainer(snapTarget) || areAll([ shape, snapTarget ], 'bpmn:TextAnnotation')) {
        snapPoints.add('top-left', topLeft(snapTarget));
        snapPoints.add('bottom-right', bottomRight(snapTarget));
      }
    });

    var elementRegistry = this._elementRegistry;

    // snap to docking points if not create mode
    forEach$1(shape.incoming, function(connection) {
      if (elementRegistry.get(shape.id)) {

        if (!includes(snapTargets, connection.source)) {
          snapPoints.add('mid', getMid(connection.source));
        }

        var docking = connection.waypoints[0];
        snapPoints.add(connection.id + '-docking', docking.original || docking);
      }
    });

    forEach$1(shape.outgoing, function(connection) {
      if (elementRegistry.get(shape.id)) {

        if (!includes(snapTargets, connection.target)) {
          snapPoints.add('mid', getMid(connection.target));
        }

        var docking = connection.waypoints[ connection.waypoints.length - 1 ];

        snapPoints.add(connection.id + '-docking', docking.original || docking);
      }
    });

    // add sequence flow parents as snap targets
    if (is$1(target, 'bpmn:SequenceFlow')) {
      snapPoints = this.addSnapTargetPoints(snapPoints, shape, target.parent);
    }

    return snapPoints;
  };

  /**
   * @param {Shape} shape
   * @param {Shape} target
   *
   * @return {Shape[]}
   */
  BpmnCreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {
    return CreateMoveSnapping.prototype.getSnapTargets.call(this, shape, target)
      .filter(function(snapTarget) {

        // do not snap to lanes
        return !is$1(snapTarget, 'bpmn:Lane');
      });
  };

  // helpers //////////

  /**
   * @param {Shape} event
   * @param {Shape} target
   */
  function snapBoundaryEvent(event, target) {
    var targetTRBL = asTRBL(target);

    var direction = getBoundaryAttachment(event, target);

    var context = event.context,
        shape = context.shape;

    var offset;

    if (shape.parent) {
      offset = { x: 0, y: 0 };
    } else {
      offset = getMid(shape);
    }

    if (/top/.test(direction)) {
      setSnapped(event, 'y', targetTRBL.top - offset.y);
    } else if (/bottom/.test(direction)) {
      setSnapped(event, 'y', targetTRBL.bottom - offset.y);
    }

    if (/left/.test(direction)) {
      setSnapped(event, 'x', targetTRBL.left - offset.x);
    } else if (/right/.test(direction)) {
      setSnapped(event, 'x', targetTRBL.right - offset.x);
    }
  }

  /**
   * @param {Element[]} elements
   * @param {string} type
   *
   * @return {boolean}
   */
  function areAll(elements, type) {
    return elements.every(function(el) {
      return is$1(el, type);
    });
  }

  /**
   * @param {Element} element
   */
  function isContainer(element) {
    if (is$1(element, 'bpmn:SubProcess') && isExpanded(element)) {
      return true;
    }

    return is$1(element, 'bpmn:Participant');
  }

  /**
   * @param {Event} event
   */
  function setSnappedIfConstrained(event) {
    var context = event.context,
        createConstraints = context.createConstraints;

    if (!createConstraints) {
      return;
    }

    var top = createConstraints.top,
        right = createConstraints.right,
        bottom = createConstraints.bottom,
        left = createConstraints.left;

    if ((left && left >= event.x) || (right && right <= event.x)) {
      setSnapped(event, 'x', event.x);
    }

    if ((top && top >= event.y) || (bottom && bottom <= event.y)) {
      setSnapped(event, 'y', event.y);
    }
  }

  function includes(array, value) {
    return array.indexOf(value) !== -1;
  }

  function getDockingSnapOrigin(docking, isMove, event) {
    return isMove ? (
      {
        x: docking.x - event.x,
        y: docking.y - event.y
      }
    ) : {
      x: docking.x,
      y: docking.y
    };
  }

  /**
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('./Snapping').default} Snapping
   */

  var HIGHER_PRIORITY = 1250;


  /**
   * Snap during resize.
   *
   * @param {EventBus} eventBus
   * @param {Snapping} snapping
   */
  function ResizeSnapping(eventBus, snapping) {
    var self = this;

    eventBus.on([ 'resize.start' ], function(event) {
      self.initSnap(event);
    });

    eventBus.on([
      'resize.move',
      'resize.end',
    ], HIGHER_PRIORITY, function(event) {
      var context = event.context,
          shape = context.shape,
          parent = shape.parent,
          direction = context.direction,
          snapContext = context.snapContext;

      if (event.originalEvent && isCmd(event.originalEvent)) {
        return;
      }

      if (isSnapped(event)) {
        return;
      }

      var snapPoints = snapContext.pointsForTarget(parent);

      if (!snapPoints.initialized) {
        snapPoints = self.addSnapTargetPoints(snapPoints, shape, parent, direction);

        snapPoints.initialized = true;
      }

      if (isHorizontal(direction)) {
        setSnapped(event, 'x', event.x);
      }

      if (isVertical(direction)) {
        setSnapped(event, 'y', event.y);
      }

      snapping.snap(event, snapPoints);
    });

    eventBus.on([ 'resize.cleanup' ], function() {
      snapping.hide();
    });
  }

  ResizeSnapping.prototype.initSnap = function(event) {
    var context = event.context,
        shape = context.shape,
        direction = context.direction,
        snapContext = context.snapContext;

    if (!snapContext) {
      snapContext = context.snapContext = new SnapContext();
    }

    var snapOrigin = getSnapOrigin(shape, direction);

    snapContext.setSnapOrigin('corner', {
      x: snapOrigin.x - event.x,
      y: snapOrigin.y - event.y
    });

    return snapContext;
  };

  ResizeSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target, direction) {
    var snapTargets = this.getSnapTargets(shape, target);

    forEach$1(snapTargets, function(snapTarget) {
      snapPoints.add('corner', bottomRight(snapTarget));
      snapPoints.add('corner', topLeft(snapTarget));
    });

    snapPoints.add('corner', getSnapOrigin(shape, direction));

    return snapPoints;
  };

  ResizeSnapping.$inject = [
    'eventBus',
    'snapping'
  ];

  ResizeSnapping.prototype.getSnapTargets = function(shape, target) {
    return getChildren$1(target).filter(function(child) {
      return !isAttached(child, shape)
        && !isConnection(child)
        && !isHidden$1(child)
        && !isLabel(child);
    });
  };

  // helpers //////////

  function getSnapOrigin(shape, direction) {
    var mid = getMid(shape),
        trbl = asTRBL(shape);

    var snapOrigin = {
      x: mid.x,
      y: mid.y
    };

    if (direction.indexOf('n') !== -1) {
      snapOrigin.y = trbl.top;
    } else if (direction.indexOf('s') !== -1) {
      snapOrigin.y = trbl.bottom;
    }

    if (direction.indexOf('e') !== -1) {
      snapOrigin.x = trbl.right;
    } else if (direction.indexOf('w') !== -1) {
      snapOrigin.x = trbl.left;
    }

    return snapOrigin;
  }

  function isAttached(element, host) {
    return element.host === host;
  }

  function isHidden$1(element) {
    return !!element.hidden;
  }

  function isHorizontal(direction) {
    return direction === 'n' || direction === 's';
  }

  function isVertical(direction) {
    return direction === 'e' || direction === 'w';
  }

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   *
   * @typedef {import('../../core/EventBus').Event} Event
   *
   * @typedef {import('./SnapContext').SnapPoints} SnapPoints
   */

  var SNAP_TOLERANCE = 7;

  var SNAP_LINE_HIDE_DELAY = 1000;


  /**
   * Generic snapping feature.
   *
   * @param {Canvas} canvas
   */
  function Snapping(canvas) {
    this._canvas = canvas;

    // delay hide by 1000 seconds since last snap
    this._asyncHide = debounce(bind$2(this.hide, this), SNAP_LINE_HIDE_DELAY);
  }

  Snapping.$inject = [ 'canvas' ];

  /**
   * Snap an event to given snap points.
   *
   * @param {Event} event
   * @param {SnapPoints} snapPoints
   */
  Snapping.prototype.snap = function(event, snapPoints) {
    var context = event.context,
        snapContext = context.snapContext,
        snapLocations = snapContext.getSnapLocations();

    var snapping = {
      x: isSnapped(event, 'x'),
      y: isSnapped(event, 'y')
    };

    forEach$1(snapLocations, function(location) {
      var snapOrigin = snapContext.getSnapOrigin(location);

      var snapCurrent = {
        x: event.x + snapOrigin.x,
        y: event.y + snapOrigin.y
      };

      // snap both axis if not snapped already
      forEach$1([ 'x', 'y' ], function(axis) {
        var locationSnapping;

        if (!snapping[axis]) {
          locationSnapping = snapPoints.snap(snapCurrent, location, axis, SNAP_TOLERANCE);

          if (locationSnapping !== undefined) {
            snapping[axis] = {
              value: locationSnapping,
              originValue: locationSnapping - snapOrigin[axis]
            };
          }
        }
      });

      // no need to continue snapping
      if (snapping.x && snapping.y) {
        return false;
      }
    });

    // show snap lines
    this.showSnapLine('vertical', snapping.x && snapping.x.value);
    this.showSnapLine('horizontal', snapping.y && snapping.y.value);

    // snap event
    forEach$1([ 'x', 'y' ], function(axis) {
      var axisSnapping = snapping[axis];

      if (isObject(axisSnapping)) {
        setSnapped(event, axis, axisSnapping.originValue);
      }
    });
  };

  Snapping.prototype._createLine = function(orientation) {
    var root = this._canvas.getLayer('snap');

    var line = create$1('path');

    attr$1(line, { d: 'M0,0 L0,0' });

    classes$1(line).add('djs-snap-line');

    append(root, line);

    return {
      update: function(position) {

        if (!isNumber(position)) {
          attr$1(line, { display: 'none' });
        } else {
          if (orientation === 'horizontal') {
            attr$1(line, {
              d: 'M-100000,' + position + ' L+100000,' + position,
              display: ''
            });
          } else {
            attr$1(line, {
              d: 'M ' + position + ',-100000 L ' + position + ', +100000',
              display: ''
            });
          }
        }
      }
    };
  };

  Snapping.prototype._createSnapLines = function() {
    this._snapLines = {
      horizontal: this._createLine('horizontal'),
      vertical: this._createLine('vertical')
    };
  };

  Snapping.prototype.showSnapLine = function(orientation, position) {

    var line = this.getSnapLine(orientation);

    if (line) {
      line.update(position);
    }

    this._asyncHide();
  };

  Snapping.prototype.getSnapLine = function(orientation) {
    if (!this._snapLines) {
      this._createSnapLines();
    }

    return this._snapLines[orientation];
  };

  Snapping.prototype.hide = function() {
    forEach$1(this._snapLines, function(snapLine) {
      snapLine.update();
    });
  };

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var SnappingModule$1 = {
    __init__: [
      'createMoveSnapping',
      'resizeSnapping',
      'snapping'
    ],
    createMoveSnapping: [ 'type', CreateMoveSnapping ],
    resizeSnapping: [ 'type', ResizeSnapping ],
    snapping: [ 'type', Snapping ]
  };

  var SnappingModule = {
    __depends__: [ SnappingModule$1 ],
    __init__: [
      'connectSnapping',
      'createMoveSnapping'
    ],
    connectSnapping: [ 'type', BpmnConnectSnapping ],
    createMoveSnapping: [ 'type', BpmnCreateMoveSnapping ]
  };

  /**
   * @typedef {import('../../core/Canvas').default} Canvas
   * @typedef {import('../../core/EventBus').default} EventBus
   * @typedef {import('../selection/Selection').default} Selection
   * @typedef {import('../../i18n/translate/translate.js').default} Translate
   *
   * @typedef {import('../../util/Types').Dimensions} Dimensions
   *
   * @typedef {import('./SearchPadProvider').default} SearchPadProvider
   * @typedef {import('./SearchPadProvider').SearchResult} SearchResult
   * @typedef {import('./SearchPadProvider').Token} Token
   */

  var SCROLL_TO_ELEMENT_PADDING = 300;

  /**
   * Provides searching infrastructure.
   *
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   * @param {Selection} selection
   * @param {Translate} translate
   */
  function SearchPad(canvas, eventBus, selection, translate) {
    this._open = false;
    this._results = {};
    this._eventMaps = [];

    this._cachedRootElement = null;
    this._cachedSelection = null;
    this._cachedViewbox = null;

    this._canvas = canvas;
    this._eventBus = eventBus;
    this._selection = selection;
    this._translate = translate;

    // setup elements
    this._container = this._getBoxHtml();
    this._searchInput = query(SearchPad.INPUT_SELECTOR, this._container);
    this._resultsContainer = query(SearchPad.RESULTS_CONTAINER_SELECTOR, this._container);

    // attach search pad
    this._canvas.getContainer().appendChild(this._container);

    // cleanup whenever appropriate
    eventBus.on([
      'canvas.destroy',
      'diagram.destroy',
      'drag.init',
      'elements.changed'
    ], this.close, this);
  }


  SearchPad.$inject = [
    'canvas',
    'eventBus',
    'selection',
    'translate'
  ];


  /**
   * Binds and keeps track of all event listereners
   */
  SearchPad.prototype._bindEvents = function() {
    var self = this;

    function listen(el, selector, type, fn) {
      self._eventMaps.push({
        el: el,
        type: type,
        listener: delegate.bind(el, selector, type, fn)
      });
    }

    // close search on clicking anywhere outside
    listen(document, 'html', 'click', function(e) {
      self.close(false);
    });

    // stop event from propagating and closing search
    // focus on input
    listen(this._container, SearchPad.INPUT_SELECTOR, 'click', function(e) {
      e.stopPropagation();
      e.delegateTarget.focus();
    });

    // preselect result on hover
    listen(this._container, SearchPad.RESULT_SELECTOR, 'mouseover', function(e) {
      e.stopPropagation();
      self._scrollToNode(e.delegateTarget);
      self._preselect(e.delegateTarget);
    });

    // selects desired result on mouse click
    listen(this._container, SearchPad.RESULT_SELECTOR, 'click', function(e) {
      e.stopPropagation();
      self._select(e.delegateTarget);
    });

    // prevent cursor in input from going left and right when using up/down to
    // navigate results
    listen(this._container, SearchPad.INPUT_SELECTOR, 'keydown', function(e) {

      if (isKey('ArrowUp', e)) {
        e.preventDefault();
      }

      if (isKey('ArrowDown', e)) {
        e.preventDefault();
      }
    });

    // handle keyboard input
    listen(this._container, SearchPad.INPUT_SELECTOR, 'keyup', function(e) {

      if (isKey('Escape', e)) {
        return self.close();
      }

      if (isKey('Enter', e)) {
        var selected = self._getCurrentResult();

        return selected ? self._select(selected) : self.close(false);
      }

      if (isKey('ArrowUp', e)) {
        return self._scrollToDirection(true);
      }

      if (isKey('ArrowDown', e)) {
        return self._scrollToDirection();
      }

      // do not search while navigating text input
      if (isKey([ 'ArrowLeft', 'ArrowRight' ], e)) {
        return;
      }

      // anything else
      self._search(e.delegateTarget.value);
    });
  };


  /**
   * Unbinds all previously established listeners
   */
  SearchPad.prototype._unbindEvents = function() {
    this._eventMaps.forEach(function(m) {
      delegate.unbind(m.el, m.type, m.listener);
    });
  };


  /**
   * Performs a search for the given pattern.
   *
   * @param {string} pattern
   */
  SearchPad.prototype._search = function(pattern) {
    var self = this;

    this._clearResults();

    // do not search on empty query
    if (!pattern.trim()) {
      return;
    }

    var searchResults = this._searchProvider.find(pattern);

    searchResults = searchResults.filter(function(searchResult) {
      return !self._canvas.getRootElements().includes(searchResult.element);
    });

    if (!searchResults.length) {
      this._selection.select(null);

      return;
    }

    // append new results
    searchResults.forEach(function(result) {
      var id = result.element.id;
      var node = self._createResultNode(result, id);
      self._results[id] = {
        element: result.element,
        node: node
      };
    });

    // preselect first result
    var node = query(SearchPad.RESULT_SELECTOR, this._resultsContainer);
    this._scrollToNode(node);
    this._preselect(node);
  };


  /**
   * Navigate to the previous/next result. Defaults to next result.
   *
   * @param {boolean} previous
   */
  SearchPad.prototype._scrollToDirection = function(previous) {
    var selected = this._getCurrentResult();
    if (!selected) {
      return;
    }

    var node = previous ? selected.previousElementSibling : selected.nextElementSibling;
    if (node) {
      this._scrollToNode(node);
      this._preselect(node);
    }
  };


  /**
   * Scroll to the node if it is not visible.
   *
   * @param {HTMLElement} node
   */
  SearchPad.prototype._scrollToNode = function(node) {
    if (!node || node === this._getCurrentResult()) {
      return;
    }

    var nodeOffset = node.offsetTop;
    var containerScroll = this._resultsContainer.scrollTop;

    var bottomScroll = nodeOffset - this._resultsContainer.clientHeight + node.clientHeight;

    if (nodeOffset < containerScroll) {
      this._resultsContainer.scrollTop = nodeOffset;
    } else if (containerScroll < bottomScroll) {
      this._resultsContainer.scrollTop = bottomScroll;
    }
  };


  /**
   * Clears all results data.
   */
  SearchPad.prototype._clearResults = function() {
    clear(this._resultsContainer);

    this._results = {};

    this._eventBus.fire('searchPad.cleared');
  };


  /**
   * Get currently selected result.
   *
   * @return {HTMLElement}
   */
  SearchPad.prototype._getCurrentResult = function() {
    return query(SearchPad.RESULT_SELECTED_SELECTOR, this._resultsContainer);
  };


  /**
   * Create result DOM element within results container
   * that corresponds to a search result.
   *
   * 'result' : one of the elements returned by Pad
   * 'id' : id attribute value to assign to the new DOM node
   * return : created DOM element
   *
   * @param {SearchResult} result
   * @param {string} id
   *
   * @return {HTMLElement}
   */
  SearchPad.prototype._createResultNode = function(result, id) {
    var node = domify$1(SearchPad.RESULT_HTML);

    // create only if available
    if (result.primaryTokens.length > 0) {
      createInnerTextNode(node, result.primaryTokens, SearchPad.RESULT_PRIMARY_HTML);
    }

    // secondary tokens (represent element ID) are allways available
    createInnerTextNode(node, result.secondaryTokens, SearchPad.RESULT_SECONDARY_HTML);

    attr(node, SearchPad.RESULT_ID_ATTRIBUTE, id);

    this._resultsContainer.appendChild(node);

    return node;
  };


  /**
   * Register search element provider.
   *
   * @param {SearchPadProvider} provider
   */
  SearchPad.prototype.registerProvider = function(provider) {
    this._searchProvider = provider;
  };


  /**
   * Open search pad.
   */
  SearchPad.prototype.open = function() {
    if (!this._searchProvider) {
      throw new Error('no search provider registered');
    }

    if (this.isOpen()) {
      return;
    }

    this._cachedRootElement = this._canvas.getRootElement();
    this._cachedSelection = this._selection.get();
    this._cachedViewbox = this._canvas.viewbox();

    this._selection.select(null);

    this._bindEvents();

    this._open = true;

    classes(this._canvas.getContainer()).add('djs-search-open');
    classes(this._container).add('open');

    this._searchInput.focus();

    this._eventBus.fire('searchPad.opened');
  };


  /**
   * Close search pad.
   */
  SearchPad.prototype.close = function(restoreCached = true) {
    if (!this.isOpen()) {
      return;
    }

    if (restoreCached) {
      if (this._cachedRootElement) {
        this._canvas.setRootElement(this._cachedRootElement);
      }

      if (this._cachedSelection) {
        this._selection.select(this._cachedSelection);
      }

      if (this._cachedViewbox) {
        this._canvas.viewbox(this._cachedViewbox);
      }

      this._eventBus.fire('searchPad.restored');
    }

    this._cachedRootElement = null;
    this._cachedSelection = null;
    this._cachedViewbox = null;

    this._unbindEvents();

    this._open = false;

    classes(this._canvas.getContainer()).remove('djs-search-open');
    classes(this._container).remove('open');

    this._clearResults();

    this._searchInput.value = '';
    this._searchInput.blur();

    this._eventBus.fire('searchPad.closed');

    this._canvas.restoreFocus();
  };


  /**
   * Toggles search pad on/off.
   */
  SearchPad.prototype.toggle = function() {
    this.isOpen() ? this.close() : this.open();
  };


  /**
   * Report state of search pad.
   */
  SearchPad.prototype.isOpen = function() {
    return this._open;
  };


  /**
   * Preselect result entry.
   *
   * @param {HTMLElement} element
   */
  SearchPad.prototype._preselect = function(node) {
    var selectedNode = this._getCurrentResult();

    // already selected
    if (node === selectedNode) {
      return;
    }

    // removing preselection from current node
    if (selectedNode) {
      classes(selectedNode).remove(SearchPad.RESULT_SELECTED_CLASS);
    }

    var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);
    var element = this._results[id].element;

    classes(node).add(SearchPad.RESULT_SELECTED_CLASS);

    this._canvas.scrollToElement(element, {
      top: SCROLL_TO_ELEMENT_PADDING
    });

    this._selection.select(element);

    this._eventBus.fire('searchPad.preselected', element);
  };


  /**
   * Select result node.
   *
   * @param {HTMLElement} element
   */
  SearchPad.prototype._select = function(node) {
    var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);
    var element = this._results[id].element;

    this._cachedSelection = null;
    this._cachedViewbox = null;

    this.close(false);

    this._canvas.scrollToElement(element, {
      top: SCROLL_TO_ELEMENT_PADDING
    });

    this._selection.select(element);

    this._eventBus.fire('searchPad.selected', element);
  };


  SearchPad.prototype._getBoxHtml = function() {
    const box = domify$1(SearchPad.BOX_HTML);
    const input = query(SearchPad.INPUT_SELECTOR, box);

    if (input) {
      input.setAttribute('aria-label', this._translate('Search in diagram'));
    }

    return box;
  };


  /**
   * Creates and appends child node from result tokens and HTML template.
   *
   * @param {HTMLElement} node
   * @param {Token[]} tokens
   * @param {string} template
   */
  function createInnerTextNode(parentNode, tokens, template) {
    var text = createHtmlText(tokens);
    var childNode = domify$1(template);
    childNode.innerHTML = text;
    parentNode.appendChild(childNode);
  }

  /**
   * Create internal HTML markup from result tokens.
   * Caters for highlighting pattern matched tokens.
   *
   * @param {Token[]} tokens
   *
   * @return {string|null}
   */
  function createHtmlText(tokens) {
    var htmlText = '';

    tokens.forEach(function(t) {
      var text = escapeHTML(t.value || t.matched || t.normal);
      var match = t.match || t.matched;

      if (match) {
        htmlText += '<b class="' + SearchPad.RESULT_HIGHLIGHT_CLASS + '">' + text + '</b>';
      } else {
        htmlText += text;
      }
    });

    return htmlText !== '' ? htmlText : null;
  }


  /**
   * CONSTANTS
   */
  SearchPad.CONTAINER_SELECTOR = '.djs-search-container';
  SearchPad.INPUT_SELECTOR = '.djs-search-input input';
  SearchPad.RESULTS_CONTAINER_SELECTOR = '.djs-search-results';
  SearchPad.RESULT_SELECTOR = '.djs-search-result';
  SearchPad.RESULT_SELECTED_CLASS = 'djs-search-result-selected';
  SearchPad.RESULT_SELECTED_SELECTOR = '.' + SearchPad.RESULT_SELECTED_CLASS;
  SearchPad.RESULT_ID_ATTRIBUTE = 'data-result-id';
  SearchPad.RESULT_HIGHLIGHT_CLASS = 'djs-search-highlight';

  SearchPad.BOX_HTML =
`<div class="djs-search-container djs-scrollable">
  <div class="djs-search-input">
    <svg class="djs-search-icon" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" clip-rule="evenodd" d="M9.0325 8.5H9.625L13.3675 12.25L12.25 13.3675L8.5 9.625V9.0325L8.2975 8.8225C7.4425 9.5575 6.3325 10 5.125 10C2.4325 10 0.25 7.8175 0.25 5.125C0.25 2.4325 2.4325 0.25 5.125 0.25C7.8175 0.25 10 2.4325 10 5.125C10 6.3325 9.5575 7.4425 8.8225 8.2975L9.0325 8.5ZM1.75 5.125C1.75 6.9925 3.2575 8.5 5.125 8.5C6.9925 8.5 8.5 6.9925 8.5 5.125C8.5 3.2575 6.9925 1.75 5.125 1.75C3.2575 1.75 1.75 3.2575 1.75 5.125Z" fill="#22242A"/>
    </svg>
    <input type="text" spellcheck="false" />
  </div>
  <div class="djs-search-results" />
</div>`  ;

  SearchPad.RESULT_HTML =
    '<div class="djs-search-result"></div>';

  SearchPad.RESULT_PRIMARY_HTML =
    '<div class="djs-search-result-primary"></div>';

  SearchPad.RESULT_SECONDARY_HTML =
    '<p class="djs-search-result-secondary"></p>';

  /**
   * @type { import('didi').ModuleDeclaration }
   */
  var SearchPadModule = {
    __depends__: [
      TranslateModule,
      OverlaysModule,
      SelectionModule
    ],
    searchPad: [ 'type', SearchPad ]
  };

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
   * @typedef {import('diagram-js/lib/features/search-pad/SearchPad').default} SearchPad
   *
   * @typedef {import('diagram-js/lib/features/search-pad/SearchPadProvider').default} SearchPadProvider
   * @typedef {import('diagram-js/lib/features/search-pad/SearchPadProvider').SearchResult} SearchPadResult
   * @typedef {import('diagram-js/lib/features/search-pad/SearchPadProvider').Token} SearchPadToken
   * @typedef {import('diagram-js/lib/features/search/search').default} Search
   * @typedef {import('diagram-js/lib/features/search/search').SearchResult} SearchResult
   * @typedef {import('diagram-js/lib/features/search/search').Token} SearchToken
   */

  /**
   * Provides ability to search for BPMN elements.
   *
   * @implements {SearchPadProvider}
   *
   * @param {ElementRegistry} elementRegistry
   * @param {SearchPad} searchPad
   * @param {Canvas} canvas
   * @param {Search} search
   */
  function BpmnSearchProvider(elementRegistry, searchPad, canvas, search) {
    this._elementRegistry = elementRegistry;
    this._canvas = canvas;
    this._search = search;

    searchPad.registerProvider(this);
  }

  BpmnSearchProvider.$inject = [
    'elementRegistry',
    'searchPad',
    'canvas',
    'search'
  ];

  /**
   * @param {string} pattern
   *
   * @return {SearchPadResult[]}
   */
  BpmnSearchProvider.prototype.find = function(pattern) {
    var rootElements = this._canvas.getRootElements();

    var elements = this._elementRegistry.filter(function(element) {
      return !isLabel(element) && !rootElements.includes(element);
    });

    return this._search(
      elements.map(element => {
        return {
          element,
          label: getLabel(element),
          id: element.id
        };
      }),
      pattern, {
        keys: [
          'label',
          'id'
        ]
      }
    ).map(toSearchPadResult);
  };

  /**
   * @param {SearchResult} token
   *
   * @return {SearchPadResult}
   */
  function toSearchPadResult(result) {

    const {
      item: {
        element
      },
      tokens
    } = result;

    return {
      element,
      primaryTokens: tokens.label,
      secondaryTokens: tokens.id
    };
  }

  var SearchModule = {
    __depends__: [
      SearchPadModule,
      SearchModule$1
    ],
    __init__: [ 'bpmnSearch' ],
    bpmnSearch: [ 'type', BpmnSearchProvider ]
  };

  const DATA_OBJECT_REFERENCE_OUTLINE_PATH = 'M44.7648 11.3263L36.9892 2.64074C36.0451 1.58628 34.5651 0.988708 33.1904 0.988708H5.98667C3.22688 0.988708 0.989624 3.34892 0.989624 6.26039V55.0235C0.989624 57.9349 3.22688 60.2952 5.98667 60.2952H40.966C43.7257 60.2952 45.963 57.9349 45.963 55.0235V14.9459C45.963 13.5998 45.6407 12.3048 44.7648 11.3263Z';
  const DATA_STORE_REFERENCE_OUTLINE_PATH = 'M1.03845 48.1347C1.03845 49.3511 1.07295 50.758 1.38342 52.064C1.69949 53.3938 2.32428 54.7154 3.56383 55.6428C6.02533 57.4841 10.1161 58.7685 14.8212 59.6067C19.5772 60.4538 25.1388 60.8738 30.6831 60.8738C36.2276 60.8738 41.7891 60.4538 46.545 59.6067C51.2504 58.7687 55.3412 57.4842 57.8028 55.6429C59.0424 54.7156 59.6673 53.3938 59.9834 52.064C60.2938 50.7579 60.3285 49.351 60.3285 48.1344V13.8415C60.3285 12.6249 60.2938 11.218 59.9834 9.91171C59.6673 8.58194 59.0423 7.2602 57.8027 6.33294C55.341 4.49168 51.2503 3.20723 46.545 2.36914C41.7891 1.522 36.2276 1.10204 30.6831 1.10205C25.1388 1.10206 19.5772 1.52206 14.8213 2.36923C10.1162 3.20734 6.02543 4.49183 3.5639 6.33314C2.32433 7.26038 1.69951 8.58206 1.38343 9.91181C1.07295 11.2179 1.03845 12.6247 1.03845 13.8411V48.1347Z';

  /**
   * @typedef { import('diagram-js/lib/util/Types').Dimensions} Dimensions
   */

  /**
   * @type {Dimensions}
   */
  const DATA_OBJECT_REFERENCE_STANDARD_SIZE = { width: 36, height: 50 };

  /**
   * @type {Dimensions}
   */
  const DATA_STORE_REFERENCE_STANDARD_SIZE = { width: 50, height: 50 };

  /**
   * Create a path element with given attributes.
   * @param {string} path
   * @param {Object} attrs
   * @param {Object} OUTLINE_STYLE
   * @return {SVGElement}
   */
  function createPath(path, attrs, OUTLINE_STYLE) {
    return create$1('path', {
      d: path,
      strokeWidth: 2,
      transform: `translate(${attrs.x}, ${attrs.y})`,
      ...OUTLINE_STYLE
    });
  }

  /**
   * @typedef { import('diagram-js/lib/features/outline/OutlineProvider').default } BaseOutlineProvider
   *
   * @typedef { import('diagram-js/lib/features/outline/OutlineProvider').Outline } Outline
   *
   * @typedef { import('diagram-js/lib/draw/Styles').default } Styles
   *
   * @typedef { import('diagram-js/lib/model/Types').Element } Element
   */

  const DEFAULT_OFFSET = 5;

  /**
   * BPMN-specific outline provider.
   *
   * @implements {BaseOutlineProvider}
   *
   * @param {Outline} outline
   * @param {Styles} styles
   */
  function OutlineProvider(outline, styles) {

    this._styles = styles;
    outline.registerProvider(this);
  }

  OutlineProvider.$inject = [
    'outline',
    'styles'
  ];

  /**
   * Returns outline for a given element.
   *
   * @param {Element} element
   *
   * @return {Outline}
   */
  OutlineProvider.prototype.getOutline = function(element) {

    const OUTLINE_STYLE = this._styles.cls('djs-outline', [ 'no-fill' ]);

    var outline;

    if (isLabel(element)) {
      return;
    }

    if (is$1(element, 'bpmn:Gateway')) {
      outline = create$1('rect');

      assign$1(outline.style, {
        'transform-box': 'fill-box',
        'transform': 'rotate(45deg)',
        'transform-origin': 'center'
      });

      attr$1(outline, assign$1({
        x: 2,
        y: 2,
        rx: 4,
        width: element.width - 4,
        height: element.height - 4,
      }, OUTLINE_STYLE));

    } else if (isAny(element, [ 'bpmn:Task', 'bpmn:SubProcess', 'bpmn:Group', 'bpmn:CallActivity' ])) {
      outline = create$1('rect');

      attr$1(outline, assign$1({
        x: -5,
        y: -5,
        rx: 14,
        width: element.width + DEFAULT_OFFSET * 2,
        height: element.height + DEFAULT_OFFSET * 2
      }, OUTLINE_STYLE));

    } else if (is$1(element, 'bpmn:EndEvent')) {

      outline = create$1('circle');

      // Extra 1px offset needed due to increased stroke-width of end event
      // which makes it bigger than other events.

      attr$1(outline, assign$1({
        cx: element.width / 2,
        cy: element.height / 2,
        r: element.width / 2 + DEFAULT_OFFSET + 1
      }, OUTLINE_STYLE));

    } else if (is$1(element, 'bpmn:Event')) {
      outline = create$1('circle');

      attr$1(outline, assign$1({
        cx: element.width / 2,
        cy: element.height / 2,
        r: element.width / 2 + DEFAULT_OFFSET
      }, OUTLINE_STYLE));

    } else if (is$1(element, 'bpmn:DataObjectReference') && isStandardSize(element, 'bpmn:DataObjectReference')) {

      outline = createPath(
        DATA_OBJECT_REFERENCE_OUTLINE_PATH,
        { x: -6, y: -6 },
        OUTLINE_STYLE
      );

    } else if (is$1(element, 'bpmn:DataStoreReference') && isStandardSize(element, 'bpmn:DataStoreReference')) {

      outline = createPath(
        DATA_STORE_REFERENCE_OUTLINE_PATH,
        { x: -6, y: -6 },
        OUTLINE_STYLE
      );
    }

    return outline;
  };

  /**
   * Updates the outline for a given element.
   * Returns true if the update for the given element was handled by this provider.
   *
   * @param {Element} element
   * @param {Outline} outline
   * @returns {boolean}
   */
  OutlineProvider.prototype.updateOutline = function(element, outline) {

    if (isLabel(element)) {
      return;
    }

    if (isAny(element, [ 'bpmn:SubProcess', 'bpmn:Group' ])) {

      attr$1(outline, {
        width: element.width + DEFAULT_OFFSET * 2,
        height: element.height + DEFAULT_OFFSET * 2
      });

      return true;

    } else if (isAny(element, [
      'bpmn:Event',
      'bpmn:Gateway',
      'bpmn:DataStoreReference',
      'bpmn:DataObjectReference'
    ])) {
      return true;
    }

    return false;
  };


  // helpers //////////

  function isStandardSize(element, type) {
    var standardSize;

    if (type === 'bpmn:DataObjectReference') {
      standardSize = DATA_OBJECT_REFERENCE_STANDARD_SIZE;
    } else if (type === 'bpmn:DataStoreReference') {
      standardSize = DATA_STORE_REFERENCE_STANDARD_SIZE;
    }

    return element.width === standardSize.width
            && element.height === standardSize.height;
  }

  var OutlineModule = {
    __depends__: [
      Ouline
    ],
    __init__: [ 'outlineProvider' ],
    outlineProvider: [ 'type', OutlineProvider ]
  };

  var initialDiagram =
    '<?xml version="1.0" encoding="UTF-8"?>' +
    '<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
                      'xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" ' +
                      'xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" ' +
                      'xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" ' +
                      'targetNamespace="http://bpmn.io/schema/bpmn" ' +
                      'id="Definitions_1">' +
      '<bpmn:process id="Process_1" isExecutable="false">' +
        '<bpmn:startEvent id="StartEvent_1"/>' +
      '</bpmn:process>' +
      '<bpmndi:BPMNDiagram id="BPMNDiagram_1">' +
        '<bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">' +
          '<bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">' +
            '<dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/>' +
          '</bpmndi:BPMNShape>' +
        '</bpmndi:BPMNPlane>' +
      '</bpmndi:BPMNDiagram>' +
    '</bpmn:definitions>';


  /**
   * @typedef {import('./BaseViewer').BaseViewerOptions} BaseViewerOptions
   * @typedef {import('./BaseViewer').ImportXMLResult} ImportXMLResult
   */

  /**
   * A modeler for BPMN 2.0 diagrams.
   *
   * ## Extending the Modeler
   *
   * In order to extend the viewer pass extension modules to bootstrap via the
   * `additionalModules` option. An extension module is an object that exposes
   * named services.
   *
   * The following example depicts the integration of a simple
   * logging component that integrates with interaction events:
   *
   *
   * ```javascript
   *
   * // logging component
   * function InteractionLogger(eventBus) {
   *   eventBus.on('element.hover', function(event) {
   *     console.log()
   *   })
   * }
   *
   * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
   *
   * // extension module
   * var extensionModule = {
   *   __init__: [ 'interactionLogger' ],
   *   interactionLogger: [ 'type', InteractionLogger ]
   * };
   *
   * // extend the viewer
   * var bpmnModeler = new Modeler({ additionalModules: [ extensionModule ] });
   * bpmnModeler.importXML(...);
   * ```
   *
   *
   * ## Customizing / Replacing Components
   *
   * You can replace individual diagram components by redefining them in override modules.
   * This works for all components, including those defined in the core.
   *
   * Pass in override modules via the `options.additionalModules` flag like this:
   *
   * ```javascript
   * function CustomContextPadProvider(contextPad) {
   *
   *   contextPad.registerProvider(this);
   *
   *   this.getContextPadEntries = function(element) {
   *     // no entries, effectively disable the context pad
   *     return {};
   *   };
   * }
   *
   * CustomContextPadProvider.$inject = [ 'contextPad' ];
   *
   * var overrideModule = {
   *   contextPadProvider: [ 'type', CustomContextPadProvider ]
   * };
   *
   * var bpmnModeler = new Modeler({ additionalModules: [ overrideModule ]});
   * ```
   *
   * @template [ServiceMap=null]
   *
   * @extends BaseModeler<ServiceMap>
   *
   * @param {BaseViewerOptions} [options] The options to configure the modeler.
   */
  function Modeler(options) {
    BaseModeler.call(this, options);
  }

  e$3(Modeler, BaseModeler);


  Modeler.Viewer = Viewer;
  Modeler.NavigatedViewer = NavigatedViewer;

  /**
   * Create a new diagram to start modeling.
   *
   * @throws {ImportXMLError} An error thrown during the import of the XML.
   *
   * @return {Promise<ImportXMLResult>} A promise resolving with warnings that were produced during the import.
   */
  Modeler.prototype.createDiagram = function createDiagram() {
    return this.importXML(initialDiagram);
  };


  Modeler.prototype._interactionModules = [

    // non-modeling components
    KeyboardMoveModule,
    MoveCanvasModule,
    ZoomScrollModule
  ];

  Modeler.prototype._modelingModules = [

    // modeling components
    AlignElementsModule,
    AutoPlaceModule,
    AutoScrollModule,
    AutoResizeModule,
    BendpointsModule,
    ConnectModule,
    ConnectionPreviewModule,
    ContextPadModule,
    CopyPasteModule,
    CreateModule,
    DistributeElementsModule,
    EditorActionsModule,
    GridSnappingModule,
    InteractionEventsModule,
    KeyboardModule,
    KeyboardMoveSelectionModule,
    LabelEditingModule,
    modeling,
    ModelingFeedbackModule,
    MoveModule,
    PaletteModule,
    ReplacePreviewModule,
    ResizeModule,
    SnappingModule,
    SearchModule,
    OutlineModule
  ];


  // modules the modeler is composed of
  //
  // - viewer modules
  // - interaction modules
  // - modeling modules

  Modeler.prototype._modules = [].concat(
    Viewer.prototype._modules,
    Modeler.prototype._interactionModules,
    Modeler.prototype._modelingModules
  );

  /**
   * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
   * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
   */

  var GRID_COLOR = '#ccc',
      LAYER_NAME = 'djs-grid';

  var GRID_DIMENSIONS = {
    width: 100000,
    height: 100000
  };

  /**
   * @param {Canvas} canvas
   * @param {EventBus} eventBus
   */
  function Grid(canvas, eventBus) {
    this._canvas = canvas;

    var self = this;

    eventBus.on('diagram.init', function() {
      self._init();
      self.toggle(true);
    });

    eventBus.on('gridSnapping.toggle', function(event) {
      var active = event.active;

      self.toggle(active);

      self._centerGridAroundViewbox();
    });

    eventBus.on('canvas.viewbox.changed', function(context) {
      var viewbox = context.viewbox;

      self._centerGridAroundViewbox(viewbox);
    });
  }

  Grid.prototype._init = function() {
    var defs = query('defs', this._canvas._svg);

    if (!defs) {
      defs = create$1('defs');

      append(this._canvas._svg, defs);
    }

    var pattern = this._pattern = create$1('pattern');

    var patternId = 'djs-grid-pattern-' + randomNumber();

    attr$1(pattern, {
      id: patternId,
      width: SPACING,
      height: SPACING,
      patternUnits: 'userSpaceOnUse'
    });

    var circle = this._circle = create$1('circle');

    attr$1(circle, {
      cx: 0.5,
      cy: 0.5,
      r: 0.5,
      fill: GRID_COLOR
    });

    append(pattern, circle);

    append(defs, pattern);

    var grid = this._gfx = create$1('rect');

    attr$1(grid, {
      x: -5e4,
      y: -5e4,
      width: GRID_DIMENSIONS.width,
      height: GRID_DIMENSIONS.height,
      fill: `url(#${ patternId })`
    });
  };

  Grid.prototype._centerGridAroundViewbox = function(viewbox) {
    if (!viewbox) {
      viewbox = this._canvas.viewbox();
    }

    var mid = getMid(viewbox);

    attr$1(this._gfx, {
      x: -5e4 + quantize(mid.x, SPACING),
      y: -5e4 + quantize(mid.y, SPACING)
    });
  };

  /**
   * Return the current grid visibility.
   *
   * @return {boolean}
   */
  Grid.prototype.isVisible = function() {
    return this._visible;
  };

  /**
   * Toggle grid visibility.
   *
   * @param {boolean} [visible] new visible state
   */
  Grid.prototype.toggle = function(visible) {

    if (typeof visible === 'undefined') {
      visible = !this._visible;
    }

    if (visible === this._visible) {
      return;
    }

    var parent = this._getParent();

    if (visible) {
      append(parent, this._gfx);
    } else {
      clear$1(parent);
    }

    this._visible = visible;
  };

  Grid.prototype._getParent = function() {
    return this._canvas.getLayer(LAYER_NAME, -2);
  };

  Grid.$inject = [
    'canvas',
    'eventBus'
  ];


  // helpers ///////////////

  function randomNumber() {
    return Math.trunc(Math.random() * 1000000);
  }

  var index$4 = {
    __init__: [ 'grid' ],
    grid: [ 'type', Grid ]
  };

  const colorImageSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="currentColor">
  <path d="m12.5 5.5.3-.4 3.6-3.6c.5-.5 1.3-.5 1.7 0l1 1c.5.4.5 1.2 0 1.7l-3.6 3.6-.4.2v.2c0 1.4.6 2 1 2.7v.6l-1.7 1.6c-.2.2-.4.2-.6 0L7.3 6.6a.4.4 0 0 1 0-.6l.3-.3.5-.5.8-.8c.2-.2.4-.1.6 0 .9.5 1.5 1.1 3 1.1zm-9.9 6 4.2-4.2 6.3 6.3-4.2 4.2c-.3.3-.9.3-1.2 0l-.8-.8-.9-.8-2.3-2.9" />
</svg>`;


  function ColorContextPadProvider(contextPad, popupMenu, canvas, translate) {

    this._contextPad = contextPad;
    this._popupMenu = popupMenu;
    this._canvas = canvas;
    this._translate = translate;

    contextPad.registerProvider(this);
  }


  ColorContextPadProvider.$inject = [
    'contextPad',
    'popupMenu',
    'canvas',
    'translate'
  ];


  ColorContextPadProvider.prototype.getContextPadEntries = function(element) {
    return this._createPopupAction([ element ]);
  };


  ColorContextPadProvider.prototype.getMultiElementContextPadEntries = function(elements) {

    return this._createPopupAction(elements);
  };

  ColorContextPadProvider.prototype._createPopupAction = function(elements) {

    const translate = this._translate;
    const contextPad = this._contextPad;
    const popupMenu = this._popupMenu;

    return {
      'set-color': {
        group: 'edit',
        className: 'bpmn-icon-color',
        title: translate('Set color'),
        html: `<div class="entry">${colorImageSvg}</div>`,
        action: {
          click: (event, element) => {

            // get start popup draw start position
            var position = {
              ...getStartPosition(contextPad, elements),
              cursor: {
                x: event.x,
                y: event.y
              }
            };

            // open new color-picker popup
            popupMenu.open(elements, 'color-picker', position);
          }
        }
      }
    };

  };


  // helpers //////////////////////

  function getStartPosition(contextPad, elements) {

    var Y_OFFSET = 5;

    var pad = contextPad.getPad(elements).html;

    var padRect = pad.getBoundingClientRect();

    var pos = {
      x: padRect.left,
      y: padRect.bottom + Y_OFFSET
    };

    return pos;
  }

  const COLORS = [ {
    label: 'Default',
    fill: undefined,
    stroke: undefined
  }, {
    label: 'Blue',
    fill: '#BBDEFB',
    stroke: '#0D4372'
  }, {
    label: 'Orange',
    fill: '#FFE0B2',
    stroke: '#6B3C00'
  }, {
    label: 'Green',
    fill: '#C8E6C9',
    stroke: '#205022'
  }, {
    label: 'Red',
    fill: '#FFCDD2',
    stroke: '#831311'
  }, {
    label: 'Purple',
    fill: '#E1BEE7',
    stroke: '#5B176D'
  } ];


  function ColorPopupProvider(config, bpmnRendererConfig, popupMenu, modeling, translate) {
    this._popupMenu = popupMenu;
    this._modeling = modeling;
    this._translate = translate;

    this._colors = config && config.colors || COLORS;
    this._defaultFillColor = bpmnRendererConfig && bpmnRendererConfig.defaultFillColor || 'white';
    this._defaultStrokeColor = bpmnRendererConfig && bpmnRendererConfig.defaultStrokeColor || 'rgb(34, 36, 42)';

    this._popupMenu.registerProvider('color-picker', this);
  }


  ColorPopupProvider.$inject = [
    'config.colorPicker',
    'config.bpmnRenderer',
    'popupMenu',
    'modeling',
    'translate'
  ];


  ColorPopupProvider.prototype.getEntries = function(elements) {
    var self = this;

    var colorIconHtml = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 25 25" height="100%" width="100%">
      <rect rx="2" x="1" y="1" width="22" height="22" fill="var(--fill-color)" stroke="var(--stroke-color)" style="stroke-width:2"></rect>
    </svg>
  `;

    var entries = this._colors.map(function(color) {

      var entryColorIconHtml = colorIconHtml.replace('var(--fill-color)', color.fill || self._defaultFillColor)
        .replace('var(--stroke-color)', color.stroke || self._defaultStrokeColor);

      return {
        title: self._translate(color.label),
        id: color.label.toLowerCase() + '-color',
        imageHtml: entryColorIconHtml,
        action: createAction(self._modeling, elements, color)
      };
    });

    return entries;
  };


  function createAction(modeling, element, color) {
    return function() {
      modeling.setColor(element, color);
    };
  }

  var ColorPickerModule = {
    __init__: [
      'colorContextPadProvider',
      'colorPopupProvider'
    ],
    colorContextPadProvider: [ 'type', ColorContextPadProvider ],
    colorPopupProvider: [ 'type', ColorPopupProvider ]
  };

  function g(n,t){for(var e in t)n[e]=t[e];return n}function E(n,t){for(var e in n)if("__source"!==e&&!(e in t))return  true;for(var r in t)if("__source"!==r&&n[r]!==t[r])return  true;return  false}function N(n,t){this.props=n,this.context=t;}(N.prototype=new x$1).isPureReactComponent=true,N.prototype.shouldComponentUpdate=function(n,t){return E(this.props,n)||E(this.state,t)};var T=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),T&&T(n);};var A="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function D(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null)}return t.$$typeof=A,t.render=t,t.prototype.isReactComponent=t.__f=true,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var F=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);F(n,t,e,r);};var U=l$1.unmount;function V(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return V(n,t,e)})),n}function W(n,t,e){return n&&e&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return W(n,t,e)}),n.__c&&n.__c.__P===t&&(n.__e&&e.appendChild(n.__e),n.__c.__e=true,n.__c.__P=e)),n}function P(){this.__u=0,this.o=null,this.__b=null;}function j(n){var t=n.__.__c;return t&&t.__a&&t.__a(n)}function B(){this.i=null,this.l=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&32&n.__u&&(n.type=null),U&&U(n);},(P.prototype=new x$1).__c=function(n,t){var e=t.__c,r=this;null==r.o&&(r.o=[]),r.o.push(e);var u=j(r.__v),o=false,i=function(){o||(o=true,e.__R=null,u?u(c):c());};e.__R=i;var c=function(){if(!--r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=W(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.o.pop();)t.forceUpdate();}};r.__u++||32&t.__u||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},P.prototype.componentWillUnmount=function(){this.o=[];},P.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=V(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&_$1(k$1,null,n.fallback);return i&&(i.__u&=-33),[_$1(k$1,null,e.__a?null:n.children),i]};var H=function(n,t,e){if(++e[1]===e[0]&&n.l.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.l.size))for(e=n.i;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.i=e=e[2];}};function Z(n){return this.getChildContext=function(){return n.context},n.children}function Y(n){var e=this,r=n.h;e.componentWillUnmount=function(){D$2(null,e.v),e.v=null,e.h=null;},e.h&&e.h!==r&&e.componentWillUnmount(),e.v||(e.h=r,e.v={nodeType:1,parentNode:r,childNodes:[],contains:function(){return  true},appendChild:function(n){this.childNodes.push(n),e.h.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.h.insertBefore(n,t);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.h.removeChild(n);}}),D$2(_$1(Z,{context:e.context},n.__v),e.v);}function $(n,e){var r=_$1(Y,{__v:n,h:e});return r.containerInfo=e,r}(B.prototype=new x$1).__a=function(n){var t=this,e=j(t.__v),r=t.l.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),H(t,n,r)):u();};e?e(o):o();}},B.prototype.render=function(n){this.i=null,this.l=new Map;var t=H$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.l.set(t[e],this.i=[1,0,this.i]);return n.children},B.prototype.componentDidUpdate=B.prototype.componentDidMount=function(){var n=this;this.l.forEach(function(t,e){H(n,e,t);});};var q="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,G=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,J=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,K=/[A-Z0-9]/g,Q="undefined"!=typeof document,X=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/:/fil|che|ra/).test(n)};x$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(x$1.prototype,t,{configurable:true,get:function(){return this["UNSAFE_"+t]},set:function(n){Object.defineProperty(this,t,{configurable:true,writable:true,value:n});}});});var en=l$1.event;function rn(){}function un(){return this.cancelBubble}function on(){return this.defaultPrevented}l$1.event=function(n){return en&&(n=en(n)),n.persist=rn,n.isPropagationStopped=un,n.isDefaultPrevented=on,n.nativeEvent=n};var ln={enumerable:false,configurable:true,get:function(){return this.class}},fn=l$1.vnode;l$1.vnode=function(n){"string"==typeof n.type&&function(n){var t=n.props,e=n.type,u={},o=-1===e.indexOf("-");for(var i in t){var c=t[i];if(!("value"===i&&"defaultValue"in t&&null==c||Q&&"children"===i&&"noscript"===e||"class"===i||"className"===i)){var l=i.toLowerCase();"defaultValue"===i&&"value"in t&&null==t.value?i="value":"download"===i&&true===c?c="":"translate"===l&&"no"===c?c=false:"o"===l[0]&&"n"===l[1]?"ondoubleclick"===l?i="ondblclick":"onchange"!==l||"input"!==e&&"textarea"!==e||X(t.type)?"onfocus"===l?i="onfocusin":"onblur"===l?i="onfocusout":J.test(i)&&(i=l):l=i="oninput":o&&G.test(i)?i=i.replace(K,"-$&").toLowerCase():null===c&&(c=void 0),"oninput"===l&&u[i=l]&&(i="oninputCapture"),u[i]=c;}}"select"==e&&u.multiple&&Array.isArray(u.value)&&(u.value=H$1(t.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==e&&null!=u.defaultValue&&(u.value=H$1(t.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),t.class&&!t.className?(u.class=t.class,Object.defineProperty(u,"className",ln)):(t.className&&!t.class||t.class&&t.className)&&(u.class=u.className=t.className),n.props=u;}(n),n.$$typeof=q,fn&&fn(n);};var an=l$1.__r;l$1.__r=function(n){an&&an(n),n.__c;};var sn=l$1.diffed;l$1.diffed=function(n){sn&&sn(n);var t=n.props,e=n.__e;null!=e&&"textarea"===n.type&&"value"in t&&t.value!==e.value&&(e.value=null==t.value?"":t.value);};

  var f=0;function u(e,t,n,o,i,u){t||(t={});var a,c,p=t;if("ref"in p)for(c in p={},t)"ref"==c?a=t[c]:p[c]=t[c];var l={type:e,props:p,key:n,ref:a,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:--f,__i:-1,__u:0,__source:i,__self:u};if("function"==typeof e&&(a=e.defaultProps))for(c in a) void 0===p[c]&&(p[c]=a[c]);return l$1.vnode&&l$1.vnode(l),l}

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var classnames$1 = {exports: {}};

  /*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  */

  var hasRequiredClassnames;

  function requireClassnames () {
  	if (hasRequiredClassnames) return classnames$1.exports;
  	hasRequiredClassnames = 1;
  	(function (module) {
  		/* global define */

  		(function () {

  			var hasOwn = {}.hasOwnProperty;

  			function classNames () {
  				var classes = '';

  				for (var i = 0; i < arguments.length; i++) {
  					var arg = arguments[i];
  					if (arg) {
  						classes = appendClass(classes, parseValue(arg));
  					}
  				}

  				return classes;
  			}

  			function parseValue (arg) {
  				if (typeof arg === 'string' || typeof arg === 'number') {
  					return arg;
  				}

  				if (typeof arg !== 'object') {
  					return '';
  				}

  				if (Array.isArray(arg)) {
  					return classNames.apply(null, arg);
  				}

  				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
  					return arg.toString();
  				}

  				var classes = '';

  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes = appendClass(classes, key);
  					}
  				}

  				return classes;
  			}

  			function appendClass (value, newClass) {
  				if (!newClass) {
  					return value;
  				}
  			
  				if (value) {
  					return value + ' ' + newClass;
  				}
  			
  				return value + newClass;
  			}

  			if (module.exports) {
  				classNames.default = classNames;
  				module.exports = classNames;
  			} else {
  				window.classNames = classNames;
  			}
  		}()); 
  	} (classnames$1));
  	return classnames$1.exports;
  }

  var classnamesExports = requireClassnames();
  var classnames = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

  /**
  The default maximum length of a `TreeBuffer` node.
  */
  const DefaultBufferLength = 1024;
  let nextPropID = 0;
  let Range$1 = class Range {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  };
  /**
  Each [node type](#common.NodeType) or [individual tree](#common.Tree)
  can have metadata associated with it in props. Instances of this
  class represent prop names.
  */
  class NodeProp {
      /**
      Create a new node prop type.
      */
      constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
              throw new Error("This node type doesn't define a deserialize function");
          });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match) {
          if (this.perNode)
              throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
              match = NodeType.match(match);
          return (type) => {
              let result = match(type);
              return result === undefined ? null : [this, result];
          };
      }
  }
  /**
  Prop that is used to describe matching delimiters. For opening
  delimiters, this holds an array of node names (written as a
  space-separated string when declaring this prop in a grammar)
  for the node types of closing delimiters that match it.
  */
  NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
  attached to closing delimiters, holding an array of node names
  of types of matching opening delimiters.
  */
  NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Used to assign node types to groups (for example, all node
  types that represent an expression could be tagged with an
  `"Expression"` group).
  */
  NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
  /**
  Attached to nodes to indicate these should be
  [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
  in a bidirectional text isolate, so that direction-neutral
  characters on their sides don't incorrectly get associated with
  surrounding text. You'll generally want to set this for nodes
  that contain arbitrary text, like strings and comments, and for
  nodes that appear _inside_ arbitrary text, like HTML tags. When
  not given a value, in a grammar declaration, defaults to
  `"auto"`.
  */
  NodeProp.isolate = new NodeProp({ deserialize: value => {
          if (value && value != "rtl" && value != "ltr" && value != "auto")
              throw new RangeError("Invalid value for isolate: " + value);
          return value || "auto";
      } });
  /**
  The hash of the [context](#lr.ContextTracker.constructor)
  that the node was parsed in, if any. Used to limit reuse of
  contextual nodes.
  */
  NodeProp.contextHash = new NodeProp({ perNode: true });
  /**
  The distance beyond the end of the node that the tokenizer
  looked ahead for any of the tokens inside the node. (The LR
  parser only stores this when it is larger than 25, for
  efficiency reasons.)
  */
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  /**
  This per-node prop is used to replace a given node, or part of a
  node, with another tree. This is useful to include trees from
  different languages in mixed-language parsers.
  */
  NodeProp.mounted = new NodeProp({ perNode: true });
  /**
  A mounted tree, which can be [stored](#common.NodeProp^mounted) on
  a tree node to indicate that parts of its content are
  represented by another tree.
  */
  class MountedTree {
      constructor(
      /**
      The inner tree.
      */
      tree, 
      /**
      If this is null, this tree replaces the entire node (it will
      be included in the regular iteration instead of its host
      node). If not, only the given ranges are considered to be
      covered by this tree. This is used for trees that are mixed in
      a way that isn't strictly hierarchical. Such mounted trees are
      only entered by [`resolveInner`](#common.Tree.resolveInner)
      and [`enter`](#common.SyntaxNode.enter).
      */
      overlay, 
      /**
      The parser used to create this subtree.
      */
      parser) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser;
      }
      /**
      @internal
      */
      static get(tree) {
          return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
  }
  const noProps = Object.create(null);
  /**
  Each node in a syntax tree has a node type associated with it.
  */
  class NodeType {
      /**
      @internal
      */
      constructor(
      /**
      The name of the node type. Not necessarily unique, but if the
      grammar was written properly, different node types with the
      same name within a node set should play the same semantic
      role.
      */
      name, 
      /**
      @internal
      */
      props, 
      /**
      The id of this node in its set. Corresponds to the term ids
      used in the parser.
      */
      id, 
      /**
      @internal
      */
      flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
              (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
              for (let src of spec.props) {
                  if (!Array.isArray(src))
                      src = src(type);
                  if (src) {
                      if (src[0].perNode)
                          throw new RangeError("Can't store a per-node prop on a node type");
                      props[src[0].id] = src[1];
                  }
              }
          return type;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) { return this.props[prop.id]; }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
      /**
      Indicates whether this is an error node.
      */
      get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name) {
          if (typeof name == 'string') {
              if (this.name == name)
                  return true;
              let group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
              for (let name of prop.split(" "))
                  direct[name] = map[prop];
          return (node) => {
              for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                  let found = direct[i < 0 ? node.name : groups[i]];
                  if (found)
                      return found;
              }
          };
      }
  }
  /**
  An empty dummy node type to use when no actual type is available.
  */
  NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
  /**
  A node set holds a collection of node types. It is used to
  compactly represent trees by storing their type ids, rather than a
  full pointer to the type object, in a numeric array. Each parser
  [has](#lr.LRParser.nodeSet) a node set, and [tree
  buffers](#common.TreeBuffer) can only store collections of nodes
  from the same set. A set can have a maximum of 2**16 (65536) node
  types in it, so that the ids fit into 16-bit typed array slots.
  */
  class NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(
      /**
      The node types in this set, by id.
      */
      types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
              if (types[i].id != i)
                  throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
              let newProps = null;
              for (let source of props) {
                  let add = source(type);
                  if (add) {
                      if (!newProps)
                          newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                  }
              }
              newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
      }
  }
  const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
  /**
  Options that control iteration. Can be combined with the `|`
  operator to enable multiple ones.
  */
  var IterMode;
  (function (IterMode) {
      /**
      When enabled, iteration will only visit [`Tree`](#common.Tree)
      objects, not nodes packed into
      [`TreeBuffer`](#common.TreeBuffer)s.
      */
      IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      /**
      Enable this to make iteration include anonymous nodes (such as
      the nodes that wrap repeated grammar constructs into a balanced
      tree).
      */
      IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      /**
      By default, regular [mounted](#common.NodeProp^mounted) nodes
      replace their base node in iteration. Enable this to ignore them
      instead.
      */
      IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
      /**
      This option only applies in
      [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
      library to not enter mounted overlays if one covers the given
      position.
      */
      IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  /**
  A piece of syntax tree. There are two ways to approach these
  trees: the way they are actually stored in memory, and the
  convenient way.

  Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
  objects. By packing detail information into `TreeBuffer` leaf
  nodes, the representation is made a lot more memory-efficient.

  However, when you want to actually work with tree nodes, this
  representation is very awkward, so most client code will want to
  use the [`TreeCursor`](#common.TreeCursor) or
  [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
  a view on some part of this data structure, and can be used to
  move around to adjacent nodes.
  */
  class Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(
      /**
      The type of the top node.
      */
      type, 
      /**
      This node's child nodes.
      */
      children, 
      /**
      The positions (offsets relative to the start of this tree) of
      the children.
      */
      positions, 
      /**
      The total length of this tree
      */
      length, 
      /**
      Per-node [node props](#common.NodeProp) to associate with this node.
      */
      props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          /**
          @internal
          */
          this.props = null;
          if (props && props.length) {
              this.props = Object.create(null);
              for (let [prop, value] of props)
                  this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
      }
      /**
      @internal
      */
      toString() {
          let mounted = MountedTree.get(this);
          if (mounted && !mounted.overlay)
              return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
              let str = ch.toString();
              if (str) {
                  if (children)
                      children += ",";
                  children += str;
              }
          }
          return !this.type.name ? children :
              (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                  (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
          return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos, side = 0) {
          return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
          for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
              let entered = false;
              if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                  if (c.firstChild())
                      continue;
                  entered = true;
              }
              for (;;) {
                  if (entered && leave && (anon || !c.type.isAnonymous))
                      leave(c);
                  if (c.nextSibling())
                      break;
                  if (!c.parent())
                      return;
                  entered = true;
              }
          }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
          let result = [];
          if (this.props)
              for (let id in this.props)
                  result.push([+id, this.props[id]]);
          return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config = {}) {
          return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
              balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data) { return buildTree(data); }
  }
  /**
  The empty tree
  */
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  class FlatBufferCursor {
      constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      get pos() { return this.index; }
      next() { this.index -= 4; }
      fork() { return new FlatBufferCursor(this.buffer, this.index); }
  }
  /**
  Tree buffers contain (type, start, end, endIndex) quads for each
  node. In such a buffer, nodes are stored in prefix order (parents
  before children, with the endIndex of the parent indicating which
  children belong to it).
  */
  class TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(
      /**
      The buffer's content.
      */
      buffer, 
      /**
      The total length of the group of nodes in the buffer.
      */
      length, 
      /**
      The node set used in this buffer.
      */
      set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
      }
      /**
      @internal
      */
      get type() { return NodeType.none; }
      /**
      @internal
      */
      toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
              result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
              return result;
          let children = [];
          while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
              if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                  pick = i;
                  if (dir > 0)
                      break;
              }
          }
          return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI), len = 0;
          for (let i = startI, j = 0; i < endI;) {
              copy[j++] = b[i++];
              copy[j++] = b[i++] - from;
              let to = copy[j++] = b[i++] - from;
              copy[j++] = b[i++] - startI;
              len = Math.max(len, to);
          }
          return new TreeBuffer(copy, len, this.set);
      }
  }
  function checkSide(side, pos, from, to) {
      switch (side) {
          case -2 /* Side.Before */: return from < pos;
          case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
          case 0 /* Side.Around */: return from < pos && to > pos;
          case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
          case 2 /* Side.After */: return to > pos;
          case 4 /* Side.DontCare */: return true;
      }
  }
  function resolveNode(node, pos, side, overlays) {
      var _a;
      // Move up to a node that actually holds the position, if possible
      while (node.from == node.to ||
          (side < 1 ? node.from >= pos : node.from > pos) ||
          (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
              return node;
          node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      // Must go up out of overlays when those do not overlap with pos
      if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
              if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                  node = parent;
          }
      for (;;) {
          let inner = node.enter(pos, side, mode);
          if (!inner)
              return node;
          node = inner;
      }
  }
  class BaseNode {
      cursor(mode = 0) { return new TreeCursor(this, mode); }
      getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
      }
      getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
      }
      resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
      }
      matchContext(context) {
          return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos) {
          let scan = this.childBefore(pos), node = this;
          while (scan) {
              let last = scan.lastChild;
              if (!last || last.to != scan.to)
                  break;
              if (last.type.isError && last.from == last.to) {
                  node = scan;
                  scan = last.prevSibling;
              }
              else {
                  scan = last;
              }
          }
          return node;
      }
      get node() { return this; }
      get next() { return this.parent; }
  }
  class TreeNode extends BaseNode {
      constructor(_tree, from, 
      // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
      index, _parent) {
          super();
          this._tree = _tree;
          this.from = from;
          this.index = index;
          this._parent = _parent;
      }
      get type() { return this._tree.type; }
      get name() { return this._tree.type.name; }
      get to() { return this.from + this._tree.length; }
      nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this;;) {
              for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                  let next = children[i], start = positions[i] + parent.from;
                  if (!checkSide(side, pos, start, start + next.length))
                      continue;
                  if (next instanceof TreeBuffer) {
                      if (mode & IterMode.ExcludeBuffers)
                          continue;
                      let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                      if (index > -1)
                          return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                  }
                  else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                      let mounted;
                      if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                          return new TreeNode(mounted.tree, start, i, parent);
                      let inner = new TreeNode(next, start, i, parent);
                      return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                          : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                  }
              }
              if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                  return null;
              if (parent.index >= 0)
                  i = parent.index + dir;
              else
                  i = dir < 0 ? -1 : parent._parent._tree.children.length;
              parent = parent._parent;
              if (!parent)
                  return null;
          }
      }
      get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
              let rPos = pos - this.from;
              for (let { from, to } of mounted.overlay) {
                  if ((side > 0 ? from <= rPos : from < rPos) &&
                      (side < 0 ? to >= rPos : to > rPos))
                      return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
              }
          }
          return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
              val = val._parent;
          return val;
      }
      get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
      }
      get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
      }
      get tree() { return this._tree; }
      toTree() { return this._tree; }
      /**
      @internal
      */
      toString() { return this._tree.toString(); }
  }
  function getChildren(node, type, before, after) {
      let cur = node.cursor(), result = [];
      if (!cur.firstChild())
          return result;
      if (before != null)
          for (let found = false; !found;) {
              found = cur.type.is(before);
              if (!cur.nextSibling())
                  return result;
          }
      for (;;) {
          if (after != null && cur.type.is(after))
              return result;
          if (cur.type.is(type))
              result.push(cur.node);
          if (!cur.nextSibling())
              return after == null ? result : [];
      }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
      for (let p = node; i >= 0; p = p.parent) {
          if (!p)
              return false;
          if (!p.type.isAnonymous) {
              if (context[i] && context[i] != p.name)
                  return false;
              i--;
          }
      }
      return true;
  }
  class BufferContext {
      constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
      }
  }
  class BufferNode extends BaseNode {
      get name() { return this.type.name; }
      get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
      get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
      constructor(context, _parent, index) {
          super();
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
      get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
      childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
      childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
      enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
              return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
      }
      get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
              return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
      }
      get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
              return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
      }
      get tree() { return null; }
      toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
              let from = buffer.buffer[this.index + 1];
              children.push(buffer.slice(startI, endI, from));
              positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() { return this.context.buffer.childString(this.index); }
  }
  function iterStack(heads) {
      if (!heads.length)
          return null;
      let pick = 0, picked = heads[0];
      for (let i = 1; i < heads.length; i++) {
          let node = heads[i];
          if (node.from > picked.from || node.to < picked.to) {
              picked = node;
              pick = i;
          }
      }
      let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
      let newHeads = heads.slice();
      if (next)
          newHeads[pick] = next;
      else
          newHeads.splice(pick, 1);
      return new StackIterator(newHeads, picked);
  }
  class StackIterator {
      constructor(heads, node) {
          this.heads = heads;
          this.node = node;
      }
      get next() { return iterStack(this.heads); }
  }
  function stackIterator(tree, pos, side) {
      let inner = tree.resolveInner(pos, side), layers = null;
      for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
          if (scan.index < 0) { // This is an overlay root
              let parent = scan.parent;
              (layers || (layers = [inner])).push(parent.resolve(pos, side));
              scan = parent;
          }
          else {
              let mount = MountedTree.get(scan.tree);
              // Relevant overlay branching off
              if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                  let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                  (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
              }
          }
      }
      return layers ? iterStack(layers) : inner;
  }
  /**
  A tree cursor object focuses on a given node in a syntax tree, and
  allows you to move to adjacent nodes.
  */
  class TreeCursor {
      /**
      Shorthand for `.type.name`.
      */
      get name() { return this.type.name; }
      /**
      @internal
      */
      constructor(node, 
      /**
      @internal
      */
      mode = 0) {
          this.mode = mode;
          /**
          @internal
          */
          this.buffer = null;
          this.stack = [];
          /**
          @internal
          */
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
              this.yieldNode(node);
          }
          else {
              this._tree = node.context.parent;
              this.buffer = node.context;
              for (let n = node._parent; n; n = n._parent)
                  this.stack.unshift(n.index);
              this.bufferNode = node;
              this.yieldBuf(node.index);
          }
      }
      yieldNode(node) {
          if (!node)
              return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
      }
      yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
      }
      /**
      @internal
      */
      yield(node) {
          if (!node)
              return false;
          if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos, side) {
          if (!this.buffer)
              return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
              return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos, side, mode = this.mode) {
          if (!this.buffer)
              return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
          if (!this.buffer)
              return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
              return this.yieldBuf(this.stack.pop());
          let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
          if (!this.buffer)
              return !this._tree._parent ? false
                  : this.yield(this._tree.index < 0 ? null
                      : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
              let parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart)
                  return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
          }
          else {
              let after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                  return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() { return this.sibling(1); }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() { return this.sibling(-1); }
      atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
              if (dir > 0) {
                  if (this.index < buffer.buffer.buffer.length)
                      return false;
              }
              else {
                  for (let i = 0; i < this.index; i++)
                      if (buffer.buffer.buffer[i + 3] < this.index)
                          return false;
              }
              ({ index, parent } = buffer);
          }
          else {
              ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
              if (index > -1)
                  for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                      let child = parent._tree.children[i];
                      if ((this.mode & IterMode.IncludeAnonymous) ||
                          child instanceof TreeBuffer ||
                          !child.type.isAnonymous ||
                          hasChild(child))
                          return false;
                  }
          }
          return true;
      }
      move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
              return true;
          for (;;) {
              if (this.sibling(dir))
                  return true;
              if (this.atLastNode(dir) || !this.parent())
                  return false;
          }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) { return this.move(1, enter); }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) { return this.move(-1, enter); }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos, side = 0) {
          // Move up to a node that actually holds the position, if possible
          while (this.from == this.to ||
              (side < 1 ? this.from >= pos : this.from > pos) ||
              (side > -1 ? this.to <= pos : this.to < pos))
              if (!this.parent())
                  break;
          // Then scan down into child nodes as far as possible
          while (this.enterChild(1, pos, side)) { }
          return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
          if (!this.buffer)
              return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
              scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                  for (let c = cache; c; c = c._parent)
                      if (c.index == index) {
                          if (index == this.index)
                              return c;
                          result = c;
                          depth = d + 1;
                          break scan;
                      }
                  index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
              result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
          return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
          for (let depth = 0;;) {
              let mustLeave = false;
              if (this.type.isAnonymous || enter(this) !== false) {
                  if (this.firstChild()) {
                      depth++;
                      continue;
                  }
                  if (!this.type.isAnonymous)
                      mustLeave = true;
              }
              for (;;) {
                  if (mustLeave && leave)
                      leave(this);
                  mustLeave = this.type.isAnonymous;
                  if (!depth)
                      return;
                  if (this.nextSibling())
                      break;
                  this.parent();
                  depth--;
                  mustLeave = true;
              }
          }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
          if (!this.buffer)
              return matchNodeContext(this.node.parent, context);
          let { buffer } = this.buffer, { types } = buffer.set;
          for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
              if (d < 0)
                  return matchNodeContext(this._tree, context, i);
              let type = types[buffer.buffer[this.stack[d]]];
              if (!type.isAnonymous) {
                  if (context[i] && context[i] != type.name)
                      return false;
                  i--;
              }
          }
          return true;
      }
  }
  function hasChild(tree) {
      return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
      var _a;
      let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
      let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
      let types = nodeSet.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
          while (size < 0) {
              cursor.next();
              if (size == -1 /* SpecialRecord.Reuse */) {
                  let node = reused[id];
                  children.push(node);
                  positions.push(start - parentStart);
                  return;
              }
              else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                  contextHash = id;
                  return;
              }
              else if (size == -4 /* SpecialRecord.LookAhead */) {
                  lookAhead = id;
                  return;
              }
              else {
                  throw new RangeError(`Unrecognized record size: ${size}`);
              }
          }
          let type = types[id], node, buffer;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
              // Small enough for a buffer, and no reused nodes inside
              let data = new Uint16Array(buffer.size - buffer.skip);
              let endPos = cursor.pos - buffer.size, index = data.length;
              while (cursor.pos > endPos)
                  index = copyToBuffer(buffer.start, data, index);
              node = new TreeBuffer(data, end - buffer.start, nodeSet);
              startPos = buffer.start - parentStart;
          }
          else { // Make it a node
              let endPos = cursor.pos - size;
              cursor.next();
              let localChildren = [], localPositions = [];
              let localInRepeat = id >= minRepeatType ? id : -1;
              let lastGroup = 0, lastEnd = end;
              while (cursor.pos > endPos) {
                  if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                      if (cursor.end <= lastEnd - maxBufferLength) {
                          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                          lastGroup = localChildren.length;
                          lastEnd = cursor.end;
                      }
                      cursor.next();
                  }
                  else if (depth > 2500 /* CutOff.Depth */) {
                      takeFlatNode(start, endPos, localChildren, localPositions);
                  }
                  else {
                      takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                  }
              }
              if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
              localChildren.reverse();
              localPositions.reverse();
              if (localInRepeat > -1 && lastGroup > 0) {
                  let make = makeBalanced(type, contextAtStart);
                  node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
              }
              else {
                  node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
              }
          }
          children.push(node);
          positions.push(startPos);
      }
      function takeFlatNode(parentStart, minPos, children, positions) {
          let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
          let nodeCount = 0, stopAt = -1;
          while (cursor.pos > minPos) {
              let { id, start, end, size } = cursor;
              if (size > 4) { // Not a leaf
                  cursor.next();
              }
              else if (stopAt > -1 && start < stopAt) {
                  break;
              }
              else {
                  if (stopAt < 0)
                      stopAt = end - maxBufferLength;
                  nodes.push(id, start, end);
                  nodeCount++;
                  cursor.next();
              }
          }
          if (nodeCount) {
              let buffer = new Uint16Array(nodeCount * 4);
              let start = nodes[nodes.length - 2];
              for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                  buffer[j++] = nodes[i];
                  buffer[j++] = nodes[i + 1] - start;
                  buffer[j++] = nodes[i + 2] - start;
                  buffer[j++] = j;
              }
              children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
              positions.push(start - parentStart);
          }
      }
      function makeBalanced(type, contextHash) {
          return (children, positions, length) => {
              let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
              if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                  if (!lastI && last.type == type && last.length == length)
                      return last;
                  if (lookAheadProp = last.prop(NodeProp.lookAhead))
                      lookAhead = positions[lastI] + last.length + lookAheadProp;
              }
              return makeTree(type, children, positions, length, lookAhead, contextHash);
          };
      }
      function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
          let localChildren = [], localPositions = [];
          while (children.length > i) {
              localChildren.push(children.pop());
              localPositions.push(positions.pop() + base - from);
          }
          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
          positions.push(from - base);
      }
      function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
          if (contextHash) {
              let pair = [NodeProp.contextHash, contextHash];
              props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead > 25) {
              let pair = [NodeProp.lookAhead, lookAhead];
              props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children, positions, length, props);
      }
      function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
              let nodeSize = fork.size;
              // Pretend nested repeat nodes of the same type don't exist
              if (fork.id == inRepeat && nodeSize >= 0) {
                  // Except that we store the current state as a valid return
                  // value.
                  result.size = size;
                  result.start = start;
                  result.skip = skip;
                  skip += 4;
                  size += 4;
                  fork.next();
                  continue;
              }
              let startPos = fork.pos - nodeSize;
              if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                  break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                  if (fork.size < 0) {
                      if (fork.size == -3 /* SpecialRecord.ContextChange */)
                          localSkipped += 4;
                      else
                          break scan;
                  }
                  else if (fork.id >= minRepeatType) {
                      localSkipped += 4;
                  }
                  fork.next();
              }
              start = nodeStart;
              size += nodeSize;
              skip += localSkipped;
          }
          if (inRepeat < 0 || size == maxSize) {
              result.size = size;
              result.start = start;
              result.skip = skip;
          }
          return result.size > 4 ? result : undefined;
      }
      function copyToBuffer(bufferStart, buffer, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
              let startIndex = index;
              if (size > 4) {
                  let endPos = cursor.pos - (size - 4);
                  while (cursor.pos > endPos)
                      index = copyToBuffer(bufferStart, buffer, index);
              }
              buffer[--index] = startIndex;
              buffer[--index] = end - bufferStart;
              buffer[--index] = start - bufferStart;
              buffer[--index] = id;
          }
          else if (size == -3 /* SpecialRecord.ContextChange */) {
              contextHash = id;
          }
          else if (size == -4 /* SpecialRecord.LookAhead */) {
              lookAhead = id;
          }
          return index;
      }
      let children = [], positions = [];
      while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
      let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
      return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
  }
  const nodeSizeCache = new WeakMap;
  function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
          size = 1;
          for (let child of node.children) {
              if (child.type != balanceType || !(child instanceof Tree)) {
                  size = 1;
                  break;
              }
              size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
      }
      return size;
  }
  function balanceRange(
  // The type the balanced tree's inner nodes.
  balanceType, 
  // The direct children and their positions
  children, positions, 
  // The index range in children/positions to use
  from, to, 
  // The start position of the nodes, relative to their parent.
  start, 
  // Length of the outer node
  length, 
  // Function to build the top node of the balanced tree
  mkTop, 
  // Function to build internal nodes for the balanced tree
  mkTree) {
      let total = 0;
      for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
      let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
      let localChildren = [], localPositions = [];
      function divide(children, positions, from, to, offset) {
          for (let i = from; i < to;) {
              let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
              i++;
              for (; i < to; i++) {
                  let nextSize = nodeSize(balanceType, children[i]);
                  if (groupSize + nextSize >= maxChild)
                      break;
                  groupSize += nextSize;
              }
              if (i == groupFrom + 1) {
                  if (groupSize > maxChild) {
                      let only = children[groupFrom]; // Only trees can have a size > 1
                      divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                      continue;
                  }
                  localChildren.push(children[groupFrom]);
              }
              else {
                  let length = positions[i - 1] + children[i - 1].length - groupStart;
                  localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
              }
              localPositions.push(groupStart + offset - start);
          }
      }
      divide(children, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
  }

  /**
  Tree fragments are used during [incremental
  parsing](#common.Parser.startParse) to track parts of old trees
  that can be reused in a new parse. An array of fragments is used
  to track regions of an old tree whose nodes might be reused in new
  parses. Use the static
  [`applyChanges`](#common.TreeFragment^applyChanges) method to
  update fragments for document changes.
  */
  class TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(
      /**
      The start of the unchanged range pointed to by this fragment.
      This refers to an offset in the _updated_ document (as opposed
      to the original tree).
      */
      from, 
      /**
      The end of the unchanged range.
      */
      to, 
      /**
      The tree that this fragment is based on.
      */
      tree, 
      /**
      The offset between the fragment's tree and the document that
      this fragment can be used against. Add this when going from
      document to tree positions, subtract it to go from tree to
      document positions.
      */
      offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
              if (f.to > tree.length)
                  result.push(f);
          return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
              return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0;; cI++) {
              let nextC = cI < changes.length ? changes[cI] : null;
              let nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap)
                  while (nextF && nextF.from < nextPos) {
                      let cut = nextF;
                      if (pos >= cut.from || nextPos <= cut.to || off) {
                          let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                      }
                      if (cut)
                          result.push(cut);
                      if (nextF.to > nextPos)
                          break;
                      nextF = fI < fragments.length ? fragments[fI++] : null;
                  }
              if (!nextC)
                  break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
          }
          return result;
      }
  }
  /**
  A superclass that parsers should extend.
  */
  class Parser {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
          if (typeof input == "string")
              input = new StringInput(input);
          ranges = !ranges ? [new Range$1(0, input.length)] : ranges.length ? ranges.map(r => new Range$1(r.from, r.to)) : [new Range$1(0, 0)];
          return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (;;) {
              let done = parse.advance();
              if (done)
                  return done;
          }
      }
  }
  class StringInput {
      constructor(string) {
          this.string = string;
      }
      get length() { return this.string.length; }
      chunk(from) { return this.string.slice(from); }
      get lineChunks() { return false; }
      read(from, to) { return this.string.slice(from, to); }
  }

  /**
  Create a parse wrapper that, after the inner parse completes,
  scans its tree for mixed language regions with the `nest`
  function, runs the resulting [inner parses](#common.NestedParse),
  and then [mounts](#common.NodeProp^mounted) their results onto the
  tree.
  */
  function parseMixed(nest) {
      return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
  }
  class InnerParse {
      constructor(parser, parse, overlay, target, from) {
          this.parser = parser;
          this.parse = parse;
          this.overlay = overlay;
          this.target = target;
          this.from = from;
      }
  }
  function checkRanges(ranges) {
      if (!ranges.length || ranges.some(r => r.from >= r.to))
          throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
  }
  class ActiveOverlay {
      constructor(parser, predicate, mounts, index, start, target, prev) {
          this.parser = parser;
          this.predicate = predicate;
          this.mounts = mounts;
          this.index = index;
          this.start = start;
          this.target = target;
          this.prev = prev;
          this.depth = 0;
          this.ranges = [];
      }
  }
  const stoppedInner = new NodeProp({ perNode: true });
  class MixedParse {
      constructor(base, nest, input, fragments, ranges) {
          this.nest = nest;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.inner = [];
          this.innerDone = 0;
          this.baseTree = null;
          this.stoppedAt = null;
          this.baseParse = base;
      }
      advance() {
          if (this.baseParse) {
              let done = this.baseParse.advance();
              if (!done)
                  return null;
              this.baseParse = null;
              this.baseTree = done;
              this.startInner();
              if (this.stoppedAt != null)
                  for (let inner of this.inner)
                      inner.parse.stopAt(this.stoppedAt);
          }
          if (this.innerDone == this.inner.length) {
              let result = this.baseTree;
              if (this.stoppedAt != null)
                  result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
              return result;
          }
          let inner = this.inner[this.innerDone], done = inner.parse.advance();
          if (done) {
              this.innerDone++;
              // This is a somewhat dodgy but super helpful hack where we
              // patch up nodes created by the inner parse (and thus
              // presumably not aliased anywhere else) to hold the information
              // about the inner parse.
              let props = Object.assign(Object.create(null), inner.target.props);
              props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
              inner.target.props = props;
          }
          return null;
      }
      get parsedPos() {
          if (this.baseParse)
              return 0;
          let pos = this.input.length;
          for (let i = this.innerDone; i < this.inner.length; i++) {
              if (this.inner[i].from < pos)
                  pos = Math.min(pos, this.inner[i].parse.parsedPos);
          }
          return pos;
      }
      stopAt(pos) {
          this.stoppedAt = pos;
          if (this.baseParse)
              this.baseParse.stopAt(pos);
          else
              for (let i = this.innerDone; i < this.inner.length; i++)
                  this.inner[i].parse.stopAt(pos);
      }
      startInner() {
          let fragmentCursor = new FragmentCursor$2(this.fragments);
          let overlay = null;
          let covered = null;
          let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
          scan: for (let nest, isCovered;;) {
              let enter = true, range;
              if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {
                  enter = false;
              }
              else if (fragmentCursor.hasNode(cursor)) {
                  if (overlay) {
                      let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                      if (match)
                          for (let r of match.mount.overlay) {
                              let from = r.from + match.pos, to = r.to + match.pos;
                              if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                  overlay.ranges.push({ from, to });
                          }
                  }
                  enter = false;
              }
              else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                  enter = isCovered != 2 /* Cover.Full */;
              }
              else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&
                  (cursor.from < cursor.to || !nest.overlay)) {
                  if (!cursor.tree)
                      materialize(cursor);
                  let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                  if (typeof nest.overlay == "function") {
                      overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                  }
                  else {
                      let ranges = punchRanges(this.ranges, nest.overlay ||
                          (cursor.from < cursor.to ? [new Range$1(cursor.from, cursor.to)] : []));
                      if (ranges.length)
                          checkRanges(ranges);
                      if (ranges.length || !nest.overlay)
                          this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)
                              : nest.parser.startParse(""), nest.overlay ? nest.overlay.map(r => new Range$1(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));
                      if (!nest.overlay)
                          enter = false;
                      else if (ranges.length)
                          covered = { ranges, depth: 0, prev: covered };
                  }
              }
              else if (overlay && (range = overlay.predicate(cursor))) {
                  if (range === true)
                      range = new Range$1(cursor.from, cursor.to);
                  if (range.from < range.to) {
                      let last = overlay.ranges.length - 1;
                      if (last >= 0 && overlay.ranges[last].to == range.from)
                          overlay.ranges[last] = { from: overlay.ranges[last].from, to: range.to };
                      else
                          overlay.ranges.push(range);
                  }
              }
              if (enter && cursor.firstChild()) {
                  if (overlay)
                      overlay.depth++;
                  if (covered)
                      covered.depth++;
              }
              else {
                  for (;;) {
                      if (cursor.nextSibling())
                          break;
                      if (!cursor.parent())
                          break scan;
                      if (overlay && !--overlay.depth) {
                          let ranges = punchRanges(this.ranges, overlay.ranges);
                          if (ranges.length) {
                              checkRanges(ranges);
                              this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range$1(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));
                          }
                          overlay = overlay.prev;
                      }
                      if (covered && !--covered.depth)
                          covered = covered.prev;
                  }
              }
          }
      }
  }
  function checkCover(covered, from, to) {
      for (let range of covered) {
          if (range.from >= to)
              break;
          if (range.to > from)
              return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
      }
      return 0 /* Cover.None */;
  }
  // Take a piece of buffer and convert it into a stand-alone
  // TreeBuffer.
  function sliceBuf(buf, startI, endI, nodes, positions, off) {
      if (startI < endI) {
          let from = buf.buffer[startI + 1];
          nodes.push(buf.slice(startI, endI, from));
          positions.push(from - off);
      }
  }
  // This function takes a node that's in a buffer, and converts it, and
  // its parent buffer nodes, into a Tree. This is again acting on the
  // assumption that the trees and buffers have been constructed by the
  // parse that was ran via the mix parser, and thus aren't shared with
  // any other code, making violations of the immutability safe.
  function materialize(cursor) {
      let { node } = cursor, stack = [];
      let buffer = node.context.buffer;
      // Scan up to the nearest tree
      do {
          stack.push(cursor.index);
          cursor.parent();
      } while (!cursor.tree);
      // Find the index of the buffer in that tree
      let base = cursor.tree, i = base.children.indexOf(buffer);
      let buf = base.children[i], b = buf.buffer, newStack = [i];
      // Split a level in the buffer, putting the nodes before and after
      // the child that contains `node` into new buffers.
      function split(startI, endI, type, innerOffset, length, stackPos) {
          let targetI = stack[stackPos];
          let children = [], positions = [];
          sliceBuf(buf, startI, targetI, children, positions, innerOffset);
          let from = b[targetI + 1], to = b[targetI + 2];
          newStack.push(children.length);
          let child = stackPos
              ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)
              : node.toTree();
          children.push(child);
          positions.push(from - innerOffset);
          sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);
          return new Tree(type, children, positions, length);
      }
      base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);
      // Move the cursor back to the target node
      for (let index of newStack) {
          let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];
          cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));
      }
  }
  class StructureCursor {
      constructor(root, offset) {
          this.offset = offset;
          this.done = false;
          this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
      }
      // Move to the first node (in pre-order) that starts at or after `pos`.
      moveTo(pos) {
          let { cursor } = this, p = pos - this.offset;
          while (!this.done && cursor.from < p) {
              if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
              else if (!cursor.next(false))
                  this.done = true;
          }
      }
      hasNode(cursor) {
          this.moveTo(cursor.from);
          if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
              for (let tree = this.cursor.tree;;) {
                  if (tree == cursor.tree)
                      return true;
                  if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                      tree = tree.children[0];
                  else
                      break;
              }
          }
          return false;
      }
  }
  let FragmentCursor$2 = class FragmentCursor {
      constructor(fragments) {
          var _a;
          this.fragments = fragments;
          this.curTo = 0;
          this.fragI = 0;
          if (fragments.length) {
              let first = this.curFrag = fragments[0];
              this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
              this.inner = new StructureCursor(first.tree, -first.offset);
          }
          else {
              this.curFrag = this.inner = null;
          }
      }
      hasNode(node) {
          while (this.curFrag && node.from >= this.curTo)
              this.nextFrag();
          return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
      }
      nextFrag() {
          var _a;
          this.fragI++;
          if (this.fragI == this.fragments.length) {
              this.curFrag = this.inner = null;
          }
          else {
              let frag = this.curFrag = this.fragments[this.fragI];
              this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
              this.inner = new StructureCursor(frag.tree, -frag.offset);
          }
      }
      findMounts(pos, parser) {
          var _a;
          let result = [];
          if (this.inner) {
              this.inner.cursor.moveTo(pos, 1);
              for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                  let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                  if (mount && mount.parser == parser) {
                      for (let i = this.fragI; i < this.fragments.length; i++) {
                          let frag = this.fragments[i];
                          if (frag.from >= pos.to)
                              break;
                          if (frag.tree == this.curFrag.tree)
                              result.push({
                                  frag,
                                  pos: pos.from - frag.offset,
                                  mount
                              });
                      }
                  }
              }
          }
          return result;
      }
  };
  function punchRanges(outer, ranges) {
      let copy = null, current = ranges;
      for (let i = 1, j = 0; i < outer.length; i++) {
          let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
          for (; j < current.length; j++) {
              let r = current[j];
              if (r.from >= gapTo)
                  break;
              if (r.to <= gapFrom)
                  continue;
              if (!copy)
                  current = copy = ranges.slice();
              if (r.from < gapFrom) {
                  copy[j] = new Range$1(r.from, gapFrom);
                  if (r.to > gapTo)
                      copy.splice(j + 1, 0, new Range$1(gapTo, r.to));
              }
              else if (r.to > gapTo) {
                  copy[j--] = new Range$1(gapTo, r.to);
              }
              else {
                  copy.splice(j--, 1);
              }
          }
      }
      return current;
  }
  function findCoverChanges(a, b, from, to) {
      let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
      let result = [];
      for (;;) {
          let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
          let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
          if (inA != inB) {
              let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
              if (start < end)
                  result.push(new Range$1(start, end));
          }
          pos = Math.min(nextA, nextB);
          if (pos == 1e9)
              break;
          if (nextA == pos) {
              if (!inA)
                  inA = true;
              else {
                  inA = false;
                  iA++;
              }
          }
          if (nextB == pos) {
              if (!inB)
                  inB = true;
              else {
                  inB = false;
                  iB++;
              }
          }
      }
      return result;
  }
  // Given a number of fragments for the outer tree, and a set of ranges
  // to parse, find fragments for inner trees mounted around those
  // ranges, if any.
  function enterFragments(mounts, ranges) {
      let result = [];
      for (let { pos, mount, frag } of mounts) {
          let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
          let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
          if (mount.overlay) {
              let overlay = mount.overlay.map(r => new Range$1(r.from + pos, r.to + pos));
              let changes = findCoverChanges(ranges, overlay, from, to);
              for (let i = 0, pos = from;; i++) {
                  let last = i == changes.length, end = last ? to : changes[i].from;
                  if (end > pos)
                      result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));
                  if (last)
                      break;
                  pos = changes[i].to;
              }
          }
          else {
              result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
          }
      }
      return result;
  }

  /**
  A parse stack. These are used internally by the parser to track
  parsing progress. They also provide some properties and methods
  that external code such as a tokenizer can use to get information
  about the parse state.
  */
  class Stack {
      /**
      @internal
      */
      constructor(
      /**
      The parse that this stack is part of @internal
      */
      p, 
      /**
      Holds state, input pos, buffer index triplets for all but the
      top state @internal
      */
      stack, 
      /**
      The current parse state @internal
      */
      state, 
      // The position at which the next reduce should take place. This
      // can be less than `this.pos` when skipped expressions have been
      // added to the stack (which should be moved outside of the next
      // reduction)
      /**
      @internal
      */
      reducePos, 
      /**
      The input position up to which this stack has parsed.
      */
      pos, 
      /**
      The dynamic score of the stack, including dynamic precedence
      and error-recovery penalties
      @internal
      */
      score, 
      // The output buffer. Holds (type, start, end, size) quads
      // representing nodes created by the parser, where `size` is
      // amount of buffer array entries covered by this node.
      /**
      @internal
      */
      buffer, 
      // The base offset of the buffer. When stacks are split, the split
      // instance shared the buffer history with its parent up to
      // `bufferBase`, which is the absolute offset (including the
      // offset of previous splits) into the buffer at which this stack
      // starts writing.
      /**
      @internal
      */
      bufferBase, 
      /**
      @internal
      */
      curContext, 
      /**
      @internal
      */
      lookAhead = 0, 
      // A parent stack from which this was split off, if any. This is
      // set up so that it always points to a stack that has some
      // additional buffer content, never to a stack with an equal
      // `bufferBase`.
      /**
      @internal
      */
      parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
      }
      /**
      @internal
      */
      toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /**
      @internal
      */
      static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
      }
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      get context() { return this.curContext ? this.curContext.context : null; }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
      pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
      reduce(action) {
          var _a;
          let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
          let { parser } = this.p;
          let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
          if (lookaheadRecord)
              this.setLookAhead(this.pos);
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
              this.score += dPrec;
          if (depth == 0) {
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm)
                  this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
              this.reduceContext(type, this.reducePos);
              return;
          }
          // Find the base index into `this.stack`, content after which will
          // be dropped. Note that with `StayFlag` reductions we need to
          // consume two extra frames (the dummy parent node for the skipped
          // expression and the state that we'll be staying in, which should
          // be moved to `this.state`).
          let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
          let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
          // This is a kludge to try and detect overly deep left-associative
          // trees, which will not increase the parse stack depth and thus
          // won't be caught by the regular stack-depth limit check.
          if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
              if (start == this.p.lastBigReductionStart) {
                  this.p.bigReductionCount++;
                  this.p.lastBigReductionSize = size;
              }
              else if (this.p.lastBigReductionSize < size) {
                  this.p.bigReductionCount = 1;
                  this.p.lastBigReductionStart = start;
                  this.p.lastBigReductionSize = size;
              }
          }
          let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
          // Store normal terms or `R -> R R` repeat reductions
          if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
              let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144 /* Action.StayFlag */) {
              this.state = this.stack[base];
          }
          else {
              let baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
              this.stack.pop();
          this.reduceContext(type, start);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
      storeNode(term, start, end, size = 4, mustSink = false) {
          if (term == 0 /* Term.Err */ &&
              (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
              // Try to omit/merge adjacent error nodes
              let cur = this, top = this.buffer.length;
              if (top == 0 && cur.parent) {
                  top = cur.bufferBase - cur.parent.bufferBase;
                  cur = cur.parent;
              }
              if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                  if (start == end)
                      return;
                  if (cur.buffer[top - 2] >= start) {
                      cur.buffer[top - 2] = end;
                      return;
                  }
              }
          }
          if (!mustSink || this.pos == end) { // Simple case, just append
              this.buffer.push(term, start, end, size);
          }
          else { // There may be skipped nodes that have to be moved forward
              let index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                  let mustMove = false;
                  for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                      if (this.buffer[scan - 1] >= 0) {
                          mustMove = true;
                          break;
                      }
                  }
                  if (mustMove)
                      while (index > 0 && this.buffer[index - 2] > end) {
                          // Move this record forward
                          this.buffer[index] = this.buffer[index - 4];
                          this.buffer[index + 1] = this.buffer[index - 3];
                          this.buffer[index + 2] = this.buffer[index - 2];
                          this.buffer[index + 3] = this.buffer[index - 1];
                          index -= 4;
                          if (size > 4)
                              size -= 4;
                      }
              }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
          }
      }
      // Apply a shift action
      /**
      @internal
      */
      shift(action, type, start, end) {
          if (action & 131072 /* Action.GotoFlag */) {
              this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
          }
          else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
              let nextState = action, { parser } = this.p;
              if (end > this.pos || type <= parser.maxNode) {
                  this.pos = end;
                  if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                      this.reducePos = end;
              }
              this.pushState(nextState, start);
              this.shiftContext(type, start);
              if (type <= parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
          else { // Shift-and-stay, which means this is a skipped token
              this.pos = end;
              this.shiftContext(type, start);
              if (type <= this.p.parser.maxNode)
                  this.buffer.push(type, start, end, 4);
          }
      }
      // Apply an action
      /**
      @internal
      */
      apply(action, next, nextStart, nextEnd) {
          if (action & 65536 /* Action.ReduceFlag */)
              this.reduce(action);
          else
              this.shift(action, next, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
      useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
      split() {
          let parent = this;
          let off = parent.buffer.length;
          // Because the top of the buffer (after this.pos) may be mutated
          // to reorder reductions and skipped tokens, and shared buffers
          // should be immutable, this copies any outstanding skipped tokens
          // to the new buffer, and puts the base pointer before them.
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
              off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          // Make sure parent points to an actual parent with content, if there is such a parent.
          while (parent && base == parent.bufferBase)
              parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
      recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
              this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190 /* Recover.Delete */;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
      canShift(term) {
          for (let sim = new SimulatedStack(this);;) {
              let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
              if (action == 0)
                  return false;
              if ((action & 65536 /* Action.ReduceFlag */) == 0)
                  return true;
              sim.reduce(action);
          }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
      recoverByInsert(next) {
          if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
              return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
              let best = [];
              for (let i = 0, s; i < nextStates.length; i += 2) {
                  if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                      best.push(nextStates[i], s);
              }
              if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                  for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                      let s = nextStates[i + 1];
                      if (!best.some((v, i) => (i & 1) && v == s))
                          best.push(nextStates[i], s);
                  }
              nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
              let s = nextStates[i + 1];
              if (s == this.state)
                  continue;
              let stack = this.split();
              stack.pushState(s, this.pos);
              stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
              stack.shiftContext(nextStates[i], this.pos);
              stack.reducePos = this.pos;
              stack.score -= 200 /* Recover.Insert */;
              result.push(stack);
          }
          return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
      forceReduce() {
          let { parser } = this.p;
          let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
          if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
              return false;
          if (!parser.validAction(this.state, reduce)) {
              let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
              let target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                  let backup = this.findForcedReduction();
                  if (backup == null)
                      return false;
                  reduce = backup;
              }
              this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
              this.score -= 100 /* Recover.Reduce */;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
      findForcedReduction() {
          let { parser } = this.p, seen = [];
          let explore = (state, depth) => {
              if (seen.includes(state))
                  return;
              seen.push(state);
              return parser.allActions(state, (action) => {
                  if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                  else if (action & 65536 /* Action.ReduceFlag */) {
                      let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                      if (rDepth > 1) {
                          let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                          if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                              return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                      }
                  }
                  else {
                      let found = explore(action, depth + 1);
                      if (found != null)
                          return found;
                  }
              });
          };
          return explore(this.state, 0);
      }
      /**
      @internal
      */
      forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
              if (!this.forceReduce()) {
                  this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                  break;
              }
          }
          return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
      get deadEnd() {
          if (this.stack.length != 3)
              return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
              !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
      restart() {
          this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
          this.state = this.stack[0];
          this.stack.length = 0;
      }
      /**
      @internal
      */
      sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
              return false;
          for (let i = 0; i < this.stack.length; i += 3)
              if (this.stack[i] != other.stack[i])
                  return false;
          return true;
      }
      /**
      Get the parser used by this stack.
      */
      get parser() { return this.p.parser; }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
      dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
      shiftContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      reduceContext(term, start) {
          if (this.curContext)
              this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
      }
      /**
      @internal
      */
      emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
              this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
      emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
              this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
      updateContext(context) {
          if (context != this.curContext.context) {
              let newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash)
                  this.emitContext();
              this.curContext = newCx;
          }
      }
      /**
      @internal
      */
      setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
          }
      }
      /**
      @internal
      */
      close() {
          if (this.curContext && this.curContext.tracker.strict)
              this.emitContext();
          if (this.lookAhead > 0)
              this.emitLookAhead();
      }
  }
  class StackContext {
      constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
  }
  // Used to cheaply run some reductions to scan ahead without mutating
  // an entire stack
  class SimulatedStack {
      constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
      }
      reduce(action) {
          let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
          if (depth == 0) {
              if (this.stack == this.start.stack)
                  this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
          }
          else {
              this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
      }
  }
  // This is given to `Tree.build` to build a buffer, and encapsulates
  // the parent-stack-walking necessary to read the nodes.
  class StackBufferCursor {
      constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
              this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
          }
      }
      get id() { return this.buffer[this.index - 4]; }
      get start() { return this.buffer[this.index - 3]; }
      get end() { return this.buffer[this.index - 2]; }
      get size() { return this.buffer[this.index - 1]; }
      next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
              this.maybeNext();
      }
      fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
      }
  }

  // See lezer-generator/src/encode.ts for comments about the encoding
  // used here
  function decodeArray(input, Type = Uint16Array) {
      if (typeof input != "string")
          return input;
      let array = null;
      for (let pos = 0, out = 0; pos < input.length;) {
          let value = 0;
          for (;;) {
              let next = input.charCodeAt(pos++), stop = false;
              if (next == 126 /* Encode.BigValCode */) {
                  value = 65535 /* Encode.BigVal */;
                  break;
              }
              if (next >= 92 /* Encode.Gap2 */)
                  next--;
              if (next >= 34 /* Encode.Gap1 */)
                  next--;
              let digit = next - 32 /* Encode.Start */;
              if (digit >= 46 /* Encode.Base */) {
                  digit -= 46 /* Encode.Base */;
                  stop = true;
              }
              value += digit;
              if (stop)
                  break;
              value *= 46 /* Encode.Base */;
          }
          if (array)
              array[out++] = value;
          else
              array = new Type(value);
      }
      return array;
  }

  class CachedToken {
      constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
      }
  }
  const nullToken = new CachedToken;
  /**
  [Tokenizers](#lr.ExternalTokenizer) interact with the input
  through this interface. It presents the input as a stream of
  characters, tracking lookahead and hiding the complexity of
  [ranges](#common.Parser.parse^ranges) from tokenizer code.
  */
  class InputStream {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      input, 
      /**
      @internal
      */
      ranges) {
          this.input = input;
          this.ranges = ranges;
          /**
          @internal
          */
          this.chunk = "";
          /**
          @internal
          */
          this.chunkOff = 0;
          /**
          Backup chunk
          */
          this.chunk2 = "";
          this.chunk2Pos = 0;
          /**
          The character code of the next code unit in the input, or -1
          when the stream is at the end of the input.
          */
          this.next = -1;
          /**
          @internal
          */
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
      }
      /**
      @internal
      */
      resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
              if (!index)
                  return null;
              let next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1)
                  return null;
              let next = this.ranges[++index];
              pos += next.from - range.to;
              range = next;
          }
          return pos;
      }
      /**
      @internal
      */
      clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
              return pos;
          for (let range of this.ranges)
              if (range.to > pos)
                  return Math.max(pos, range.from);
          return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
      peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
          }
          else {
              let resolved = this.resolveOffset(offset, 1);
              if (resolved == null)
                  return -1;
              pos = resolved;
              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                  result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              }
              else {
                  let i = this.rangeIndex, range = this.range;
                  while (range.to <= pos)
                      range = this.ranges[++i];
                  this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                  if (pos + this.chunk2.length > range.to)
                      this.chunk2 = this.chunk2.slice(0, range.to - pos);
                  result = this.chunk2.charCodeAt(0);
              }
          }
          if (pos >= this.token.lookAhead)
              this.token.lookAhead = pos + 1;
          return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
      acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
              throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
      }
      /**
      Accept a token ending at a specific given position.
      */
      acceptTokenTo(token, endPos) {
          this.token.value = token;
          this.token.end = endPos;
      }
      getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              let { chunk, chunkPos } = this;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
          }
          else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              let nextChunk = this.input.chunk(this.pos);
              let end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
          }
      }
      readNext() {
          if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length)
                  return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
      advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1)
                  return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
              this.token.lookAhead = this.pos + 1;
          return this.readNext();
      }
      setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
      }
      /**
      @internal
      */
      reset(pos, token) {
          if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
          }
          else {
              this.token = nullToken;
          }
          if (this.pos != pos) {
              this.pos = pos;
              if (pos == this.end) {
                  this.setDone();
                  return this;
              }
              while (pos < this.range.from)
                  this.range = this.ranges[--this.rangeIndex];
              while (pos >= this.range.to)
                  this.range = this.ranges[++this.rangeIndex];
              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                  this.chunkOff = pos - this.chunkPos;
              }
              else {
                  this.chunk = "";
                  this.chunkOff = 0;
              }
              this.readNext();
          }
          return this;
      }
      /**
      @internal
      */
      read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
              return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
              return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
          if (from >= this.range.from && to <= this.range.to)
              return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
              if (r.from >= to)
                  break;
              if (r.to > from)
                  result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
      }
  }
  /**
  @internal
  */
  class TokenGroup {
      constructor(data, id) {
          this.data = data;
          this.id = id;
      }
      token(input, stack) {
          let { parser } = stack.p;
          readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
      }
  }
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  /**
  `@external tokens` declarations in the grammar should resolve to
  an instance of this class.
  */
  class ExternalTokenizer {
      /**
      Create a tokenizer. The first argument is the function that,
      given an input stream, scans for the types of tokens it
      recognizes at the stream's position, and calls
      [`acceptToken`](#lr.InputStream.acceptToken) when it finds
      one.
      */
      constructor(
      /**
      @internal
      */
      token, options = {}) {
          this.token = token;
          this.contextual = !!options.contextual;
          this.fallback = !!options.fallback;
          this.extend = !!options.extend;
      }
  }
  // Tokenizer data is stored a big uint16 array containing, for each
  // state:
  //
  //  - A group bitmask, indicating what token groups are reachable from
  //    this state, so that paths that can only lead to tokens not in
  //    any of the current groups can be cut off early.
  //
  //  - The position of the end of the state's sequence of accepting
  //    tokens
  //
  //  - The number of outgoing edges for the state
  //
  //  - The accepting tokens, as (token id, group mask) pairs
  //
  //  - The outgoing edges, as (start character, end character, state
  //    index) triples, with end character being exclusive
  //
  // This function interprets that data, running through a stream as
  // long as new states with the a matching group mask can be reached,
  // and updating `input.token` when it matches a token.
  function readToken(data, input, stack, group, precTable, precOffset) {
      let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
      scan: for (;;) {
          if ((groupMask & data[state]) == 0)
              break;
          let accEnd = data[state + 1];
          // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens
          for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                  let term = data[i];
                  if (dialect.allows(term) &&
                      (input.token.value == -1 || input.token.value == term ||
                          overrides(term, input.token.value, precTable, precOffset))) {
                      input.acceptToken(term);
                      break;
                  }
              }
          let next = input.next, low = 0, high = data[state + 2];
          // Special case for EOF
          if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
              state = data[accEnd + high * 3 - 1];
              continue scan;
          }
          // Do a binary search on the state's edges
          for (; low < high;) {
              let mid = (low + high) >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1] || 0x10000;
              if (next < from)
                  high = mid;
              else if (next >= to)
                  low = mid + 1;
              else {
                  state = data[index + 2];
                  input.advance();
                  continue scan;
              }
          }
          break;
      }
  }
  function findOffset(data, start, term) {
      for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
          if (next == term)
              return i - start;
      return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
      let iPrev = findOffset(tableData, tableOffset, prev);
      return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }

  // Environment variable used to control console output
  const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  let stackIDs = null;
  function cutAt(tree, pos, side) {
      let cursor = tree.cursor(IterMode.IncludeAnonymous);
      cursor.moveTo(pos);
      for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
              for (;;) {
                  if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                      return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                          : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                  if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                      break;
                  if (!cursor.parent())
                      return side < 0 ? 0 : tree.length;
              }
      }
  }
  let FragmentCursor$1 = class FragmentCursor {
      constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
      }
      nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
              while (this.trees.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
              }
              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
          }
          else {
              this.nextStart = 1e9;
          }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
          if (pos < this.nextStart)
              return null;
          while (this.fragment && this.safeTo <= pos)
              this.nextFragment();
          if (!this.fragment)
              return null;
          for (;;) {
              let last = this.trees.length - 1;
              if (last < 0) { // End of tree
                  this.nextFragment();
                  return null;
              }
              let top = this.trees[last], index = this.index[last];
              if (index == top.children.length) {
                  this.trees.pop();
                  this.start.pop();
                  this.index.pop();
                  continue;
              }
              let next = top.children[index];
              let start = this.start[last] + top.positions[index];
              if (start > pos) {
                  this.nextStart = start;
                  return null;
              }
              if (next instanceof Tree) {
                  if (start == pos) {
                      if (start < this.safeFrom)
                          return null;
                      let end = start + next.length;
                      if (end <= this.safeTo) {
                          let lookAhead = next.prop(NodeProp.lookAhead);
                          if (!lookAhead || end + lookAhead < this.fragment.to)
                              return next;
                      }
                  }
                  this.index[last]++;
                  if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                      this.trees.push(next);
                      this.start.push(start);
                      this.index.push(0);
                  }
              }
              else {
                  this.index[last]++;
                  this.nextStart = start + next.length;
              }
          }
      }
  };
  class TokenCache {
      constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(_ => new CachedToken);
      }
      getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
              if (((1 << i) & mask) == 0)
                  continue;
              let tokenizer = tokenizers[i], token = this.tokens[i];
              if (main && !tokenizer.fallback)
                  continue;
              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                  this.updateCachedToken(token, tokenizer, stack);
                  token.mask = mask;
                  token.context = context;
              }
              if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                  lookAhead = Math.max(token.lookAhead, lookAhead);
              if (token.value != 0 /* Term.Err */) {
                  let startIndex = actionIndex;
                  if (token.extended > -1)
                      actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                  actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                  if (!tokenizer.extend) {
                      main = token;
                      if (actionIndex > startIndex)
                          break;
                  }
              }
          }
          while (this.actions.length > actionIndex)
              this.actions.pop();
          if (lookAhead)
              stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
              main = new CachedToken;
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
      }
      getMainToken(stack) {
          if (this.mainToken)
              return this.mainToken;
          let main = new CachedToken, { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
          return main;
      }
      updateCachedToken(token, tokenizer, stack) {
          let start = this.stream.clipPos(stack.pos);
          tokenizer.token(this.stream.reset(start, token), stack);
          if (token.value > -1) {
              let { parser } = stack.p;
              for (let i = 0; i < parser.specialized.length; i++)
                  if (parser.specialized[i] == token.value) {
                      let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                      if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                          if ((result & 1) == 0 /* Specialize.Specialize */)
                              token.value = result >> 1;
                          else
                              token.extended = result >> 1;
                          break;
                      }
                  }
          }
          else {
              token.value = 0 /* Term.Err */;
              token.end = this.stream.clipPos(start + 1);
          }
      }
      putAction(action, token, end, index) {
          // Don't add duplicate actions
          for (let i = 0; i < index; i += 3)
              if (this.actions[i] == action)
                  return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
      }
      addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
              for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                  if (data[i] == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */) {
                          i = pair(data, i + 2);
                      }
                      else {
                          if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                              index = this.putAction(pair(data, i + 2), token, end, index);
                          break;
                      }
                  }
                  if (data[i] == token)
                      index = this.putAction(pair(data, i + 1), token, end, index);
              }
          }
          return index;
      }
  }
  class Parse {
      constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.lastBigReductionStart = -1;
          this.lastBigReductionSize = 0;
          this.bigReductionCount = 0;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
              ? new FragmentCursor$1(fragments, parser.nodeSet) : null;
      }
      get parsedPos() {
          return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          // This will hold stacks beyond `pos`.
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          // If a large amount of reductions happened with the same start
          // position, force the stack out of that production in order to
          // avoid creating a tree too deep to recurse through.
          // (This is an ugly kludge, because unfortunately there is no
          // straightforward, cheap way to check for this happening, due to
          // the history of reductions only being available in an
          // expensive-to-access format in the stack buffers.)
          if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
              let [s] = stacks;
              while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
              this.bigReductionCount = this.lastBigReductionSize = 0;
          }
          // Keep advancing any stacks at `pos` until they either move
          // forward or can't be advanced. Gather stacks that can't be
          // advanced further in `stopped`.
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i];
              for (;;) {
                  this.tokens.mainToken = null;
                  if (stack.pos > pos) {
                      newStacks.push(stack);
                  }
                  else if (this.advanceStack(stack, newStacks, stacks)) {
                      continue;
                  }
                  else {
                      if (!stopped) {
                          stopped = [];
                          stoppedTokens = [];
                      }
                      stopped.push(stack);
                      let tok = this.tokens.getMainToken(stack);
                      stoppedTokens.push(tok.value, tok.end);
                  }
                  break;
              }
          }
          if (!newStacks.length) {
              let finished = stopped && findFinished(stopped);
              if (finished) {
                  if (verbose)
                      console.log("Finish with " + this.stackID(finished));
                  return this.stackToTree(finished);
              }
              if (this.parser.strict) {
                  if (verbose && stopped)
                      console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                  throw new SyntaxError("No parse at " + pos);
              }
              if (!this.recovering)
                  this.recovering = 5 /* Rec.Distance */;
          }
          if (this.recovering && stopped) {
              let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                  : this.runRecovery(stopped, stoppedTokens, newStacks);
              if (finished) {
                  if (verbose)
                      console.log("Force-finish " + this.stackID(finished));
                  return this.stackToTree(finished.forceAll());
              }
          }
          if (this.recovering) {
              let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
              if (newStacks.length > maxRemaining) {
                  newStacks.sort((a, b) => b.score - a.score);
                  while (newStacks.length > maxRemaining)
                      newStacks.pop();
              }
              if (newStacks.some(s => s.reducePos > pos))
                  this.recovering--;
          }
          else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (let i = 0; i < newStacks.length - 1; i++) {
                  let stack = newStacks[i];
                  for (let j = i + 1; j < newStacks.length; j++) {
                      let other = newStacks[j];
                      if (stack.sameState(other) ||
                          stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                          if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                              newStacks.splice(j--, 1);
                          }
                          else {
                              newStacks.splice(i--, 1);
                              continue outer;
                          }
                      }
                  }
              }
              if (newStacks.length > 12 /* Rec.MaxStackCount */)
                  newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
              if (newStacks[i].pos < this.minStackPos)
                  this.minStackPos = newStacks[i].pos;
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
              return stack.forceReduce() ? stack : null;
          if (this.fragments) {
              let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
              for (let cached = this.fragments.nodeAt(start); cached;) {
                  let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                  if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                      stack.useNode(cached, match);
                      if (verbose)
                          console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                      return true;
                  }
                  if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                      break;
                  let inner = cached.children[0];
                  if (inner instanceof Tree && cached.positions[0] == 0)
                      cached = inner;
                  else
                      break;
              }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
          if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose)
                  console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
              return true;
          }
          if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
              while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length;) {
              let action = actions[i++], term = actions[i++], end = actions[i++];
              let last = i == actions.length || !split;
              let localStack = last ? stack : stack.split();
              let main = this.tokens.mainToken;
              localStack.apply(action, term, main ? main.start : localStack.pos, end);
              if (verbose)
                  console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
              if (last)
                  return true;
              else if (localStack.pos > start)
                  stacks.push(localStack);
              else
                  split.push(localStack);
          }
          return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (;;) {
              if (!this.advanceStack(stack, null, null))
                  return false;
              if (stack.pos > pos) {
                  pushStackDedup(stack, newStacks);
                  return true;
              }
          }
      }
      runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
              let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
              let base = verbose ? this.stackID(stack) + " -> " : "";
              if (stack.deadEnd) {
                  if (restarted)
                      continue;
                  restarted = true;
                  stack.restart();
                  if (verbose)
                      console.log(base + this.stackID(stack) + " (restarted)");
                  let done = this.advanceFully(stack, newStacks);
                  if (done)
                      continue;
              }
              let force = stack.split(), forceBase = base;
              for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                  if (verbose)
                      console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                  let done = this.advanceFully(force, newStacks);
                  if (done)
                      break;
                  if (verbose)
                      forceBase = this.stackID(force) + " -> ";
              }
              for (let insert of stack.recoverByInsert(token)) {
                  if (verbose)
                      console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
              }
              if (this.stream.end > stack.pos) {
                  if (tokenEnd == stack.pos) {
                      tokenEnd++;
                      token = 0 /* Term.Err */;
                  }
                  stack.recoverByDelete(token, tokenEnd);
                  if (verbose)
                      console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                  pushStackDedup(stack, newStacks);
              }
              else if (!finished || finished.score < stack.score) {
                  finished = stack;
              }
          }
          return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
          stack.close();
          return Tree.build({ buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm });
      }
      stackID(stack) {
          let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
          if (!id)
              stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
          return id + stack;
      }
  }
  function pushStackDedup(stack, newStacks) {
      for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
              if (newStacks[i].score < stack.score)
                  newStacks[i] = stack;
              return;
          }
      }
      newStacks.push(stack);
  }
  class Dialect {
      constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
      }
      allows(term) { return !this.disabled || this.disabled[term] == 0; }
  }
  const id = x => x;
  /**
  Context trackers are used to track stateful context (such as
  indentation in the Python grammar, or parent elements in the XML
  grammar) needed by external tokenizers. You declare them in a
  grammar file as `@context exportName from "module"`.

  Context values should be immutable, and can be updated (replaced)
  on shift or reduce actions.

  The export used in a `@context` declaration should be of this
  type.
  */
  class ContextTracker {
      /**
      Define a context tracker.
      */
      constructor(spec) {
          this.start = spec.start;
          this.shift = spec.shift || id;
          this.reduce = spec.reduce || id;
          this.reuse = spec.reuse || id;
          this.hash = spec.hash || (() => 0);
          this.strict = spec.strict !== false;
      }
  }
  /**
  Holds the parse tables for a given grammar, as generated by
  `lezer-generator`, and provides [methods](#common.Parser) to parse
  content with.
  */
  class LRParser extends Parser {
      /**
      @internal
      */
      constructor(spec) {
          super();
          /**
          @internal
          */
          this.wrappers = [];
          if (spec.version != 14 /* File.Version */)
              throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
              nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
              nodeProps.push([]);
          function setProp(nodeID, prop, value) {
              nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
              for (let propSpec of spec.nodeProps) {
                  let prop = propSpec[0];
                  if (typeof prop == "string")
                      prop = NodeProp[prop];
                  for (let i = 1; i < propSpec.length;) {
                      let next = propSpec[i++];
                      if (next >= 0) {
                          setProp(next, prop, propSpec[i++]);
                      }
                      else {
                          let value = propSpec[i + -next];
                          for (let j = -next; j > 0; j--)
                              setProp(propSpec[i++], prop, value);
                          i++;
                      }
                  }
              }
          this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
              name: i >= this.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
              this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
              this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Get a goto table entry @internal
      */
      getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
              return -1;
          for (let pos = table[term + 1];;) {
              let groupTag = table[pos++], last = groupTag & 1;
              let target = table[pos++];
              if (last && loose)
                  return target;
              for (let end = pos + (groupTag >> 1); pos < end; pos++)
                  if (table[pos] == state)
                      return target;
              if (last)
                  return -1;
          }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
      hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
              for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                  if ((next = data[i]) == 65535 /* Seq.End */) {
                      if (data[i + 1] == 1 /* Seq.Next */)
                          next = data[i = pair(data, i + 2)];
                      else if (data[i + 1] == 2 /* Seq.Other */)
                          return pair(data, i + 2);
                      else
                          break;
                  }
                  if (next == terminal || next == 0 /* Term.Err */)
                      return pair(data, i + 1);
              }
          }
          return 0;
      }
      /**
      @internal
      */
      stateSlot(state, slot) {
          return this.states[(state * 6 /* ParseState.Size */) + slot];
      }
      /**
      @internal
      */
      stateFlag(state, flag) {
          return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
      }
      /**
      @internal
      */
      validAction(state, action) {
          return !!this.allActions(state, a => a == action ? true : null);
      }
      /**
      @internal
      */
      allActions(state, action) {
          let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
          let result = deflt ? action(deflt) : undefined;
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              result = action(pair(this.data, i + 1));
          }
          return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
      nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
              if (this.data[i] == 65535 /* Seq.End */) {
                  if (this.data[i + 1] == 1 /* Seq.Next */)
                      i = pair(this.data, i + 2);
                  else
                      break;
              }
              if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                  let value = this.data[i + 1];
                  if (!result.some((v, i) => (i & 1) && v == value))
                      result.push(this.data[i], value);
              }
          }
          return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
      configure(config) {
          // Hideous reflection-based kludge to make it easy to create a
          // slightly modified copy of a parser.
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
              copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
              let info = this.topRules[config.top];
              if (!info)
                  throw new RangeError(`Invalid top rule name ${config.top}`);
              copy.top = info;
          }
          if (config.tokenizers)
              copy.tokenizers = this.tokenizers.map(t => {
                  let found = config.tokenizers.find(r => r.from == t);
                  return found ? found.to : t;
              });
          if (config.specializers) {
              copy.specializers = this.specializers.slice();
              copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                  let found = config.specializers.find(r => r.from == s.external);
                  if (!found)
                      return s;
                  let spec = Object.assign(Object.assign({}, s), { external: found.to });
                  copy.specializers[i] = getSpecializer(spec);
                  return spec;
              });
          }
          if (config.contextTracker)
              copy.context = config.contextTracker;
          if (config.dialect)
              copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
              copy.strict = config.strict;
          if (config.wrap)
              copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
              copy.bufferLength = config.bufferLength;
          return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
      hasWrappers() {
          return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
      getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
      get eofTerm() { return this.maxNode + 1; }
      /**
      The type of top node produced by the parser.
      */
      get topNode() { return this.nodeSet.types[this.top[1]]; }
      /**
      @internal
      */
      dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
      }
      /**
      @internal
      */
      parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
              for (let part of dialect.split(" ")) {
                  let id = values.indexOf(part);
                  if (id >= 0)
                      flags[id] = true;
              }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
              if (!flags[i]) {
                  for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                      (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
              }
          return new Dialect(dialect, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
      static deserialize(spec) {
          return new LRParser(spec);
      }
  }
  function pair(data, off) { return data[off] | (data[off + 1] << 16); }
  function findFinished(stacks) {
      let best = null;
      for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
              stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
              (!best || best.score < stack.score))
              best = stack;
      }
      return best;
  }
  function getSpecializer(spec) {
      if (spec.external) {
          let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
          return (value, stack) => (spec.external(value, stack) << 1) | mask;
      }
      return spec.get;
  }

  let nextTagID = 0;
  /**
  Highlighting tags are markers that denote a highlighting category.
  They are [associated](#highlight.styleTags) with parts of a syntax
  tree by a language mode, and then mapped to an actual CSS style by
  a [highlighter](#highlight.Highlighter).

  Because syntax tree node types and highlight styles have to be
  able to talk the same language, CodeMirror uses a mostly _closed_
  [vocabulary](#highlight.tags) of syntax tags (as opposed to
  traditional open string-based systems, which make it hard for
  highlighting themes to cover all the tokens produced by the
  various languages).

  It _is_ possible to [define](#highlight.Tag^define) your own
  highlighting tags for system-internal use (where you control both
  the language package and the highlighter), but such tags will not
  be picked up by regular highlighters (though you can derive them
  from standard tags to allow highlighters to fall back to those).
  */
  class Tag {
      /**
      @internal
      */
      constructor(
      /**
      The optional name of the base tag @internal
      */
      name, 
      /**
      The set of this tag and all its parent tags, starting with
      this one itself and sorted in order of decreasing specificity.
      */
      set, 
      /**
      The base unmodified tag that this one is based on, if it's
      modified @internal
      */
      base, 
      /**
      The modifiers applied to this.base @internal
      */
      modified) {
          this.name = name;
          this.set = set;
          this.base = base;
          this.modified = modified;
          /**
          @internal
          */
          this.id = nextTagID++;
      }
      toString() {
          let { name } = this;
          for (let mod of this.modified)
              if (mod.name)
                  name = `${mod.name}(${name})`;
          return name;
      }
      static define(nameOrParent, parent) {
          let name = typeof nameOrParent == "string" ? nameOrParent : "?";
          if (nameOrParent instanceof Tag)
              parent = nameOrParent;
          if (parent === null || parent === void 0 ? void 0 : parent.base)
              throw new Error("Can not derive from a modified tag");
          let tag = new Tag(name, [], null, []);
          tag.set.push(tag);
          if (parent)
              for (let t of parent.set)
                  tag.set.push(t);
          return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name) {
          let mod = new Modifier(name);
          return (tag) => {
              if (tag.modified.indexOf(mod) > -1)
                  return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
      }
  }
  let nextModifierID = 0;
  class Modifier {
      constructor(name) {
          this.name = name;
          this.instances = [];
          this.id = nextModifierID++;
      }
      static get(base, mods) {
          if (!mods.length)
              return base;
          let exists = mods[0].instances.find(t => t.base == base && sameArray$1(mods, t.modified));
          if (exists)
              return exists;
          let set = [], tag = new Tag(base.name, set, base, mods);
          for (let m of mods)
              m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base.set)
              if (!parent.modified.length)
                  for (let config of configs)
                      set.push(Modifier.get(parent, config));
          return tag;
      }
  }
  function sameArray$1(a, b) {
      return a.length == b.length && a.every((x, i) => x == b[i]);
  }
  function powerSet(array) {
      let sets = [[]];
      for (let i = 0; i < array.length; i++) {
          for (let j = 0, e = sets.length; j < e; j++) {
              sets.push(sets[j].concat(array[i]));
          }
      }
      return sets.sort((a, b) => b.length - a.length);
  }
  /**
  This function is used to add a set of tags to a language syntax
  via [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.LRParser.configure).

  The argument object maps node selectors to [highlighting
  tags](#highlight.Tag) or arrays of tags.

  Node selectors may hold one or more (space-separated) node paths.
  Such a path can be a [node name](#common.NodeType.name), or
  multiple node names (or `*` wildcards) separated by slash
  characters, as in `"Block/Declaration/VariableName"`. Such a path
  matches the final node but only if its direct parent nodes are the
  other nodes mentioned. A `*` in such a path matches any parent,
  but only a single level—wildcards that match multiple parents
  aren't supported, both for efficiency reasons and because Lezer
  trees make it rather hard to reason about what they would match.)

  A path can be ended with `/...` to indicate that the tag assigned
  to the node should also apply to all child nodes, even if they
  match their own style (by default, only the innermost style is
  used).

  When a path ends in `!`, as in `Attribute!`, no further matching
  happens for the node's child nodes, and the entire node gets the
  given style.

  In this notation, node names that contain `/`, `!`, `*`, or `...`
  must be quoted as JSON strings.

  For example:

  ```javascript
  parser.withProps(
    styleTags({
      // Style Number and BigNumber nodes
      "Number BigNumber": tags.number,
      // Style Escape nodes whose parent is String
      "String/Escape": tags.escape,
      // Style anything inside Attributes nodes
      "Attributes!": tags.meta,
      // Add a style to all content inside Italic nodes
      "Italic/...": tags.emphasis,
      // Style InvalidString nodes as both `string` and `invalid`
      "InvalidString": [tags.string, tags.invalid],
      // Style the node named "/" as punctuation
      '"/"': tags.punctuation
    })
  )
  ```
  */
  function styleTags(spec) {
      let byName = Object.create(null);
      for (let prop in spec) {
          let tags = spec[prop];
          if (!Array.isArray(tags))
              tags = [tags];
          for (let part of prop.split(" "))
              if (part) {
                  let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                  for (let pos = 0;;) {
                      if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                          mode = 1 /* Mode.Inherit */;
                          break;
                      }
                      let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                      if (!m)
                          throw new RangeError("Invalid path: " + part);
                      pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                      pos += m[0].length;
                      if (pos == part.length)
                          break;
                      let next = part[pos++];
                      if (pos == part.length && next == "!") {
                          mode = 0 /* Mode.Opaque */;
                          break;
                      }
                      if (next != "/")
                          throw new RangeError("Invalid path: " + part);
                      rest = part.slice(pos);
                  }
                  let last = pieces.length - 1, inner = pieces[last];
                  if (!inner)
                      throw new RangeError("Invalid path: " + part);
                  let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                  byName[inner] = rule.sort(byName[inner]);
              }
      }
      return ruleNodeProp.add(byName);
  }
  const ruleNodeProp = new NodeProp();
  class Rule {
      constructor(tags, mode, context, next) {
          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
      }
      get opaque() { return this.mode == 0 /* Mode.Opaque */; }
      get inherit() { return this.mode == 1 /* Mode.Inherit */; }
      sort(other) {
          if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
          }
          other.next = this.sort(other.next);
          return other;
      }
      get depth() { return this.context ? this.context.length : 0; }
  }
  Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
  /**
  Define a [highlighter](#highlight.Highlighter) from an array of
  tag/class pairs. Classes associated with more specific tags will
  take precedence.
  */
  function tagHighlighter(tags, options) {
      let map = Object.create(null);
      for (let style of tags) {
          if (!Array.isArray(style.tag))
              map[style.tag.id] = style.class;
          else
              for (let tag of style.tag)
                  map[tag.id] = style.class;
      }
      let { scope, all = null } = options || {};
      return {
          style: (tags) => {
              let cls = all;
              for (let tag of tags) {
                  for (let sub of tag.set) {
                      let tagClass = map[sub.id];
                      if (tagClass) {
                          cls = cls ? cls + " " + tagClass : tagClass;
                          break;
                      }
                  }
              }
              return cls;
          },
          scope
      };
  }
  function highlightTags(highlighters, tags) {
      let result = null;
      for (let highlighter of highlighters) {
          let value = highlighter.style(tags);
          if (value)
              result = result ? result + " " + value : value;
      }
      return result;
  }
  /**
  Highlight the given [tree](#common.Tree) with the given
  [highlighter](#highlight.Highlighter). Often, the higher-level
  [`highlightCode`](#highlight.highlightCode) function is easier to
  use.
  */
  function highlightTree(tree, highlighter, 
  /**
  Assign styling to a region of the text. Will be called, in order
  of position, for any ranges where more than zero classes apply.
  `classes` is a space separated string of CSS classes.
  */
  putStyle, 
  /**
  The start of the range to highlight.
  */
  from = 0, 
  /**
  The end of the range.
  */
  to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
  }
  class HighlightBuilder {
      constructor(at, highlighters, span) {
          this.at = at;
          this.highlighters = highlighters;
          this.span = span;
          this.class = "";
      }
      startSpan(at, cls) {
          if (cls != this.class) {
              this.flush(at);
              if (at > this.at)
                  this.at = at;
              this.class = cls;
          }
      }
      flush(to) {
          if (to > this.at && this.class)
              this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
              return;
          if (type.isTop)
              highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
          let cls = inheritedClass;
          let rule = getStyleTags(cursor) || Rule.empty;
          let tagCls = highlightTags(highlighters, rule.tags);
          if (tagCls) {
              if (cls)
                  cls += " ";
              cls += tagCls;
              if (rule.mode == 1 /* Mode.Inherit */)
                  inheritedClass += (inheritedClass ? " " : "") + tagCls;
          }
          this.startSpan(Math.max(from, start), cls);
          if (rule.opaque)
              return;
          let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
          if (mounted && mounted.overlay) {
              let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
              let hasChild = cursor.firstChild();
              for (let i = 0, pos = start;; i++) {
                  let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                  let nextPos = next ? next.from + start : end;
                  let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                  if (rangeFrom < rangeTo && hasChild) {
                      while (cursor.from < rangeTo) {
                          this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                          this.startSpan(Math.min(rangeTo, cursor.to), cls);
                          if (cursor.to >= nextPos || !cursor.nextSibling())
                              break;
                      }
                  }
                  if (!next || nextPos > to)
                      break;
                  pos = next.to + start;
                  if (pos > from) {
                      this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                      this.startSpan(Math.min(to, pos), cls);
                  }
              }
              if (hasChild)
                  cursor.parent();
          }
          else if (cursor.firstChild()) {
              if (mounted)
                  inheritedClass = "";
              do {
                  if (cursor.to <= from)
                      continue;
                  if (cursor.from >= to)
                      break;
                  this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                  this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());
              cursor.parent();
          }
      }
  }
  /**
  Match a syntax node's [highlight rules](#highlight.styleTags). If
  there's a match, return its set of tags, and whether it is
  opaque (uses a `!`) or applies to all child nodes (`/...`).
  */
  function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
          rule = rule.next;
      return rule || null;
  }
  const t = Tag.define;
  const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
  /**
  The default set of highlighting [tags](#highlight.Tag).

  This collection is heavily biased towards programming languages,
  and necessarily incomplete. A full ontology of syntactic
  constructs would fill a stack of books, and be impractical to
  write themes for. So try to make do with this set. If all else
  fails, [open an
  issue](https://github.com/codemirror/codemirror.next) to propose a
  new tag, or [define](#highlight.Tag^define) a local custom tag for
  your use case.

  Note that it is not obligatory to always attach the most specific
  tag possible to an element—if your grammar can't easily
  distinguish a certain type of element (such as a local variable),
  it is okay to style it as its more general variant (a variable).

  For tags that extend some parent tag, the documentation links to
  the parent.
  */
  const tags$1 = {
      /**
      A comment.
      */
      comment,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment),
      /**
      Any kind of identifier.
      */
      name,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName: typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName: propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name),
      /**
      A literal value.
      */
      literal,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag.defineModifier("special")
  };
  for (let name in tags$1) {
      let val = tags$1[name];
      if (val instanceof Tag)
          val.name = name;
  }
  /**
  This is a highlighter that adds stable, predictable classes to
  tokens, for styling with external CSS.

  The following tags are mapped to their name prefixed with `"tok-"`
  (for example `"tok-comment"`):

  * [`link`](#highlight.tags.link)
  * [`heading`](#highlight.tags.heading)
  * [`emphasis`](#highlight.tags.emphasis)
  * [`strong`](#highlight.tags.strong)
  * [`keyword`](#highlight.tags.keyword)
  * [`atom`](#highlight.tags.atom)
  * [`bool`](#highlight.tags.bool)
  * [`url`](#highlight.tags.url)
  * [`labelName`](#highlight.tags.labelName)
  * [`inserted`](#highlight.tags.inserted)
  * [`deleted`](#highlight.tags.deleted)
  * [`literal`](#highlight.tags.literal)
  * [`string`](#highlight.tags.string)
  * [`number`](#highlight.tags.number)
  * [`variableName`](#highlight.tags.variableName)
  * [`typeName`](#highlight.tags.typeName)
  * [`namespace`](#highlight.tags.namespace)
  * [`className`](#highlight.tags.className)
  * [`macroName`](#highlight.tags.macroName)
  * [`propertyName`](#highlight.tags.propertyName)
  * [`operator`](#highlight.tags.operator)
  * [`comment`](#highlight.tags.comment)
  * [`meta`](#highlight.tags.meta)
  * [`punctuation`](#highlight.tags.punctuation)
  * [`invalid`](#highlight.tags.invalid)

  In addition, these mappings are provided:

  * [`regexp`](#highlight.tags.regexp),
    [`escape`](#highlight.tags.escape), and
    [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    are mapped to `"tok-string2"`
  * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName2"`
  * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-local"`
  * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    to `"tok-variableName tok-definition"`
  * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    to `"tok-propertyName tok-definition"`
  */
  tagHighlighter([
      { tag: tags$1.link, class: "tok-link" },
      { tag: tags$1.heading, class: "tok-heading" },
      { tag: tags$1.emphasis, class: "tok-emphasis" },
      { tag: tags$1.strong, class: "tok-strong" },
      { tag: tags$1.keyword, class: "tok-keyword" },
      { tag: tags$1.atom, class: "tok-atom" },
      { tag: tags$1.bool, class: "tok-bool" },
      { tag: tags$1.url, class: "tok-url" },
      { tag: tags$1.labelName, class: "tok-labelName" },
      { tag: tags$1.inserted, class: "tok-inserted" },
      { tag: tags$1.deleted, class: "tok-deleted" },
      { tag: tags$1.literal, class: "tok-literal" },
      { tag: tags$1.string, class: "tok-string" },
      { tag: tags$1.number, class: "tok-number" },
      { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
      { tag: tags$1.variableName, class: "tok-variableName" },
      { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
      { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
      { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
      { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags$1.typeName, class: "tok-typeName" },
      { tag: tags$1.namespace, class: "tok-namespace" },
      { tag: tags$1.className, class: "tok-className" },
      { tag: tags$1.macroName, class: "tok-macroName" },
      { tag: tags$1.propertyName, class: "tok-propertyName" },
      { tag: tags$1.operator, class: "tok-operator" },
      { tag: tags$1.comment, class: "tok-comment" },
      { tag: tags$1.meta, class: "tok-meta" },
      { tag: tags$1.invalid, class: "tok-invalid" },
      { tag: tags$1.punctuation, class: "tok-punctuation" }
  ]);

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const propertyIdentifier = 121,
    identifier = 122,
    nameIdentifier = 123,
    insertSemi = 124,
    expression0 = 128,
    ForExpression = 4,
    forExpressionStart = 131,
    ForInExpression = 7,
    Name$1 = 8,
    Identifier = 9,
    AdditionalIdentifier = 10,
    forExpressionBodyStart = 139,
    IfExpression = 19,
    ifExpressionStart = 140,
    QuantifiedExpression = 23,
    quantifiedExpressionStart = 141,
    QuantifiedInExpression = 27,
    PositiveUnaryTest = 37,
    ArithmeticExpression = 41,
    arithmeticPlusStart = 145,
    arithmeticTimesStart = 146,
    arithmeticExpStart = 147,
    arithmeticUnaryStart = 148,
    VariableName = 47,
    PathExpression = 68,
    pathExpressionStart = 154,
    FilterExpression = 70,
    filterExpressionStart = 155,
    FunctionInvocation = 72,
    functionInvocationStart = 156,
    ParameterName = 76,
    nil = 161,
    NumericLiteral = 79,
    StringLiteral = 80,
    BooleanLiteral = 81,
    listStart = 167,
    List = 89,
    FunctionDefinition = 90,
    functionDefinitionStart = 169,
    Context = 97,
    contextStart = 171,
    ContextEntry = 98,
    PropertyName = 100,
    PropertyIdentifier = 101;

  /* global console,process */


  // @ts-expect-error env access
  const LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);

  // @ts-expect-error env access
  const LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);

  // @ts-expect-error env access
  const LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);

  const spaceChars = [
    9, 11, 12, 32, 133, 160,
    5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198,
    8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
  ];

  const newlineChars = chars('\n\r');

  const asterix = '*'.charCodeAt(0);

  const additionalNameChars = chars("'./-+*^");

  /**
   * @typedef { VariableContext | any } ContextValue
   */

  /**
   * @param { string } str
   * @return { number[] }
   */
  function chars(str) {
    return Array.from(str).map(s => s.charCodeAt(0));
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isStartChar(ch) {
    return (
      ch === 63 // ?
    ) || (
      ch >= 65 && ch <= 90 // A-Z
    ) || (
      ch === 95 // _
    ) || (
      ch >= 97 && ch <= 122 // a-z
    ) || (
      ch >= 0xC0 && ch <= 0xD6
    ) || (
      ch >= 0xD8 && ch <= 0xF6
    ) || (
      ch >= 0xF8 && ch <= 0x2FF
    ) || (
      ch >= 0x370 && ch <= 0x37D
    ) || (
      ch >= 0x37F && ch <= 0x1FFF
    ) || (
      ch >= 0x200C && ch <= 0x200D
    ) || (
      ch >= 0x2070 && ch <= 0x218F
    ) || (
      ch >= 0x2C00 && ch <= 0x2FEF
    ) || (
      ch >= 0x3001 && ch <= 0xD7FF
    ) || (
      ch >= 0xF900 && ch <= 0xFDCF
    ) || (
      ch >= 0xFDF0 && ch <= 0xFFFD
    ) || (
      ch >= 0xD800 && ch <= 0xDBFF // upper surrogate
    ) || (
      ch >= 0xDC00 && ch <= 0xDFFF // lower surrogate
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isAdditional(ch) {
    return additionalNameChars.includes(ch);
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isPartChar(ch) {
    return (
      ch >= 48 && ch <= 57 // 0-9
    ) || (
      ch === 0xB7
    ) || (
      ch >= 0x0300 && ch <= 0x036F
    ) || (
      ch >= 0x203F && ch <= 0x2040
    );
  }

  /**
   * @param { number } ch
   * @return { boolean }
   */
  function isSpace(ch) {
    return spaceChars.includes(ch);
  }

  function indent(str, spaces) {
    return spaces.concat(
      str.split(/\n/g).join('\n' + spaces)
    );
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } [offset]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseAdditionalSymbol(input, offset = 0) {

    const next = input.peek(offset);

    if (next === asterix && input.peek(offset + 1) === asterix) {

      return {
        offset: 2,
        token: '**'
      };
    }

    if (isAdditional(next)) {
      return {
        offset: 1,
        token: String.fromCharCode(next)
      };
    }

    return null;
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param { number } [offset]
   * @param { boolean } [namePart]
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseIdentifier(input, offset = 0, namePart = false) {
    for (let inside = false, chars = [], i = 0;; i++) {
      const next = input.peek(offset + i);

      if (isStartChar(next) || ((inside || namePart) && isPartChar(next))) {
        if (!inside) {
          inside = true;
        }

        chars.push(next);
      } else {

        if (chars.length) {
          return {
            token: String.fromCharCode(...chars),
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * @param { import('@lezer/lr').InputStream } input
   * @param  { number } offset
   *
   * @return { { token: string, offset: number } | null }
   */
  function parseSpaces(input, offset) {

    for (let inside = false, i = 0;; i++) {
      let next = input.peek(offset + i);

      if (isSpace(next)) {
        if (!inside) {
          inside = true;
        }
      } else {
        if (inside) {
          return {
            token: ' ',
            offset: i
          };
        }

        return null;
      }
    }
  }

  /**
   * Parse a name from the input and return the first match, if any.
   *
   * @param { import('@lezer/lr').InputStream } input
   * @param { Variables } variables
   *
   * @return { { token: string, offset: number, term: number } | null }
   */
  function parseName(input, variables) {
    const contextKeys = variables.contextKeys();

    const start = variables.tokens;

    for (let i = 0, tokens = [], nextMatch = null;;) {

      const namePart = (start.length + tokens.length) > 0;
      const maybeSpace = tokens.length > 0;

      const match = (
        parseIdentifier(input, i, namePart) ||
        namePart && parseAdditionalSymbol(input, i) ||
        maybeSpace && parseSpaces(input, i)
      );

      // match is required
      if (!match) {
        return nextMatch;
      }

      const {
        token,
        offset
      } = match;

      i += offset;

      if (token === ' ') {
        continue;
      }

      tokens = [ ...tokens, token ];

      const name = [ ...start, ...tokens ].join(' ');

      if (contextKeys.some(el => el === name)) {
        const token = tokens[0];

        nextMatch = {
          token,
          offset: token.length,
          term: nameIdentifier
        };
      }

      if (contextKeys.some(el => el.startsWith(name))) {
        continue;
      }

      if (dateTimeIdentifiers.some(el => el === name)) {
        const token = tokens[0];

        // parse date time identifiers as normal
        // identifiers to allow specialization to kick in
        //
        // cf. https://github.com/nikku/lezer-feel/issues/8
        nextMatch = {
          token,
          offset: token.length,
          term: identifier
        };
      }

      if (dateTimeIdentifiers.some(el => el.startsWith(name))) {
        continue;
      }

      return nextMatch;
    }

  }

  const identifiersMap = {
    [ identifier ]: 'identifier',
    [ nameIdentifier ]: 'nameIdentifier'
  };

  const identifiers = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);

    const nameMatch = parseName(input, stack.context);

    const start = stack.context.tokens;

    const match = nameMatch || parseIdentifier(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(nameMatch ? nameMatch.term : identifier);

      LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
    }
  }, { contextual: true });


  const propertyIdentifiers = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);

    const start = stack.context.tokens;

    const match = parseIdentifier(input, 0, start.length > 0);

    if (match) {
      input.advance(match.offset);
      input.acceptToken(propertyIdentifier);

      LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
    }
  });


  const insertSemicolon = new ExternalTokenizer((input, stack) => {

    LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);

    let offset;
    let insert = false;

    for (offset = 0;; offset++) {
      const char = input.peek(offset);

      if (spaceChars.includes(char)) {
        continue;
      }

      if (newlineChars.includes(char)) {
        insert = true;
      }

      break;
    }

    if (insert) {

      const identifier = parseIdentifier(input, offset + 1);
      const spaces = parseSpaces(input, offset + 1);

      if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
        return;
      }

      LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
      input.acceptToken(insertSemi);
    }
  });

  const prefixedContextStarts = {
    [ functionInvocationStart ]: 'FunctionInvocation',
    [ filterExpressionStart ]: 'FilterExpression',
    [ pathExpressionStart ]: 'PathExpression'
  };

  const contextStarts = {
    [ contextStart ]: 'Context',
    [ functionDefinitionStart ]: 'FunctionDefinition',
    [ forExpressionStart ]: 'ForExpression',
    [ listStart ]: 'List',
    [ ifExpressionStart ]: 'IfExpression',
    [ quantifiedExpressionStart ]: 'QuantifiedExpression'
  };

  const contextEnds = {
    [ Context ]: 'Context',
    [ FunctionDefinition ]: 'FunctionDefinition',
    [ ForExpression ]: 'ForExpression',
    [ List ]: 'List',
    [ IfExpression ]: 'IfExpression',
    [ QuantifiedExpression ]: 'QuantifiedExpression',
    [ PathExpression ]: 'PathExpression',
    [ FunctionInvocation ]: 'FunctionInvocation',
    [ FilterExpression ]: 'FilterExpression',
    [ ArithmeticExpression ]: 'ArithmeticExpression'
  };

  /**
   * A simple producer that retrievs a value from
   * a given context. Used to lazily take things.
   */
  class ValueProducer {

    /**
     * @param { Function } fn
     */
    constructor(fn) {
      this.fn = fn;
    }

    get(variables) {
      return this.fn(variables);
    }

    /**
     * @param { Function } fn
     *
     * @return { ValueProducer }
     */
    static of(fn) {
      return new ValueProducer(fn);
    }

  }

  const dateTimeLiterals = {
    'date and time': 1,
    'date': 1,
    'time': 1,
    'duration': 1
  };

  const dateTimeIdentifiers = Object.keys(dateTimeLiterals);


  /**
   * A basic key-value store to hold context values.
   */
  class VariableContext {

    /**
     * Creates a new context from a JavaScript object.
     *
     * @param {any} [value]
     */
    constructor(value = {}) {

      /**
       * @protected
       */
      this.value = value;
    }

    /**
     * Return all defined keys of the context.
     *
     * @returns {Array<string>} the keys of the context
     */
    getKeys() {
      return Object.keys(this.value);
    }

    /**
     * Returns the value of the given key.
     *
     * If the value represents a context itself, it should be wrapped in a
     * context class.
     *
     * @param {String} key
     * @returns {VariableContext|ValueProducer|null}
     */
    get(key) {
      const result = this.value[key];

      const constructor = /** @type { typeof VariableContext } */ (this.constructor);

      if (constructor.isAtomic(result)) {
        return result;
      }

      return constructor.of(result);
    }

    /**
     * Creates a new context with the given key added.
     *
     * @param {String} key
     * @param {any} value
     *
     * @returns {VariableContext} new context with the given key added
     */
    set(key, value) {

      const constructor = /** @type { typeof VariableContext } */ (this.constructor);

      return constructor.of({
        ...this.value,
        [key]: value
      });
    }

    /**
     * Non-destructively merge another context into this one,
     * and return the result.
     *
     * @param {ContextValue} other
     *
     * @return {VariableContext}
     */
    merge(other) {
      const constructor = /** @type { typeof VariableContext } */ (this.constructor);

      return new constructor(
        constructor.__merge(this.value, other)
      );
    }

    /**
     * Wether the given value is atomic. Non-atomic values need to be wrapped in a
     * context Class.
     *
     * @param {any} value
     * @returns {Boolean}
     */
    static isAtomic(value) {
      return !value ||
            value instanceof this ||
            value instanceof ValueProducer ||
            typeof value !== 'object';
    }

    /**
     * Takes any number of Contexts and merges them into a single context.
     *
     * @param { ...VariableContext } contexts
     * @returns { VariableContext }
     */
    static of(...contexts) {
      return contexts.reduce((context, otherContext) => {
        return context.merge(otherContext);
      }, new this({}));
    }

    /**
     * Returns the raw representation of the given context.
     *
     * @param {VariableContext | any} context
     *
     * @return {any}
     */
    static __unwrap(context) {
      if (!context) {
        return {};
      }

      if (context instanceof this) {
        return context.value;
      }

      if (typeof context !== 'object') {
        return {};
      }

      return { ...context };
    }

    /**
     * Non-destructively merges two contexts (or their values)
     * with each other, returning the result.
     *
     * @param {ContextValue} context
     * @param {ContextValue} other
     *
     * @return {any}
     */
    static __merge(context, other) {

      return reduce(this.__unwrap(other), (merged, value, key) => {
        if (value instanceof ValueProducer) {

          // keep value producers in tact
          return {
            ...merged,
            [key]: value
          };
        }

        value = this.__unwrap(value);

        if (has$1(merged, key)) {
          value = this.__merge(this.__unwrap(merged[key]), value);
        }

        return {
          ...merged,
          [key]: value
        };
      }, this.__unwrap(context));
    }

  }

  class Variables {

    /**
     * @param { {
     *   name?: string,
     *   tokens?: string[],
     *   children?: Variables[],
     *   parent: Variables | null
     *   context: VariableContext,
     *   value?: any,
     *   raw?: any
     * } } options
     */
    constructor({
      name = 'Expressions',
      tokens = [],
      children = [],
      parent = null,
      context,
      value,
      raw
    }) {
      this.name = name;
      this.tokens = tokens;
      this.children = children;
      this.parent = parent;
      this.context = context;
      this.value = value;
      this.raw = raw;
    }

    enterScope(name) {

      const childScope = this.of({
        name,
        parent: this
      });

      LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);

      return childScope;
    }

    exitScope(str) {

      if (!this.parent) {
        LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));

        return this;
      }

      LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));

      return this.parent.pushChild(this);
    }

    token(part) {

      LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);

      return this.assign({
        tokens: [ ...this.tokens, part ]
      });
    }

    literal(value) {

      LOG_VARS && console.log('[%s] literal %o', this.path, value);

      return this.pushChild(this.of({
        name: 'Literal',
        value
      }));
    }

    /**
     * Return computed scope value
     *
     * @return {any}
     */
    computedValue() {
      for (let scope = this;;scope = last(scope.children)) {

        if (!scope) {
          return null;
        }

        if (scope.value) {
          return scope.value;
        }
      }
    }

    contextKeys() {
      return this.context.getKeys().map(normalizeContextKey);
    }

    get path() {
      return this.parent?.path?.concat(' > ', this.name) || this.name;
    }

    /**
     * Return value of variable.
     *
     * @param { string } variable
     * @return { any } value
     */
    get(variable) {

      const names = [ variable, variable && normalizeContextKey(variable) ];

      const contextKey = this.context.getKeys().find(
        key => names.includes(normalizeContextKey(key))
      );

      if (typeof contextKey === 'undefined') {
        return undefined;
      }

      const val = this.context.get(contextKey);

      if (val instanceof ValueProducer) {
        return val.get(this);
      } else {
        return val;
      }
    }

    resolveName() {

      const variable = this.tokens.join(' ');
      const tokens = [];

      const parentScope = this.assign({
        tokens
      });

      const variableScope = this.of({
        name: 'VariableName',
        parent: parentScope,
        value: this.get(variable),
        raw: variable
      });

      LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));

      return parentScope.pushChild(variableScope);
    }

    pushChild(child) {

      if (!child) {
        return this;
      }

      const parent = this.assign({
        children: [ ...this.children, child ]
      });

      child.parent = parent;

      return parent;
    }

    pushChildren(children) {

      /**
       * @type {Variables}
       */
      let parent = this;

      for (const child of children) {
        parent = parent.pushChild(child);
      }

      return parent;
    }

    declareName() {

      if (this.tokens.length === 0) {
        throw Error('no tokens to declare name');
      }

      const variableName = this.tokens.join(' ');

      LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);

      return this.assign({
        tokens: []
      }).pushChild(
        this.of({
          name: 'Name',
          value: variableName
        })
      );
    }

    define(name, value) {

      if (typeof name !== 'string') {
        LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);

        return this;
      }

      LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);

      const context = this.context.set(name, value);

      return this.assign({
        context
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    assign(options = {}) {

      return Variables.of({
        ...this,
        ...options
      });
    }

    /**
     * @param { Record<string, any> } [options]
     *
     * @return { Variables }
     */
    of(options = {}) {

      const defaultOptions = {
        context: this.context,
        parent: this.parent
      };

      return Variables.of({
        ...defaultOptions,
        ...options
      });
    }

    /**
     * @param { {
     *   name?: string,
     *   tokens?: string[],
     *   children?: Variables[],
     *   parent?: Variables | null
     *   context: VariableContext,
     *   value?: any,
     *   raw?: any
     * } } options
     *
     * @return {Variables}
     */
    static of(options) {

      const {
        name,
        tokens = [],
        children = [],
        parent = null,
        context,
        value,
        raw
      } = options;

      if (!context) {
        throw new Error('must provide <context>');
      }

      return new Variables({
        name,
        tokens: [ ...tokens ],
        children: [ ...children ],
        context,
        parent,
        value,
        raw
      });
    }

  }

  /**
   * @param { string } name
   *
   * @return { string } normalizedName
   */
  function normalizeContextKey(name) {
    return name.replace(/\s*([./\-'+]|\*\*?)\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
  }

  /**
   * Wrap children of variables under the given named child.
   *
   * @param { Variables } variables
   * @param { string } scopeName
   * @param { string } code
   * @return { Variables }
   */
  function wrap(variables, scopeName, code) {

    const parts = variables.children.filter(c => c.name !== scopeName);
    const children = variables.children.filter(c => c.name === scopeName);

    const namePart = parts[0];
    const valuePart = parts[Math.max(1, parts.length - 1)];

    const name = namePart?.computedValue();
    const value = valuePart?.computedValue() || null;

    return variables
      .assign({
        children
      })
      .enterScope(scopeName)
      .pushChildren(parts)
      .exitScope(code)
      .define(name, value);
  }

  /**
   * @param { ContextValue } [context]
   * @param { typeof VariableContext } [Context]
   *
   * @return { ContextTracker<Variables> }
   */
  function trackVariables(context = {}, Context = VariableContext) {

    const start = Variables.of({
      context: Context.of(context)
    });

    return new ContextTracker({
      start,
      reduce(variables, term, stack, input) {

        if (term === IfExpression) {
          const [ thenPart, elsePart ] = variables.children.slice(-2);

          variables = variables.assign({
            value: Context.of(
              thenPart?.computedValue(),
              elsePart?.computedValue()
            )
          });
        }

        if (term === List) {
          variables = variables.assign({
            value: Context.of(
              ...variables.children.map(
                c => c?.computedValue()
              )
            )
          });
        }

        if (term === FilterExpression) {
          const [ sourcePart, _ ] = variables.children.slice(-2);

          variables = variables.assign({
            value: sourcePart?.computedValue()
          });
        }

        if (term === FunctionInvocation) {

          const [
            name,
            ...args
          ] = variables.children;

          // preserve type information through `get value(context, key)` utility
          if (name?.raw === 'get value') {
            variables = getContextValue(variables, args);
          }
        }

        const start = contextStarts[term];

        if (start) {
          return variables.enterScope(start);
        }

        const prefixedStart = prefixedContextStarts[term];

        // pull <expression> into new <prefixedStart> context
        if (prefixedStart) {

          const {
            children: currentChildren,
            context: currentContext,
          } = variables;

          const children = currentChildren.slice(0, -1);
          const lastChild = last(currentChildren);

          let newContext = null;

          if (term === pathExpressionStart) {
            newContext = Context.of(lastChild?.computedValue());
          }

          if (term === filterExpressionStart) {
            newContext = Context.of(
              currentContext,
              lastChild?.computedValue()
            ).set('item', lastChild?.computedValue());
          }

          return variables
            .assign({ children })
            .enterScope(prefixedStart)
            .pushChild(lastChild)
            .assign({ context: newContext || currentContext });
        }

        // @ts-expect-error internal method
        const code = input.read(input.pos, stack.pos);

        const end = contextEnds[term];

        if (end) {
          return variables.exitScope(code);
        }

        if (term === ContextEntry) {
          const parts = variables.children.filter(c => c.name !== 'ContextEntry');

          const name = parts[0];
          const value = last(parts);

          return wrap(variables, 'ContextEntry', code).assign(
            {
              value: Context
                .of(variables.value)
                .set(name?.computedValue(), value?.computedValue())
            }
          );
        }

        if (
          term === ForInExpression ||
          term === QuantifiedInExpression
        ) {
          return wrap(variables, 'InExpression', code);
        }

        // define <partial> within ForExpression body
        if (term === forExpressionBodyStart) {

          return variables.define(
            'partial',
            ValueProducer.of(variables => {
              return last(variables.children)?.computedValue();
            })
          );
        }

        if (
          term === ParameterName
        ) {
          const name = last(variables.children).computedValue();

          // TODO: attach type information
          return variables.define(name, 1);
        }

        // pull <expression> into ArithmeticExpression child
        if (
          term === arithmeticPlusStart ||
          term === arithmeticTimesStart ||
          term === arithmeticExpStart
        ) {
          const children = variables.children.slice(0, -1);
          const lastChild = last(variables.children);

          return variables.assign({
            children
          }).enterScope('ArithmeticExpression').pushChild(lastChild);
        }

        if (term === arithmeticUnaryStart) {
          return variables.enterScope('ArithmeticExpression');
        }

        if (
          term === Identifier ||
          term === AdditionalIdentifier ||
          term === PropertyIdentifier
        ) {
          return variables.token(code);
        }

        if (
          term === StringLiteral
        ) {
          return variables.literal(code.replace(/^"|"$/g, ''));
        }

        if (term === BooleanLiteral) {
          return variables.literal(code === 'true' ? true : false);
        }

        if (term === NumericLiteral) {
          return variables.literal(parseFloat(code));
        }

        if (term === nil) {
          return variables.literal(null);
        }

        if (
          term === VariableName
        ) {
          return variables.resolveName();
        }

        if (
          term === Name$1 ||
          term === PropertyName
        ) {
          return variables.declareName();
        }

        if (
          term === expression0 ||
          term === PositiveUnaryTest
        ) {
          if (variables.tokens.length > 0) {
            throw new Error('uncleared name');
          }
        }

        if (term === expression0) {

          let parent = variables;

          while (parent.parent) {
            parent = parent.exitScope(code);
          }

          return parent;
        }

        return variables;
      }
    });
  }

  const variableTracker = trackVariables({});


  // helpers //////////////

  function getContextValue(variables, args) {

    if (!args.length) {
      return variables.assign({
        value: null
      });
    }

    if (args[0].name === 'Name') {
      args = extractNamedArgs(args, [ 'm', 'key' ]);
    }

    if (args.length !== 2) {
      return variables.assign({
        value: null
      });
    }

    const [
      context,
      key
    ] = args;

    const keyValue = key?.computedValue();
    const contextValue = context?.computedValue();

    if (
      (!contextValue || typeof contextValue !== 'object') || typeof keyValue !== 'string'
    ) {
      return variables.assign({
        value: null
      });
    }

    return variables.assign({
      value: [ normalizeContextKey(keyValue), keyValue ].reduce((value, keyValue) => {
        return contextValue.get(keyValue) || value;
      }, null)
    });
  }

  function extractNamedArgs(args, argNames) {

    const context = {};

    for (let i = 0; i < args.length; i += 2) {
      const [ name, value ] = args.slice(i, i + 2);

      context[name.value] = value;
    }

    return argNames.map(name => context[name]);
  }

  function last(arr) {
    return arr[arr.length - 1];
  }

  const feelHighlighting = styleTags({
    StringLiteral: tags$1.string,
    NumericLiteral: tags$1.number,
    BooleanLiteral: tags$1.bool,
    'AtLiteral!': tags$1.special(tags$1.string),
    CompareOp: tags$1.compareOperator,
    ArithOp: tags$1.arithmeticOperator,
    'for if then else some every satisfies between return': tags$1.controlKeyword,
    'in instance of and or': tags$1.operatorKeyword,
    function: tags$1.definitionKeyword,
    as: tags$1.keyword,
    'Type/...': tags$1.typeName,
    Wildcard: tags$1.special(tags$1.variableName),
    null: tags$1.null,
    LineComment: tags$1.lineComment,
    BlockComment: tags$1.blockComment,
    'VariableName! "?"': tags$1.variableName,
    'DateTimeConstructor! SpecialFunctionName!': tags$1.function(tags$1.special(tags$1.variableName)),
    'List Interval': tags$1.list,
    Context: tags$1.definition(tags$1.literal),
    'Name!': tags$1.definition(tags$1.variableName),
    'Key/Name! ContextEntryType/Name!': tags$1.definition(tags$1.propertyName),
    'PathExpression/VariableName!': tags$1.function(tags$1.propertyName),
    'FormalParameter/ParameterName!': tags$1.function(tags$1.definition(tags$1.variableName)),
    '( )': tags$1.paren,
    '[ ]': tags$1.squareBracket,
    '{ }': tags$1.brace,
    '.': tags$1.derefOperator,
    ', ;': tags$1.separator,
    '..': tags$1.punctuation
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const spec_identifier = {__proto__:null,for:10, in:32, return:36, if:40, then:42, else:44, some:48, every:50, satisfies:56, or:60, and:64, between:72, instance:86, of:89, days:101, time:103, duration:105, years:107, months:109, date:111, list:117, context:123, function:130, null:156, true:330, false:330, "?":170, external:186, not:211};
  const parser$2 = LRParser.deserialize({
    version: 14,
    states: "C|O`QYOOO`QYOOO$sQYOOOOQU'#Ce'#CeO$}QYO'#C`O&WQYO'#FQOOQQ'#Ff'#FfO&bQYO'#FfO`QYO'#DVOOQU'#En'#EnO(UQ^O'#D]OOQU'#D^'#D^OOQU'#D]'#D]OOQO'#Fn'#FnO*RQWO'#DvOOQQ'#D}'#D}OOQQ'#EO'#EOOOQQ'#EP'#EPO*WOWO'#ESO*RQWO'#EQOOQQ'#EQ'#EQOOQQ'#Ft'#FtOOQQ'#Fr'#FrOOQQ'#Fy'#FyOOQQ'#EU'#EUO`QYO'#EWOOQQ'#FS'#FSO*]Q^O'#FSO,SQYO'#EXO,ZQWO'#EYOOQP'#F}'#F}O,`QXO'#EaOOQQ'#Fz'#FzOOQQ'#FR'#FRQOQWOOOOQQ'#FT'#FTOOQQ'#F^'#F^O`QYO'#CoOOQQ'#F_'#F_O$}QYO'#CsO,kQYO'#DwOOQQ'#Fs'#FsO,pQYO'#EROOQO'#ER'#ERO`QYO'#EVO`QYO'#EUOOQO'#F{'#F{Q,xQWOOO,}QYO'#DRO-tQWO'#FbOOQO'#DT'#DTO.PQYO'#FfO.WQWOOO.}QYO'#CdO/[QYO'#FVOOQQ'#Cc'#CcO/aQYO'#FUOOQQ'#Cb'#CbO/iQYO,58zO`QYO,59iOOQQ'#Fc'#FcOOQQ'#Fd'#FdOOQQ'#Fe'#FeO`QYO,59qO`QYO,59qO`QYO,59qOOQQ'#Fl'#FlO/nQYO,5:^OOQQ'#Fm'#FmO`QYO,5:`O`QYO,59eO`QYO,59gO`QYO,59iO1jQYO,59iO1qQYO,59rOOQQ,5:i,5:iO1vQYO,59qOOQU-E8l-E8lO3jQYO'#FoOOQQ,5:b,5:bOOQQ,5:n,5:nOOQQ,5:l,5:lO3qQYO,5:rOOQQ,5;n,5;nO3{QYO,5:qO4YQWO,5:sO4_QYO,5:tOOQP'#Ee'#EeO5UQXO'#EdOOQO'#Ec'#EcO5]QWO'#EbO5bQWO'#GOO5jQWO,5:{O5oQYO,59ZO/[QYO'#FaOOQQ'#Cw'#CwO5vQYO'#F`OOQQ'#Cv'#CvO6OQYO,59_O6TQYO,5:cO6YQYO,5:mO3tQYO,5:qO6_QYO,5:pO`QYO'#EwQ,xQWOOO`QYO'#EmO7UQWO,5;|O`QYOOOOQR'#Cf'#CfOOQQ'#Ej'#EjO8OQYO,59OO`QYO,5;qOOQQ'#FY'#FYO$}QYO'#EkO8`QYO,5;pO`QYO1G.fOOQQ'#F]'#F]O9VQYO1G/TO;|QYO1G/]O<WQYO1G/]O<bQYO1G/]OOQQ1G/x1G/xO>UQYO1G/zO>]QYO1G/PO?fQYO1G/RO@oQYO1G/TO`QYO1G/TOOQQ1G/T1G/TOAVQYO1G/^OAtQ^O'#CdOCWQYO'#FqOOQO'#Dz'#DzOCbQWO'#DyOCgQWO'#FpOOQO'#Dx'#DxOOQO'#D{'#D{OCoQWO,5<ZOOQQ1G0^1G0^O`QYO1G0]O`QYO'#EsOCtQWO,5<]OOQQ1G0_1G0_ODPQWO'#E[OD[QWO'#F|OOQO'#EZ'#EZODdQWO1G0`OOQP'#Eu'#EuODiQXO,5;OO`QYO,5:|ODpQXO'#EvODxQWO,5<jOOQQ1G0g1G0gO`QYO1G.uO`QYO,5;{O$}QYO'#ElOEQQYO,5;zO`QYO1G.yOEYQYO1G/}OOQO1G0X1G0XOOQO,5;c,5;cOOQO-E8u-E8uOOQO,5;X,5;XOOQO-E8k-E8kOE_QWOOOOQQ-E8h-E8hOEdQYO'#CmOOQQ1G1]1G1]OOQQ,5;V,5;VOOQQ-E8i-E8iOEqQYO7+$QOOQQ7+%f7+%fO`QYO7+$oOFhQYO,5:rOFuQWO7+$oOFzQYO'#D[OOQQ'#DZ'#DZOHnQYO'#D_OHsQYO'#D_OHxQYO'#D_OH}Q`O'#DgOISQ`O'#DjOIXQ`O'#DnOOQQ7+$x7+$xO`QYO,5:eO$}QYO'#ErOI^QWO,5<[OOQQ1G1u1G1uOJdQYO7+%wOJqQYO,5;_OOQO-E8q-E8qOAVQYO,5:vO$}QYO'#EtOKOQWO,5<hOKWQYO7+%zOOQP-E8s-E8sOK_QYO1G0hOOQO,5;b,5;bOOQO-E8t-E8tOKiQYO7+$aOKpQYO1G1gOOQQ,5;W,5;WOOQQ-E8j-E8jOKzQYO7+$eOOQO7+%i7+%iO`QYO,59XOLqQYO<<HZOOQQ<<HZ<<HZO/nQYO'#EoOMzQYO,59vO! nQYO,59yO! sQYO,59yO! xQYO,59yO! }QYO,5:RO$}QYO,5:UO!!lQbO,5:YO!!sQYO1G0POOQO,5;^,5;^OOQO-E8p-E8pO!!}QYO<<IcOOQQ<<Ic<<IcOOQO1G0b1G0bOOQO,5;`,5;`OOQO-E8r-E8rO!%|QYO'#E^OOQQ<<If<<IfO`QYO<<IfO`QYO<<G{O!&sQYO1G.sOOQQ,5;Z,5;ZOOQQ-E8m-E8mO!&}QYO1G/eOOQQ1G/e1G/eO!'SQbO'#D]O!'eQ`O'#D[O!'pQ`O1G/mO!'uQWO'#DmO!'zQ`O'#FhOOQO'#Dl'#DlO!(SQ`O1G/pOOQO'#Dq'#DqO!(XQ`O'#FjOOQO'#Dp'#DpO!(aQ`O1G/tOOQQAN?QAN?QO!(fQYOAN=gOOQQ7+%P7+%PO!)]Q`O,59vOOQQ7+%X7+%XO! }QYO,5:XO$}QYO'#EpO!)hQ`O,5<SOOQQ7+%[7+%[O! }QYO'#EqO!)pQ`O,5<UO!)xQ`O7+%`OOQO1G/s1G/sOOQO,5;[,5;[OOQO-E8n-E8nOOQO,5;],5;]OOQO-E8o-E8oOAVQYO<<HzOOQQAN>fAN>fO/nQYO'#EoO! }QYO<<HzO!)}Q`O7+%`O!*SQ`O1G/tO!!lQbO,5:YO!*XQ`O'#Dn",
    stateData: "!*h~O#rOS#sOSPOSQOS~OTsOZVO[UOdtOhvOivOr}Os}OviO!T{O!U{O!VxO!XzO!c!OO!g|O!igO!pyO!wjO#SnO#nRO#oRO$ZZO$i_O$j`O$kaO$lbO~OTsO[UOdtOhvOivOr}Os}OviO!T{O!U{O!VxO!XzO!c!OO!g|O!igO!pyO!wjO#SnO#nRO#oRO$ZZO$i_O$j`O$kaO$lbO~OZ!TO#]!UO~P#SO#nRO#oRO~OZ!^O[!^O]!_O^!_O_!`O`!kOn!hOp!iOr!]Os!]Ot!jO{!lO!i!fO#z!dOv$bX~O#l#tX$s#tX~P%VO$i!mOT$YXZ$YX[$YXd$YXh$YXi$YXr$YXs$YXv$YX!T$YX!U$YX!V$YX!X$YX!c$YX!g$YX!i$YX!p$YX!w$YX#S$YX#n$YX#o$YX$Z$YX$j$YX$k$YX$l$YX~O#nRO#oROZ!PX[!PX]!PX^!PX_!PX`!PXn!PXp!PXr!PXs!PXt!PXv!PX{!PX!i!PX#l!PX#p!PX#z!PX$s!PX$O!PXx!PX#}!PX!g!PXe!PXb!PX#R!PXf!PXl!PX~Ov!pO~O$j`O~O#p!uOZ#vX[#vX]#vX^#vX_#vX`#vXn#vXp#vXr#vXs#vXt#vXv#vX{#vX!i#vX#l#vX#z#vX$s#vX$O#vXx#vX#}#vX!g#vXe#vXb#vX#R#vXf#vXl#vX~O!g$eP~P`Ov!xO~O#m!yO$j`O#R$rP~Op#VO~Op#WOv!uX~O$s#ZO~O#luX$OuX$suXxuX#}uX!guXeuXbuX#RuXfuXluX~P%VO$O#]O#l$UXx$UX~O#l#[X~P&bOv#_O~OZ#`O[#`O]#`O^#`O_#`O#nRO#oRO#z#`O#{#`O$]WX~O`WXxWX$OWX~P.]O`#dO~O$O#eOb#xX~Ob#hO~O#nRO#oRO$ZZO~OTsOZVO[UOdtOhvOivOr}Os}O!T{O!U{O!VxO!XzO!c!OO!g|O!igO!pyO!wjO#SnO#nRO#oRO$ZZO$i_O$j`O$kaO$lbO~Ov#rO~P/yO|#tO~O{!lO!i!fO#z!dOZya[ya]ya^ya_ya`yanyapyaryasyatyav$bX#lya$sya$Oyaxya#}ya!gyaeyabya#Ryafyalya~Ox$eP~P`Ox#}O#}$OO~P%VO#}$OO$O$PO!g$eX~P%VO!g$RO~O#nRO#oROx$pP~OZ#`O[#`O]#`O^#`O_#`O#m!yO#z#`O#{#`O~O$]#WX~P4jO$]$YO~O$O$ZO#R$rX~O#R$]O~Oe$^O~P%VO$O$`Ol$SX~Ol$bO~O!W$cO~O!T$dO~O#l!xa$s!xa$O!xax!xa#}!xa!g!xae!xab!xa#R!xaf!xal!xa~P%VO$O#]O#l$Uax$Ua~OZ#`O[#`O]#`O^#`O_#`O#nRO#oRO#z#`O#{#`O~O`Wa$]WaxWa$OWa~P7aO$O#eOb#xa~OZ!^O[!^O]!_O^!_O_!`O{!lO!i!fO#z!dOv$bX~O`qinqipqirqisqitqi#lqi$sqi$Oqixqi#}qi!gqieqibqi#Rqifqilqi~P8hO_!`O{!lO!i!fO#z!dOZyi[yi`yinyipyiryisyityiv$bX#lyi$syi$Oyixyi#}yi!gyieyibyi#Ryifyilyi~O]!_O^!_O~P:`O]yi^yi~P:`O{!lO!i!fO#z!dOZyi[yi]yi^yi_yi`yinyipyiryisyityiv$bX#lyi$syi$Oyixyi#}yi!gyieyibyi#Ryifyilyi~O!g$pO~P%VO`!kOp!iOr!]Os!]Ot!jOnmi#lmi$smi$Omixmi#}mi!gmiemibmi#Rmifmilmi~P8hO`!kOr!]Os!]Ot!jOnoipoi#loi$soi$Ooixoi#}oi!goieoiboi#Roifoiloi~P8hO`!kOn!hOp$qOr!]Os!]Ot!jO~P8hO!S$vO!V$wO!X$xO![$yO!_$zO!c${O#nRO#oRO$ZZO~OZ#bX[#bX]#bX^#bX_#bX`#bXn#bXp#bXr#bXs#bXt#bXv#bXx#bX{#bX!i#bX#n#bX#o#bX#p#bX#z#bX$O#bX~P.]O$O$POx$eX~P%VO$]$}O~O$O%OOx$dX~Ox%QO~O$O$PO!g$eax$ea~O$]%UOx#OX$O#OX~O$O%VOx$pX~Ox%XO~O$]#Wa~P4jO#m!yO$j`O~O$O$ZO#R$ra~O$O$`Ol$Sa~O!U%cO~OxrO~O#}%dObaX$OaX~P%VO#lSq$sSq$OSqxSq#}Sq!gSqeSqbSq#RSqfSqlSq~P%VOx#}O#}$OO$OuX~P%VOx%fO~O#z%gOZ!OX[!OX]!OX^!OX_!OX`!OXn!OXp!OXr!OXs!OXt!OXv!OX{!OX!i!OX#l!OX$s!OX$O!OXx!OX#}!OX!g!OXe!OXb!OX#R!OXf!OXl!OX~Op%iO~Op%jO~Op%kO~O!]%lO~O!]%mO~O!]%nO~O$O%OOx$da~OZ!^O[!^O]!_O^!_O_!`O`!kOn!hOp!iOr!]Os!]Ot!jO{!lO#z!dOv$bX~Ox%sO!g%sO!i%rO~PIfO!g#ga$O#gax#ga~P%VO$O%VOx$pa~O#P%yO~P`O#R#Ui$O#Ui~P%VOf%zO~P%VOl$Ti$O$Ti~P%VO#lgq$sgq$Ogqxgq#}gq!ggqegqbgq#Rgqfgqlgq~P%VO`qynqypqyrqysqytqy#lqy$sqy$Oqyxqy#}qy!gqyeqybqy#Rqyfqylqy~P8hO#z%gOZ!Oa[!Oa]!Oa^!Oa_!Oa`!Oan!Oap!Oar!Oas!Oat!Oav!Oa{!Oa!i!Oa#l!Oa$s!Oa$O!Oax!Oa#}!Oa!g!Oae!Oab!Oa#R!Oaf!Oal!Oa~O!T&OO~O!W&OO~O!T&PO~O!S$vO!V$wO!X$xO![$yO!_$zO!c&uO#nRO#oRO$ZZO~O!Y$^P~P! }Ox!mi$O!mi~P%VOT$aXZ$aX[$aX]!yy^!yy_!yy`!yyd$aXh$aXi$aXn!yyp!yyr$aXs$aXt!yyv$aX{!yy!T$aX!U$aX!V$aX!X$aX!c$aX!g$aX!i$aX!p$aX!w$aX#S$aX#l!yy#n$aX#o$aX#z!yy$Z$aX$i$aX$j$aX$k$aX$l$aX$s!yy$O!yyx!yy#}!yye!yyb!yy#R!yyf!yyl!yy~O#l#QX$s#QX$O#QXx#QX#}#QX!g#QXe#QXb#QX#R#QXf#QXl#QX~P%VObai$Oai~P%VO!U&_O~O#nRO#oRO!Y!PX#z!PX$O!PX~O#z&pO!Y!OX$O!OX~O!Y&aO~O$]&bO~O$O&cO!Y$[X~O!Y&eO~O$O&fO!Y$^X~O!Y&hO~O#lc!R$sc!R$Oc!Rxc!R#}c!R!gc!Rec!Rbc!R#Rc!Rfc!Rlc!R~P%VO#z&pO!Y!Oa$O!Oa~O$O&cO!Y$[a~O$O&fO!Y$^a~O$_&nO~O$_&qO~O!Y&rO~O!]&tO~O$Z~QP_^$i]#z~",
    goto: "E|$sPPPP$tP%m%p%v&Y'sPPPPPP'|P$tPPP$tPP(P(SP$tP$tP$tPPP(YP(eP$t$tPP(n)T)`*m)TPPPPPPP)TPP)TP+r+u)TP+{,R$tP$tP$t,Y-R-U-[-RP-d.]-d-d/]0UP$t0}$t1v1v2o2rP2xPP1v3O3U/X3YPP3bP3e3l3r3x4O5Z5e5k5q5w6O6U6[6bPPPPPPPP6h6q8x9q:j:mPP:qPP:w:z;s<l<o<s<x=g>V>vP?oP?rP?v@iA[BTBZB^$tBdBdPPPPC]8xDUD}EQEy!mjOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR![SQ!YSR$m#eS!WS#eS#Qw$`W#w!p!x%O%VT&T%m&c#WXOPQWYilu|}!]!a!b!c!e!g!h!i!j!k#Z#]#_#c#g#r#t$O$P$Y$^$_$b$q$}%U%X%d%g%l%n%y%z&Q&b&f&n&p&q&tb!VSw!x#e$`%O%V%m&cU#a!V#b#uR#u!pU#a!V#b#uT$W!z$XR$l#cR#UwQ#SwR%`$`U!RQ#_#rQ#s!kR$g#]QrQQ$i#_R$s#rQ$|#tQ%t%UQ&S%lU&X%n&f&tQ&i&bT&o&n&qc$u#t%U%l%n&b&f&n&q&t!lkOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zQ#m!eU$t#t%U&nS%|%g&p]&R%l%n&b&f&q&t#V[OPQWilu|}!]!a!b!c!e!g!h!i!j!k!p#Z#]#_#c#g#r#t$O$P$Y$^$_$b$q$}%U%X%d%g%l%n%y%z&b&f&n&p&q&tR&W%mQ&U%mR&j&cQ&[%nR&s&tS&Y%n&tR&l&f!m]OPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR#|!pQ#y!pR%p%OS#x!p%OT$S!x%V!meOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!leOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zQ!rbT!{o$Z!mcOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mdOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mhOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mpOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR$V!xQ$T!xR%u%VQ%x%XR&]%yQ!}oR%[$ZT!|o$ZS!zo$ZT$W!z$XRrQS#b!V#uR$j#bQ#f!YR$n#fQ$a#SR%a$aQ#^!RR$h#^!vYOPQWilu|}!]!a!b!c!e!g!h!i!j!k!p#Z#]#_#c#g#r#t$O$P$Y$^$_$b$q$}%U%X%d%g%y%z&nS!oY&Q_&Q%l%n&b&f&p&q&tQ%h$tS%}%h&`R&`&RQ&d&UR&k&dQ&g&YR&m&gQ%P#yR%q%PS$Q!v#vR%T$QQ%W$TR%v%WQ$X!zR%Y$XQ$[!}R%]$[Q#[!PR$f#[QrOQ!PPR$e#ZUTOP#ZW!QQ!k#]#_Q!nWQ!tiQ!vlQ#PuQ#X|Q#Y}Q#i!]Q#j!aQ#k!bQ#l!cQ#n!gQ#o!hQ#p!iQ#q!jQ#v!pQ$k#cQ$o#gQ$r#rQ%R$OQ%S$PQ%Z$YQ%^$^Q%_$_Q%b$bQ%e$qQ%o$}S%w%X%yQ%{%dR&^%z!mqOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mSOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR!ZST!XS#eQ#c!WR$_#QR#g![!muOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mwOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR#TwT#Rw$`V!SQ#_#r!X!aT!Q!t!v#P#X#Y#i#n#o#p#q#v$k$o$r%R%S%Z%^%_%b%e%o%w%{&^!Z!bT!Q!t!v#P#X#Y#i#j#n#o#p#q#v$k$o$r%R%S%Z%^%_%b%e%o%w%{&^!]!cT!Q!t!v#P#X#Y#i#j#k#n#o#p#q#v$k$o$r%R%S%Z%^%_%b%e%o%w%{&^!mWOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR&V%mT&Z%n&t!a!eT!Q!n!t!v#P#X#Y#i#j#k#l#n#o#p#q#v$k$o$r%R%S%Z%^%_%b%e%o%w%{&^!a!gT!Q!n!t!v#P#X#Y#i#j#k#l#n#o#p#q#v$k$o$r%R%S%Z%^%_%b%e%o%w%{&^!m^OPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zQ!q^R!scR#z!pQ!wlR#{!p!mfOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mlOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%z!mmOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR$U!x!moOPQWilu|}!]!a!b!c!g!h!i!j!k!p#Z#]#_#c#g#r$O$P$Y$^$_$b$q$}%X%d%y%zR#Oo",
    nodeNames: "⚠ LineComment BlockComment Expression ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression InstanceOfExpression instance of Type QualifiedName VariableName BacktickIdentifier SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier Expressions UnaryTests Wildcard not",
    maxTerm: 173,
    context: variableTracker,
    nodeProps: [
      ["group", -17,4,19,23,29,31,33,41,42,68,70,72,85,86,88,89,90,97,"Expr",47,"Expr Expr",-5,78,79,80,81,82,"Expr Literal"],
      ["closedBy", 38,")",71,"]",96,"}"],
      ["openedBy", 40,"(",69,"[",95,"{"]
    ],
    propSources: [feelHighlighting],
    skippedNodes: [0,1,2],
    repeatNodeCount: 14,
    tokenData: ".Z~RvXY#iYZ$^Z[#i]^$^pq#iqr$crs$nwx&fxy&kyz&pz{&u{|'S|}'X}!O'^!O!P'k!P!Q(u!Q![*p![!]+X!]!^+^!^!_+c!_!`$i!`!a+r!b!c+|!}#O,R#P#Q,W#Q#R&}#S#T,]#o#p.P#q#r.U$f$g#i#BY#BZ#i$IS$I_#i$I|$I}$^$I}$JO$^$JT$JU#i$KV$KW#i&FU&FV#i?HT?HU#i~#nY#r~XY#iZ[#ipq#i$f$g#i#BY#BZ#i$IS$I_#i$JT$JU#i$KV$KW#i&FU&FV#i?HT?HU#i~$cO#s~~$fP!_!`$i~$nOr~~$sW$j~OY$nZr$nrs%]s#O$n#O#P%b#P;'S$n;'S;=`&`<%lO$n~%bO$j~~%eRO;'S$n;'S;=`%n;=`O$n~%sX$j~OY$nZr$nrs%]s#O$n#O#P%b#P;'S$n;'S;=`&`;=`<%l$n<%lO$n~&cP;=`<%l$n~&kO#{~~&pOv~~&uOx~~&zP^~z{&}~'SO_~~'XO[~~'^O$O~R'cPZP!`!a'fQ'kO$_Q~'pQ#z~!O!P'v!Q!['{~'{O#}~~(QR$i~!Q!['{!g!h(Z#X#Y(Z~(^R{|(g}!O(g!Q![(m~(jP!Q![(m~(rP$i~!Q![(m~(zQ]~z{)Q!P!Q*X~)TTOz)Qz{)d{;'S)Q;'S;=`*R<%lO)Q~)gVOz)Qz{)d{!P)Q!P!Q)|!Q;'S)Q;'S;=`*R<%lO)Q~*ROQ~~*UP;=`<%l)Q~*^SP~OY*XZ;'S*X;'S;=`*j<%lO*X~*mP;=`<%l*X~*uS$i~!O!P+R!Q![*p!g!h(Z#X#Y(Z~+UP!Q!['{~+^O$]~~+cO$s~R+jP!]QsP!_!`+mP+rOsPR+yP!YQsP!_!`+m~,RO$l~~,WO!i~~,]O!g~~,`WOY,]Z#O,]#O#P,x#P#S,]#S#T-t#T;'S,];'S;=`-y<%lO,]~,{RO;'S,];'S;=`-U;=`O,]~-XXOY,]Z#O,]#O#P,x#P#S,]#S#T-t#T;'S,];'S;=`-y;=`<%l,]<%lO,]~-yO$Z~~-|P;=`<%l,]~.UO#S~~.ZO#R~",
    tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
    topRules: {"Expression":[0,3],"Expressions":[1,102],"UnaryTests":[2,103]},
    dialects: {camunda: 2544},
    dynamicPrecedences: {"31":-1,"68":1,"72":-1,"74":-1},
    specialized: [{term: 122, get: (value) => spec_identifier[value] || -1}],
    tokenPrec: 2546
  });

  // These are filled with ranges (rangeFrom[i] up to but not including
  // rangeTo[i]) of code points that count as extending characters.
  let rangeFrom = [], rangeTo = []

  ;(() => {
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    for (let i = 0, n = 0; i < numbers.length; i++)
      (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
  })();

  function isExtendingChar(code) {
    if (code < 768) return false
    for (let from = 0, to = rangeFrom.length;;) {
      let mid = (from + to) >> 1;
      if (code < rangeFrom[mid]) to = mid;
      else if (code >= rangeTo[mid]) from = mid + 1;
      else return true
      if (from == to) return false
    }
  }

  function isRegionalIndicator(code) {
    return code >= 0x1F1E6 && code <= 0x1F1FF
  }

  const ZWJ = 0x200d;

  function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
  }

  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length) return pos
    // If pos is in the middle of a surrogate pair, move to its start
    if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
    let prev = codePointAt$1(str, pos);
    pos += codePointSize$1(prev);
    while (pos < str.length) {
      let next = codePointAt$1(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize$1(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
        if (countBefore % 2 == 0) break
        else pos += 2;
      } else {
        break
      }
    }
    return pos
  }

  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos) return found
      pos--;
    }
    return 0
  }

  function codePointAt$1(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow$1(code1)) return code0
    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
  }

  function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
  function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
  function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

  /**
  The data structure for documents. @nonabstract
  */
  class Text {
      /**
      Get the line description around the given position.
      */
      lineAt(pos) {
          if (pos < 0 || pos > this.length)
              throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n) {
          if (n < 1 || n > this.lines)
              throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
          return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(0, from, parts, 2 /* Open.To */);
          if (text.length)
              text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
          this.decompose(to, this.length, parts, 1 /* Open.From */);
          return TextNode.from(parts, this.length - (to - from) + text.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
          return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from, to = this.length) {
          [from, to] = clip(this, from, to);
          let parts = [];
          this.decompose(from, to, parts, 0);
          return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
          if (other == this)
              return true;
          if (other.length != this.length || other.lines != this.lines)
              return false;
          let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
          let a = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start, pos = start;;) {
              a.next(skip);
              b.next(skip);
              skip = 0;
              if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                  return false;
              pos += a.value.length;
              if (a.done || pos >= end)
                  return true;
          }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) { return new RawTextCursor(this, dir); }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from, to) {
          let inner;
          if (from == null) {
              inner = this.iter();
          }
          else {
              if (to == null)
                  to = this.lines + 1;
              let start = this.line(from).from;
              inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
      toString() { return this.sliceString(0); }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
      }
      /**
      @internal
      */
      constructor() { }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text) {
          if (text.length == 0)
              throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
              return Text.empty;
          return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
      }
  }
  // Leaves store an array of line strings. There are always line breaks
  // between these strings. Leaves are limited in size and have to be
  // contained in TextNode instances for bigger documents.
  class TextLeaf extends Text {
      constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
      }
      get lines() { return this.text.length; }
      get children() { return null; }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let string = this.text[i], end = offset + string.length;
              if ((isLine ? line : end) >= target)
                  return new Line$1(offset, end, line, string);
              offset = end + 1;
              line++;
          }
      }
      decompose(from, to, target, open) {
          let text = from <= 0 && to >= this.length ? this
              : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
          if (open & 1 /* Open.From */) {
              let prev = target.pop();
              let joined = appendText(text.text, prev.text.slice(), 0, text.length);
              if (joined.length <= 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(joined, prev.length + text.length));
              }
              else {
                  let mid = joined.length >> 1;
                  target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
              }
          }
          else {
              target.push(text);
          }
      }
      replace(from, to, text) {
          if (!(text instanceof TextLeaf))
              return super.replace(from, to, text);
          [from, to] = clip(this, from, to);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
          let newLen = this.length + text.length - (to - from);
          if (lines.length <= 32 /* Tree.Branch */)
              return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
              let line = this.text[i], end = pos + line.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += line.slice(Math.max(0, from - pos), to - pos);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let line of this.text)
              target.push(line);
      }
      scanIdentical() { return 0; }
      static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
              part.push(line);
              len += line.length + 1;
              if (part.length == 32 /* Tree.Branch */) {
                  target.push(new TextLeaf(part, len));
                  part = [];
                  len = -1;
              }
          }
          if (len > -1)
              target.push(new TextLeaf(part, len));
          return target;
      }
  }
  // Nodes provide the tree structure of the `Text` type. They store a
  // number of other nodes or leaves, taking care to balance themselves
  // on changes. There are implied line breaks _between_ the children of
  // a node (but not before the first or after the last child).
  class TextNode extends Text {
      constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
              this.lines += child.lines;
      }
      lineInner(target, isLine, line, offset) {
          for (let i = 0;; i++) {
              let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
              if ((isLine ? endLine : end) >= target)
                  return child.lineInner(target, isLine, line, offset);
              offset = end + 1;
              line = endLine + 1;
          }
      }
      decompose(from, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (from <= end && to >= pos) {
                  let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                  if (pos >= from && end <= to && !childOpen)
                      target.push(child);
                  else
                      child.decompose(from - pos, to - pos, target, childOpen);
              }
              pos = end + 1;
          }
      }
      replace(from, to, text) {
          [from, to] = clip(this, from, to);
          if (text.lines < this.lines)
              for (let i = 0, pos = 0; i < this.children.length; i++) {
                  let child = this.children[i], end = pos + child.length;
                  // Fast path: if the change only affects one child and the
                  // child's size remains in the acceptable range, only update
                  // that child
                  if (from >= pos && to <= end) {
                      let updated = child.replace(from - pos, to - pos, text);
                      let totalLines = this.lines - child.lines + updated.lines;
                      if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                          updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                          let copy = this.children.slice();
                          copy[i] = updated;
                          return new TextNode(copy, this.length - (to - from) + text.length);
                      }
                      return super.replace(pos, end, updated);
                  }
                  pos = end + 1;
              }
          return super.replace(from, to, text);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
          [from, to] = clip(this, from, to);
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos > from && i)
                  result += lineSep;
              if (from < end && to > pos)
                  result += child.sliceString(from - pos, to - pos, lineSep);
              pos = end + 1;
          }
          return result;
      }
      flatten(target) {
          for (let child of this.children)
              child.flatten(target);
      }
      scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
              return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
              : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (;; iA += dir, iB += dir) {
              if (iA == eA || iB == eB)
                  return length;
              let chA = this.children[iA], chB = other.children[iB];
              if (chA != chB)
                  return length + chA.scanIdentical(chB, dir);
              length += chA.length + 1;
          }
      }
      static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
          let lines = 0;
          for (let ch of children)
              lines += ch.lines;
          if (lines < 32 /* Tree.Branch */) {
              let flat = [];
              for (let ch of children)
                  ch.flatten(flat);
              return new TextLeaf(flat, length);
          }
          let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add(child) {
              let last;
              if (child.lines > maxChunk && child instanceof TextNode) {
                  for (let node of child.children)
                      add(node);
              }
              else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                  flush();
                  chunked.push(child);
              }
              else if (child instanceof TextLeaf && currentLines &&
                  (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                  child.lines + last.lines <= 32 /* Tree.Branch */) {
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
              }
              else {
                  if (currentLines + child.lines > chunk)
                      flush();
                  currentLines += child.lines;
                  currentLen += child.length + 1;
                  currentChunk.push(child);
              }
          }
          function flush() {
              if (currentLines == 0)
                  return;
              chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
              currentLen = -1;
              currentLines = currentChunk.length = 0;
          }
          for (let child of children)
              add(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
  }
  Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
  function textLength(text) {
      let length = -1;
      for (let line of text)
          length += line.length + 1;
      return length;
  }
  function appendText(text, target, from = 0, to = 1e9) {
      for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
          let line = text[i], end = pos + line.length;
          if (end >= from) {
              if (end > to)
                  line = line.slice(0, to - pos);
              if (pos < from)
                  line = line.slice(from - pos);
              if (first) {
                  target[target.length - 1] += line;
                  first = false;
              }
              else
                  target.push(line);
          }
          pos = end + 1;
      }
      return target;
  }
  function sliceText(text, from, to) {
      return appendText(text, [""], from, to);
  }
  class RawTextCursor {
      constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
      }
      nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (;;) {
              let last = this.nodes.length - 1;
              let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
              let size = top instanceof TextLeaf ? top.text.length : top.children.length;
              if (offset == (dir > 0 ? size : 0)) {
                  if (last == 0) {
                      this.done = true;
                      this.value = "";
                      return this;
                  }
                  if (dir > 0)
                      this.offsets[last - 1]++;
                  this.nodes.pop();
                  this.offsets.pop();
              }
              else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                  this.offsets[last] += dir;
                  if (skip == 0) {
                      this.lineBreak = true;
                      this.value = "\n";
                      return this;
                  }
                  skip--;
              }
              else if (top instanceof TextLeaf) {
                  // Move to the next string
                  let next = top.text[offset + (dir < 0 ? -1 : 0)];
                  this.offsets[last] += dir;
                  if (next.length > Math.max(0, skip)) {
                      this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                      return this;
                  }
                  skip -= next.length;
              }
              else {
                  let next = top.children[offset + (dir < 0 ? -1 : 0)];
                  if (skip > next.length) {
                      skip -= next.length;
                      this.offsets[last] += dir;
                  }
                  else {
                      if (dir < 0)
                          this.offsets[last]--;
                      this.nodes.push(next);
                      this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                  }
              }
          }
      }
      next(skip = 0) {
          if (skip < 0) {
              this.nextInner(-skip, (-this.dir));
              skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
      }
  }
  class PartialTextCursor {
      constructor(text, start, end) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
      }
      nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
              this.value = "";
              this.done = true;
              return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
              skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
      }
      next(skip = 0) {
          if (skip < 0)
              skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
              skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
  }
  class LineCursor {
      constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
      }
      next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done && this.afterBreak) {
              this.value = "";
              this.afterBreak = false;
          }
          else if (done) {
              this.done = true;
              this.value = "";
          }
          else if (lineBreak) {
              if (this.afterBreak) {
                  this.value = "";
              }
              else {
                  this.afterBreak = true;
                  this.next();
              }
          }
          else {
              this.value = value;
              this.afterBreak = false;
          }
          return this;
      }
      get lineBreak() { return false; }
  }
  if (typeof Symbol != "undefined") {
      Text.prototype[Symbol.iterator] = function () { return this.iter(); };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
          LineCursor.prototype[Symbol.iterator] = function () { return this; };
  }
  /**
  This type describes a line in the document. It is created
  on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
  */
  let Line$1 = class Line {
      /**
      @internal
      */
      constructor(
      /**
      The position of the start of the line.
      */
      from, 
      /**
      The position at the end of the line (_before_ the line break,
      or at the end of document for the last line).
      */
      to, 
      /**
      This line's line number (1-based).
      */
      number, 
      /**
      The line's content.
      */
      text) {
          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() { return this.to - this.from; }
  };
  function clip(text, from, to) {
      from = Math.max(0, Math.min(text.length, from));
      return [from, Math.max(from, Math.min(text.length, to))];
  }

  /**
  Returns a next grapheme cluster break _after_ (not equal to)
  `pos`, if `forward` is true, or before otherwise. Returns `pos`
  itself if no further cluster break is available in the string.
  Moves across surrogate pairs, extending characters (when
  `includeExtending` is true), characters joined with zero-width
  joiners, and flag emoji.
  */
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
      return findClusterBreak$1(str, pos, forward, includeExtending);
  }
  function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
  function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
  /**
  Find the code point at the given position in a string (like the
  [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
  string method).
  */
  function codePointAt(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh(code0) || pos + 1 == str.length)
          return code0;
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow(code1))
          return code0;
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
  }
  /**
  Given a Unicode codepoint, return the JavaScript string that
  respresents it (like
  [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
  */
  function fromCodePoint(code) {
      if (code <= 0xffff)
          return String.fromCharCode(code);
      code -= 0x10000;
      return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
  }
  /**
  The amount of positions a character takes up in a JavaScript string.
  */
  function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

  const DefaultSplit = /\r\n?|\n/;
  /**
  Distinguishes different ways in which positions can be mapped.
  */
  var MapMode = /*@__PURE__*/(function (MapMode) {
      /**
      Map a position to a valid new position, even when its context
      was deleted.
      */
      MapMode[MapMode["Simple"] = 0] = "Simple";
      /**
      Return null if deletion happens across the position.
      */
      MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
      /**
      Return null if the character _before_ the position is deleted.
      */
      MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
      /**
      Return null if the character _after_ the position is deleted.
      */
      MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode})(MapMode || (MapMode = {}));
  /**
  A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
  that doesn't store the inserted text. As such, it can't be
  applied, but is cheaper to store and manipulate.
  */
  class ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      sections) {
          this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
              result += this.sections[i];
          return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
              let ins = this.sections[i + 1];
              result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0) {
                  f(posA, posB, len);
                  posB += len;
              }
              else {
                  posB += ins;
              }
              posA += len;
          }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              if (ins < 0)
                  sections.push(len, ins);
              else
                  sections.push(ins, len);
          }
          return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
      mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
      mapPos(pos, assoc = -1, mode = MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
              if (ins < 0) {
                  if (endA > pos)
                      return posB + (pos - posA);
                  posB += len;
              }
              else {
                  if (mode != MapMode.Simple && endA >= pos &&
                      (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                          mode == MapMode.TrackBefore && posA < pos ||
                          mode == MapMode.TrackAfter && endA > pos))
                      return null;
                  if (endA > pos || endA == pos && assoc < 0 && !len)
                      return pos == posA || assoc < 0 ? posB : posB + ins;
                  posB += ins;
              }
              posA = endA;
          }
          if (pos > posA)
              throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from, to = from) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
              let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
              if (ins >= 0 && pos <= to && end >= from)
                  return pos < from && end > to ? "cover" : true;
              pos = end;
          }
          return false;
      }
      /**
      @internal
      */
      toString() {
          let result = "";
          for (let i = 0; i < this.sections.length;) {
              let len = this.sections[i++], ins = this.sections[i++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() { return this.sections; }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
              throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json);
      }
      /**
      @internal
      */
      static create(sections) { return new ChangeDesc(sections); }
  }
  /**
  A change set represents a group of modifications to a document. It
  stores the document length, and can only be applied to documents
  with exactly that length.
  */
  class ChangeSet extends ChangeDesc {
      constructor(sections, 
      /**
      @internal
      */
      inserted) {
          super(sections);
          this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc) {
          if (this.length != doc.length)
              throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
          return doc;
      }
      mapDesc(other, before = false) { return mapSet(this, other, before, true); }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
              let len = sections[i], ins = sections[i + 1];
              if (ins >= 0) {
                  sections[i] = ins;
                  sections[i + 1] = len;
                  let index = i >> 1;
                  while (inserted.length < index)
                      inserted.push(Text.empty);
                  inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
              }
              pos += len;
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() { return ChangeDesc.create(this.sections); }
      /**
      @internal
      */
      filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done: for (let i = 0, pos = 0;;) {
              let next = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next || pos == next && iter.len == 0) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, next - pos);
                  addSection(filteredSections, len, -1);
                  let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                  addSection(resultSections, len, ins);
                  if (ins > 0)
                      addInsert(resultInserted, resultSections, iter.text);
                  iter.forward(len);
                  pos += len;
              }
              let end = ranges[i++];
              while (pos < end) {
                  if (iter.done)
                      break done;
                  let len = Math.min(iter.len, end - pos);
                  addSection(resultSections, len, -1);
                  addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                  iter.forward(len);
                  pos += len;
              }
          }
          return { changes: new ChangeSet(resultSections, resultInserted),
              filtered: ChangeDesc.create(filteredSections) };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
              let len = this.sections[i], ins = this.sections[i + 1];
              if (ins < 0)
                  parts.push(len);
              else if (ins == 0)
                  parts.push([len]);
              else
                  parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
              if (!force && !sections.length)
                  return;
              if (pos < length)
                  addSection(sections, length - pos, -1);
              let set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
          }
          function process(spec) {
              if (Array.isArray(spec)) {
                  for (let sub of spec)
                      process(sub);
              }
              else if (spec instanceof ChangeSet) {
                  if (spec.length != length)
                      throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                  flush();
                  total = total ? total.compose(spec.map(total)) : spec;
              }
              else {
                  let { from, to = from, insert } = spec;
                  if (from > to || from < 0 || to > length)
                      throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                  let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                  let insLen = insText.length;
                  if (from == to && insLen == 0)
                      return;
                  if (from < pos)
                      flush();
                  if (from > pos)
                      addSection(sections, from - pos, -1);
                  addSection(sections, to - from, insLen);
                  addInsert(inserted, sections, insText);
                  pos = to;
              }
          }
          process(changes);
          flush(!total);
          return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json) {
          if (!Array.isArray(json))
              throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json.length; i++) {
              let part = json[i];
              if (typeof part == "number") {
                  sections.push(part, -1);
              }
              else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                  throw new RangeError("Invalid JSON representation of ChangeSet");
              }
              else if (part.length == 1) {
                  sections.push(part[0], 0);
              }
              else {
                  while (inserted.length < i)
                      inserted.push(Text.empty);
                  inserted[i] = Text.of(part.slice(1));
                  sections.push(part[0], inserted[i].length);
              }
          }
          return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
          return new ChangeSet(sections, inserted);
      }
  }
  function addSection(sections, len, ins, forceJoin = false) {
      if (len == 0 && ins <= 0)
          return;
      let last = sections.length - 2;
      if (last >= 0 && ins <= 0 && ins == sections[last + 1])
          sections[last] += len;
      else if (last >= 0 && len == 0 && sections[last] == 0)
          sections[last + 1] += ins;
      else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
      }
      else
          sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
      if (value.length == 0)
          return;
      let index = (sections.length - 2) >> 1;
      if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
      }
      else {
          while (values.length < index)
              values.push(Text.empty);
          values.push(value);
      }
  }
  function iterChanges(desc, f, individual) {
      let inserted = desc.inserted;
      for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
          let len = desc.sections[i++], ins = desc.sections[i++];
          if (ins < 0) {
              posA += len;
              posB += len;
          }
          else {
              let endA = posA, endB = posB, text = Text.empty;
              for (;;) {
                  endA += len;
                  endB += ins;
                  if (ins && inserted)
                      text = text.append(inserted[(i - 2) >> 1]);
                  if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                      break;
                  len = desc.sections[i++];
                  ins = desc.sections[i++];
              }
              f(posA, endA, posB, endB, text);
              posA = endA;
              posB = endB;
          }
      }
  }
  function mapSet(setA, setB, before, mkSet = false) {
      // Produce a copy of setA that applies to the document after setB
      // has been applied (assuming both start at the same document).
      let sections = [], insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      // Iterate over both sets in parallel. inserted tracks, for changes
      // in A that have to be processed piece-by-piece, whether their
      // content has been inserted already, and refers to the section
      // index.
      for (let inserted = -1;;) {
          if (a.done && b.len || b.done && a.len) {
              throw new Error("Mismatched change set lengths");
          }
          else if (a.ins == -1 && b.ins == -1) {
              // Move across ranges skipped by both sets.
              let len = Math.min(a.len, b.len);
              addSection(sections, len, -1);
              a.forward(len);
              b.forward(len);
          }
          else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
              // If there's a change in B that comes before the next change in
              // A (ordered by start pos, then len, then before flag), skip
              // that (and process any changes in A it covers).
              let len = b.len;
              addSection(sections, b.ins, -1);
              while (len) {
                  let piece = Math.min(a.len, len);
                  if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                      addSection(sections, 0, a.ins);
                      if (insert)
                          addInsert(insert, sections, a.text);
                      inserted = a.i;
                  }
                  a.forward(piece);
                  len -= piece;
              }
              b.next();
          }
          else if (a.ins >= 0) {
              // Process the part of a change in A up to the start of the next
              // non-deletion change in B (if overlapping).
              let len = 0, left = a.len;
              while (left) {
                  if (b.ins == -1) {
                      let piece = Math.min(left, b.len);
                      len += piece;
                      left -= piece;
                      b.forward(piece);
                  }
                  else if (b.ins == 0 && b.len < left) {
                      left -= b.len;
                      b.next();
                  }
                  else {
                      break;
                  }
              }
              addSection(sections, len, inserted < a.i ? a.ins : 0);
              if (insert && inserted < a.i)
                  addInsert(insert, sections, a.text);
              inserted = a.i;
              a.forward(a.len - left);
          }
          else if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else {
              throw new Error("Mismatched change set lengths");
          }
      }
  }
  function composeSets(setA, setB, mkSet = false) {
      let sections = [];
      let insert = mkSet ? [] : null;
      let a = new SectionIter(setA), b = new SectionIter(setB);
      for (let open = false;;) {
          if (a.done && b.done) {
              return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
          }
          else if (a.ins == 0) { // Deletion in A
              addSection(sections, a.len, 0, open);
              a.next();
          }
          else if (b.len == 0 && !b.done) { // Insertion in B
              addSection(sections, 0, b.ins, open);
              if (insert)
                  addInsert(insert, sections, b.text);
              b.next();
          }
          else if (a.done || b.done) {
              throw new Error("Mismatched change set lengths");
          }
          else {
              let len = Math.min(a.len2, b.len), sectionLen = sections.length;
              if (a.ins == -1) {
                  let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                  addSection(sections, len, insB, open);
                  if (insert && insB)
                      addInsert(insert, sections, b.text);
              }
              else if (b.ins == -1) {
                  addSection(sections, a.off ? 0 : a.len, len, open);
                  if (insert)
                      addInsert(insert, sections, a.textBit(len));
              }
              else {
                  addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                  if (insert && !b.off)
                      addInsert(insert, sections, b.text);
              }
              open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
              a.forward2(len);
              b.forward(len);
          }
      }
  }
  class SectionIter {
      constructor(set) {
          this.set = set;
          this.i = 0;
          this.next();
      }
      next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
          }
          else {
              this.len = 0;
              this.ins = -2;
          }
          this.off = 0;
      }
      get done() { return this.ins == -2; }
      get len2() { return this.ins < 0 ? this.len : this.ins; }
      get text() {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length ? Text.empty : inserted[index];
      }
      textBit(len) {
          let { inserted } = this.set, index = (this.i - 2) >> 1;
          return index >= inserted.length && !len ? Text.empty
              : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
      }
      forward(len) {
          if (len == this.len)
              this.next();
          else {
              this.len -= len;
              this.off += len;
          }
      }
      forward2(len) {
          if (this.ins == -1)
              this.forward(len);
          else if (len == this.ins)
              this.next();
          else {
              this.ins -= len;
              this.off += len;
          }
      }
  }

  /**
  A single selection range. When
  [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
  is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
  multiple ranges. By default, selections hold exactly one range.
  */
  class SelectionRange {
      constructor(
      /**
      The lower boundary of the range.
      */
      from, 
      /**
      The upper boundary of the range.
      */
      to, flags) {
          this.from = from;
          this.to = to;
          this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() { return this.from == this.to; }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
          let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
          return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
          let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
          return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
          let from, to;
          if (this.empty) {
              from = to = change.mapPos(this.from, assoc);
          }
          else {
              from = change.mapPos(this.from, 1);
              to = change.mapPos(this.to, -1);
          }
          return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from, to = from) {
          if (from <= this.anchor && to >= this.anchor)
              return EditorSelection.range(from, to);
          let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
          return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other, includeAssoc = false) {
          return this.anchor == other.anchor && this.head == other.head &&
              (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() { return { anchor: this.anchor, head: this.head }; }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json) {
          if (!json || typeof json.anchor != "number" || typeof json.head != "number")
              throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
      static create(from, to, flags) {
          return new SelectionRange(from, to, flags);
      }
  }
  /**
  An editor selection holds one or more selection ranges.
  */
  class EditorSelection {
      constructor(
      /**
      The ranges in the selection, sorted by position. Ranges cannot
      overlap (but they may touch, if they aren't empty).
      */
      ranges, 
      /**
      The index of the _main_ range in the selection (which is
      usually the range that was added last).
      */
      mainIndex) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
          if (change.empty)
              return this;
          return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
      eq(other, includeAssoc = false) {
          if (this.ranges.length != other.ranges.length ||
              this.mainIndex != other.mainIndex)
              return false;
          for (let i = 0; i < this.ranges.length; i++)
              if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                  return false;
          return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() { return this.ranges[this.mainIndex]; }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
          return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json) {
          if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
              throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
              throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
              let range = ranges[i];
              if (range.empty ? range.from <= pos : range.from < pos)
                  return EditorSelection.normalized(ranges.slice(), mainIndex);
              pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
              ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn, bidiLevel) {
          let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
              (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
          return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
              : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
          let main = ranges[mainIndex];
          ranges.sort((a, b) => a.from - b.from);
          mainIndex = ranges.indexOf(main);
          for (let i = 1; i < ranges.length; i++) {
              let range = ranges[i], prev = ranges[i - 1];
              if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                  let from = prev.from, to = Math.max(range.to, prev.to);
                  if (i <= mainIndex)
                      mainIndex--;
                  ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
              }
          }
          return new EditorSelection(ranges, mainIndex);
      }
  }
  function checkSelection(selection, docLength) {
      for (let range of selection.ranges)
          if (range.to > docLength)
              throw new RangeError("Selection points outside of document");
  }

  let nextID = 0;
  /**
  A facet is a labeled value that is associated with an editor
  state. It takes inputs from any number of extensions, and combines
  those into a single output value.

  Examples of uses of facets are the [tab
  size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
  attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
  listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

  Note that `Facet` instances can be used anywhere where
  [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
  */
  class Facet {
      constructor(
      /**
      @internal
      */
      combine, 
      /**
      @internal
      */
      compareInput, 
      /**
      @internal
      */
      compare, isStatic, enables) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          /**
          @internal
          */
          this.id = nextID++;
          this.default = combine([]);
          this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Returns a facet reader for this facet, which can be used to
      [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
      */
      get reader() { return this; }
      /**
      Define a new facet.
      */
      static define(config = {}) {
          return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
          return new FacetProvider([], this, 0 /* Provider.Static */, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get) {
          if (this.isStatic)
              throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
      }
      from(field, get) {
          if (!get)
              get = x => x;
          return this.compute([field], state => get(state.field(field)));
      }
  }
  function sameArray(a, b) {
      return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
  }
  class FacetProvider {
      constructor(dependencies, facet, type, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
      }
      dynamicSlot(addresses) {
          var _a;
          let getter = this.value;
          let compare = this.facet.compareInput;
          let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
              if (dep == "doc")
                  depDoc = true;
              else if (dep == "selection")
                  depSel = true;
              else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                  depAddrs.push(addresses[dep.id]);
          }
          return {
              create(state) {
                  state.values[idx] = getter(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update(state, tr) {
                  if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                      let newVal = getter(state);
                      if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                          state.values[idx] = newVal;
                          return 1 /* SlotStatus.Changed */;
                      }
                  }
                  return 0;
              },
              reconfigure: (state, oldState) => {
                  let newVal, oldAddr = oldState.config.address[id];
                  if (oldAddr != null) {
                      let oldVal = getAddr(oldState, oldAddr);
                      if (this.dependencies.every(dep => {
                          return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                              dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                      }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                          state.values[idx] = oldVal;
                          return 0;
                      }
                  }
                  else {
                      newVal = getter(state);
                  }
                  state.values[idx] = newVal;
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
  }
  function compareArray(a, b, compare) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!compare(a[i], b[i]))
              return false;
      return true;
  }
  function ensureAll(state, addrs) {
      let changed = false;
      for (let addr of addrs)
          if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
              changed = true;
      return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
      let providerAddrs = providers.map(p => addresses[p.id]);
      let providerTypes = providers.map(p => p.type);
      let dynamic = providerAddrs.filter(p => !(p & 1));
      let idx = addresses[facet.id] >> 1;
      function get(state) {
          let values = [];
          for (let i = 0; i < providerAddrs.length; i++) {
              let value = getAddr(state, providerAddrs[i]);
              if (providerTypes[i] == 2 /* Provider.Multi */)
                  for (let val of value)
                      values.push(val);
              else
                  values.push(value);
          }
          return facet.combine(values);
      }
      return {
          create(state) {
              for (let addr of providerAddrs)
                  ensureAddr(state, addr);
              state.values[idx] = get(state);
              return 1 /* SlotStatus.Changed */;
          },
          update(state, tr) {
              if (!ensureAll(state, dynamic))
                  return 0;
              let value = get(state);
              if (facet.compare(value, state.values[idx]))
                  return 0;
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          },
          reconfigure(state, oldState) {
              let depChanged = ensureAll(state, providerAddrs);
              let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
              if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              let value = get(state);
              if (facet.compare(value, oldValue)) {
                  state.values[idx] = oldValue;
                  return 0;
              }
              state.values[idx] = value;
              return 1 /* SlotStatus.Changed */;
          }
      };
  }
  const initField = /*@__PURE__*/Facet.define({ static: true });
  /**
  Fields can store additional information in an editor state, and
  keep it in sync with the rest of the state.
  */
  class StateField {
      constructor(
      /**
      @internal
      */
      id, createF, updateF, compareF, 
      /**
      @internal
      */
      spec) {
          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */
          this.provides = undefined;
      }
      /**
      Define a state field.
      */
      static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
          if (config.provide)
              field.provides = config.provide(field);
          return field;
      }
      create(state) {
          let init = state.facet(initField).find(i => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return {
              create: (state) => {
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              },
              update: (state, tr) => {
                  let oldVal = state.values[idx];
                  let value = this.updateF(oldVal, tr);
                  if (this.compareF(oldVal, value))
                      return 0;
                  state.values[idx] = value;
                  return 1 /* SlotStatus.Changed */;
              },
              reconfigure: (state, oldState) => {
                  let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
                  if ((reInit = init.find(i => i.field == this)) && reInit != oldInit.find(i => i.field == this)) {
                      state.values[idx] = reInit.create(state);
                      return 1 /* SlotStatus.Changed */;
                  }
                  if (oldState.config.address[this.id] != null) {
                      state.values[idx] = oldState.field(this);
                      return 0;
                  }
                  state.values[idx] = this.create(state);
                  return 1 /* SlotStatus.Changed */;
              }
          };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create) {
          return [this, initField.of({ field: this, create })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() { return this; }
  }
  const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
      return (ext) => new PrecExtension(ext, value);
  }
  /**
  By default extensions are registered in the order they are found
  in the flattened form of nested array that was provided.
  Individual extension values can be assigned a precedence to
  override this. Extensions that do not have a precedence set get
  the precedence of the nearest parent with a precedence, or
  [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
  final ordering of extensions is determined by first sorting by
  precedence and then by order within each precedence.
  */
  const Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /*@__PURE__*/prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /*@__PURE__*/prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /*@__PURE__*/prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /*@__PURE__*/prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /*@__PURE__*/prec(Prec_.lowest)
  };
  class PrecExtension {
      constructor(inner, prec) {
          this.inner = inner;
          this.prec = prec;
      }
  }
  /**
  Extension compartments can be used to make a configuration
  dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
  configuration in a compartment, you can later
  [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
  transaction.
  */
  class Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) { return new CompartmentInstance(this, ext); }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content) {
          return Compartment.reconfigure.of({ compartment: this, extension: content });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
          return state.config.compartments.get(this);
      }
  }
  class CompartmentInstance {
      constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
      }
  }
  class Configuration {
      constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.facets = facets;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
              this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
      }
      staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base, compartments, oldState) {
          let fields = [];
          let facets = Object.create(null);
          let newCompartments = new Map();
          for (let ext of flatten(base, compartments, newCompartments)) {
              if (ext instanceof StateField)
                  fields.push(ext);
              else
                  (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          for (let field of fields) {
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(a => field.slot(a));
          }
          let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
          for (let id in facets) {
              let providers = facets[id], facet = providers[0].facet;
              let oldProviders = oldFacets && oldFacets[id] || [];
              if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                  address[facet.id] = (staticValues.length << 1) | 1;
                  if (sameArray(oldProviders, providers)) {
                      staticValues.push(oldState.facet(facet));
                  }
                  else {
                      let value = facet.combine(providers.map(p => p.value));
                      staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                  }
              }
              else {
                  for (let p of providers) {
                      if (p.type == 0 /* Provider.Static */) {
                          address[p.id] = (staticValues.length << 1) | 1;
                          staticValues.push(p.value);
                      }
                      else {
                          address[p.id] = dynamicSlots.length << 1;
                          dynamicSlots.push(a => p.dynamicSlot(a));
                      }
                  }
                  address[facet.id] = dynamicSlots.length << 1;
                  dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
              }
          }
          let dynamic = dynamicSlots.map(f => f(address));
          return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
      }
  }
  function flatten(extension, compartments, newCompartments) {
      let result = [[], [], [], [], []];
      let seen = new Map();
      function inner(ext, prec) {
          let known = seen.get(ext);
          if (known != null) {
              if (known <= prec)
                  return;
              let found = result[known].indexOf(ext);
              if (found > -1)
                  result[known].splice(found, 1);
              if (ext instanceof CompartmentInstance)
                  newCompartments.delete(ext.compartment);
          }
          seen.set(ext, prec);
          if (Array.isArray(ext)) {
              for (let e of ext)
                  inner(e, prec);
          }
          else if (ext instanceof CompartmentInstance) {
              if (newCompartments.has(ext.compartment))
                  throw new RangeError(`Duplicate use of compartment in extensions`);
              let content = compartments.get(ext.compartment) || ext.inner;
              newCompartments.set(ext.compartment, content);
              inner(content, prec);
          }
          else if (ext instanceof PrecExtension) {
              inner(ext.inner, ext.prec);
          }
          else if (ext instanceof StateField) {
              result[prec].push(ext);
              if (ext.provides)
                  inner(ext.provides, prec);
          }
          else if (ext instanceof FacetProvider) {
              result[prec].push(ext);
              if (ext.facet.extensions)
                  inner(ext.facet.extensions, Prec_.default);
          }
          else {
              let content = ext.extension;
              if (!content)
                  throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
              inner(content, prec);
          }
      }
      inner(extension, Prec_.default);
      return result.reduce((a, b) => a.concat(b));
  }
  function ensureAddr(state, addr) {
      if (addr & 1)
          return 2 /* SlotStatus.Computed */;
      let idx = addr >> 1;
      let status = state.status[idx];
      if (status == 4 /* SlotStatus.Computing */)
          throw new Error("Cyclic dependency between fields and/or facets");
      if (status & 2 /* SlotStatus.Computed */)
          return status;
      state.status[idx] = 4 /* SlotStatus.Computing */;
      let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
      return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
  }
  function getAddr(state, addr) {
      return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }

  const languageData = /*@__PURE__*/Facet.define();
  const allowMultipleSelections = /*@__PURE__*/Facet.define({
      combine: values => values.some(v => v),
      static: true
  });
  const lineSeparator = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : undefined,
      static: true
  });
  const changeFilter = /*@__PURE__*/Facet.define();
  const transactionFilter = /*@__PURE__*/Facet.define();
  const transactionExtender = /*@__PURE__*/Facet.define();
  const readOnly = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : false
  });

  /**
  Annotations are tagged values that are used to add metadata to
  transactions in an extensible way. They should be used to model
  things that effect the entire transaction (such as its [time
  stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
  [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
  _alongside_ the other changes made by the transaction, [state
  effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
  */
  class Annotation {
      /**
      @internal
      */
      constructor(
      /**
      The annotation type.
      */
      type, 
      /**
      The value of this annotation.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() { return new AnnotationType(); }
  }
  /**
  Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
  */
  class AnnotationType {
      /**
      Create an instance of this annotation.
      */
      of(value) { return new Annotation(this, value); }
  }
  /**
  Representation of a type of state effect. Defined with
  [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
  */
  class StateEffectType {
      /**
      @internal
      */
      constructor(
      // The `any` types in these function types are there to work
      // around TypeScript issue #37631, where the type guard on
      // `StateEffect.is` mysteriously stops working when these properly
      // have type `Value`.
      /**
      @internal
      */
      map) {
          this.map = map;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) { return new StateEffect(this, value); }
  }
  /**
  State effects can be used to represent additional effects
  associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
  are often useful to model changes to custom [state
  fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
  document or selection changes.
  */
  class StateEffect {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      type, 
      /**
      The value of this effect.
      */
      value) {
          this.type = type;
          this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type) { return this.type == type; }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
      static define(spec = {}) {
          return new StateEffectType(spec.map || (v => v));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
          if (!effects.length)
              return effects;
          let result = [];
          for (let effect of effects) {
              let mapped = effect.map(mapping);
              if (mapped)
                  result.push(mapped);
          }
          return result;
      }
  }
  /**
  This effect can be used to reconfigure the root extensions of
  the editor. Doing this will discard any extensions
  [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
  the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
  compartments.
  */
  StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
  /**
  Append extensions to the top-level configuration of the editor.
  */
  StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
  /**
  Changes to the editor state are grouped into transactions.
  Typically, a user action creates a single transaction, which may
  contain any number of document changes, may change the selection,
  or have other effects. Create a transaction by calling
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
  dispatch one by calling
  [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
  */
  class Transaction {
      constructor(
      /**
      The state from which the transaction starts.
      */
      startState, 
      /**
      The document changes made by this transaction.
      */
      changes, 
      /**
      The selection set by this transaction, or undefined if it
      doesn't explicitly set a selection.
      */
      selection, 
      /**
      The effects added to the transaction.
      */
      effects, 
      /**
      @internal
      */
      annotations, 
      /**
      Whether the selection should be scrolled into view after this
      transaction is dispatched.
      */
      scrollIntoView) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */
          this._doc = null;
          /**
          @internal
          */
          this._state = null;
          if (selection)
              checkSelection(selection, changes.newLength);
          if (!annotations.some((a) => a.type == Transaction.time))
              this.annotations = annotations.concat(Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState, changes, selection, effects, annotations, scrollIntoView) {
          return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
          if (!this._state)
              this.startState.applyTransaction(this);
          return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type) {
          for (let ann of this.annotations)
              if (ann.type == type)
                  return ann.value;
          return undefined;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() { return !this.changes.empty; }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() { return this.startState.config != this.state.config; }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
  }
  /**
  Annotation used to store transaction timestamps. Automatically
  added to every transaction, holding `Date.now()`.
  */
  Transaction.time = /*@__PURE__*/Annotation.define();
  /**
  Annotation used to associate a transaction with a user interface
  event. Holds a string identifying the event, using a
  dot-separated format to support attaching more specific
  information. The events used by the core libraries are:

   - `"input"` when content is entered
     - `"input.type"` for typed input
       - `"input.type.compose"` for composition
     - `"input.paste"` for pasted input
     - `"input.drop"` when adding content with drag-and-drop
     - `"input.complete"` when autocompleting
   - `"delete"` when the user deletes content
     - `"delete.selection"` when deleting the selection
     - `"delete.forward"` when deleting forward from the selection
     - `"delete.backward"` when deleting backward from the selection
     - `"delete.cut"` when cutting to the clipboard
   - `"move"` when content is moved
     - `"move.drop"` when content is moved within the editor through drag-and-drop
   - `"select"` when explicitly changing the selection
     - `"select.pointer"` when selecting with a mouse or other pointing device
   - `"undo"` and `"redo"` for history actions

  Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
  whether the annotation matches a given event.
  */
  Transaction.userEvent = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating whether a transaction should be added to
  the undo history or not.
  */
  Transaction.addToHistory = /*@__PURE__*/Annotation.define();
  /**
  Annotation indicating (when present and true) that a transaction
  represents a change made by some other actor, not the user. This
  is used, for example, to tag other people's changes in
  collaborative editing.
  */
  Transaction.remote = /*@__PURE__*/Annotation.define();
  function joinRanges(a, b) {
      let result = [];
      for (let iA = 0, iB = 0;;) {
          let from, to;
          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
              from = a[iA++];
              to = a[iA++];
          }
          else if (iB < b.length) {
              from = b[iB++];
              to = b[iB++];
          }
          else
              return result;
          if (!result.length || result[result.length - 1] < from)
              result.push(from, to);
          else if (result[result.length - 1] < to)
              result[result.length - 1] = to;
      }
  }
  function mergeTransaction(a, b, sequential) {
      var _a;
      let mapForA, mapForB, changes;
      if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
      }
      else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
      }
      return {
          changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
      };
  }
  function resolveTransactionInner(state, spec, docSize) {
      let sel = spec.selection, annotations = asArray$1(spec.annotations);
      if (spec.userEvent)
          annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
      return {
          changes: spec.changes instanceof ChangeSet ? spec.changes
              : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray$1(spec.effects),
          annotations,
          scrollIntoView: !!spec.scrollIntoView
      };
  }
  function resolveTransaction(state, specs, filter) {
      let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
      if (specs.length && specs[0].filter === false)
          filter = false;
      for (let i = 1; i < specs.length; i++) {
          if (specs[i].filter === false)
              filter = false;
          let seq = !!specs[i].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
      }
      let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
      return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  // Finish a transaction by applying filters if necessary.
  function filterTransaction(tr) {
      let state = tr.startState;
      // Change filters
      let result = true;
      for (let filter of state.facet(changeFilter)) {
          let value = filter(tr);
          if (value === false) {
              result = false;
              break;
          }
          if (Array.isArray(value))
              result = result === true ? value : joinRanges(result, value);
      }
      if (result !== true) {
          let changes, back;
          if (result === false) {
              back = tr.changes.invertedDesc;
              changes = ChangeSet.empty(state.doc.length);
          }
          else {
              let filtered = tr.changes.filter(result);
              changes = filtered.changes;
              back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
          }
          tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
      }
      // Transaction filters
      let filters = state.facet(transactionFilter);
      for (let i = filters.length - 1; i >= 0; i--) {
          let filtered = filters[i](tr);
          if (filtered instanceof Transaction)
              tr = filtered;
          else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
              tr = filtered[0];
          else
              tr = resolveTransaction(state, asArray$1(filtered), false);
      }
      return tr;
  }
  function extendTransaction(tr) {
      let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
      for (let i = extenders.length - 1; i >= 0; i--) {
          let extension = extenders[i](tr);
          if (extension && Object.keys(extension).length)
              spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
      }
      return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  const none$2 = [];
  function asArray$1(value) {
      return value == null ? none$2 : Array.isArray(value) ? value : [value];
  }

  /**
  The categories produced by a [character
  categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
  do things like selecting by word.
  */
  var CharCategory = /*@__PURE__*/(function (CharCategory) {
      /**
      Word characters.
      */
      CharCategory[CharCategory["Word"] = 0] = "Word";
      /**
      Whitespace.
      */
      CharCategory[CharCategory["Space"] = 1] = "Space";
      /**
      Anything else.
      */
      CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory})(CharCategory || (CharCategory = {}));
  const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  let wordChar;
  try {
      wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  }
  catch (_) { }
  function hasWordChar(str) {
      if (wordChar)
          return wordChar.test(str);
      for (let i = 0; i < str.length; i++) {
          let ch = str[i];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
              return true;
      }
      return false;
  }
  function makeCategorizer(wordChars) {
      return (char) => {
          if (!/\S/.test(char))
              return CharCategory.Space;
          if (hasWordChar(char))
              return CharCategory.Word;
          for (let i = 0; i < wordChars.length; i++)
              if (char.indexOf(wordChars[i]) > -1)
                  return CharCategory.Word;
          return CharCategory.Other;
      };
  }

  /**
  The editor state class is a persistent (immutable) data structure.
  To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
  [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
  instance, without modifying the original object.

  As such, _never_ mutate properties of a state directly. That'll
  just break things.
  */
  class EditorState {
      constructor(
      /**
      @internal
      */
      config, 
      /**
      The current document.
      */
      doc, 
      /**
      The current selection.
      */
      selection, 
      /**
      @internal
      */
      values, computeSlot, tr) {
          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          this.status = config.statusTemplate.slice();
          this.computeSlot = computeSlot;
          // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state
          if (tr)
              tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
              ensureAddr(this, i << 1);
          this.computeSlot = null;
      }
      field(field, require = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
              if (require)
                  throw new RangeError("Field is not present in this state");
              return undefined;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
          return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
          let conf = this.config, { base, compartments } = conf;
          for (let effect of tr.effects) {
              if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                      compartments = new Map;
                      conf.compartments.forEach((val, key) => compartments.set(key, val));
                      conf = null;
                  }
                  compartments.set(effect.value.compartment, effect.value.extension);
              }
              else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
              }
              else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray$1(base).concat(effect.value);
              }
          }
          let startValues;
          if (!conf) {
              conf = Configuration.resolve(base, compartments, this);
              let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
              startValues = intermediateState.values;
          }
          else {
              startValues = tr.startState.values.slice();
          }
          let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
          new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text) {
          if (typeof text == "string")
              text = this.toText(text);
          return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
              range: EditorSelection.cursor(range.from + text.length) }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray$1(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
              let result = f(sel.ranges[i]);
              let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
              for (let j = 0; j < i; j++)
                  ranges[j] = ranges[j].map(newMapped);
              let mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
          }
          return {
              changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects
          };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
          if (spec instanceof ChangeSet)
              return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string) {
          return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from = 0, to = this.doc.length) {
          return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
              return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
          let result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
          };
          if (fields)
              for (let prop in fields) {
                  let value = fields[prop];
                  if (value instanceof StateField && this.config.address[value.id] != null)
                      result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
              }
          return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json, config = {}, fields) {
          if (!json || typeof json.doc != "string")
              throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
              for (let prop in fields) {
                  if (Object.prototype.hasOwnProperty.call(json, prop)) {
                      let field = fields[prop], value = json[prop];
                      fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                  }
              }
          return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config = {}) {
          let configuration = Configuration.resolve(config.extensions || [], new Map);
          let doc = config.doc instanceof Text ? config.doc
              : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0)
              : config.selection instanceof EditorSelection ? config.selection
                  : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc.length);
          if (!configuration.staticFacet(allowMultipleSelections))
              selection = selection.asSingle();
          return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() { return this.facet(EditorState.tabSize); }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() { return this.facet(readOnly); }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase, ...insert) {
          for (let map of this.facet(EditorState.phrases))
              if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                  phrase = map[phrase];
                  break;
              }
          if (insert.length)
              phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                  if (i == "$")
                      return "$";
                  let n = +(i || 1);
                  return !n || n > insert.length ? m : insert[n - 1];
              });
          return phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name, pos, side = -1) {
          let values = [];
          for (let provider of this.facet(languageData)) {
              for (let result of provider(this, pos, side)) {
                  if (Object.prototype.hasOwnProperty.call(result, name))
                      values.push(result[name]);
              }
          }
          return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos) {
          let { text, from, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start = pos - from, end = pos - from;
          while (start > 0) {
              let prev = findClusterBreak(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word)
                  break;
              start = prev;
          }
          while (end < length) {
              let next = findClusterBreak(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word)
                  break;
              end = next;
          }
          return start == end ? null : EditorSelection.range(start + from, end + from);
      }
  }
  /**
  A facet that, when enabled, causes the editor to allow multiple
  ranges to be selected. Be careful though, because by default the
  editor relies on the native DOM selection, which cannot handle
  multiple selections. An extension like
  [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
  secondary selections visible to the user.
  */
  EditorState.allowMultipleSelections = allowMultipleSelections;
  /**
  Configures the tab size to use in this state. The first
  (highest-precedence) value of the facet is used. If no value is
  given, this defaults to 4.
  */
  EditorState.tabSize = /*@__PURE__*/Facet.define({
      combine: values => values.length ? values[0] : 4
  });
  /**
  The line separator to use. By default, any of `"\n"`, `"\r\n"`
  and `"\r"` is treated as a separator when splitting lines, and
  lines are joined with `"\n"`.

  When you configure a value here, only that precise separator
  will be used, allowing you to round-trip documents through the
  editor without normalizing line separators.
  */
  EditorState.lineSeparator = lineSeparator;
  /**
  This facet controls the value of the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
  consulted by commands and extensions that implement editing
  functionality to determine whether they should apply. It
  defaults to false, but when its highest-precedence value is
  `true`, such functionality disables itself.

  Not to be confused with
  [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
  controls whether the editor's DOM is set to be editable (and
  thus focusable).
  */
  EditorState.readOnly = readOnly;
  /**
  Registers translation phrases. The
  [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
  all objects registered with this facet to find translations for
  its argument.
  */
  EditorState.phrases = /*@__PURE__*/Facet.define({
      compare(a, b) {
          let kA = Object.keys(a), kB = Object.keys(b);
          return kA.length == kB.length && kA.every(k => a[k] == b[k]);
      }
  });
  /**
  A facet used to register [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
  */
  EditorState.languageData = languageData;
  /**
  Facet used to register change filters, which are called for each
  transaction (unless explicitly
  [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
  part of the transaction's changes.

  Such a function can return `true` to indicate that it doesn't
  want to do anything, `false` to completely stop the changes in
  the transaction, or a set of ranges in which changes should be
  suppressed. Such ranges are represented as an array of numbers,
  with each pair of two numbers indicating the start and end of a
  range. So for example `[10, 20, 100, 110]` suppresses changes
  between 10 and 20, and between 100 and 110.
  */
  EditorState.changeFilter = changeFilter;
  /**
  Facet used to register a hook that gets a chance to update or
  replace transaction specs before they are applied. This will
  only be applied for transactions that don't have
  [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
  can either return a single transaction spec (possibly the input
  transaction), or an array of specs (which will be combined in
  the same way as the arguments to
  [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

  When possible, it is recommended to avoid accessing
  [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
  since it will force creation of a state that will then be
  discarded again, if the transaction is actually filtered.

  (This functionality should be used with care. Indiscriminately
  modifying transaction is likely to break something or degrade
  the user experience.)
  */
  EditorState.transactionFilter = transactionFilter;
  /**
  This is a more limited form of
  [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
  which can only add
  [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
  of filter runs even if the transaction has disabled regular
  [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
  for effects that don't need to touch the changes or selection,
  but do want to process every transaction.

  Extenders run _after_ filters, when both are present.
  */
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

  /**
  Utility function for combining behaviors to fill in a config
  object from an array of provided configs. `defaults` should hold
  default values for all optional fields in `Config`.

  The function will, by default, error
  when a field gets two values that aren't `===`-equal, but you can
  provide combine functions per field to do something else.
  */
  function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
  combine = {}) {
      let result = {};
      for (let config of configs)
          for (let key of Object.keys(config)) {
              let value = config[key], current = result[key];
              if (current === undefined)
                  result[key] = value;
              else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, key))
                  result[key] = combine[key](current, value);
              else
                  throw new Error("Config merge conflict for field " + key);
          }
      for (let key in defaults)
          if (result[key] === undefined)
              result[key] = defaults[key];
      return result;
  }

  /**
  Each range is associated with a value, which must inherit from
  this class.
  */
  class RangeValue {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) { return this == other; }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from, to = from) { return Range.create(from, to, this); }
  }
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  /**
  A range associates a value with a range of positions.
  */
  class Range {
      constructor(
      /**
      The range's start position.
      */
      from, 
      /**
      Its end position.
      */
      to, 
      /**
      The value associated with this range.
      */
      value) {
          this.from = from;
          this.to = to;
          this.value = value;
      }
      /**
      @internal
      */
      static create(from, to, value) {
          return new Range(from, to, value);
      }
  }
  function cmpRange(a, b) {
      return a.from - b.from || a.value.startSide - b.value.startSide;
  }
  class Chunk {
      constructor(from, to, value, 
      // Chunks are marked with the largest point that occurs
      // in them (or -1 for no points), so that scans that are
      // only interested in points (such as the
      // heightmap-related logic) can skip range-only chunks.
      maxPoint) {
          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
      }
      get length() { return this.to[this.to.length - 1]; }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos, side, end, startAt = 0) {
          let arr = end ? this.to : this.from;
          for (let lo = startAt, hi = arr.length;;) {
              if (lo == hi)
                  return lo;
              let mid = (lo + hi) >> 1;
              let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
              if (mid == lo)
                  return diff >= 0 ? lo : hi;
              if (diff >= 0)
                  hi = mid;
              else
                  lo = mid + 1;
          }
      }
      between(offset, from, to, f) {
          for (let i = this.findIndex(from, -1e9 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
              if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                  return false;
      }
      map(offset, changes) {
          let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
              let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
              if (curFrom == curTo) {
                  let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                  if (mapped == null)
                      continue;
                  newFrom = newTo = mapped;
                  if (val.startSide != val.endSide) {
                      newTo = changes.mapPos(curFrom, val.endSide);
                      if (newTo < newFrom)
                          continue;
                  }
              }
              else {
                  newFrom = changes.mapPos(curFrom, val.startSide);
                  newTo = changes.mapPos(curTo, val.endSide);
                  if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                      continue;
              }
              if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                  continue;
              if (newPos < 0)
                  newPos = newFrom;
              if (val.point)
                  maxPoint = Math.max(maxPoint, newTo - newFrom);
              value.push(val);
              from.push(newFrom - newPos);
              to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
      }
  }
  /**
  A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
  way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
  [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
  structure.
  */
  class RangeSet {
      constructor(
      /**
      @internal
      */
      chunkPos, 
      /**
      @internal
      */
      chunk, 
      /**
      @internal
      */
      nextLayer, 
      /**
      @internal
      */
      maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
          return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
          if (this.isEmpty)
              return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
              size += chunk.value.length;
          return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
          let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add.length == 0 && !filter)
              return this;
          if (sort)
              add = add.slice().sort(cmpRange);
          if (this.isEmpty)
              return add.length ? RangeSet.of(add) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add.length) {
              if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                  let range = add[i++];
                  if (!builder.addInner(range.from, range.to, range.value))
                      spill.push(range);
              }
              else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                  (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                  (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                  builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                  cur.nextChunk();
              }
              else {
                  if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                      if (!builder.addInner(cur.from, cur.to, cur.value))
                          spill.push(Range.create(cur.from, cur.to, cur.value));
                  }
                  cur.next();
              }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
              : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
          if (changes.empty || this.isEmpty)
              return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              let touch = changes.touchesRange(start, start + chunk.length);
              if (touch === false) {
                  maxPoint = Math.max(maxPoint, chunk.maxPoint);
                  chunks.push(chunk);
                  chunkPos.push(changes.mapPos(start));
              }
              else if (touch === true) {
                  let { mapped, pos } = chunk.map(start, changes);
                  if (mapped) {
                      maxPoint = Math.max(maxPoint, mapped.maxPoint);
                      chunks.push(mapped);
                      chunkPos.push(pos);
                  }
              }
          }
          let next = this.nextLayer.map(changes);
          return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from, to, f) {
          if (this.isEmpty)
              return;
          for (let i = 0; i < this.chunk.length; i++) {
              let start = this.chunkPos[i], chunk = this.chunk[i];
              if (to >= start && from <= start + chunk.length &&
                  chunk.between(start, from - start, to - start, f) === false)
                  return;
          }
          this.nextLayer.between(from, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from = 0) {
          return HeapCursor.from([this]).goto(from);
      }
      /**
      @internal
      */
      get isEmpty() { return this.nextLayer == this; }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from = 0) {
          return HeapCursor.from(sets).goto(from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, 
      /**
      This indicates how the underlying data changed between these
      ranges, and is needed to synchronize the iteration.
      */
      textDiff, comparator, 
      /**
      Can be used to ignore all non-point ranges, and points below
      the given size. When -1, all ranges are compared.
      */
      minPointSize = -1) {
          let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a, b, textDiff);
          let sideA = new SpanCursor(a, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
              compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from = 0, to) {
          if (to == null)
              to = 1000000000 /* C.Far */ - 1;
          let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
          let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
          if (a.length != b.length)
              return false;
          if (!a.length)
              return true;
          let sharedChunks = findSharedChunks(a, b);
          let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
          for (;;) {
              if (sideA.to != sideB.to ||
                  !sameValues(sideA.active, sideB.active) ||
                  sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                  return false;
              if (sideA.to > to)
                  return true;
              sideA.next();
              sideB.next();
          }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from, to, iterator, 
      /**
      When given and greater than -1, only points of at least this
      size are taken into account.
      */
      minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
          let openRanges = cursor.openStart;
          for (;;) {
              let curTo = Math.min(cursor.to, to);
              if (cursor.point) {
                  let active = cursor.activeForPoint(cursor.to);
                  let openCount = cursor.pointFrom < from ? active.length + 1
                      : cursor.point.startSide < 0 ? active.length
                          : Math.min(active.length, openRanges);
                  iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                  openRanges = Math.min(cursor.openEnd(curTo), active.length);
              }
              else if (curTo > pos) {
                  iterator.span(pos, curTo, cursor.active, openRanges);
                  openRanges = cursor.openEnd(curTo);
              }
              if (cursor.to > to)
                  return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
              pos = cursor.to;
              cursor.next();
          }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
              build.add(range.from, range.to, range.value);
          return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
      static join(sets) {
          if (!sets.length)
              return RangeSet.empty;
          let result = sets[sets.length - 1];
          for (let i = sets.length - 2; i >= 0; i--) {
              for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                  result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
          }
          return result;
      }
  }
  /**
  The empty set of ranges.
  */
  RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
  function lazySort(ranges) {
      if (ranges.length > 1)
          for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
              let cur = ranges[i];
              if (cmpRange(prev, cur) > 0)
                  return ranges.slice().sort(cmpRange);
              prev = cur;
          }
      return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  /**
  A range set builder is a data structure that helps build up a
  [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
  an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
  */
  class RangeSetBuilder {
      finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
              this.from = [];
              this.to = [];
              this.value = [];
          }
      }
      /**
      Create an empty builder.
      */
      constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1e9 /* C.Far */;
          this.lastTo = -1e9 /* C.Far */;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from, to, value) {
          if (!this.addInner(from, to, value))
              (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
      }
      /**
      @internal
      */
      addInner(from, to, value) {
          let diff = from - this.lastTo || value.startSide - this.last.endSide;
          if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
              throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff < 0)
              return false;
          if (this.from.length == 250 /* C.ChunkSize */)
              this.finishChunk(true);
          if (this.chunkStart < 0)
              this.chunkStart = from;
          this.from.push(from - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
              this.maxPoint = Math.max(this.maxPoint, to - from);
          return true;
      }
      /**
      @internal
      */
      addChunk(from, chunk) {
          if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
              return false;
          if (this.from.length)
              this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from;
          this.lastTo = chunk.to[last] + from;
          return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() { return this.finishInner(RangeSet.empty); }
      /**
      @internal
      */
      finishInner(next) {
          if (this.from.length)
              this.finishChunk(false);
          if (this.chunks.length == 0)
              return next;
          let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
          this.from = null; // Make sure further `add` calls produce errors
          return result;
      }
  }
  function findSharedChunks(a, b, textDiff) {
      let inA = new Map();
      for (let set of a)
          for (let i = 0; i < set.chunk.length; i++)
              if (set.chunk[i].maxPoint <= 0)
                  inA.set(set.chunk[i], set.chunkPos[i]);
      let shared = new Set();
      for (let set of b)
          for (let i = 0; i < set.chunk.length; i++) {
              let known = inA.get(set.chunk[i]);
              if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                  !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                  shared.add(set.chunk[i]);
          }
      return shared;
  }
  class LayerCursor {
      constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      get endSide() { return this.value ? this.value.endSide : 0; }
      goto(pos, side = -1e9 /* C.Far */) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
      }
      gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
              let next = this.layer.chunk[this.chunkIndex];
              if (!(this.skip && this.skip.has(next) ||
                  this.layer.chunkEnd(this.chunkIndex) < pos ||
                  next.maxPoint < this.minPoint))
                  break;
              this.chunkIndex++;
              forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
              let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
              if (!forward || this.rangeIndex < rangeIndex)
                  this.setRangeIndex(rangeIndex);
          }
          this.next();
      }
      forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
              this.gotoInner(pos, side, true);
      }
      next() {
          for (;;) {
              if (this.chunkIndex == this.layer.chunk.length) {
                  this.from = this.to = 1000000000 /* C.Far */;
                  this.value = null;
                  break;
              }
              else {
                  let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                  let from = chunkPos + chunk.from[this.rangeIndex];
                  this.from = from;
                  this.to = chunkPos + chunk.to[this.rangeIndex];
                  this.value = chunk.value[this.rangeIndex];
                  this.setRangeIndex(this.rangeIndex + 1);
                  if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                      break;
              }
          }
      }
      setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
              this.chunkIndex++;
              if (this.skip) {
                  while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                      this.chunkIndex++;
              }
              this.rangeIndex = 0;
          }
          else {
              this.rangeIndex = index;
          }
      }
      nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
      }
      compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
              this.to - other.to || this.endSide - other.endSide;
      }
  }
  class HeapCursor {
      constructor(heap) {
          this.heap = heap;
      }
      static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
              for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                  if (cur.maxPoint >= minPoint)
                      heap.push(new LayerCursor(cur, skip, minPoint, i));
              }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
      }
      get startSide() { return this.value ? this.value.startSide : 0; }
      goto(pos, side = -1e9 /* C.Far */) {
          for (let cur of this.heap)
              cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          this.next();
          return this;
      }
      forward(pos, side) {
          for (let cur of this.heap)
              cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
              heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
              this.next();
      }
      next() {
          if (this.heap.length == 0) {
              this.from = this.to = 1000000000 /* C.Far */;
              this.value = null;
              this.rank = -1;
          }
          else {
              let top = this.heap[0];
              this.from = top.from;
              this.to = top.to;
              this.value = top.value;
              this.rank = top.rank;
              if (top.value)
                  top.next();
              heapBubble(this.heap, 0);
          }
      }
  }
  function heapBubble(heap, index) {
      for (let cur = heap[index];;) {
          let childIndex = (index << 1) + 1;
          if (childIndex >= heap.length)
              break;
          let child = heap[childIndex];
          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
              child = heap[childIndex + 1];
              childIndex++;
          }
          if (cur.compare(child) < 0)
              break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
      }
  }
  class SpanCursor {
      constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          // A currently active point range, if any
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1e9 /* C.Far */;
          this.endSide = 0;
          // The amount of open active ranges at the start of the iterator.
          // Not including points.
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos, side = -1e9 /* C.Far */) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
      }
      forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
              this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
      }
      removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          // Organize active marks by rank first, then by size
          while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
              i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
              insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
          let from = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null;
          for (;;) {
              let a = this.minActive;
              if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                  if (this.activeTo[a] > from) {
                      this.to = this.activeTo[a];
                      this.endSide = this.active[a].endSide;
                      break;
                  }
                  this.removeActive(a);
                  if (trackOpen)
                      remove(trackOpen, a);
              }
              else if (!this.cursor.value) {
                  this.to = this.endSide = 1000000000 /* C.Far */;
                  break;
              }
              else if (this.cursor.from > from) {
                  this.to = this.cursor.from;
                  this.endSide = this.cursor.startSide;
                  break;
              }
              else {
                  let nextVal = this.cursor.value;
                  if (!nextVal.point) { // Opening a range
                      this.addActive(trackOpen);
                      this.cursor.next();
                  }
                  else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                      // Ignore any non-empty points that end precisely at the end of the prev point
                      this.cursor.next();
                  }
                  else { // New point
                      this.point = nextVal;
                      this.pointFrom = this.cursor.from;
                      this.pointRank = this.cursor.rank;
                      this.to = this.cursor.to;
                      this.endSide = nextVal.endSide;
                      this.cursor.next();
                      this.forward(this.to, this.endSide);
                      break;
                  }
              }
          }
          if (trackOpen) {
              this.openStart = 0;
              for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                  this.openStart++;
          }
      }
      activeForPoint(to) {
          if (!this.active.length)
              return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
              if (this.activeRank[i] < this.pointRank)
                  break;
              if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                  active.push(this.active[i]);
          }
          return active.reverse();
      }
      openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
              open++;
          return open;
      }
  }
  function compare(a, startA, b, startB, length, comparator) {
      a.goto(startA);
      b.goto(startB);
      let endB = startB + length;
      let pos = startB, dPos = startB - startA;
      for (;;) {
          let dEnd = (a.to + dPos) - b.to, diff = dEnd || a.endSide - b.endSide;
          let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
          if (a.point || b.point) {
              if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                  sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                  comparator.comparePoint(pos, clipEnd, a.point, b.point);
          }
          else {
              if (clipEnd > pos && !sameValues(a.active, b.active))
                  comparator.compareRange(pos, clipEnd, a.active, b.active);
          }
          if (end > endB)
              break;
          if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
              comparator.boundChange(end);
          pos = end;
          if (diff <= 0)
              a.next();
          if (diff >= 0)
              b.next();
      }
  }
  function sameValues(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (a[i] != b[i] && !a[i].eq(b[i]))
              return false;
      return true;
  }
  function remove(array, index) {
      for (let i = index, e = array.length - 1; i < e; i++)
          array[i] = array[i + 1];
      array.pop();
  }
  function insert(array, index, value) {
      for (let i = array.length - 1; i >= index; i--)
          array[i + 1] = array[i];
      array[index] = value;
  }
  function findMinIndex(value, array) {
      let found = -1, foundPos = 1000000000 /* C.Far */;
      for (let i = 0; i < array.length; i++)
          if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
              found = i;
              foundPos = array[i];
          }
      return found;
  }

  /**
  Count the column position at the given offset into the string,
  taking extending characters and tab size into account.
  */
  function countColumn(string, tabSize, to = string.length) {
      let n = 0;
      for (let i = 0; i < to && i < string.length;) {
          if (string.charCodeAt(i) == 9) {
              n += tabSize - (n % tabSize);
              i++;
          }
          else {
              n++;
              i = findClusterBreak(string, i);
          }
      }
      return n;
  }
  /**
  Find the offset that corresponds to the given column position in a
  string, taking extending characters and tab size into account. By
  default, the string length is returned when it is too short to
  reach the column. Pass `strict` true to make it return -1 in that
  situation.
  */
  function findColumn(string, col, tabSize, strict) {
      for (let i = 0, n = 0;;) {
          if (n >= col)
              return i;
          if (i == string.length)
              break;
          n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
          i = findClusterBreak(string, i);
      }
      return string.length;
  }

  const C = "\u037c";
  const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

  // :: - Style modules encapsulate a set of CSS rules defined from
  // JavaScript. Their definitions are only available in a given DOM
  // root after it has been _mounted_ there with `StyleModule.mount`.
  //
  // Style modules should be created once and stored somewhere, as
  // opposed to re-creating them every time you need them. The amount of
  // CSS rules generated for a given DOM root is bounded by the amount
  // of style modules that were used. So to avoid leaking rules, don't
  // create these dynamically, but treat them as one-time allocations.
  class StyleModule {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let {finish} = options || {};

      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
      }

      function render(selectors, spec, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec == null) return target.push(selectors[0] + ";")
        for (let prop in spec) {
          let value = spec[prop];
          if (/&/.test(prop)) {
            render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                   value, target);
          } else if (value && typeof value == "object") {
            if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                      " {" + local.join(" ") + "}");
        }
      }

      for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
    }

    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() { return this.rules.join("\n") }

    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36)
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root, modules, options) {
      let set = root[SET], nonce = options && options.nonce;
      if (!set) set = new StyleSet(root, nonce);
      else if (nonce) set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root);
    }
  }

  let adoptedSet = new Map; //<Document, StyleSet>

  class StyleSet {
    constructor(root, nonce) {
      let doc = root.ownerDocument || root, win = doc.defaultView;
      if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc);
        if (adopted) return root[SET] = adopted
        this.sheet = new win.CSSStyleSheet;
        adoptedSet.set(doc, this);
      } else {
        this.styleTag = doc.createElement("style");
        if (nonce) this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root[SET] = this;
    }

    mount(modules, root) {
      let sheet = this.sheet;
      let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
      for (let i = 0; i < modules.length; i++) {
        let mod = modules[i], index = this.modules.indexOf(mod);
        if (index < j && index > -1) { // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (let k = 0; k < mod.rules.length; k++)
            sheet.insertRule(mod.rules[k], pos++);
        } else {
          while (j < index) pos += this.modules[j++].rules.length;
          pos += mod.rules.length;
          j++;
        }
      }

      if (sheet) {
        if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
      } else {
        let text = "";
        for (let i = 0; i < this.modules.length; i++)
          text += this.modules[i].getRules() + "\n";
        this.styleTag.textContent = text;
        let target = root.head || root;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }

    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  }

  // Style::Object<union<Style,string>>
  //
  // A style is an object that, in the simple case, maps CSS property
  // names to strings holding their values, as in `{color: "red",
  // fontWeight: "bold"}`. The property names can be given in
  // camel-case—the library will insert a dash before capital letters
  // when converting them to CSS.
  //
  // If you include an underscore in a property name, it and everything
  // after it will be removed from the output, which can be useful when
  // providing a property multiple times, for browser compatibility
  // reasons.
  //
  // A property in a style object can also be a sub-selector, which
  // extends the current context to add a pseudo-selector or a child
  // selector. Such a property should contain a `&` character, which
  // will be replaced by the current selector. For example `{"&:before":
  // {content: '"hi"'}}`. Sub-selectors and regular properties can
  // freely be mixed in a given object. Any property containing a `&` is
  // assumed to be a sub-selector.
  //
  // Finally, a property can specify an @-block to be wrapped around the
  // styles defined inside the object that's the property's value. For
  // example to create a media query you can do `{"@media screen and
  // (min-width: 400px)": {...}}`.

  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

  function keyName(event) {
    // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
    // On IE, shift effect is never included in `.key`.
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
        ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
        event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  function getSelection(root) {
      let target;
      // Browsers differ on whether shadow roots have a getSelection
      // method. If it exists, use that, otherwise, call it on the
      // document.
      if (root.nodeType == 11) { // Shadow root
          target = root.getSelection ? root : root.ownerDocument;
      }
      else {
          target = root;
      }
      return target.getSelection();
  }
  function contains(dom, node) {
      return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function hasSelection(dom, selection) {
      if (!selection.anchorNode)
          return false;
      try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
      }
      catch (_) {
          return false;
      }
  }
  function clientRectsFor(dom) {
      if (dom.nodeType == 3)
          return textRange(dom, 0, dom.nodeValue.length).getClientRects();
      else if (dom.nodeType == 1)
          return dom.getClientRects();
      else
          return [];
  }
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  function isEquivalentPosition(node, off, targetNode, targetOff) {
      return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
          scanFor(node, off, targetNode, targetOff, 1)) : false;
  }
  function domIndex(node) {
      for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node)
              return index;
      }
  }
  function isBlockElement(node) {
      return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
          if (node == targetNode && off == targetOff)
              return true;
          if (off == (dir < 0 ? 0 : maxOffset(node))) {
              if (node.nodeName == "DIV")
                  return false;
              let parent = node.parentNode;
              if (!parent || parent.nodeType != 1)
                  return false;
              off = domIndex(node) + (dir < 0 ? 0 : 1);
              node = parent;
          }
          else if (node.nodeType == 1) {
              node = node.childNodes[off + (dir < 0 ? -1 : 0)];
              if (node.nodeType == 1 && node.contentEditable == "false")
                  return false;
              off = dir < 0 ? maxOffset(node) : 0;
          }
          else {
              return false;
          }
      }
  }
  function maxOffset(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
      let x = left ? rect.left : rect.right;
      return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
      let vp = win.visualViewport;
      if (vp)
          return {
              left: 0, right: vp.width,
              top: 0, bottom: vp.height
          };
      return { left: 0, right: win.innerWidth,
          top: 0, bottom: win.innerHeight };
  }
  function getScale(elt, rect) {
      let scaleX = rect.width / elt.offsetWidth;
      let scaleY = rect.height / elt.offsetHeight;
      if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
          scaleX = 1;
      if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
          scaleY = 1;
      return { scaleX, scaleY };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      for (let cur = dom, stop = false; cur && !stop;) {
          if (cur.nodeType == 1) { // Element
              let bounding, top = cur == doc.body;
              let scaleX = 1, scaleY = 1;
              if (top) {
                  bounding = windowRect(win);
              }
              else {
                  if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                      stop = true;
                  if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                      cur = cur.assignedSlot || cur.parentNode;
                      continue;
                  }
                  let rect = cur.getBoundingClientRect();
                  ({ scaleX, scaleY } = getScale(cur, rect));
                  // Make sure scrollbar width isn't included in the rectangle
                  bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                      top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
              }
              let moveX = 0, moveY = 0;
              if (y == "nearest") {
                  if (rect.top < bounding.top) {
                      moveY = -(bounding.top - rect.top + yMargin);
                      if (side > 0 && rect.bottom > bounding.bottom + moveY)
                          moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                  }
                  else if (rect.bottom > bounding.bottom) {
                      moveY = rect.bottom - bounding.bottom + yMargin;
                      if (side < 0 && (rect.top - moveY) < bounding.top)
                          moveY = -(bounding.top + moveY - rect.top + yMargin);
                  }
              }
              else {
                  let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                  let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                      y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                          rect.bottom - boundingHeight + yMargin;
                  moveY = targetTop - bounding.top;
              }
              if (x == "nearest") {
                  if (rect.left < bounding.left) {
                      moveX = -(bounding.left - rect.left + xMargin);
                      if (side > 0 && rect.right > bounding.right + moveX)
                          moveX = rect.right - bounding.right + moveX + xMargin;
                  }
                  else if (rect.right > bounding.right) {
                      moveX = rect.right - bounding.right + xMargin;
                      if (side < 0 && rect.left < bounding.left + moveX)
                          moveX = -(bounding.left + moveX - rect.left + xMargin);
                  }
              }
              else {
                  let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                      (x == "start") == ltr ? rect.left - xMargin :
                          rect.right - (bounding.right - bounding.left) + xMargin;
                  moveX = targetLeft - bounding.left;
              }
              if (moveX || moveY) {
                  if (top) {
                      win.scrollBy(moveX, moveY);
                  }
                  else {
                      let movedX = 0, movedY = 0;
                      if (moveY) {
                          let start = cur.scrollTop;
                          cur.scrollTop += moveY / scaleY;
                          movedY = (cur.scrollTop - start) * scaleY;
                      }
                      if (moveX) {
                          let start = cur.scrollLeft;
                          cur.scrollLeft += moveX / scaleX;
                          movedX = (cur.scrollLeft - start) * scaleX;
                      }
                      rect = { left: rect.left - movedX, top: rect.top - movedY,
                          right: rect.right - movedX, bottom: rect.bottom - movedY };
                      if (movedX && Math.abs(movedX - moveX) < 1)
                          x = "nearest";
                      if (movedY && Math.abs(movedY - moveY) < 1)
                          y = "nearest";
                  }
              }
              if (top)
                  break;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) { // A shadow root
              cur = cur.host;
          }
          else {
              break;
          }
      }
  }
  function scrollableParents(dom) {
      let doc = dom.ownerDocument, x, y;
      for (let cur = dom.parentNode; cur;) {
          if (cur == doc.body || (x && y)) {
              break;
          }
          else if (cur.nodeType == 1) {
              if (!y && cur.scrollHeight > cur.clientHeight)
                  y = cur;
              if (!x && cur.scrollWidth > cur.clientWidth)
                  x = cur;
              cur = cur.assignedSlot || cur.parentNode;
          }
          else if (cur.nodeType == 11) {
              cur = cur.host;
          }
          else {
              break;
          }
      }
      return { x, y };
  }
  class DOMSelectionState {
      constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
      }
      eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
              this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
          let { anchorNode, focusNode } = range;
          // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
          this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
      }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
      if (dom.setActive)
          return dom.setActive(); // in IE
      if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
      let stack = [];
      for (let cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument)
              break;
      }
      dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
              preventScrollSupported = { preventScroll: true };
              return true;
          }
      } : undefined);
      if (!preventScrollSupported) {
          preventScrollSupported = false;
          for (let i = 0; i < stack.length;) {
              let elt = stack[i++], top = stack[i++], left = stack[i++];
              if (elt.scrollTop != top)
                  elt.scrollTop = top;
              if (elt.scrollLeft != left)
                  elt.scrollLeft = left;
          }
      }
  }
  let scratchRange;
  function textRange(node, from, to = from) {
      let range = scratchRange || (scratchRange = document.createRange());
      range.setEnd(node, to);
      range.setStart(node, from);
      return range;
  }
  function dispatchKey(elt, name, code, mods) {
      let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
      if (mods)
          ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
      let down = new KeyboardEvent("keydown", options);
      down.synthetic = true;
      elt.dispatchEvent(down);
      let up = new KeyboardEvent("keyup", options);
      up.synthetic = true;
      elt.dispatchEvent(up);
      return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot$1(node) {
      while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
              return node;
          node = node.assignedSlot || node.parentNode;
      }
      return null;
  }
  function clearAttributes(node) {
      while (node.attributes.length)
          node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc, selection) {
      let node = selection.focusNode, offset = selection.focusOffset;
      if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
          return false;
      // Safari can report bogus offsets (#1152)
      offset = Math.min(offset, maxOffset(node));
      for (;;) {
          if (offset) {
              if (node.nodeType != 1)
                  return false;
              let prev = node.childNodes[offset - 1];
              if (prev.contentEditable == "false")
                  offset--;
              else {
                  node = prev;
                  offset = maxOffset(node);
              }
          }
          else if (node == doc) {
              return true;
          }
          else {
              offset = domIndex(node);
              node = node.parentNode;
          }
      }
  }
  function isScrolledToBottom(elt) {
      return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset > 0) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset > 0) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset - 1];
              offset = maxOffset(node);
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node);
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }
  function textNodeAfter(startNode, startOffset) {
      for (let node = startNode, offset = startOffset;;) {
          if (node.nodeType == 3 && offset < node.nodeValue.length) {
              return { node: node, offset: offset };
          }
          else if (node.nodeType == 1 && offset < node.childNodes.length) {
              if (node.contentEditable == "false")
                  return null;
              node = node.childNodes[offset];
              offset = 0;
          }
          else if (node.parentNode && !isBlockElement(node)) {
              offset = domIndex(node) + 1;
              node = node.parentNode;
          }
          else {
              return null;
          }
      }
  }

  class DOMPos {
      constructor(node, offset, precise = true) {
          this.node = node;
          this.offset = offset;
          this.precise = precise;
      }
      static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
      static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
  }
  const noChildren = [];
  class ContentView {
      constructor() {
          this.parent = null;
          this.dom = null;
          this.flags = 2 /* ViewFlag.NodeDirty */;
      }
      get overrideDOMText() { return null; }
      get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
          return this.posAtStart + this.length;
      }
      posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
              if (child == view)
                  return pos;
              pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
          return this.posBefore(view) + view.length;
      }
      sync(view, track) {
          if (this.flags & 2 /* ViewFlag.NodeDirty */) {
              let parent = this.dom;
              let prev = null, next;
              for (let child of this.children) {
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                          let contentView = ContentView.get(next);
                          if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                              child.reuseDOM(next);
                      }
                      child.sync(view, track);
                      child.flags &= -8 /* ViewFlag.Dirty */;
                  }
                  next = prev ? prev.nextSibling : parent.firstChild;
                  if (track && !track.written && track.node == parent && next != child.dom)
                      track.written = true;
                  if (child.dom.parentNode == parent) {
                      while (next && next != child.dom)
                          next = rm$1(next);
                  }
                  else {
                      parent.insertBefore(child.dom, next);
                  }
                  prev = child.dom;
              }
              next = prev ? prev.nextSibling : parent.firstChild;
              if (next && track && track.node == parent)
                  track.written = true;
              while (next)
                  next = rm$1(next);
          }
          else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
              for (let child of this.children)
                  if (child.flags & 7 /* ViewFlag.Dirty */) {
                      child.sync(view, track);
                      child.flags &= -8 /* ViewFlag.Dirty */;
                  }
          }
      }
      reuseDOM(_dom) { }
      localPosFromDOM(node, offset) {
          let after;
          if (node == this.dom) {
              after = this.dom.childNodes[offset];
          }
          else {
              let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
              for (;;) {
                  let parent = node.parentNode;
                  if (parent == this.dom)
                      break;
                  if (bias == 0 && parent.firstChild != parent.lastChild) {
                      if (node == parent.firstChild)
                          bias = -1;
                      else
                          bias = 1;
                  }
                  node = parent;
              }
              if (bias < 0)
                  after = node;
              else
                  after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
              return 0;
          while (after && !ContentView.get(after))
              after = after.nextSibling;
          if (!after)
              return this.length;
          for (let i = 0, pos = 0;; i++) {
              let child = this.children[i];
              if (child.dom == after)
                  return pos;
              pos += child.length + child.breakAfter;
          }
      }
      domBoundsAround(from, to, offset = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (pos < from && end > to)
                  return child.domBoundsAround(from, to, pos);
              if (end >= from && fromI == -1) {
                  fromI = i;
                  fromStart = pos;
              }
              if (pos > to && child.dom.parentNode == this.dom) {
                  toI = i;
                  toEnd = prevEnd;
                  break;
              }
              prevEnd = end;
              pos = end + child.breakAfter;
          }
          return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
      }
      markDirty(andParent = false) {
          this.flags |= 2 /* ViewFlag.NodeDirty */;
          this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
              if (childList)
                  parent.flags |= 2 /* ViewFlag.NodeDirty */;
              if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                  return;
              parent.flags |= 1 /* ViewFlag.ChildDirty */;
              childList = false;
          }
      }
      setParent(parent) {
          if (this.parent != parent) {
              this.parent = parent;
              if (this.flags & 7 /* ViewFlag.Dirty */)
                  this.markParentsDirty(true);
          }
      }
      setDOM(dom) {
          if (this.dom == dom)
              return;
          if (this.dom)
              this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
      }
      get rootView() {
          for (let v = this;;) {
              let parent = v.parent;
              if (!parent)
                  return v;
              v = parent;
          }
      }
      replaceChildren(from, to, children = noChildren) {
          this.markDirty();
          for (let i = from; i < to; i++) {
              let child = this.children[i];
              if (child.parent == this && children.indexOf(child) < 0)
                  child.destroy();
          }
          if (children.length < 250)
              this.children.splice(from, to - from, ...children);
          else
              this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
          for (let i = 0; i < children.length; i++)
              children[i].setParent(this);
      }
      ignoreMutation(_rec) { return false; }
      ignoreEvent(_event) { return false; }
      childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
      }
      childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
      }
      toString() {
          let name = this.constructor.name.replace("View", "");
          return name + (this.children.length ? "(" + this.children.join() + ")" :
              this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
              (this.breakAfter ? "#" : "");
      }
      static get(node) { return node.cmView; }
      get isEditable() { return true; }
      get isWidget() { return false; }
      get isHidden() { return false; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          return false;
      }
      become(other) { return false; }
      canReuseDOM(other) {
          return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() { return 0; }
      destroy() {
          for (let child of this.children)
              if (child.parent == this)
                  child.destroy();
          this.parent = null;
      }
  }
  ContentView.prototype.breakAfter = 0;
  // Remove a DOM node and return its next sibling.
  function rm$1(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
  }
  class ChildCursor {
      constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
      }
      findPos(pos, bias = 1) {
          for (;;) {
              if (pos > this.pos || pos == this.pos &&
                  (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                  this.off = pos - this.pos;
                  return this;
              }
              let next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
          }
      }
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
      let { children } = parent;
      let before = children.length ? children[fromI] : null;
      let last = insert.length ? insert[insert.length - 1] : null;
      let breakAtEnd = last ? last.breakAfter : breakAtStart;
      // Change within a single child
      if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
          before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
          return;
      if (toI < children.length) {
          let after = children[toI];
          // Make sure the end of the child after the update is preserved in `after`
          if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
              // If we're splitting a child, separate part of it to avoid that
              // being mangled when updating the child before the update.
              if (fromI == toI) {
                  after = after.split(toOff);
                  toOff = 0;
              }
              // If the element after the replacement should be merged with
              // the last replacing element, update `content`
              if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                  insert[insert.length - 1] = after;
              }
              else {
                  // Remove the start of the after element, if necessary, and
                  // add it to `content`.
                  if (toOff || after.children.length && !after.children[0].length)
                      after.merge(0, toOff, null, false, 0, openEnd);
                  insert.push(after);
              }
          }
          else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
              // The element at `toI` is entirely covered by this range.
              // Preserve its line break, if any.
              if (last)
                  last.breakAfter = 1;
              else
                  breakAtStart = 1;
          }
          // Since we've handled the next element from the current elements
          // now, make sure `toI` points after that.
          toI++;
      }
      if (before) {
          before.breakAfter = breakAtStart;
          if (fromOff > 0) {
              if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                  before.breakAfter = insert.shift().breakAfter;
              }
              else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                  before.merge(fromOff, before.length, null, false, openStart, 0);
              }
              fromI++;
          }
      }
      // Try to merge widgets on the boundaries of the replacement
      while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
              toI--;
              insert.pop();
              openEnd = insert.length ? 0 : openStart;
          }
          else if (children[fromI].become(insert[0])) {
              fromI++;
              insert.shift();
              openStart = insert.length ? 0 : openEnd;
          }
          else {
              break;
          }
      }
      if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
          children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
          fromI--;
      if (fromI < toI || insert.length)
          parent.replaceChildren(fromI, toI, insert);
  }
  function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
      let cur = parent.childCursor();
      let { i: toI, off: toOff } = cur.findPos(to, 1);
      let { i: fromI, off: fromOff } = cur.findPos(from, -1);
      let dLen = from - to;
      for (let view of insert)
          dLen += view.length;
      parent.length += dLen;
      replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
  }

  let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
  const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
  const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  const ie = !!(ie_upto10 || ie_11up || ie_edge);
  const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
  const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
  const webkit = "webkitFontSmoothing" in doc.documentElement.style;
  const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
  const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
      mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
      windows: /*@__PURE__*//Win/.test(nav.platform),
      linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
      ie,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /*@__PURE__*//Android\b/.test(nav.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };

  const MaxJoinLen = 256;
  class TextView extends ContentView {
      constructor(text) {
          super();
          this.text = text;
      }
      get length() { return this.text.length; }
      createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(view, track) {
          if (!this.dom)
              this.createDOM();
          if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom)
                  track.written = true;
              this.dom.nodeValue = this.text;
          }
      }
      reuseDOM(dom) {
          if (dom.nodeType == 3)
              this.createDOM(dom);
      }
      merge(from, to, source) {
          if ((this.flags & 8 /* ViewFlag.Composition */) ||
              source && (!(source instanceof TextView) ||
                  this.length - (to - from) + source.length > MaxJoinLen ||
                  (source.flags & 8 /* ViewFlag.Composition */)))
              return false;
          this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = new TextView(this.text.slice(from));
          this.text = this.text.slice(0, from);
          this.markDirty();
          result.flags |= this.flags & 8 /* ViewFlag.Composition */;
          return result;
      }
      localPosFromDOM(node, offset) {
          return node == this.dom ? offset : offset ? this.text.length : 0;
      }
      domAtPos(pos) { return new DOMPos(this.dom, pos); }
      domBoundsAround(_from, _to, offset) {
          return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
      }
  }
  class MarkView extends ContentView {
      constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch of children)
              ch.setParent(this);
      }
      setAttrs(dom) {
          clearAttributes(dom);
          if (this.mark.class)
              dom.className = this.mark.class;
          if (this.mark.attrs)
              for (let name in this.mark.attrs)
                  dom.setAttribute(name, this.mark.attrs[name]);
          return dom;
      }
      canReuseDOM(other) {
          return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
      }
      reuseDOM(node) {
          if (node.nodeName == this.mark.tagName.toUpperCase()) {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          if (!this.dom)
              this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
              this.setAttrs(this.dom);
          super.sync(view, track);
      }
      merge(from, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
              (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
              return false;
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
      }
      split(from) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt of this.children) {
              let end = off + elt.length;
              if (end > from)
                  result.push(off < from ? elt.split(from - off) : elt);
              if (detachFrom < 0 && off >= from)
                  detachFrom = i;
              off = end;
              i++;
          }
          let length = this.length - from;
          this.length = from;
          if (detachFrom > -1) {
              this.children.length = detachFrom;
              this.markDirty();
          }
          return new MarkView(this.mark, result, length);
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
      }
  }
  function textCoords(text, pos, side) {
      let length = text.nodeValue.length;
      if (pos > length)
          pos = length;
      let from = pos, to = pos, flatten = 0;
      if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
              if (pos) {
                  from--;
                  flatten = 1;
              } // FIXME this is wrong in RTL text
              else if (to < length) {
                  to++;
                  flatten = -1;
              }
          }
      }
      else {
          if (side < 0)
              from--;
          else if (to < length)
              to++;
      }
      let rects = textRange(text, from, to).getClientRects();
      if (!rects.length)
          return null;
      let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
      if (browser.safari && !flatten && rect.width == 0)
          rect = Array.prototype.find.call(rects, r => r.width) || rect;
      return flatten ? flattenRect(rect, flatten < 0) : rect || null;
  }
  // Also used for collapsed ranges that don't have a placeholder widget!
  class WidgetView extends ContentView {
      static create(widget, length, side) {
          return new WidgetView(widget, length, side);
      }
      constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
          this.prevWidget = null;
      }
      split(from) {
          let result = WidgetView.create(this.widget, this.length - from, this.side);
          this.length -= from;
          return result;
      }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      getSide() { return this.side; }
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      become(other) {
          if (other instanceof WidgetView && other.side == this.side &&
              this.widget.constructor == other.widget.constructor) {
              if (!this.widget.compare(other.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get overrideDOMText() {
          if (this.length == 0)
              return Text.empty;
          let top = this;
          while (top.parent)
              top = top.parent;
          let { view } = top, text = view && view.state.doc, start = this.posAtStart;
          return text ? text.slice(start, start + this.length) : Text.empty;
      }
      domAtPos(pos) {
          return (this.length ? pos == 0 : this.side > 0)
              ? DOMPos.before(this.dom)
              : DOMPos.after(this.dom, pos == this.length);
      }
      domBoundsAround() { return null; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
              return null;
          let fromBack = this.side ? this.side < 0 : pos > 0;
          for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
              rect = rects[i];
              if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                  break;
          }
          return flattenRect(rect, !fromBack);
      }
      get isEditable() { return false; }
      get isWidget() { return true; }
      get isHidden() { return this.widget.isHidden; }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
  }
  // These are drawn around uneditable widgets to avoid a number of
  // browser bugs that show up when the cursor is directly next to
  // uneditable inline content.
  class WidgetBufferView extends ContentView {
      constructor(side) {
          super();
          this.side = side;
      }
      get length() { return 0; }
      merge() { return false; }
      become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
      }
      split() { return new WidgetBufferView(this.side); }
      sync() {
          if (!this.dom) {
              let dom = document.createElement("img");
              dom.className = "cm-widgetBuffer";
              dom.setAttribute("aria-hidden", "true");
              this.setDOM(dom);
          }
      }
      getSide() { return this.side; }
      domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
      localPosFromDOM() { return 0; }
      domBoundsAround() { return null; }
      coordsAt(pos) {
          return this.dom.getBoundingClientRect();
      }
      get overrideDOMText() {
          return Text.empty;
      }
      get isHidden() { return true; }
  }
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
      let dom = parent.dom, { children } = parent, i = 0;
      for (let off = 0; i < children.length; i++) {
          let child = children[i], end = off + child.length;
          if (end == off && child.getSide() <= 0)
              continue;
          if (pos > off && pos < end && child.dom.parentNode == dom)
              return child.domAtPos(pos - off);
          if (pos <= off)
              break;
          off = end;
      }
      for (let j = i; j > 0; j--) {
          let prev = children[j - 1];
          if (prev.dom.parentNode == dom)
              return prev.domAtPos(prev.length);
      }
      for (let j = i; j < children.length; j++) {
          let next = children[j];
          if (next.dom.parentNode == dom)
              return next.domAtPos(0);
      }
      return new DOMPos(dom, 0);
  }
  // Assumes `view`, if a mark view, has precisely 1 child.
  function joinInlineInto(parent, view, open) {
      let last, { children } = parent;
      if (open > 0 && view instanceof MarkView && children.length &&
          (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
      }
      else {
          children.push(view);
          view.setParent(parent);
      }
      parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
      let before = null, beforePos = -1, after = null, afterPos = -1;
      function scan(view, pos) {
          for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
              let child = view.children[i], end = off + child.length;
              if (end >= pos) {
                  if (child.children.length) {
                      scan(child, pos - off);
                  }
                  else if ((!after || after.isHidden && side > 0) &&
                      (end > pos || off == end && child.getSide() > 0)) {
                      after = child;
                      afterPos = pos - off;
                  }
                  else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                      before = child;
                      beforePos = pos - off;
                  }
              }
              off = end;
          }
      }
      scan(view, pos);
      let target = (side < 0 ? before : after) || before || after;
      if (target)
          return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
      return fallbackRect(view);
  }
  function fallbackRect(view) {
      let last = view.dom.lastChild;
      if (!last)
          return view.dom.getBoundingClientRect();
      let rects = clientRectsFor(last);
      return rects[rects.length - 1] || null;
  }

  function combineAttrs(source, target) {
      for (let name in source) {
          if (name == "class" && target.class)
              target.class += " " + source.class;
          else if (name == "style" && target.style)
              target.style += ";" + source.style;
          else
              target[name] = source[name];
      }
      return target;
  }
  const noAttrs$1 = /*@__PURE__*/Object.create(null);
  function attrsEq(a, b, ignore) {
      if (a == b)
          return true;
      if (!a)
          a = noAttrs$1;
      if (!b)
          b = noAttrs$1;
      let keysA = Object.keys(a), keysB = Object.keys(b);
      if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
          keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
          return false;
      for (let key of keysA) {
          if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
              return false;
      }
      return true;
  }
  function updateAttrs(dom, prev, attrs) {
      let changed = false;
      if (prev)
          for (let name in prev)
              if (!(attrs && name in attrs)) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = "";
                  else
                      dom.removeAttribute(name);
              }
      if (attrs)
          for (let name in attrs)
              if (!(prev && prev[name] == attrs[name])) {
                  changed = true;
                  if (name == "style")
                      dom.style.cssText = attrs[name];
                  else
                      dom.setAttribute(name, attrs[name]);
              }
      return changed;
  }
  function getAttrs(dom) {
      let attrs = Object.create(null);
      for (let i = 0; i < dom.attributes.length; i++) {
          let attr = dom.attributes[i];
          attrs[attr.name] = attr.value;
      }
      return attrs;
  }

  /**
  Widgets added to the content are described by subclasses of this
  class. Using a description object like that makes it possible to
  delay creating of the DOM structure for a widget until it is
  needed, and to avoid redrawing widgets even if the decorations
  that define them are recreated.
  */
  class WidgetType {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) { return false; }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom, view) { return false; }
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() { return -1; }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
      get lineBreaks() { return 0; }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) { return true; }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
      coordsAt(dom, pos, side) { return null; }
      /**
      @internal
      */
      get isHidden() { return false; }
      /**
      @internal
      */
      get editable() { return false; }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) { }
  }
  /**
  The different types of blocks that can occur in an editor view.
  */
  var BlockType = /*@__PURE__*/(function (BlockType) {
      /**
      A line of text.
      */
      BlockType[BlockType["Text"] = 0] = "Text";
      /**
      A block widget associated with the position after it.
      */
      BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
      /**
      A block widget associated with the position before it.
      */
      BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
      /**
      A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
      */
      BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType})(BlockType || (BlockType = {}));
  /**
  A decoration provides information on how to draw or style a piece
  of content. You'll usually use it wrapped in a
  [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
  @nonabstract
  */
  class Decoration extends RangeValue {
      constructor(
      /**
      @internal
      */
      startSide, 
      /**
      @internal
      */
      endSide, 
      /**
      @internal
      */
      widget, 
      /**
      The config object used to create this decoration. You can
      include additional properties in there to store metadata about
      your decoration.
      */
      spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() { return false; }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
          return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
          let side = Math.max(-1e4, Math.min(10000, spec.side || 0)), block = !!spec.block;
          side += (block && !spec.inlineOrder)
              ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -4e8 /* Side.BlockBefore */)
              : (side > 0 ? 100000000 /* Side.InlineAfter */ : -1e8 /* Side.InlineBefore */);
          return new PointDecoration(spec, side, side, block, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
          let block = !!spec.block, startSide, endSide;
          if (spec.isBlockGap) {
              startSide = -5e8 /* Side.GapStart */;
              endSide = 400000000 /* Side.GapEnd */;
          }
          else {
              let { start, end } = getInclusive(spec, block);
              startSide = (start ? (block ? -3e8 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
              endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -6e8 /* Side.NonIncEnd */) + 1;
          }
          return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
          return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
          return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
  }
  /**
  The empty set of decorations.
  */
  Decoration.none = RangeSet.empty;
  class MarkDecoration extends Decoration {
      constructor(spec) {
          let { start, end } = getInclusive(spec);
          super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -6e8 /* Side.NonIncEnd */, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
      }
      eq(other) {
          var _a, _b;
          return this == other ||
              other instanceof MarkDecoration &&
                  this.tagName == other.tagName &&
                  (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                  attrsEq(this.attrs, other.attrs, "class");
      }
      range(from, to = from) {
          if (from >= to)
              throw new RangeError("Mark decorations may not be empty");
          return super.range(from, to);
      }
  }
  MarkDecoration.prototype.point = false;
  class LineDecoration extends Decoration {
      constructor(spec) {
          super(-2e8 /* Side.Line */, -2e8 /* Side.Line */, null, spec);
      }
      eq(other) {
          return other instanceof LineDecoration &&
              this.spec.class == other.spec.class &&
              attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from, to = from) {
          if (to != from)
              throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from, to);
      }
  }
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  class PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block;
          this.isReplace = isReplace;
          this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
          return this.startSide != this.endSide ? BlockType.WidgetRange
              : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() {
          return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
      eq(other) {
          return other instanceof PointDecoration &&
              widgetsEq(this.widget, other.widget) &&
              this.block == other.block &&
              this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from, to = from) {
          if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
              throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from)
              throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from, to);
      }
  }
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
      let { inclusiveStart: start, inclusiveEnd: end } = spec;
      if (start == null)
          start = spec.inclusive;
      if (end == null)
          end = spec.inclusive;
      return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a, b) {
      return a == b || !!(a && b && a.compare(b));
  }
  function addRange(from, to, ranges, margin = 0) {
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last] + margin >= from)
          ranges[last] = Math.max(ranges[last], to);
      else
          ranges.push(from, to);
  }

  class LineView extends ContentView {
      constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = undefined;
          this.attrs = null;
          this.breakAfter = 0;
      }
      // Consumes source
      merge(from, to, source, hasStart, openStart, openEnd) {
          if (source) {
              if (!(source instanceof LineView))
                  return false;
              if (!this.dom)
                  source.transferDOM(this); // Reuse source.dom when appropriate
          }
          if (hasStart)
              this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
          return true;
      }
      split(at) {
          let end = new LineView;
          end.breakAfter = this.breakAfter;
          if (this.length == 0)
              return end;
          let { i, off } = this.childPos(at);
          if (off) {
              end.append(this.children[i].split(off), 0);
              this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
              i++;
          }
          for (let j = i; j < this.children.length; j++)
              end.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
              this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end;
      }
      transferDOM(other) {
          if (!this.dom)
              return;
          this.markDirty();
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
          this.prevAttrs = undefined;
          this.dom = null;
      }
      setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                  this.prevAttrs = this.attrs;
                  this.markDirty();
              }
              this.attrs = attrs;
          }
      }
      append(child, openStart) {
          joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
              this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
              this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
      }
      reuseDOM(node) {
          if (node.nodeName == "DIV") {
              this.setDOM(node);
              this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
          }
      }
      sync(view, track) {
          var _a;
          if (!this.dom) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
              clearAttributes(this.dom);
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
          }
          if (this.prevAttrs !== undefined) {
              updateAttrs(this.dom, this.prevAttrs, this.attrs);
              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
          }
          super.sync(view, track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
              last = last.lastChild;
          if (!last || !this.length ||
              last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                  (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
              let hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
          }
      }
      measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
              return null;
          let totalWidth = 0, textHeight;
          for (let child of this.children) {
              if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                  return null;
              let rects = clientRectsFor(child.dom);
              if (rects.length != 1)
                  return null;
              totalWidth += rects[0].width;
              textHeight = rects[0].height;
          }
          return !totalWidth ? null : {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length,
              textHeight
          };
      }
      coordsAt(pos, side) {
          let rect = coordsInChildren(this, pos, side);
          // Correct rectangle height for empty lines when the returned
          // height is larger than the text height.
          if (!this.children.length && rect && this.parent) {
              let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
              if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                  let dist = (height - heightOracle.textHeight) / 2;
                  return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
              }
          }
          return rect;
      }
      become(other) {
          return other instanceof LineView && this.children.length == 0 && other.children.length == 0 &&
              attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
      covers() { return true; }
      static find(docView, pos) {
          for (let i = 0, off = 0; i < docView.children.length; i++) {
              let block = docView.children[i], end = off + block.length;
              if (end >= pos) {
                  if (block instanceof LineView)
                      return block;
                  if (end > pos)
                      break;
              }
              off = end + block.breakAfter;
          }
          return null;
      }
  }
  class BlockWidgetView extends ContentView {
      constructor(widget, length, deco) {
          super();
          this.widget = widget;
          this.length = length;
          this.deco = deco;
          this.breakAfter = 0;
          this.prevWidget = null;
      }
      merge(from, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
              from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
              return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
      }
      domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      split(at) {
          let len = this.length - at;
          this.length = at;
          let end = new BlockWidgetView(this.widget, len, this.deco);
          end.breakAfter = this.breakAfter;
          return end;
      }
      get children() { return noChildren; }
      sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
              if (this.dom && this.prevWidget)
                  this.prevWidget.destroy(this.dom);
              this.prevWidget = null;
              this.setDOM(this.widget.toDOM(view));
              if (!this.widget.editable)
                  this.dom.contentEditable = "false";
          }
      }
      get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
      domBoundsAround() { return null; }
      become(other) {
          if (other instanceof BlockWidgetView &&
              other.widget.constructor == this.widget.constructor) {
              if (!other.widget.compare(this.widget))
                  this.markDirty(true);
              if (this.dom && !this.prevWidget)
                  this.prevWidget = this.widget;
              this.widget = other.widget;
              this.length = other.length;
              this.deco = other.deco;
              this.breakAfter = other.breakAfter;
              return true;
          }
          return false;
      }
      ignoreMutation() { return true; }
      ignoreEvent(event) { return this.widget.ignoreEvent(event); }
      get isEditable() { return false; }
      get isWidget() { return true; }
      coordsAt(pos, side) {
          let custom = this.widget.coordsAt(this.dom, pos, side);
          if (custom)
              return custom;
          if (this.widget instanceof BlockGapWidget)
              return null;
          return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
      destroy() {
          super.destroy();
          if (this.dom)
              this.widget.destroy(this.dom);
      }
      covers(side) {
          let { startSide, endSide } = this.deco;
          return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
  }
  class BlockGapWidget extends WidgetType {
      constructor(height) {
          super();
          this.height = height;
      }
      toDOM() {
          let elt = document.createElement("div");
          elt.className = "cm-gap";
          this.updateDOM(elt);
          return elt;
      }
      eq(other) { return other.height == this.height; }
      updateDOM(elt) {
          elt.style.height = this.height + "px";
          return true;
      }
      get editable() { return true; }
      get estimatedHeight() { return this.height; }
      ignoreEvent() { return false; }
  }

  class ContentBuilder {
      constructor(doc, pos, end, disallowBlockEffectsFor) {
          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.disallowBlockEffectsFor = disallowBlockEffectsFor;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0 /* Buf.No */;
          this.bufferMarks = [];
          // Set to false directly after a widget that covers the position after it
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
      }
      posCovered() {
          if (this.content.length == 0)
              return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
      getLine() {
          if (!this.curLine) {
              this.content.push(this.curLine = new LineView);
              this.atCursorPos = true;
          }
          return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
          if (this.pendingBuffer) {
              this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
              this.pendingBuffer = 0 /* Buf.No */;
          }
      }
      addBlockWidget(view) {
          this.flushBuffer();
          this.curLine = null;
          this.content.push(view);
      }
      finish(openEnd) {
          if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
              this.flushBuffer();
          else
              this.pendingBuffer = 0 /* Buf.No */;
          if (!this.posCovered() &&
              !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
              this.getLine();
      }
      buildText(length, active, openStart) {
          while (length > 0) {
              if (this.textOff == this.text.length) {
                  let { value, lineBreak, done } = this.cursor.next(this.skip);
                  this.skip = 0;
                  if (done)
                      throw new Error("Ran out of text content when drawing inline views");
                  if (lineBreak) {
                      if (!this.posCovered())
                          this.getLine();
                      if (this.content.length)
                          this.content[this.content.length - 1].breakAfter = 1;
                      else
                          this.breakAtStart = 1;
                      this.flushBuffer();
                      this.curLine = null;
                      this.atCursorPos = true;
                      length--;
                      continue;
                  }
                  else {
                      this.text = value;
                      this.textOff = 0;
                  }
              }
              let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
              this.flushBuffer(active.slice(active.length - openStart));
              this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.atCursorPos = true;
              this.textOff += take;
              length -= take;
              openStart = 0;
          }
      }
      span(from, to, active, openStart) {
          this.buildText(to - from, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      point(from, to, deco, active, openStart, index) {
          if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
              if (deco.block)
                  throw new RangeError("Block decorations may not be specified via plugins");
              if (to > this.doc.lineAt(this.pos).to)
                  throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
          }
          let len = to - from;
          if (deco instanceof PointDecoration) {
              if (deco.block) {
                  if (deco.startSide > 0 && !this.posCovered())
                      this.getLine();
                  this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
              }
              else {
                  let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                  let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                      (from < to || deco.startSide > 0);
                  let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                  let line = this.getLine();
                  if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                      this.pendingBuffer = 0 /* Buf.No */;
                  this.flushBuffer(active);
                  if (cursorBefore) {
                      line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                      openStart = active.length + Math.max(0, openStart - active.length);
                  }
                  line.append(wrapMarks(view, active), openStart);
                  this.atCursorPos = cursorAfter;
                  this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                  if (this.pendingBuffer)
                      this.bufferMarks = active.slice();
              }
          }
          else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
              this.getLine().addLineDeco(deco);
          }
          if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                  this.textOff += len;
              }
              else {
                  this.skip += len - (this.text.length - this.textOff);
                  this.text = "";
                  this.textOff = 0;
              }
              this.pos = to;
          }
          if (this.openStart < 0)
              this.openStart = openStart;
      }
      static build(text, from, to, decorations, dynamicDecorationMap) {
          let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
          builder.openEnd = RangeSet.spans(decorations, from, to, builder);
          if (builder.openStart < 0)
              builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
      }
  }
  function wrapMarks(view, active) {
      for (let mark of active)
          view = new MarkView(mark, [view], view.length);
      return view;
  }
  class NullWidget extends WidgetType {
      constructor(tag) {
          super();
          this.tag = tag;
      }
      eq(other) { return other.tag == this.tag; }
      toDOM() { return document.createElement(this.tag); }
      updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
      get isHidden() { return true; }
  }
  NullWidget.inline = /*@__PURE__*/new NullWidget("span");
  NullWidget.block = /*@__PURE__*/new NullWidget("div");

  /**
  Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  */
  var Direction$1 = /*@__PURE__*/(function (Direction) {
      // (These are chosen to match the base levels, in bidi algorithm
      // terms, of spans in that direction.)
      /**
      Left-to-right.
      */
      Direction[Direction["LTR"] = 0] = "LTR";
      /**
      Right-to-left.
      */
      Direction[Direction["RTL"] = 1] = "RTL";
  return Direction})(Direction$1 || (Direction$1 = {}));
  const LTR = Direction$1.LTR, RTL = Direction$1.RTL;
  // Decode a string with each type encoded as log2(type)
  function dec(str) {
      let result = [];
      for (let i = 0; i < str.length; i++)
          result.push(1 << +str[i]);
      return result;
  }
  // Character types for codepoints 0 to 0xf8
  const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  // Character types for codepoints 0x600 to 0x6f9
  const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
  // There's a lot more in
  // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
  // which are left out to keep code size down.
  for (let p of ["()", "[]", "{}"]) {
      let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
      Brackets[l] = r;
      Brackets[r] = -l;
  }
  function charType(ch) {
      return ch <= 0xf7 ? LowTypes[ch] :
          0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
              0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                  0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                      0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                          0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
  }
  const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  /**
  Represents a contiguous range of text that has a single direction
  (as in left-to-right or right-to-left).
  */
  class BidiSpan {
      /**
      The direction of this span.
      */
      get dir() { return this.level % 2 ? RTL : LTR; }
      /**
      @internal
      */
      constructor(
      /**
      The start of the span (relative to the start of the line).
      */
      from, 
      /**
      The end of the span.
      */
      to, 
      /**
      The ["bidi
      level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
      of the span (in this context, 0 means
      left-to-right, 1 means right-to-left, 2 means left-to-right
      number inside right-to-left text).
      */
      level) {
          this.from = from;
          this.to = to;
          this.level = level;
      }
      /**
      @internal
      */
      side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
      /**
      @internal
      */
      forward(forward, dir) { return forward == (this.dir == dir); }
      /**
      @internal
      */
      static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
              let span = order[i];
              if (span.from <= index && span.to >= index) {
                  if (span.level == level)
                      return i;
                  // When multiple spans match, if assoc != 0, take the one that
                  // covers that side, otherwise take the one with the minimum
                  // level.
                  if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                      maybe = i;
              }
          }
          if (maybe < 0)
              throw new RangeError("Index out of range");
          return maybe;
      }
  }
  function isolatesEq(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++) {
          let iA = a[i], iB = b[i];
          if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
              return false;
      }
      return true;
  }
  // Reused array of character types
  const types = [];
  // Fill in the character types (in `types`) from `from` to `to` and
  // apply W normalization rules.
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
      for (let iI = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          let prevType = iI ? 256 /* T.NI */ : outerType;
          // W1. Examine each non-spacing mark (NSM) in the level run, and
          // change the type of the NSM to the type of the previous
          // character. If the NSM is at the start of the level run, it will
          // get the type of sor.
          // W2. Search backwards from each instance of a European number
          // until the first strong type (R, L, AL, or sor) is found. If an
          // AL is found, change the type of the European number to Arabic
          // number.
          // W3. Change all ALs to R.
          // (Left after this: L, R, EN, AN, ET, CS, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = charType(line.charCodeAt(i));
              if (type == 512 /* T.NSM */)
                  type = prev;
              else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                  type = 16 /* T.AN */;
              types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
              prev = type;
          }
          // W5. A sequence of European terminators adjacent to European
          // numbers changes to all European numbers.
          // W6. Otherwise, separators and terminators change to Other
          // Neutral.
          // W7. Search backwards from each instance of a European number
          // until the first strong type (R, L, or sor) is found. If an L is
          // found, then change the type of the European number to L.
          // (Left after this: L, R, EN+AN, NI)
          for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
              let type = types[i];
              if (type == 128 /* T.CS */) {
                  if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                      type = types[i] = prev;
                  else
                      types[i] = 256 /* T.NI */;
              }
              else if (type == 64 /* T.ET */) {
                  let end = i + 1;
                  while (end < to && types[end] == 64 /* T.ET */)
                      end++;
                  let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                  for (let j = i; j < end; j++)
                      types[j] = replace;
                  i = end - 1;
              }
              else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                  types[i] = 1 /* T.L */;
              }
              prev = type;
              if (type & 7 /* T.Strong */)
                  prevStrong = type;
          }
      }
  }
  // Process brackets throughout a run sequence.
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
      let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
      for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N0. Process bracket pairs in an isolating run sequence
          // sequentially in the logical order of the text positions of the
          // opening paired brackets using the logic given below. Within this
          // scope, bidirectional types EN and AN are treated as R.
          for (let i = from, ch, br, type; i < to; i++) {
              // Keeps [startIndex, type, strongSeen] triples for each open
              // bracket on BracketStack.
              if (br = Brackets[ch = line.charCodeAt(i)]) {
                  if (br < 0) { // Closing bracket
                      for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                          if (BracketStack[sJ + 1] == -br) {
                              let flags = BracketStack[sJ + 2];
                              let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                  !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                      (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                              if (type)
                                  types[i] = types[BracketStack[sJ]] = type;
                              sI = sJ;
                              break;
                          }
                      }
                  }
                  else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                      break;
                  }
                  else {
                      BracketStack[sI++] = i;
                      BracketStack[sI++] = ch;
                      BracketStack[sI++] = context;
                  }
              }
              else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                  let embed = type == outerType;
                  context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                  for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                      let cur = BracketStack[sJ + 2];
                      if (cur & 2 /* Bracketed.EmbedInside */)
                          break;
                      if (embed) {
                          BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                      }
                      else {
                          if (cur & 4 /* Bracketed.OppositeInside */)
                              break;
                          BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                      }
                  }
              }
          }
      }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
      for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
          let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
          // N1. A sequence of neutrals takes the direction of the
          // surrounding strong text if the text on both sides has the same
          // direction. European and Arabic numbers act as if they were R in
          // terms of their influence on neutrals. Start-of-level-run (sor)
          // and end-of-level-run (eor) are used at level run boundaries.
          // N2. Any remaining neutrals take the embedding direction.
          // (Left after this: L, R, EN+AN)
          for (let i = from; i < to;) {
              let type = types[i];
              if (type == 256 /* T.NI */) {
                  let end = i + 1;
                  for (;;) {
                      if (end == to) {
                          if (iI == isolates.length)
                              break;
                          end = isolates[iI++].to;
                          to = iI < isolates.length ? isolates[iI].from : rTo;
                      }
                      else if (types[end] == 256 /* T.NI */) {
                          end++;
                      }
                      else {
                          break;
                      }
                  }
                  let beforeL = prev == 1 /* T.L */;
                  let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
                  let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                  for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                      if (j == fromJ) {
                          j = isolates[--jI].from;
                          fromJ = jI ? isolates[jI - 1].to : rFrom;
                      }
                      types[--j] = replace;
                  }
                  i = end;
              }
              else {
                  prev = type;
                  i++;
              }
          }
      }
  }
  // Find the contiguous ranges of character types in a given range, and
  // emit spans for them. Flip the order of the spans as appropriate
  // based on the level, and call through to compute the spans for
  // isolates at the proper point.
  function emitSpans(line, from, to, level, baseLevel, isolates, order) {
      let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
      if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
          for (let iCh = from, iI = 0; iCh < to;) {
              // Scan a section of characters in direction ourType, unless
              // there's another type of char right after iCh, in which case
              // we scan a section of other characters (which, if ourType ==
              // T.L, may contain both T.R and T.AN chars).
              let sameDir = true, isNum = false;
              if (iI == isolates.length || iCh < isolates[iI].from) {
                  let next = types[iCh];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              // Holds an array of isolates to pass to a recursive call if we
              // must recurse (to distinguish T.AN inside an RTL section in
              // LTR text), null if we can emit directly
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI < isolates.length && iScan == isolates[iI].from) {
                      if (isNum)
                          break run;
                      let iso = isolates[iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.to, jI = iI + 1;;) {
                              if (upto == to)
                                  break run;
                              if (jI < isolates.length && isolates[jI].from == upto)
                                  upto = isolates[jI++].to;
                              else if (types[upto] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      iI++;
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.from > iCh)
                              order.push(new BidiSpan(iCh, iso.from, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.to;
                      }
                      iScan = iso.to;
                  }
                  else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
                      break;
                  }
                  else {
                      iScan++;
                  }
              }
              if (recurse)
                  emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
              else if (iCh < iScan)
                  order.push(new BidiSpan(iCh, iScan, localLevel));
              iCh = iScan;
          }
      }
      else {
          // Iterate in reverse to flip the span order. Same code again, but
          // going from the back of the section to the front
          for (let iCh = to, iI = isolates.length; iCh > from;) {
              let sameDir = true, isNum = false;
              if (!iI || iCh > isolates[iI - 1].to) {
                  let next = types[iCh - 1];
                  if (next != ourType) {
                      sameDir = false;
                      isNum = next == 16 /* T.AN */;
                  }
              }
              let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
              let localLevel = sameDir ? level : level + 1;
              let iScan = iCh;
              run: for (;;) {
                  if (iI && iScan == isolates[iI - 1].to) {
                      if (isNum)
                          break run;
                      let iso = isolates[--iI];
                      // Scan ahead to verify that there is another char in this dir after the isolate(s)
                      if (!sameDir)
                          for (let upto = iso.from, jI = iI;;) {
                              if (upto == from)
                                  break run;
                              if (jI && isolates[jI - 1].to == upto)
                                  upto = isolates[--jI].from;
                              else if (types[upto - 1] == ourType)
                                  break run;
                              else
                                  break;
                          }
                      if (recurse) {
                          recurse.push(iso);
                      }
                      else {
                          if (iso.to < iCh)
                              order.push(new BidiSpan(iso.to, iCh, localLevel));
                          let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                          computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                          iCh = iso.from;
                      }
                      iScan = iso.from;
                  }
                  else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
                      break;
                  }
                  else {
                      iScan--;
                  }
              }
              if (recurse)
                  emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
              else if (iScan < iCh)
                  order.push(new BidiSpan(iScan, iCh, localLevel));
              iCh = iScan;
          }
      }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
      let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
      computeCharTypes(line, from, to, isolates, outerType);
      processBracketPairs(line, from, to, isolates, outerType);
      processNeutrals(from, to, isolates, outerType);
      emitSpans(line, from, to, level, baseLevel, isolates, order);
  }
  function computeOrder(line, direction, isolates) {
      if (!line)
          return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
      if (direction == LTR && !isolates.length && !BidiRE.test(line))
          return trivialOrder(line.length);
      if (isolates.length)
          while (line.length > types.length)
              types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
      let order = [], level = direction == LTR ? 0 : 1;
      computeSectionOrder(line, level, level, isolates, 0, line.length, order);
      return order;
  }
  function trivialOrder(length) {
      return [new BidiSpan(0, length, 0)];
  }
  let movedOver = "";
  // This implementation moves strictly visually, without concern for a
  // traversal visiting every logical position in the string. It will
  // still do so for simple input, but situations like multiple isolates
  // with the same level next to each other, or text going against the
  // main dir at the end of the line, will make some positions
  // unreachable with this motion. Each visible cursor position will
  // correspond to the lower-level bidi span that touches it.
  //
  // The alternative would be to solve an order globally for a given
  // line, making sure that it includes every position, but that would
  // require associating non-canonical (higher bidi span level)
  // positions with a given visual position, which is likely to confuse
  // people. (And would generally be a lot more complicated.)
  function moveVisually(line, order, dir, start, forward) {
      var _a;
      let startIndex = start.head - line.from;
      let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
      let span = order[spanI], spanEnd = span.side(forward, dir);
      // End of span
      if (startIndex == spanEnd) {
          let nextI = spanI += forward ? 1 : -1;
          if (nextI < 0 || nextI >= order.length)
              return null;
          span = order[spanI = nextI];
          startIndex = span.side(!forward, dir);
          spanEnd = span.side(forward, dir);
      }
      let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
      if (nextIndex < span.from || nextIndex > span.to)
          nextIndex = spanEnd;
      movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
      let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
      if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
          return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
      return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text, from, to) {
      for (let i = from; i < to; i++) {
          let type = charType(text.charCodeAt(i));
          if (type == 1 /* T.L */)
              return LTR;
          if (type == 2 /* T.R */ || type == 4 /* T.AL */)
              return RTL;
      }
      return LTR;
  }

  const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
  const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
  const mouseSelectionStyle = /*@__PURE__*/Facet.define();
  const exceptionSink = /*@__PURE__*/Facet.define();
  const updateListener = /*@__PURE__*/Facet.define();
  const inputHandler$1 = /*@__PURE__*/Facet.define();
  const focusChangeEffect = /*@__PURE__*/Facet.define();
  const clipboardInputFilter = /*@__PURE__*/Facet.define();
  const clipboardOutputFilter = /*@__PURE__*/Facet.define();
  const perLineTextDirection = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const nativeSelectionHidden = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  const scrollHandler = /*@__PURE__*/Facet.define();
  class ScrollTarget {
      constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
      // This data structure is abused to also store precise scroll
      // snapshots, instead of a `scrollIntoView` request. When this
      // flag is `true`, `range` points at a position in the reference
      // line, `yMargin` holds the difference between the top of that
      // line and the top of the editor, and `xMargin` holds the
      // editor's `scrollLeft`.
      isSnapshot = false) {
          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
          this.isSnapshot = isSnapshot;
      }
      map(changes) {
          return changes.empty ? this :
              new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
      clip(state) {
          return this.range.to <= state.doc.length ? this :
              new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
  }
  const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
  const setEditContextFormatting = /*@__PURE__*/StateEffect.define();
  /**
  Log or report an unhandled exception in client code. Should
  probably only be used by extension code that allows client code to
  provide functions, and calls those functions in a context where an
  exception can't be propagated to calling code in a reasonable way
  (for example when in an event handler).

  Either calls a handler registered with
  [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
  `window.onerror`, if defined, or `console.error` (in which case
  it'll pass `context`, when given, as first argument).
  */
  function logException(state, exception, context) {
      let handler = state.facet(exceptionSink);
      if (handler.length)
          handler[0](exception);
      else if (window.onerror)
          window.onerror(String(exception), context, undefined, undefined, exception);
      else if (context)
          console.error(context + ":", exception);
      else
          console.error(exception);
  }
  const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
  let nextPluginID = 0;
  const viewPlugin = /*@__PURE__*/Facet.define();
  /**
  View plugins associate stateful values with a view. They can
  influence the way the content is drawn, and are notified of things
  that happen in the view.
  */
  class ViewPlugin {
      constructor(
      /**
      @internal
      */
      id, 
      /**
      @internal
      */
      create, 
      /**
      @internal
      */
      domEventHandlers, 
      /**
      @internal
      */
      domEventObservers, buildExtensions) {
          this.id = id;
          this.create = create;
          this.domEventHandlers = domEventHandlers;
          this.domEventObservers = domEventObservers;
          this.extension = buildExtensions(this);
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create, spec) {
          const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
          return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
              let ext = [viewPlugin.of(plugin)];
              if (deco)
                  ext.push(decorations.of(view => {
                      let pluginInst = view.plugin(plugin);
                      return pluginInst ? deco(pluginInst) : Decoration.none;
                  }));
              if (provide)
                  ext.push(provide(plugin));
              return ext;
          });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
          return ViewPlugin.define(view => new cls(view), spec);
      }
  }
  class PluginInstance {
      constructor(spec) {
          this.spec = spec;
          // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `false`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.
          this.mustUpdate = null;
          // This is null when the plugin is initially created, but
          // initialized on the first update.
          this.value = null;
      }
      update(view) {
          if (!this.value) {
              if (this.spec) {
                  try {
                      this.value = this.spec.create(view);
                  }
                  catch (e) {
                      logException(view.state, e, "CodeMirror plugin crashed");
                      this.deactivate();
                  }
              }
          }
          else if (this.mustUpdate) {
              let update = this.mustUpdate;
              this.mustUpdate = null;
              if (this.value.update) {
                  try {
                      this.value.update(update);
                  }
                  catch (e) {
                      logException(update.state, e, "CodeMirror plugin crashed");
                      if (this.value.destroy)
                          try {
                              this.value.destroy();
                          }
                          catch (_) { }
                      this.deactivate();
                  }
              }
          }
          return this;
      }
      destroy(view) {
          var _a;
          if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                  this.value.destroy();
              }
              catch (e) {
                  logException(view.state, e, "CodeMirror plugin crashed");
              }
          }
      }
      deactivate() {
          this.spec = this.value = null;
      }
  }
  const editorAttributes = /*@__PURE__*/Facet.define();
  const contentAttributes = /*@__PURE__*/Facet.define();
  // Provide decorations
  const decorations = /*@__PURE__*/Facet.define();
  const outerDecorations = /*@__PURE__*/Facet.define();
  const atomicRanges = /*@__PURE__*/Facet.define();
  const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
  function getIsolatedRanges(view, line) {
      let isolates = view.state.facet(bidiIsolatedRanges);
      if (!isolates.length)
          return isolates;
      let sets = isolates.map(i => i instanceof Function ? i(view) : i);
      let result = [];
      RangeSet.spans(sets, line.from, line.to, {
          point() { },
          span(fromDoc, toDoc, active, open) {
              let from = fromDoc - line.from, to = toDoc - line.from;
              let level = result;
              for (let i = active.length - 1; i >= 0; i--, open--) {
                  let direction = active[i].spec.bidiIsolate, update;
                  if (direction == null)
                      direction = autoDirection(line.text, from, to);
                  if (open > 0 && level.length &&
                      (update = level[level.length - 1]).to == from && update.direction == direction) {
                      update.to = to;
                      level = update.inner;
                  }
                  else {
                      let add = { from, to, direction, inner: [] };
                      level.push(add);
                      level = add.inner;
                  }
              }
          }
      });
      return result;
  }
  const scrollMargins = /*@__PURE__*/Facet.define();
  function getScrollMargins(view) {
      let left = 0, right = 0, top = 0, bottom = 0;
      for (let source of view.state.facet(scrollMargins)) {
          let m = source(view);
          if (m) {
              if (m.left != null)
                  left = Math.max(left, m.left);
              if (m.right != null)
                  right = Math.max(right, m.right);
              if (m.top != null)
                  top = Math.max(top, m.top);
              if (m.bottom != null)
                  bottom = Math.max(bottom, m.bottom);
          }
      }
      return { left, right, top, bottom };
  }
  const styleModule = /*@__PURE__*/Facet.define();
  class ChangedRange {
      constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
      }
      join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set) {
          let i = set.length, me = this;
          for (; i > 0; i--) {
              let range = set[i - 1];
              if (range.fromA > me.toA)
                  continue;
              if (range.toA < me.fromA)
                  break;
              me = me.join(range);
              set.splice(i - 1, 1);
          }
          set.splice(i, 0, me);
          return set;
      }
      static extendWithRanges(diff, ranges) {
          if (ranges.length == 0)
              return diff;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              let next = dI == diff.length ? null : diff[dI], off = posA - posB;
              let end = next ? next.fromB : 1e9;
              while (rI < ranges.length && ranges[rI] < end) {
                  let from = ranges[rI], to = ranges[rI + 1];
                  let fromB = Math.max(posB, from), toB = Math.min(end, to);
                  if (fromB <= toB)
                      new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                  if (to > end)
                      break;
                  else
                      rI += 2;
              }
              if (!next)
                  return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
          }
      }
  }
  /**
  View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
  class, which describe what happened, whenever the view is updated.
  */
  class ViewUpdate {
      constructor(
      /**
      The editor view that the update is associated with.
      */
      view, 
      /**
      The new editor state.
      */
      state, 
      /**
      The transactions involved in the update. May be empty.
      */
      transactions) {
          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */
          this.flags = 0;
          this.startState = view.state;
          this.changes = ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
              this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
          return new ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
          return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
      get viewportMoved() {
          return (this.flags & 8 /* UpdateFlag.ViewportMoved */) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
          return (this.flags & 2 /* UpdateFlag.Height */) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
          return this.docChanged || (this.flags & (16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
          return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
          return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
          return this.transactions.some(tr => tr.selection);
      }
      /**
      @internal
      */
      get empty() { return this.flags == 0 && this.transactions.length == 0; }
  }

  class DocView extends ContentView {
      get length() { return this.view.state.doc.length; }
      constructor(view) {
          super();
          this.view = view;
          this.decorations = [];
          this.dynamicDecorationMap = [false];
          this.domChanged = null;
          this.hasComposition = null;
          this.markedForComposition = new Set;
          this.editContextFormatting = Decoration.none;
          this.lastCompositionAfterCursor = false;
          // Track a minimum width for the editor. When measuring sizes in
          // measureVisibleLineHeights, this is updated to point at the width
          // of a given element and its extent in the document. When a change
          // happens in that range, these are reset. That way, once we've seen
          // a line/element of a given length, we keep the editor wide enough
          // to fit at least that element, until it is changed, at which point
          // we forget it again.
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          // Used by the resize observer to ignore resizes that we caused
          // ourselves
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView];
          this.children[0].setParent(this);
          this.updateDeco();
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      }
      // Update the document view to a given state.
      update(update) {
          var _a;
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                  this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
              }
              else {
                  this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                  this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
              }
          }
          this.updateEditContextFormatting(update);
          let readCompositionAt = -1;
          if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
              if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                  readCompositionAt = this.domChanged.newSel.head;
              else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                  readCompositionAt = update.state.selection.main.head;
          }
          let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
          this.domChanged = null;
          if (this.hasComposition) {
              this.markedForComposition.clear();
              let { from, to } = this.hasComposition;
              changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                  .addToSet(changedRanges.slice());
          }
          this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
          // When the DOM nodes around the selection are moved to another
          // parent, Chrome sometimes reports a different selection through
          // getSelection than the one that it actually shows to the user.
          // This forces a selection update when lines are joined to work
          // around that. Issue #54
          if ((browser.ie || browser.chrome) && !composition && update &&
              update.state.doc.lines != update.startState.doc.lines)
              this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
              return false;
          }
          else {
              this.updateInner(changedRanges, update.startState.doc.length, composition);
              if (update.transactions.length)
                  this.lastUpdate = Date.now();
              return true;
          }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength, composition) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, oldLength, composition);
          let { observer } = this.view;
          observer.ignore(() => {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
              this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
              // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.
              let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
              this.sync(this.view, track);
              this.flags &= -8 /* ViewFlag.Dirty */;
              if (track && (track.written || observer.selectionRange.focusNode != track.node))
                  this.forceSelection = true;
              this.dom.style.height = "";
          });
          this.markedForComposition.forEach(cView => cView.flags &= -9 /* ViewFlag.Composition */);
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
              for (let child of this.children)
                  if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                      gaps.push(child.dom);
          observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength, composition) {
          let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
          let cursor = this.childCursor(oldLength);
          for (let i = ranges.length - 1;; i--) {
              let next = i >= 0 ? ranges[i] : null;
              if (!next)
                  break;
              let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
              if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                  let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                  let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                  breakAtStart = before.breakAtStart;
                  openStart = before.openStart;
                  openEnd = after.openEnd;
                  let compLine = this.compositionView(composition);
                  if (after.breakAtStart) {
                      compLine.breakAfter = 1;
                  }
                  else if (after.content.length &&
                      compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                      compLine.breakAfter = after.content[0].breakAfter;
                      after.content.shift();
                  }
                  if (before.content.length &&
                      compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                      before.content.pop();
                  }
                  content = before.content.concat(compLine).concat(after.content);
              }
              else {
                  ({ content, breakAtStart, openStart, openEnd } =
                      ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
              }
              let { i: toI, off: toOff } = cursor.findPos(toA, 1);
              let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
              replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
          }
          if (composition)
              this.fixCompositionDOM(composition);
      }
      updateEditContextFormatting(update) {
          this.editContextFormatting = this.editContextFormatting.map(update.changes);
          for (let tr of update.transactions)
              for (let effect of tr.effects)
                  if (effect.is(setEditContextFormatting)) {
                      this.editContextFormatting = effect.value;
                  }
      }
      compositionView(composition) {
          let cur = new TextView(composition.text.nodeValue);
          cur.flags |= 8 /* ViewFlag.Composition */;
          for (let { deco } of composition.marks)
              cur = new MarkView(deco, [cur], cur.length);
          let line = new LineView;
          line.append(cur, 0);
          return line;
      }
      fixCompositionDOM(composition) {
          let fix = (dom, cView) => {
              cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
              this.markedForComposition.add(cView);
              let prev = ContentView.get(dom);
              if (prev && prev != cView)
                  prev.dom = null;
              cView.setDOM(dom);
          };
          let pos = this.childPos(composition.range.fromB, 1);
          let cView = this.children[pos.i];
          fix(composition.line, cView);
          for (let i = composition.marks.length - 1; i >= -1; i--) {
              pos = cView.childPos(pos.off, 1);
              cView = cView.children[pos.i];
              fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
          }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead || !this.view.observer.selectionRange.focusNode)
              this.view.observer.readSelectionRange();
          let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
          let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) &&
              hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
          if (!(focused || fromPointer || selectionNotFocus))
              return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          let anchor = this.moveToLine(this.domAtPos(main.anchor));
          let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
          // Always reset on Firefox when next to an uneditable node to
          // avoid invisible cursor bugs (#111)
          if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
              let dummy = document.createTextNode("");
              this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
              anchor = head = new DOMPos(dummy, 0);
              force = true;
          }
          let domSel = this.view.observer.selectionRange;
          // If the selection is already here, or in an equivalent position, don't touch it
          if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
              !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
              this.view.observer.ignore(() => {
                  // Chrome Android will hide the virtual keyboard when tapping
                  // inside an uneditable node, and not bring it back when we
                  // move the cursor to its proper position. This tries to
                  // restore the keyboard by cycling focus.
                  if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                      inUneditable(domSel.focusNode, this.dom)) {
                      this.dom.blur();
                      this.dom.focus({ preventScroll: true });
                  }
                  let rawSel = getSelection(this.view.root);
                  if (!rawSel) ;
                  else if (main.empty) {
                      // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                      if (browser.gecko) {
                          let nextTo = nextToUneditable(anchor.node, anchor.offset);
                          if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                              let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                              if (text)
                                  anchor = new DOMPos(text.node, text.offset);
                          }
                      }
                      rawSel.collapse(anchor.node, anchor.offset);
                      if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                          rawSel.caretBidiLevel = main.bidiLevel;
                  }
                  else if (rawSel.extend) {
                      // Selection.extend can be used to create an 'inverted' selection
                      // (one where the focus is before the anchor), but not all
                      // browsers support it yet.
                      rawSel.collapse(anchor.node, anchor.offset);
                      // Safari will ignore the call above when the editor is
                      // hidden, and then raise an error on the call to extend
                      // (#940).
                      try {
                          rawSel.extend(head.node, head.offset);
                      }
                      catch (_) { }
                  }
                  else {
                      // Primitive (IE) way
                      let range = document.createRange();
                      if (main.anchor > main.head)
                          [anchor, head] = [head, anchor];
                      range.setEnd(head.node, head.offset);
                      range.setStart(anchor.node, anchor.offset);
                      rawSel.removeAllRanges();
                      rawSel.addRange(range);
                  }
                  if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                      this.dom.blur();
                      if (activeElt)
                          activeElt.focus();
                  }
              });
              this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
      suppressWidgetCursorChange(sel, cursor) {
          return this.hasComposition && cursor.empty &&
              isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
              this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
      enforceCursorAssoc() {
          if (this.hasComposition)
              return;
          let { view } = this, cursor = view.state.selection.main;
          let sel = getSelection(view.root);
          let { anchorNode, anchorOffset } = view.observer.selectionRange;
          if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
              return;
          let line = LineView.find(this, cursor.head);
          if (!line)
              return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
              return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
              return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          // This can go wrong in corner cases like single-character lines,
          // so check and reset if necessary.
          view.observer.readSelectionRange();
          let newRange = view.observer.selectionRange;
          if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
              sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
      moveToLine(pos) {
          // Block widgets will return positions before/after them, which
          // are thus directly in the document DOM element.
          let dom = this.dom, newPos;
          if (pos.node != dom)
              return pos;
          for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(0);
          }
          for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
              let view = ContentView.get(dom.childNodes[i]);
              if (view instanceof LineView)
                  newPos = view.domAtPos(view.length);
          }
          return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
      nearest(dom) {
          for (let cur = dom; cur;) {
              let domView = ContentView.get(cur);
              if (domView && domView.rootView == this)
                  return domView;
              cur = cur.parentNode;
          }
          return null;
      }
      posFromDOM(node, offset) {
          let view = this.nearest(node);
          if (!view)
              throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
      domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1;) {
              let child = this.children[i];
              if (off < child.length || child instanceof LineView)
                  break;
              i++;
              off = 0;
          }
          return this.children[i].domAtPos(off);
      }
      coordsAt(pos, side) {
          let best = null, bestPos = 0;
          for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
              let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
              if (end < pos)
                  break;
              if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                  (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                  best = child;
                  bestPos = start;
              }
              else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
                  if (child.deco.startSide < 0)
                      break;
                  else if (i)
                      best = null;
              }
              off = start;
          }
          return best ? best.coordsAt(pos - bestPos, side) : null;
      }
      coordsForChar(pos) {
          let { i, off } = this.childPos(pos, 1), child = this.children[i];
          if (!(child instanceof LineView))
              return null;
          while (child.children.length) {
              let { i, off: childOff } = child.childPos(off, 1);
              for (;; i++) {
                  if (i == child.children.length)
                      return null;
                  if ((child = child.children[i]).length)
                      break;
              }
              off = childOff;
          }
          if (!(child instanceof TextView))
              return null;
          let end = findClusterBreak(child.text, off);
          if (end == off)
              return null;
          let rects = textRange(child.dom, off, end).getClientRects();
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                  return rect;
          }
          return null;
      }
      measureVisibleLineHeights(viewport) {
          let result = [], { from, to } = viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1, ltr = this.view.textDirection == Direction$1.LTR;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (end > to)
                  break;
              if (pos >= from) {
                  let childRect = child.dom.getBoundingClientRect();
                  result.push(childRect.height);
                  if (isWider) {
                      let last = child.dom.lastChild;
                      let rects = last ? clientRectsFor(last) : [];
                      if (rects.length) {
                          let rect = rects[rects.length - 1];
                          let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                          if (width > widest) {
                              widest = width;
                              this.minWidth = contentWidth;
                              this.minWidthFrom = pos;
                              this.minWidthTo = end;
                          }
                      }
                  }
              }
              pos = end + child.breakAfter;
          }
          return result;
      }
      textDirectionAt(pos) {
          let { i } = this.childPos(pos, 1);
          return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction$1.RTL : Direction$1.LTR;
      }
      measureTextSize() {
          for (let child of this.children) {
              if (child instanceof LineView) {
                  let measure = child.measureTextSize();
                  if (measure)
                      return measure;
              }
          }
          // If no workable line exists, force a layout of a measurable element
          let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
          dummy.className = "cm-line";
          dummy.style.width = "99999px";
          dummy.style.position = "absolute";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
              this.dom.appendChild(dummy);
              let rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              textHeight = rect ? rect.height : lineHeight;
              dummy.remove();
          });
          return { lineHeight, charWidth, textHeight };
      }
      childCursor(pos = this.length) {
          // Move back to start of last element when possible, so that
          // `ChildCursor.findPos` doesn't have to deal with the edge case
          // of being after the last element.
          let i = this.children.length;
          if (i)
              pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
      }
      computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0;; i++) {
              let next = i == vs.viewports.length ? null : vs.viewports[i];
              let end = next ? next.from - 1 : this.length;
              if (end > pos) {
                  let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                  deco.push(Decoration.replace({
                      widget: new BlockGapWidget(height),
                      block: true,
                      inclusive: true,
                      isBlockGap: true,
                  }).range(pos, end));
              }
              if (!next)
                  break;
              pos = next.to + 1;
          }
          return Decoration.set(deco);
      }
      updateDeco() {
          let i = 1;
          let allDeco = this.view.state.facet(decorations).map(d => {
              let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
              return dynamic ? d(this.view) : d;
          });
          let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
              let dynamic = typeof d == "function";
              if (dynamic)
                  dynamicOuter = true;
              return dynamic ? d(this.view) : d;
          });
          if (outerDeco.length) {
              this.dynamicDecorationMap[i++] = dynamicOuter;
              allDeco.push(RangeSet.join(outerDeco));
          }
          this.decorations = [
              this.editContextFormatting,
              ...allDeco,
              this.computeBlockGapDeco(),
              this.view.viewState.lineGapDeco
          ];
          while (i < this.decorations.length)
              this.dynamicDecorationMap[i++] = false;
          return this.decorations;
      }
      scrollIntoView(target) {
          if (target.isSnapshot) {
              let ref = this.view.viewState.lineBlockAt(target.range.head);
              this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
              this.view.scrollDOM.scrollLeft = target.xMargin;
              return;
          }
          for (let handler of this.view.state.facet(scrollHandler)) {
              try {
                  if (handler(this.view, target.range, target))
                      return true;
              }
              catch (e) {
                  logException(this.view.state, e, "scroll handler");
              }
          }
          let { range } = target;
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
              return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
              rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                  right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
          let margins = getScrollMargins(this.view);
          let targetRect = {
              left: rect.left - margins.left, top: rect.top - margins.top,
              right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
          };
          let { offsetWidth, offsetHeight } = this.view.scrollDOM;
          scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction$1.LTR);
      }
  }
  function betweenUneditable(pos) {
      return pos.node.nodeType == 1 && pos.node.firstChild &&
          (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
          (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function findCompositionNode(view, headPos) {
      let sel = view.observer.selectionRange;
      if (!sel.focusNode)
          return null;
      let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
      let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
      let textNode = textBefore || textAfter;
      if (textAfter && textBefore && textAfter.node != textBefore.node) {
          let descAfter = ContentView.get(textAfter.node);
          if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
              textNode = textAfter;
          }
          else if (view.docView.lastCompositionAfterCursor) {
              let descBefore = ContentView.get(textBefore.node);
              if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                  textNode = textAfter;
          }
      }
      view.docView.lastCompositionAfterCursor = textNode != textBefore;
      if (!textNode)
          return null;
      let from = headPos - textNode.offset;
      return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
  }
  function findCompositionRange(view, changes, headPos) {
      let found = findCompositionNode(view, headPos);
      if (!found)
          return null;
      let { node: textNode, from, to } = found, text = textNode.nodeValue;
      // Don't try to preserve multi-line compositions
      if (/[\n\r]/.test(text))
          return null;
      if (view.state.doc.sliceString(found.from, found.to) != text)
          return null;
      let inv = changes.invertedDesc;
      let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
      let marks = [];
      for (let parent = textNode.parentNode;; parent = parent.parentNode) {
          let parentView = ContentView.get(parent);
          if (parentView instanceof MarkView)
              marks.push({ node: parent, deco: parentView.mark });
          else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
              return { range, text: textNode, marks, line: parent };
          else if (parent != view.contentDOM)
              marks.push({ node: parent, deco: new MarkDecoration({
                      inclusive: true,
                      attributes: getAttrs(parent),
                      tagName: parent.tagName.toLowerCase()
                  }) });
          else
              return null;
      }
  }
  function nextToUneditable(node, offset) {
      if (node.nodeType != 1)
          return 0;
      return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
          (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
  }
  let DecorationComparator$1 = class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange(from, to) { addRange(from, to, this.changes); }
      comparePoint(from, to) { addRange(from, to, this.changes); }
      boundChange(pos) { addRange(pos, pos, this.changes); }
  };
  function findChangedDeco(a, b, diff) {
      let comp = new DecorationComparator$1;
      RangeSet.compare(a, b, diff, comp);
      return comp.changes;
  }
  function inUneditable(node, inside) {
      for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == 'false') {
              return true;
          }
      }
      return false;
  }
  function touchesComposition(changes, composition) {
      let touched = false;
      if (composition)
          changes.iterChangedRanges((from, to) => {
              if (from < composition.to && to > composition.from)
                  touched = true;
          });
      return touched;
  }

  function groupAt(state, pos, bias = 1) {
      let categorize = state.charCategorizer(pos);
      let line = state.doc.lineAt(pos), linePos = pos - line.from;
      if (line.length == 0)
          return EditorSelection.cursor(pos);
      if (linePos == 0)
          bias = 1;
      else if (linePos == line.length)
          bias = -1;
      let from = linePos, to = linePos;
      if (bias < 0)
          from = findClusterBreak(line.text, linePos, false);
      else
          to = findClusterBreak(line.text, linePos);
      let cat = categorize(line.text.slice(from, to));
      while (from > 0) {
          let prev = findClusterBreak(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat)
              break;
          from = prev;
      }
      while (to < line.length) {
          let next = findClusterBreak(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat)
              break;
          to = next;
      }
      return EditorSelection.range(from + line.from, to + line.from);
  }
  // Search the DOM for the {node, offset} position closest to the given
  // coordinates. Very inefficient and crude, but can usually be avoided
  // by calling caret(Position|Range)FromPoint instead.
  function getdx(x, rect) {
      return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
      return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a, b) {
      return a.top < b.bottom - 1 && a.bottom > b.top + 1;
  }
  function upTop(rect, top) {
      return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
      return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
      let closest, closestRect, closestX, closestY, closestOverlap = false;
      let above, below, aboveRect, belowRect;
      for (let child = parent.firstChild; child; child = child.nextSibling) {
          let rects = clientRectsFor(child);
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (closestRect && yOverlap(closestRect, rect))
                  rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
              let dx = getdx(x, rect), dy = getdy(y, rect);
              if (dx == 0 && dy == 0)
                  return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
              if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                  closest = child;
                  closestRect = rect;
                  closestX = dx;
                  closestY = dy;
                  let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                  closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
              }
              if (dx == 0) {
                  if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                      above = child;
                      aboveRect = rect;
                  }
                  else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                      below = child;
                      belowRect = rect;
                  }
              }
              else if (aboveRect && yOverlap(aboveRect, rect)) {
                  aboveRect = upBot(aboveRect, rect.bottom);
              }
              else if (belowRect && yOverlap(belowRect, rect)) {
                  belowRect = upTop(belowRect, rect.top);
              }
          }
      }
      if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
      }
      else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
      }
      if (!closest)
          return { node: parent, offset: 0 };
      let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
      if (closest.nodeType == 3)
          return domPosInText(closest, clipX, y);
      if (closestOverlap && closest.contentEditable != "false")
          return domPosAtCoords(closest, clipX, y);
      let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
          (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
      return { node: parent, offset };
  }
  function domPosInText(node, x, y) {
      let len = node.nodeValue.length;
      let closestOffset = -1, closestDY = 1e9, generalSide = 0;
      for (let i = 0; i < len; i++) {
          let rects = textRange(node, i, i + 1).getClientRects();
          for (let j = 0; j < rects.length; j++) {
              let rect = rects[j];
              if (rect.top == rect.bottom)
                  continue;
              if (!generalSide)
                  generalSide = x - rect.left;
              let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
              if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                  let right = x >= (rect.left + rect.right) / 2, after = right;
                  if (browser.chrome || browser.gecko) {
                      // Check for RTL on browsers that support getting client
                      // rects for empty ranges.
                      let rectBefore = textRange(node, i).getBoundingClientRect();
                      if (rectBefore.left == rect.right)
                          after = !right;
                  }
                  if (dy <= 0)
                      return { node, offset: i + (after ? 1 : 0) };
                  closestOffset = i + (after ? 1 : 0);
                  closestDY = dy;
              }
          }
      }
      return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
      var _a, _b;
      let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
      let block, { docHeight } = view.viewState;
      let { x, y } = coords, yOffset = y - docTop;
      if (yOffset < 0)
          return 0;
      if (yOffset > docHeight)
          return view.state.doc.length;
      // Scan for a text block near the queried y position
      for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
          block = view.elementAtHeight(yOffset);
          if (block.type == BlockType.Text)
              break;
          for (;;) {
              // Move the y position out of this block
              yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
              if (yOffset >= 0 && yOffset <= docHeight)
                  break;
              // If the document consists entirely of replaced widgets, we
              // won't find a text block, so return 0
              if (bounced)
                  return precise ? null : 0;
              bounced = true;
              bias = -bias;
          }
      }
      y = docTop + yOffset;
      let lineStart = block.from;
      // If this is outside of the rendered viewport, we can't determine a position
      if (lineStart < view.viewport.from)
          return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      if (lineStart > view.viewport.to)
          return view.viewport.to == view.state.doc.length ? view.state.doc.length :
              precise ? null : posAtCoordsImprecise(view, content, block, x, y);
      // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
      let doc = view.dom.ownerDocument;
      let root = view.root.elementFromPoint ? view.root : doc;
      let element = root.elementFromPoint(x, y);
      if (element && !view.contentDOM.contains(element))
          element = null;
      // If the element is unexpected, clip x at the sides of the content area and try again
      if (!element) {
          x = Math.max(content.left + 1, Math.min(content.right - 1, x));
          element = root.elementFromPoint(x, y);
          if (element && !view.contentDOM.contains(element))
              element = null;
      }
      // There's visible editor content under the point, so we can try
      // using caret(Position|Range)FromPoint as a shortcut
      let node, offset = -1;
      if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc.caretPositionFromPoint) {
              let pos = doc.caretPositionFromPoint(x, y);
              if (pos)
                  ({ offsetNode: node, offset } = pos);
          }
          else if (doc.caretRangeFromPoint) {
              let range = doc.caretRangeFromPoint(x, y);
              if (range) {
                  ({ startContainer: node, startOffset: offset } = range);
                  if (!view.contentDOM.contains(node) ||
                      browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                      browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                      node = undefined;
              }
          }
          // Chrome will return offsets into <input> elements without child
          // nodes, which will lead to a null deref below, so clip the
          // offset to the node size.
          if (node)
              offset = Math.min(maxOffset(node), offset);
      }
      // No luck, do our own (potentially expensive) search
      if (!node || !view.docView.dom.contains(node)) {
          let line = LineView.find(view.docView, lineStart);
          if (!line)
              return yOffset > block.top + block.height / 2 ? block.to : block.from;
          ({ node, offset } = domPosAtCoords(line.dom, x, y));
      }
      let nearest = view.docView.nearest(node);
      if (!nearest)
          return null;
      if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
          let rect = nearest.dom.getBoundingClientRect();
          return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
              ? nearest.posAtStart : nearest.posAtEnd;
      }
      else {
          return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
      }
  }
  function posAtCoordsImprecise(view, contentRect, block, x, y) {
      let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
      if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          let textHeight = view.viewState.heightOracle.textHeight;
          let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
          into += line * view.viewState.heightOracle.lineLength;
      }
      let content = view.state.sliceDoc(block.from, block.to);
      return block.from + findColumn(content, into, view.state.tabSize);
  }
  // In case of a high line height, Safari's caretRangeFromPoint treats
  // the space between lines as belonging to the last character of the
  // line before. This is used to detect such a result so that it can be
  // ignored (issue #401).
  function isSuspiciousSafariCaretResult(node, offset, x) {
      let len;
      if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
          return false;
      for (let next = node.nextSibling; next; next = next.nextSibling)
          if (next.nodeType != 1 || next.nodeName != "BR")
              return false;
      return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  // Chrome will move positions between lines to the start of the next line
  function isSuspiciousChromeCaretResult(node, offset, x) {
      if (offset != 0)
          return false;
      for (let cur = node;;) {
          let parent = cur.parentNode;
          if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
              return false;
          if (parent.classList.contains("cm-line"))
              break;
          cur = parent;
      }
      let rect = node.nodeType == 1 ? node.getBoundingClientRect()
          : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
      return x - rect.left > 5;
  }
  function blockAt(view, pos) {
      let line = view.lineBlockAt(pos);
      if (Array.isArray(line.type))
          for (let l of line.type) {
              if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                  return l;
          }
      return line;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
      let line = blockAt(view, start.head);
      let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
          : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
      if (coords) {
          let editorRect = view.dom.getBoundingClientRect();
          let direction = view.textDirectionAt(line.from);
          let pos = view.posAtCoords({ x: forward == (direction == Direction$1.LTR) ? editorRect.right - 1 : editorRect.left + 1,
              y: (coords.top + coords.bottom) / 2 });
          if (pos != null)
              return EditorSelection.cursor(pos, forward ? -1 : 1);
      }
      return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
      let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
      let direction = view.textDirectionAt(line.from);
      for (let cur = start, check = null;;) {
          let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
          if (!next) {
              if (line.number == (forward ? view.state.doc.lines : 1))
                  return cur;
              char = "\n";
              line = view.state.doc.line(line.number + (forward ? 1 : -1));
              spans = view.bidiSpans(line);
              next = view.visualLineSide(line, !forward);
          }
          if (!check) {
              if (!by)
                  return next;
              check = by(char);
          }
          else if (!check(char)) {
              return cur;
          }
          cur = next;
      }
  }
  function byGroup(view, pos, start) {
      let categorize = view.state.charCategorizer(pos);
      let cat = categorize(start);
      return (next) => {
          let nextCat = categorize(next);
          if (cat == CharCategory.Space)
              cat = nextCat;
          return cat == nextCat;
      };
  }
  function moveVertically(view, start, forward, distance) {
      let startPos = start.head, dir = forward ? 1 : -1;
      if (startPos == (forward ? view.state.doc.length : 0))
          return EditorSelection.cursor(startPos, start.assoc);
      let goal = start.goalColumn, startY;
      let rect = view.contentDOM.getBoundingClientRect();
      let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
      if (startCoords) {
          if (goal == null)
              goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
      }
      else {
          let line = view.viewState.lineBlockAt(startPos);
          if (goal == null)
              goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
      }
      let resolvedGoal = rect.left + goal;
      let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
      for (let extra = 0;; extra += 10) {
          let curY = startY + (dist + extra) * dir;
          let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
              let charRect = view.docView.coordsForChar(pos);
              let assoc = !charRect || curY < charRect.top ? -1 : 1;
              return EditorSelection.cursor(pos, assoc, undefined, goal);
          }
      }
  }
  function skipAtomicRanges(atoms, pos, bias) {
      for (;;) {
          let moved = 0;
          for (let set of atoms) {
              set.between(pos - 1, pos + 1, (from, to, value) => {
                  if (pos > from && pos < to) {
                      let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                      pos = side < 0 ? from : to;
                      moved = side;
                  }
              });
          }
          if (!moved)
              return pos;
      }
  }
  function skipAtoms(view, oldPos, pos) {
      let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
      return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }

  const LineBreakPlaceholder = "\uffff";
  class DOMReader {
      constructor(points, state) {
          this.points = points;
          this.text = "";
          this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text) {
          this.text += text;
      }
      lineBreak() {
          this.text += LineBreakPlaceholder;
      }
      readRange(start, end) {
          if (!start)
              return this;
          let parent = start.parentNode;
          for (let cur = start;;) {
              this.findPointBefore(parent, cur);
              let oldLen = this.text.length;
              this.readNode(cur);
              let next = cur.nextSibling;
              if (next == end)
                  break;
              let view = ContentView.get(cur), nextView = ContentView.get(next);
              if (view && nextView ? view.breakAfter :
                  (view ? view.breakAfter : isBlockElement(cur)) ||
                      (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                  this.lineBreak();
              cur = next;
          }
          this.findPointBefore(parent, end);
          return this;
      }
      readTextNode(node) {
          let text = node.nodeValue;
          for (let point of this.points)
              if (point.node == node)
                  point.pos = this.text.length + Math.min(point.offset, text.length);
          for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
              let nextBreak = -1, breakSize = 1, m;
              if (this.lineSeparator) {
                  nextBreak = text.indexOf(this.lineSeparator, off);
                  breakSize = this.lineSeparator.length;
              }
              else if (m = re.exec(text)) {
                  nextBreak = m.index;
                  breakSize = m[0].length;
              }
              this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
              if (nextBreak < 0)
                  break;
              this.lineBreak();
              if (breakSize > 1)
                  for (let point of this.points)
                      if (point.node == node && point.pos > this.text.length)
                          point.pos -= breakSize - 1;
              off = nextBreak + breakSize;
          }
      }
      readNode(node) {
          if (node.cmIgnore)
              return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          if (fromView != null) {
              this.findPointInside(node, fromView.length);
              for (let i = fromView.iter(); !i.next().done;) {
                  if (i.lineBreak)
                      this.lineBreak();
                  else
                      this.append(i.value);
              }
          }
          else if (node.nodeType == 3) {
              this.readTextNode(node);
          }
          else if (node.nodeName == "BR") {
              if (node.nextSibling)
                  this.lineBreak();
          }
          else if (node.nodeType == 1) {
              this.readRange(node.firstChild, null);
          }
      }
      findPointBefore(node, next) {
          for (let point of this.points)
              if (point.node == node && node.childNodes[point.offset] == next)
                  point.pos = this.text.length;
      }
      findPointInside(node, length) {
          for (let point of this.points)
              if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                  point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
      }
  }
  function isAtEnd(parent, node, offset) {
      for (;;) {
          if (!node || offset < maxOffset(node))
              return false;
          if (node == parent)
              return true;
          offset = domIndex(node) + 1;
          node = node.parentNode;
      }
  }
  class DOMPoint {
      constructor(node, offset) {
          this.node = node;
          this.offset = offset;
          this.pos = -1;
      }
  }

  class DOMChange {
      constructor(view, start, end, typeOver) {
          this.typeOver = typeOver;
          this.bounds = null;
          this.text = "";
          this.domChanged = start > -1;
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          if (view.state.readOnly && start > -1) {
              // Ignore changes when the editor is read-only
              this.newSel = null;
          }
          else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
              let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
              let reader = new DOMReader(selPoints, view.state);
              reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
              this.text = reader.text;
              this.newSel = selectionFromPoints(selPoints, this.bounds.from);
          }
          else {
              let domSel = view.observer.selectionRange;
              let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                  !contains(view.contentDOM, domSel.focusNode)
                  ? view.state.selection.main.head
                  : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
              let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                  !contains(view.contentDOM, domSel.anchorNode)
                  ? view.state.selection.main.anchor
                  : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
              // iOS will refuse to select the block gaps when doing
              // select-all.
              // Chrome will put the selection *inside* them, confusing
              // posFromDOM
              let vp = view.viewport;
              if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                  (vp.from > 0 || vp.to < view.state.doc.length)) {
                  let from = Math.min(head, anchor), to = Math.max(head, anchor);
                  let offFrom = vp.from - from, offTo = vp.to - to;
                  if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                      head = 0;
                      anchor = view.state.doc.length;
                  }
              }
              this.newSel = EditorSelection.single(anchor, head);
          }
      }
  }
  function applyDOMChange(view, domChange) {
      let change;
      let { newSel } = domChange, sel = view.state.selection.main;
      let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
      if (domChange.bounds) {
          let { from, to } = domChange.bounds;
          let preferredPos = sel.from, preferredSide = null;
          // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)
          if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
              preferredPos = sel.to;
              preferredSide = "end";
          }
          let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
          if (diff) {
              // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. DomChange drops one of those.
              if (browser.chrome && lastKey == 13 &&
                  diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                  diff.toB--;
              change = { from: from + diff.from, to: from + diff.toA,
                  insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
          }
      }
      else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
          newSel = null;
      }
      if (!change && !newSel)
          return false;
      if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
          // Heuristic to notice typing over a selected character
          change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
      }
      else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
          /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
          // Detect insert-period-on-double-space Mac and Android behavior,
          // and transform it into a regular space insert.
          if (newSel && change.insert.length == 2)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
      }
      else if (change && change.from >= sel.from && change.to <= sel.to &&
          (change.from != sel.from || change.to != sel.to) &&
          (sel.to - sel.from) - (change.to - change.from) <= 4) {
          // If the change is inside the selection and covers most of it,
          // assume it is a selection replace (with identical characters at
          // the start/end not included in the diff)
          change = {
              from: sel.from, to: sel.to,
              insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
          };
      }
      else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
          change.insert.toString() == "\n " && view.lineWrapping) {
          // In Chrome, if you insert a space at the start of a wrapped
          // line, it will actually insert a newline and a space, causing a
          // bogus new line to be created in CodeMirror (#968)
          if (newSel)
              newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
          change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
      }
      if (change) {
          return applyDOMChangeInner(view, change, newSel, lastKey);
      }
      else if (newSel && !newSel.main.eq(sel)) {
          let scrollIntoView = false, userEvent = "select";
          if (view.inputState.lastSelectionTime > Date.now() - 50) {
              if (view.inputState.lastSelectionOrigin == "select")
                  scrollIntoView = true;
              userEvent = view.inputState.lastSelectionOrigin;
          }
          view.dispatch({ selection: newSel, scrollIntoView, userEvent });
          return true;
      }
      else {
          return false;
      }
  }
  function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
      if (browser.ios && view.inputState.flushIOSKey(change))
          return true;
      let sel = view.state.selection.main;
      // Android browsers don't fire reasonable key events for enter,
      // backspace, or delete. So this detects changes that look like
      // they're caused by those keys, and reinterprets them as key
      // events. (Some of these keys are also handled by beforeinput
      // events and the pendingAndroidKey mechanism, but that's not
      // reliable in all situations.)
      if (browser.android &&
          ((change.to == sel.to &&
              // GBoard will sometimes remove a space it just inserted
              // after a completion when you press enter
              (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
              change.insert.length == 1 && change.insert.lines == 2 &&
              dispatchKey(view.contentDOM, "Enter", 13)) ||
              ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                  lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                  dispatchKey(view.contentDOM, "Backspace", 8)) ||
              (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                  dispatchKey(view.contentDOM, "Delete", 46))))
          return true;
      let text = change.insert.toString();
      if (view.inputState.composing >= 0)
          view.inputState.composing++;
      let defaultTr;
      let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
      if (!view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text, defaultInsert)))
          view.dispatch(defaultInsert());
      return true;
  }
  function applyDefaultInsert(view, change, newSel) {
      let tr, startState = view.state, sel = startState.selection.main;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
          (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
          view.inputState.composing < 0) {
          let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
          let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
          tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
      }
      else {
          let changes = startState.changes(change);
          let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
          // Try to apply a composition change to all cursors
          if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
              change.to <= sel.to && change.to >= sel.to - 10) {
              let replaced = view.state.sliceDoc(change.from, change.to);
              let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
              if (composition) {
                  let dLen = change.insert.length - (change.to - change.from);
                  compositionRange = { from: composition.from, to: composition.to - dLen };
              }
              else {
                  compositionRange = view.state.doc.lineAt(sel.head);
              }
              let offset = sel.to - change.to, size = sel.to - sel.from;
              tr = startState.changeByRange(range => {
                  if (range.from == sel.from && range.to == sel.to)
                      return { changes, range: mainSel || range.map(changes) };
                  let to = range.to - offset, from = to - replaced.length;
                  if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                      // Unfortunately, there's no way to make multiple
                      // changes in the same node work without aborting
                      // composition, so cursors in the composition range are
                      // ignored.
                      range.to >= compositionRange.from && range.from <= compositionRange.to)
                      return { range };
                  let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                  return {
                      changes: rangeChanges,
                      range: !mainSel ? range.map(rangeChanges) :
                          EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                  };
              });
          }
          else {
              tr = {
                  changes,
                  selection: mainSel && startState.selection.replaceRange(mainSel)
              };
          }
      }
      let userEvent = "input.type";
      if (view.composing ||
          view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
          view.inputState.compositionPendingChange = false;
          userEvent += ".compose";
          if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
          }
      }
      return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  function findDiff(a, b, preferredPos, preferredSide) {
      let minLen = Math.min(a.length, b.length);
      let from = 0;
      while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
          from++;
      if (from == minLen && a.length == b.length)
          return null;
      let toA = a.length, toB = b.length;
      while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
      }
      if (preferredSide == "end") {
          let adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
      }
      if (toA < from && a.length < b.length) {
          let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
      }
      else if (toB < from) {
          let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
          from -= move;
          toA = from + (toA - toB);
          toB = from;
      }
      return { from, toA, toB };
  }
  function selectionPoints(view) {
      let result = [];
      if (view.root.activeElement != view.contentDOM)
          return result;
      let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
      if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset)
              result.push(new DOMPoint(focusNode, focusOffset));
      }
      return result;
  }
  function selectionFromPoints(points, base) {
      if (points.length == 0)
          return null;
      let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
      return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
  }

  class InputState {
      setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
      }
      constructor(view) {
          this.view = view;
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.lastTouchTime = 0;
          this.lastFocusTime = 0;
          this.lastScrollTop = 0;
          this.lastScrollLeft = 0;
          // On iOS, some keys need to have their default behavior happen
          // (after which we retroactively handle them and reset the DOM) to
          // avoid messing up the virtual keyboard state.
          this.pendingIOSKey = undefined;
          /**
          When enabled (>-1), tab presses are not given to key handlers,
          leaving the browser's default behavior. If >0, the mode expires
          at that timestamp, and any other keypress clears it.
          Esc enables temporary tab focus mode for two seconds when not
          otherwise handled.
          */
          this.tabFocusMode = -1;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.handlers = Object.create(null);
          // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.
          this.composing = -1;
          // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)
          this.compositionFirstChange = null;
          // End time of the previous composition
          this.compositionEndedAt = 0;
          // Used in a kludge to detect when an Enter keypress should be
          // considered part of the composition on Safari, which fires events
          // in the wrong order
          this.compositionPendingKey = false;
          // Used to categorize changes as part of a composition, even when
          // the mutation events fire shortly after the compositionend event
          this.compositionPendingChange = false;
          this.mouseSelection = null;
          // When a drag from the editor is active, this points at the range
          // being dragged.
          this.draggedContent = null;
          this.handleEvent = this.handleEvent.bind(this);
          this.notifiedFocused = view.hasFocus;
          // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.
          if (browser.safari)
              view.contentDOM.addEventListener("input", () => null);
          if (browser.gecko)
              firefoxCopyCutHack(view.contentDOM.ownerDocument);
      }
      handleEvent(event) {
          if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
              return;
          if (event.type == "keydown" && this.keydown(event))
              return;
          if (this.view.updateState != 0 /* UpdateState.Idle */)
              Promise.resolve().then(() => this.runHandlers(event.type, event));
          else
              this.runHandlers(event.type, event);
      }
      runHandlers(type, event) {
          let handlers = this.handlers[type];
          if (handlers) {
              for (let observer of handlers.observers)
                  observer(this.view, event);
              for (let handler of handlers.handlers) {
                  if (event.defaultPrevented)
                      break;
                  if (handler(this.view, event)) {
                      event.preventDefault();
                      break;
                  }
              }
          }
      }
      ensureHandlers(plugins) {
          let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
          for (let type in handlers)
              if (type != "scroll") {
                  let passive = !handlers[type].handlers.length;
                  let exists = prev[type];
                  if (exists && passive != !exists.handlers.length) {
                      dom.removeEventListener(type, this.handleEvent);
                      exists = null;
                  }
                  if (!exists)
                      dom.addEventListener(type, this.handleEvent, { passive });
              }
          for (let type in prev)
              if (type != "scroll" && !handlers[type])
                  dom.removeEventListener(type, this.handleEvent);
          this.handlers = handlers;
      }
      keydown(event) {
          // Must always run, even if a custom handler handled the event
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
              return true;
          if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
              this.tabFocusMode = -1;
          // Chrome for Android usually doesn't fire proper key events, but
          // occasionally does, usually surrounded by a bunch of complicated
          // composition changes. When an enter or backspace key event is
          // seen, hold off on handling DOM events for a bit, and then
          // dispatch it.
          if (browser.android && browser.chrome && !event.synthetic &&
              (event.keyCode == 13 || event.keyCode == 8)) {
              this.view.observer.delayAndroidKey(event.key, event.keyCode);
              return true;
          }
          // Preventing the default behavior of Enter on iOS makes the
          // virtual keyboard get stuck in the wrong (lowercase)
          // state. So we let it go through, and then, in
          // applyDOMChange, notify key handlers of it and reset to
          // the state they produce.
          let pending;
          if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
              ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                  EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
              this.pendingIOSKey = pending || event;
              setTimeout(() => this.flushIOSKey(), 250);
              return true;
          }
          if (event.keyCode != 229)
              this.view.observer.forceFlush();
          return false;
      }
      flushIOSKey(change) {
          let key = this.pendingIOSKey;
          if (!key)
              return false;
          // This looks like an autocorrection before Enter
          if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
              return false;
          this.pendingIOSKey = undefined;
          return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
      }
      ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
              return false;
          if (this.composing > 0)
              return true;
          // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
          // On some input method editors (IMEs), the Enter key is used to
          // confirm character selection. On Safari, when Enter is pressed,
          // compositionend and keydown events are sometimes emitted in the
          // wrong order. The key event should still be ignored, even when
          // it happens after the compositionend event.
          if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
              this.compositionPendingKey = false;
              return true;
          }
          return false;
      }
      startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
      }
      update(update) {
          this.view.observer.update(update);
          if (this.mouseSelection)
              this.mouseSelection.update(update);
          if (this.draggedContent && update.docChanged)
              this.draggedContent = this.draggedContent.map(update.changes);
          if (update.transactions.length)
              this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
          if (this.mouseSelection)
              this.mouseSelection.destroy();
      }
  }
  function bindHandler(plugin, handler) {
      return (view, event) => {
          try {
              return handler.call(plugin, event, view);
          }
          catch (e) {
              logException(view.state, e);
          }
      };
  }
  function computeHandlers(plugins) {
      let result = Object.create(null);
      function record(type) {
          return result[type] || (result[type] = { observers: [], handlers: [] });
      }
      for (let plugin of plugins) {
          let spec = plugin.spec;
          if (spec && spec.domEventHandlers)
              for (let type in spec.domEventHandlers) {
                  let f = spec.domEventHandlers[type];
                  if (f)
                      record(type).handlers.push(bindHandler(plugin.value, f));
              }
          if (spec && spec.domEventObservers)
              for (let type in spec.domEventObservers) {
                  let f = spec.domEventObservers[type];
                  if (f)
                      record(type).observers.push(bindHandler(plugin.value, f));
              }
      }
      for (let type in handlers)
          record(type).handlers.push(handlers[type]);
      for (let type in observers)
          record(type).observers.push(observers[type]);
      return result;
  }
  const PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  const EmacsyPendingKeys = "dthko";
  // Key codes for modifier keys
  const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  const dragScrollMargin = 6;
  function dragScrollSpeed(dist) {
      return Math.max(0, dist) * 0.7 + 8;
  }
  function dist$2(a, b) {
      return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
  }
  class MouseSelection {
      constructor(view, startEvent, style, mustSelect) {
          this.view = view;
          this.startEvent = startEvent;
          this.style = style;
          this.mustSelect = mustSelect;
          this.scrollSpeed = { x: 0, y: 0 };
          this.scrolling = -1;
          this.lastEvent = startEvent;
          this.scrollParents = scrollableParents(view.contentDOM);
          this.atoms = view.state.facet(atomicRanges).map(f => f(view));
          let doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      }
      start(event) {
          // When clicking outside of the selection, immediately apply the
          // effect of starting the selection
          if (this.dragging === false)
              this.select(event);
      }
      move(event) {
          if (event.buttons == 0)
              return this.destroy();
          if (this.dragging || this.dragging == null && dist$2(this.startEvent, event) < 10)
              return;
          this.select(this.lastEvent = event);
          let sx = 0, sy = 0;
          let left = 0, top = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
          if (this.scrollParents.x)
              ({ left, right } = this.scrollParents.x.getBoundingClientRect());
          if (this.scrollParents.y)
              ({ top, bottom } = this.scrollParents.y.getBoundingClientRect());
          let margins = getScrollMargins(this.view);
          if (event.clientX - margins.left <= left + dragScrollMargin)
              sx = -dragScrollSpeed(left - event.clientX);
          else if (event.clientX + margins.right >= right - dragScrollMargin)
              sx = dragScrollSpeed(event.clientX - right);
          if (event.clientY - margins.top <= top + dragScrollMargin)
              sy = -dragScrollSpeed(top - event.clientY);
          else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
              sy = dragScrollSpeed(event.clientY - bottom);
          this.setScrollSpeed(sx, sy);
      }
      up(event) {
          if (this.dragging == null)
              this.select(this.lastEvent);
          if (!this.dragging)
              event.preventDefault();
          this.destroy();
      }
      destroy() {
          this.setScrollSpeed(0, 0);
          let doc = this.view.contentDOM.ownerDocument;
          doc.removeEventListener("mousemove", this.move);
          doc.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
      setScrollSpeed(sx, sy) {
          this.scrollSpeed = { x: sx, y: sy };
          if (sx || sy) {
              if (this.scrolling < 0)
                  this.scrolling = setInterval(() => this.scroll(), 50);
          }
          else if (this.scrolling > -1) {
              clearInterval(this.scrolling);
              this.scrolling = -1;
          }
      }
      scroll() {
          let { x, y } = this.scrollSpeed;
          if (x && this.scrollParents.x) {
              this.scrollParents.x.scrollLeft += x;
              x = 0;
          }
          if (y && this.scrollParents.y) {
              this.scrollParents.y.scrollTop += y;
              y = 0;
          }
          if (x || y)
              this.view.win.scrollBy(x, y);
          if (this.dragging === false)
              this.select(this.lastEvent);
      }
      skipAtoms(sel) {
          let ranges = null;
          for (let i = 0; i < sel.ranges.length; i++) {
              let range = sel.ranges[i], updated = null;
              if (range.empty) {
                  let pos = skipAtomicRanges(this.atoms, range.from, 0);
                  if (pos != range.from)
                      updated = EditorSelection.cursor(pos, -1);
              }
              else {
                  let from = skipAtomicRanges(this.atoms, range.from, -1);
                  let to = skipAtomicRanges(this.atoms, range.to, 1);
                  if (from != range.from || to != range.to)
                      updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
              }
              if (updated) {
                  if (!ranges)
                      ranges = sel.ranges.slice();
                  ranges[i] = updated;
              }
          }
          return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
      select(event) {
          let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
          if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
              this.view.dispatch({
                  selection,
                  userEvent: "select.pointer"
              });
          this.mustSelect = false;
      }
      update(update) {
          if (update.transactions.some(tr => tr.isUserEvent("input.type")))
              this.destroy();
          else if (this.style.update(update))
              setTimeout(() => this.select(this.lastEvent), 20);
      }
  }
  function addsSelectionRange(view, event) {
      let facet = view.state.facet(clickAddsSelectionRange);
      return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
      let facet = view.state.facet(dragMovesSelection$1);
      return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
      let { main } = view.state.selection;
      if (main.empty)
          return false;
      // On boundary clicks, check whether the coordinates are inside the
      // selection's client rectangles
      let sel = getSelection(view.root);
      if (!sel || sel.rangeCount == 0)
          return true;
      let rects = sel.getRangeAt(0).getClientRects();
      for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          if (rect.left <= event.clientX && rect.right >= event.clientX &&
              rect.top <= event.clientY && rect.bottom >= event.clientY)
              return true;
      }
      return false;
  }
  function eventBelongsToEditor(view, event) {
      if (!event.bubbles)
          return true;
      if (event.defaultPrevented)
          return false;
      for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
          if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
              return false;
      return true;
  }
  const handlers = /*@__PURE__*/Object.create(null);
  const observers = /*@__PURE__*/Object.create(null);
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
      (browser.ios && browser.webkit_version < 604);
  function capturePaste(view) {
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
          view.focus();
          target.remove();
          doPaste(view, target.value);
      }, 50);
  }
  function textFilter(state, facet, text) {
      for (let filter of state.facet(facet))
          text = filter(text, state);
      return text;
  }
  function doPaste(view, input) {
      input = textFilter(view.state, clipboardInputFilter, input);
      let { state } = view, changes, i = 1, text = state.toText(input);
      let byLine = text.lines == state.selection.ranges.length;
      let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
      if (linewise) {
          let lastLine = -1;
          changes = state.changeByRange(range => {
              let line = state.doc.lineAt(range.from);
              if (line.from == lastLine)
                  return { range };
              lastLine = line.from;
              let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
              return { changes: { from: line.from, insert },
                  range: EditorSelection.cursor(range.from + insert.length) };
          });
      }
      else if (byLine) {
          changes = state.changeByRange(range => {
              let line = text.line(i++);
              return { changes: { from: range.from, to: range.to, insert: line.text },
                  range: EditorSelection.cursor(range.from + line.length) };
          });
      }
      else {
          changes = state.replaceSelection(text);
      }
      view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
      });
  }
  observers.scroll = view => {
      view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
      view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
          view.inputState.tabFocusMode = Date.now() + 2000;
      return false;
  };
  observers.touchstart = (view, e) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = view => {
      view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2000)
          return false; // Ignore touch interaction
      let style = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style = makeStyle(view, event);
          if (style)
              break;
      }
      if (!style && event.button == 0)
          style = basicMouseSelection(view, event);
      if (style) {
          let mustFocus = !view.hasFocus;
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
          if (mustFocus)
              view.observer.ignore(() => {
                  focusPreventScroll(view.contentDOM);
                  let active = view.root.activeElement;
                  if (active && !active.contains(view.contentDOM))
                      active.blur();
              });
          let mouseSel = view.inputState.mouseSelection;
          if (mouseSel) {
              mouseSel.start(event);
              return mouseSel.dragging === false;
          }
      }
      return false;
  };
  function rangeForClick(view, pos, bias, type) {
      if (type == 1) { // Single click
          return EditorSelection.cursor(pos, bias);
      }
      else if (type == 2) { // Double click
          return groupAt(view.state, pos, bias);
      }
      else { // Triple click
          let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to)
              to++;
          return EditorSelection.range(from, to);
      }
  }
  let inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
  // Try to determine, for the given coordinates, associated with the
  // given position, whether they are related to the element before or
  // the element after the position.
  function findPositionSide(view, pos, x, y) {
      let line = LineView.find(view.docView, pos);
      if (!line)
          return 1;
      let off = pos - line.posAtStart;
      // Line boundaries point into the line
      if (off == 0)
          return 1;
      if (off == line.length)
          return -1;
      // Positions on top of an element point at that element
      let before = line.coordsAt(off, -1);
      if (before && inside(x, y, before))
          return -1;
      let after = line.coordsAt(off, 1);
      if (after && inside(x, y, after))
          return 1;
      // This is probably a line wrap point. Pick before if the point is
      // above its bottom.
      return before && before.bottom >= y ? -1 : 1;
  }
  function queryPos(view, event) {
      let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  const BadMouseDetail = browser.ie && browser.ie_version <= 11;
  let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
  function getClickType(event) {
      if (!BadMouseDetail)
          return event.detail;
      let last = lastMouseDown, lastTime = lastMouseDownTime;
      lastMouseDown = event;
      lastMouseDownTime = Date.now();
      return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
          Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
      let start = queryPos(view, event), type = getClickType(event);
      let startSel = view.state.selection;
      return {
          update(update) {
              if (update.docChanged) {
                  start.pos = update.changes.mapPos(start.pos);
                  startSel = startSel.map(update.changes);
              }
          },
          get(event, extend, multiple) {
              let cur = queryPos(view, event), removed;
              let range = rangeForClick(view, cur.pos, cur.bias, type);
              if (start.pos != cur.pos && !extend) {
                  let startRange = rangeForClick(view, start.pos, start.bias, type);
                  let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                  range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
              }
              if (extend)
                  return startSel.replaceRange(startSel.main.extend(range.from, range.to));
              else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                  return removed;
              else if (multiple)
                  return startSel.addRange(range);
              else
                  return EditorSelection.create([range]);
          }
      };
  }
  function removeRangeAround(sel, pos) {
      for (let i = 0; i < sel.ranges.length; i++) {
          let { from, to } = sel.ranges[i];
          if (from <= pos && to >= pos)
              return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
      }
      return null;
  }
  handlers.dragstart = (view, event) => {
      let { selection: { main: range } } = view.state;
      if (event.target.draggable) {
          let cView = view.docView.nearest(event.target);
          if (cView && cView.isWidget) {
              let from = cView.posAtStart, to = from + cView.length;
              if (from >= range.to || to <= range.from)
                  range = EditorSelection.range(from, to);
          }
      }
      let { inputState } = view;
      if (inputState.mouseSelection)
          inputState.mouseSelection.dragging = true;
      inputState.draggedContent = range;
      if (event.dataTransfer) {
          event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
          event.dataTransfer.effectAllowed = "copyMove";
      }
      return false;
  };
  handlers.dragend = view => {
      view.inputState.draggedContent = null;
      return false;
  };
  function dropText(view, event, text, direct) {
      text = textFilter(view.state, clipboardInputFilter, text);
      if (!text)
          return;
      let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let { draggedContent } = view.inputState;
      let del = direct && draggedContent && dragMovesSelection(view, event)
          ? { from: draggedContent.from, to: draggedContent.to } : null;
      let ins = { from: dropPos, insert: text };
      let changes = view.state.changes(del ? [del, ins] : ins);
      view.focus();
      view.dispatch({
          changes,
          selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
          userEvent: del ? "move.drop" : "input.drop"
      });
      view.inputState.draggedContent = null;
  }
  handlers.drop = (view, event) => {
      if (!event.dataTransfer)
          return false;
      if (view.state.readOnly)
          return true;
      let files = event.dataTransfer.files;
      if (files && files.length) { // For a file drop, read the file's text.
          let text = Array(files.length), read = 0;
          let finishFile = () => {
              if (++read == files.length)
                  dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
              let reader = new FileReader;
              reader.onerror = finishFile;
              reader.onload = () => {
                  if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                      text[i] = reader.result;
                  finishFile();
              };
              reader.readAsText(files[i]);
          }
          return true;
      }
      else {
          let text = event.dataTransfer.getData("Text");
          if (text) {
              dropText(view, event, text, true);
              return true;
          }
      }
      return false;
  };
  handlers.paste = (view, event) => {
      if (view.state.readOnly)
          return true;
      view.observer.flush();
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
          return true;
      }
      else {
          capturePaste(view);
          return false;
      }
  };
  function captureCopy(view, text) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      let parent = view.dom.parentNode;
      if (!parent)
          return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.value = text;
      target.focus();
      target.selectionEnd = text.length;
      target.selectionStart = 0;
      setTimeout(() => {
          target.remove();
          view.focus();
      }, 50);
  }
  function copiedRange(state) {
      let content = [], ranges = [], linewise = false;
      for (let range of state.selection.ranges)
          if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
          }
      if (!content.length) {
          // Nothing selected, do a line-wise copy
          let upto = -1;
          for (let { from } of state.selection.ranges) {
              let line = state.doc.lineAt(from);
              if (line.number > upto) {
                  content.push(line.text);
                  ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
              }
              upto = line.number;
          }
          linewise = true;
      }
      return { text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)), ranges, linewise };
  }
  let lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
      let { text, ranges, linewise } = copiedRange(view.state);
      if (!text && !linewise)
          return false;
      lastLinewiseCopy = linewise ? text : null;
      if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
              changes: ranges,
              scrollIntoView: true,
              userEvent: "delete.cut"
          });
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
          data.clearData();
          data.setData("text/plain", text);
          return true;
      }
      else {
          captureCopy(view, text);
          return false;
      }
  };
  const isFocusChange = /*@__PURE__*/Annotation.define();
  function focusChangeTransaction(state, focus) {
      let effects = [];
      for (let getEffect of state.facet(focusChangeEffect)) {
          let effect = getEffect(state, focus);
          if (effect)
              effects.push(effect);
      }
      return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
      setTimeout(() => {
          let focus = view.hasFocus;
          if (focus != view.inputState.notifiedFocused) {
              let tr = focusChangeTransaction(view.state, focus);
              if (tr)
                  view.dispatch(tr);
              else
                  view.update([]);
          }
      }, 10);
  }
  observers.focus = view => {
      view.inputState.lastFocusTime = Date.now();
      // When focusing reset the scroll position, move it back to where it was
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
          view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
          view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
  };
  observers.blur = view => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
          // FIXME possibly set a timeout to clear it again on Android
          view.inputState.composing = 0;
      }
  };
  observers.compositionend = view => {
      if (view.observer.editContext)
          return; // Composition handled by edit context
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionPendingKey = true;
      view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android) {
          // Delay flushing for a bit on Android because it'll often fire a
          // bunch of contradictory changes in a row at end of compositon
          view.observer.flushSoon();
      }
      else if (view.inputState.compositionPendingChange) {
          // If we found pending records, schedule a flush.
          Promise.resolve().then(() => view.observer.flush());
      }
      else {
          // Otherwise, make sure that, if no changes come in soon, the
          // composition view is cleared.
          setTimeout(() => {
              if (view.inputState.composing < 0 && view.docView.hasComposition)
                  view.update([]);
          }, 50);
      }
  };
  observers.contextmenu = view => {
      view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
      var _a, _b;
      // In EditContext mode, we must handle insertReplacementText events
      // directly, to make spell checking corrections work
      if (event.inputType == "insertReplacementText" && view.observer.editContext) {
          let text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"), ranges = event.getTargetRanges();
          if (text && ranges.length) {
              let r = ranges[0];
              let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
              applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
              return true;
          }
      }
      // Because Chrome Android doesn't fire useful key events, use
      // beforeinput to detect backspace (and possibly enter and delete,
      // but those usually don't even seem to fire beforeinput events at
      // the moment) and fake a key event for it.
      //
      // (preventDefault on beforeinput, though supported in the spec,
      // seems to do nothing at all on Chrome).
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);
          if (pending.key == "Backspace" || pending.key == "Delete") {
              let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
              setTimeout(() => {
                  var _a;
                  // Backspacing near uneditable nodes on Chrome Android sometimes
                  // closes the virtual keyboard. This tries to crudely detect
                  // that and refocus to get it back.
                  if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                      view.contentDOM.blur();
                      view.focus();
                  }
              }, 100);
          }
      }
      if (browser.ios && event.inputType == "deleteContentForward") {
          // For some reason, DOM changes (and beforeinput) happen _before_
          // the key event for ctrl-d on iOS when using an external
          // keyboard.
          view.observer.flushSoon();
      }
      // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
      if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
          setTimeout(() => observers.compositionend(view, event), 20);
      }
      return false;
  };
  const appliedFirefoxHack = /*@__PURE__*/new Set;
  // In Firefox, when cut/copy handlers are added to the document, that
  // somehow avoids a bug where those events aren't fired when the
  // selection is empty. See https://github.com/codemirror/dev/issues/1082
  // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
  function firefoxCopyCutHack(doc) {
      if (!appliedFirefoxHack.has(doc)) {
          appliedFirefoxHack.add(doc);
          doc.addEventListener("copy", () => { });
          doc.addEventListener("cut", () => { });
      }
  }

  const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  // Used to track, during updateHeight, if any actual heights changed
  let heightChangeFlag = false;
  function clearHeightChangeFlag() { heightChangeFlag = false; }
  class HeightOracle {
      constructor(lineWrapping) {
          this.lineWrapping = lineWrapping;
          this.doc = Text.empty;
          this.heightSamples = {};
          this.lineHeight = 14; // The height of an entire line (line-height)
          this.charWidth = 7;
          this.textHeight = 14; // The height of the actual font (font-size)
          this.lineLength = 30;
      }
      heightForGap(from, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
          if (this.lineWrapping)
              lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
          return this.lineHeight * lines;
      }
      heightForLine(length) {
          if (!this.lineWrapping)
              return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
          return lines * this.lineHeight;
      }
      setDoc(doc) { this.doc = doc; return this; }
      mustRefreshForWrapping(whiteSpace) {
          return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
              let h = lineHeights[i];
              if (h < 0) {
                  i++;
              }
              else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                  newHeight = true;
                  this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
          this.lineWrapping = lineWrapping;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.textHeight = textHeight;
          this.lineLength = lineLength;
          if (changed) {
              this.heightSamples = {};
              for (let i = 0; i < knownHeights.length; i++) {
                  let h = knownHeights[i];
                  if (h < 0)
                      i++;
                  else
                      this.heightSamples[Math.floor(h * 10)] = true;
              }
          }
          return changed;
      }
  }
  // This object is used by `updateHeight` to make DOM measurements
  // arrive at the right nides. The `heights` array is a sequence of
  // block heights, starting from position `from`.
  class MeasuredHeights {
      constructor(from, heights) {
          this.from = from;
          this.heights = heights;
          this.index = 0;
      }
      get more() { return this.index < this.heights.length; }
  }
  /**
  Record used to represent information about a block-level element
  in the editor view.
  */
  class BlockInfo {
      /**
      @internal
      */
      constructor(
      /**
      The start of the element in the document.
      */
      from, 
      /**
      The length of the element.
      */
      length, 
      /**
      The top position of the element (relative to the top of the
      document).
      */
      top, 
      /**
      Its height.
      */
      height, 
      /**
      @internal Weird packed field that holds an array of children
      for composite blocks, a decoration for block widgets, and a
      number indicating the amount of widget-create line breaks for
      text blocks.
      */
      _content) {
          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this._content = _content;
      }
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      get type() {
          return typeof this._content == "number" ? BlockType.Text :
              Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
      get to() { return this.from + this.length; }
      /**
      The bottom position of the element.
      */
      get bottom() { return this.top + this.height; }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
      get widget() {
          return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
      get widgetLineBreaks() {
          return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
      join(other) {
          let content = (Array.isArray(this._content) ? this._content : [this])
              .concat(Array.isArray(other._content) ? other._content : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
      }
  }
  var QueryType = /*@__PURE__*/(function (QueryType) {
      QueryType[QueryType["ByPos"] = 0] = "ByPos";
      QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
      QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType})(QueryType || (QueryType = {}));
  const Epsilon = 1e-3;
  class HeightMap {
      constructor(length, // The number of characters covered
      height, // Height of this part of the document
      flags = 2 /* Flag.Outdated */) {
          this.length = length;
          this.height = height;
          this.flags = flags;
      }
      get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
      set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & -3 /* Flag.Outdated */); }
      setHeight(height) {
          if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon)
                  heightChangeFlag = true;
              this.height = height;
          }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) { result.push(this); }
      decomposeRight(_from, result) { result.push(this); }
      applyChanges(decorations, oldDoc, oracle, changes) {
          let me = this, doc = oracle.doc;
          for (let i = changes.length - 1; i >= 0; i--) {
              let { fromA, toA, fromB, toB } = changes[i];
              let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
              let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
              toB += end.to - toA;
              toA = end.to;
              while (i > 0 && start.from <= changes[i - 1].toA) {
                  fromA = changes[i - 1].fromA;
                  fromB = changes[i - 1].fromB;
                  i--;
                  if (fromA < start.from)
                      start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
              }
              fromB += start.from - fromA;
              fromA = start.from;
              let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
              me = replace(me, me.replace(fromA, toA, nodes));
          }
          return me.updateHeight(oracle, 0);
      }
      static empty() { return new HeightMapText(0, 0); }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
          if (nodes.length == 1)
              return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (;;) {
              if (i == j) {
                  if (before > after * 2) {
                      let split = nodes[i - 1];
                      if (split.break)
                          nodes.splice(--i, 1, split.left, null, split.right);
                      else
                          nodes.splice(--i, 1, split.left, split.right);
                      j += 1 + split.break;
                      before -= split.size;
                  }
                  else if (after > before * 2) {
                      let split = nodes[j];
                      if (split.break)
                          nodes.splice(j, 1, split.left, null, split.right);
                      else
                          nodes.splice(j, 1, split.left, split.right);
                      j += 2 + split.break;
                      after -= split.size;
                  }
                  else {
                      break;
                  }
              }
              else if (before < after) {
                  let next = nodes[i++];
                  if (next)
                      before += next.size;
              }
              else {
                  let next = nodes[--j];
                  if (next)
                      after += next.size;
              }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
              brk = 1;
              i--;
          }
          else if (nodes[i] == null) {
              brk = 1;
              j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
      }
  }
  function replace(old, val) {
      if (old == val)
          return old;
      if (old.constructor != val.constructor)
          heightChangeFlag = true;
      return val;
  }
  HeightMap.prototype.size = 1;
  class HeightMapBlock extends HeightMap {
      constructor(length, height, deco) {
          super(length, height);
          this.deco = deco;
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
      }
      lineAt(_value, _type, oracle, top, offset) {
          return this.blockAt(0, oracle, top, offset);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          if (from <= offset + this.length && to >= offset)
              f(this.blockAt(0, oracle, top, offset));
      }
      updateHeight(oracle, offset = 0, _force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          this.outdated = false;
          return this;
      }
      toString() { return `block(${this.length})`; }
  }
  class HeightMapText extends HeightMapBlock {
      constructor(length, height) {
          super(length, height, null);
          this.collapsed = 0; // Amount of collapsed content in the line
          this.widgetHeight = 0; // Maximum inline widget height
          this.breaks = 0; // Number of widget-introduced line breaks on the line
      }
      blockAt(_height, _oracle, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.breaks);
      }
      replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
              Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap)
                  node = new HeightMapText(node.length, this.height);
              else
                  node.height = this.height;
              if (!this.outdated)
                  node.outdated = false;
              return node;
          }
          else {
              return HeightMap.of(nodes);
          }
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
              this.setHeight(measured.heights[measured.index++]);
          else if (force || this.outdated)
              this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                  this.breaks * oracle.lineHeight);
          this.outdated = false;
          return this;
      }
      toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
  }
  class HeightMapGap extends HeightMap {
      constructor(length) { super(length, 0); }
      heightMetrics(oracle, offset) {
          let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
          let lines = lastLine - firstLine + 1;
          let perLine, perChar = 0;
          if (oracle.lineWrapping) {
              let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
              perLine = totalPerLine / lines;
              if (this.length > lines + 1)
                  perChar = (this.height - totalPerLine) / (this.length - lines - 1);
          }
          else {
              perLine = this.height / lines;
          }
          return { firstLine, lastLine, perLine, perChar };
      }
      blockAt(height, oracle, top, offset) {
          let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          if (oracle.lineWrapping) {
              let guess = offset + (height < oracle.lineHeight ? 0
                  : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
              let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
              let lineTop = Math.max(top, height - lineHeight / 2);
              return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
          }
          else {
              let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
              let { from, length } = oracle.doc.line(firstLine + line);
              return new BlockInfo(from, length, top + perLine * line, perLine, 0);
          }
      }
      lineAt(value, type, oracle, top, offset) {
          if (type == QueryType.ByHeight)
              return this.blockAt(value, oracle, top, offset);
          if (type == QueryType.ByPosNoHeight) {
              let { from, to } = oracle.doc.lineAt(value);
              return new BlockInfo(from, to - from, 0, 0, 0);
          }
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
          let linesAbove = line.number - firstLine;
          let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
          return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          from = Math.max(from, offset);
          to = Math.min(to, offset + this.length);
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
          for (let pos = from, lineTop = top; pos <= to;) {
              let line = oracle.doc.lineAt(pos);
              if (pos == from) {
                  let linesAbove = line.number - firstLine;
                  lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
              }
              let lineHeight = perLine + perChar * line.length;
              f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
              lineTop += lineHeight;
              pos = line.to + 1;
          }
      }
      replace(from, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
              let last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap)
                  nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
              else
                  nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from > 0) {
              let first = nodes[0];
              if (first instanceof HeightMapGap)
                  nodes[0] = new HeightMapGap(from + first.length);
              else
                  nodes.unshift(new HeightMapGap(from - 1), null);
          }
          return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
      }
      decomposeRight(from, result) {
          result.push(null, new HeightMapGap(this.length - from - 1));
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let end = offset + this.length;
          if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
              if (measured.from > offset)
                  nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
              while (pos <= end && measured.more) {
                  let len = oracle.doc.lineAt(pos).length;
                  if (nodes.length)
                      nodes.push(null);
                  let height = measured.heights[measured.index++];
                  if (singleHeight == -1)
                      singleHeight = height;
                  else if (Math.abs(height - singleHeight) >= Epsilon)
                      singleHeight = -2;
                  let line = new HeightMapText(len, height);
                  line.outdated = false;
                  nodes.push(line);
                  pos += len + 1;
              }
              if (pos <= end)
                  nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              let result = HeightMap.of(nodes);
              if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                  Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                  heightChangeFlag = true;
              return replace(this, result);
          }
          else if (force || this.outdated) {
              this.setHeight(oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
          }
          return this;
      }
      toString() { return `gap(${this.length})`; }
  }
  class HeightMapBranch extends HeightMap {
      constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
      }
      get break() { return this.flags & 1 /* Flag.Break */; }
      blockAt(height, oracle, top, offset) {
          let mid = top + this.left.height;
          return height < mid ? this.left.blockAt(height, oracle, top, offset)
              : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
      }
      lineAt(value, type, oracle, top, offset) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
          let base = left ? this.left.lineAt(value, type, oracle, top, offset)
              : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
          if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
              return base;
          let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
          if (left)
              return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
          else
              return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
      }
      forEachLine(from, to, oracle, top, offset, f) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          if (this.break) {
              if (from < rightOffset)
                  this.left.forEachLine(from, to, oracle, top, offset, f);
              if (to >= rightOffset)
                  this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
          }
          else {
              let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
              if (from < mid.from)
                  this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
              if (mid.to >= from && mid.from <= to)
                  f(mid);
              if (to > mid.to)
                  this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
          }
      }
      replace(from, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
              return this.balanced(this.left.replace(from, to, nodes), this.right);
          if (from > this.left.length)
              return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
          let result = [];
          if (from > 0)
              this.decomposeLeft(from, result);
          let left = result.length;
          for (let node of nodes)
              result.push(node);
          if (from > 0)
              mergeGaps(result, left - 1);
          if (to < this.length) {
              let right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
          }
          return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
              return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
              left++;
              if (to >= left)
                  result.push(null);
          }
          if (to > left)
              this.right.decomposeLeft(to - left, result);
      }
      decomposeRight(from, result) {
          let left = this.left.length, right = left + this.break;
          if (from >= right)
              return this.right.decomposeRight(from - right, result);
          if (from < left)
              this.left.decomposeRight(from, result);
          if (this.break && from < right)
              result.push(null);
          result.push(this.right);
      }
      balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
              return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = replace(this.left, left);
          this.right = replace(this.right, right);
          this.setHeight(left.height + right.height);
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset + left.length && measured.more)
              rebalance = left = left.updateHeight(oracle, offset, force, measured);
          else
              left.updateHeight(oracle, offset, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
              rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
              right.updateHeight(oracle, rightStart, force);
          if (rebalance)
              return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
      }
      toString() { return this.left + (this.break ? " " : "-") + this.right; }
  }
  function mergeGaps(nodes, around) {
      let before, after;
      if (nodes[around] == null &&
          (before = nodes[around - 1]) instanceof HeightMapGap &&
          (after = nodes[around + 1]) instanceof HeightMapGap)
          nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  const relevantWidgetHeight = 5;
  class NodeBuilder {
      constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
      }
      get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
          if (this.lineStart > -1) {
              let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText)
                  last.length += end - this.pos;
              else if (end > this.pos || !this.isCovered)
                  this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;
              if (to > end) {
                  this.nodes.push(null);
                  this.writtenTo++;
                  this.lineStart = -1;
              }
          }
          this.pos = to;
      }
      point(from, to, deco) {
          if (from < to || deco.heightRelevant) {
              let height = deco.widget ? deco.widget.estimatedHeight : 0;
              let breaks = deco.widget ? deco.widget.lineBreaks : 0;
              if (height < 0)
                  height = this.oracle.lineHeight;
              let len = to - from;
              if (deco.block) {
                  this.addBlock(new HeightMapBlock(len, height, deco));
              }
              else if (len || breaks || height >= relevantWidgetHeight) {
                  this.addLineDeco(height, breaks, len);
              }
          }
          else if (to > from) {
              this.span(from, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
              this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
          if (this.lineStart > -1)
              return;
          let { from, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from;
          this.lineEnd = to;
          if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                  this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
          }
          if (this.pos > from)
              this.nodes.push(new HeightMapText(this.pos - from, -1));
          this.writtenTo = this.pos;
      }
      blankContent(from, to) {
          let gap = new HeightMapGap(to - from);
          if (this.oracle.doc.lineAt(from).to == to)
              gap.flags |= 4 /* Flag.SingleLine */;
          return gap;
      }
      ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
              return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
      }
      addBlock(block) {
          this.enterLine();
          let deco = block.deco;
          if (deco && deco.startSide > 0 && !this.isCovered)
              this.ensureLine();
          this.nodes.push(block);
          this.writtenTo = this.pos = this.pos + block.length;
          if (deco && deco.endSide > 0)
              this.covering = block;
      }
      addLineDeco(height, breaks, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          line.breaks += breaks;
          this.writtenTo = this.pos = this.pos + length;
      }
      finish(from) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
              this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
              this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from;
          for (let node of this.nodes) {
              if (node instanceof HeightMapText)
                  node.updateHeight(this.oracle, pos);
              pos += node ? node.length : 1;
          }
          return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations, from, to) {
          let builder = new NodeBuilder(from, oracle);
          RangeSet.spans(decorations, from, to, builder, 0);
          return builder.finish(from);
      }
  }
  function heightRelevantDecoChanges(a, b, diff) {
      let comp = new DecorationComparator;
      RangeSet.compare(a, b, diff, comp, 0);
      return comp.changes;
  }
  class DecorationComparator {
      constructor() {
          this.changes = [];
      }
      compareRange() { }
      comparePoint(from, to, a, b) {
          if (from < to || a && a.heightRelevant || b && b.heightRelevant)
              addRange(from, to, this.changes, 5);
      }
  }

  function visiblePixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      let doc = dom.ownerDocument, win = doc.defaultView || window;
      let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
      let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
      for (let parent = dom.parentNode; parent && parent != doc.body;) {
          if (parent.nodeType == 1) {
              let elt = parent;
              let style = window.getComputedStyle(elt);
              if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                  style.overflow != "visible") {
                  let parentRect = elt.getBoundingClientRect();
                  left = Math.max(left, parentRect.left);
                  right = Math.min(right, parentRect.right);
                  top = Math.max(top, parentRect.top);
                  bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
              }
              parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          }
          else if (parent.nodeType == 11) { // Shadow root
              parent = parent.host;
          }
          else {
              break;
          }
      }
      return { left: left - rect.left, right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
  }
  function inWindow(elt) {
      let rect = elt.getBoundingClientRect(), win = elt.ownerDocument.defaultView || window;
      return rect.left < win.innerWidth && rect.right > 0 &&
          rect.top < win.innerHeight && rect.bottom > 0;
  }
  function fullPixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      return { left: 0, right: rect.right - rect.left,
          top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
  }
  // Line gaps are placeholder widgets used to hide pieces of overlong
  // lines within the viewport, as a kludge to keep the editor
  // responsive when a ridiculously long line is loaded into it.
  class LineGap {
      constructor(from, to, size, displaySize) {
          this.from = from;
          this.to = to;
          this.size = size;
          this.displaySize = displaySize;
      }
      static same(a, b) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++) {
              let gA = a[i], gB = b[i];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                  return false;
          }
          return true;
      }
      draw(viewState, wrapping) {
          return Decoration.replace({
              widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
          }).range(this.from, this.to);
      }
  }
  class LineGapWidget extends WidgetType {
      constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
      }
      eq(other) { return other.size == this.size && other.vertical == this.vertical; }
      toDOM() {
          let elt = document.createElement("div");
          if (this.vertical) {
              elt.style.height = this.size + "px";
          }
          else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
          }
          return elt;
      }
      get estimatedHeight() { return this.vertical ? this.size : -1; }
  }
  class ViewState {
      constructor(state) {
          this.state = state;
          // These are contentDOM-local coordinates
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0; // Padding above the document, scaled
          this.paddingBottom = 0; // Padding below the document, scaled
          this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
          this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
          this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
          this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
          this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
          this.scrolledToBottom = false;
          // The CSS-transformation scale of the editor (transformed size /
          // concrete size)
          this.scaleX = 1;
          this.scaleY = 1;
          // The vertical position (document-relative) to which to anchor the
          // scroll position. -1 means anchor to the end of the document.
          this.scrollAnchorPos = 0;
          // The height at the anchor position. Set by the DOM update phase.
          // -1 means no height available.
          this.scrollAnchorHeight = -1;
          // See VP.MaxDOMHeight
          this.scaler = IdScaler;
          this.scrollTarget = null;
          // Briefly set to true when printing, to disable viewport limiting
          this.printing = false;
          // Flag set when editor content was redrawn, so that the next
          // measure stage knows it must read DOM layout
          this.mustMeasureContent = true;
          this.defaultTextDirection = Direction$1.LTR;
          this.visibleRanges = [];
          // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.
          this.mustEnforceCursorAssoc = false;
          let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
          this.heightOracle = new HeightOracle(guessWrapping);
          this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
          this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          for (let i = 0; i < 2; i++) {
              this.viewport = this.getViewport(0, null);
              if (!this.updateForViewport())
                  break;
          }
          this.updateViewportLines();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
          this.computeVisibleRanges();
      }
      updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
              let pos = i ? main.head : main.anchor;
              if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                  let { from, to } = this.lineBlockAt(pos);
                  viewports.push(new Viewport(from, to));
              }
          }
          this.viewports = viewports.sort((a, b) => a.from - b.from);
          return this.updateScaler();
      }
      updateScaler() {
          let scaler = this.scaler;
          this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
              new BigScaler(this.heightOracle, this.heightMap, this.viewports);
          return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
      }
      updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
              this.viewportLines.push(scaleBlock(block, this.scaler));
          });
      }
      update(update, scrollTarget = null) {
          this.state = update.state;
          let prevDeco = this.stateDeco;
          this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
          clearHeightChangeFlag();
          this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight || heightChangeFlag)
              update.flags |= 2 /* UpdateFlag.Height */;
          if (scrollAnchor) {
              this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
              this.scrollAnchorHeight = scrollAnchor.top;
          }
          else {
              this.scrollAnchorPos = -1;
              this.scrollAnchorHeight = this.heightMap.height;
          }
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
              !this.viewportIsAppropriate(viewport))
              viewport = this.getViewport(0, scrollTarget);
          let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          update.flags |= this.updateForViewport();
          if (viewportChange || !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */))
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges(update.changes);
          if (scrollTarget)
              this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
              update.state.selection.main.empty && update.state.selection.main.assoc &&
              !update.state.facet(nativeSelectionHidden))
              this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
          let dom = view.contentDOM, style = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style.whiteSpace;
          this.defaultTextDirection = style.direction == "rtl" ? Direction$1.RTL : Direction$1.LTR;
          let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
          let domRect = dom.getBoundingClientRect();
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
          this.contentDOMHeight = domRect.height;
          this.mustMeasureContent = false;
          let result = 0, bias = 0;
          if (domRect.width && domRect.height) {
              let { scaleX, scaleY } = getScale(dom, domRect);
              if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                  scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                  this.scaleX = scaleX;
                  this.scaleY = scaleY;
                  result |= 16 /* UpdateFlag.Geometry */;
                  refresh = measureContent = true;
              }
          }
          // Vertical padding
          let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
          let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
          if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
              this.paddingTop = paddingTop;
              this.paddingBottom = paddingBottom;
              result |= 16 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
          }
          if (this.editorWidth != view.scrollDOM.clientWidth) {
              if (oracle.lineWrapping)
                  measureContent = true;
              this.editorWidth = view.scrollDOM.clientWidth;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
          if (this.scrollTop != scrollTop) {
              this.scrollAnchorHeight = -1;
              this.scrollTop = scrollTop;
          }
          this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
          // Pixel viewport
          let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (inView != this.inView) {
              this.inView = inView;
              if (inView)
                  measureContent = true;
          }
          if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
              return 0;
          let contentWidth = domRect.width;
          if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
              this.contentDOMWidth = domRect.width;
              this.editorHeight = view.scrollDOM.clientHeight;
              result |= 16 /* UpdateFlag.Geometry */;
          }
          if (measureContent) {
              let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
              if (oracle.mustRefreshForHeights(lineHeights))
                  refresh = true;
              if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                  let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                  refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                  if (refresh) {
                      view.docView.minWidth = 0;
                      result |= 16 /* UpdateFlag.Geometry */;
                  }
              }
              if (dTop > 0 && dBottom > 0)
                  bias = Math.max(dTop, dBottom);
              else if (dTop < 0 && dBottom < 0)
                  bias = Math.min(dTop, dBottom);
              clearHeightChangeFlag();
              for (let vp of this.viewports) {
                  let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                  this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
              }
              if (heightChangeFlag)
                  result |= 2 /* UpdateFlag.Height */;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
              this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                  this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange) {
              if (result & 2 /* UpdateFlag.Height */)
                  result |= this.updateScaler();
              this.viewport = this.getViewport(bias, this.scrollTarget);
              result |= this.updateForViewport();
          }
          if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
              this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
              this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false;
              // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.
              view.docView.enforceCursorAssoc();
          }
          return result;
      }
      get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
      get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
      getViewport(bias, scrollTarget) {
          // This will divide VP.Margin between the top and the
          // bottom, depending on the bias (the change in viewport position
          // since the last update). It'll hold a number between 0 and 1
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
          let map = this.heightMap, oracle = this.heightOracle;
          let { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
          // If scrollTarget is given, make sure the viewport includes that position
          if (scrollTarget) {
              let { head } = scrollTarget.range;
              if (head < viewport.from || head > viewport.to) {
                  let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                  let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                  if (scrollTarget.y == "center")
                      topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                  else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                      topPos = block.top;
                  else
                      topPos = block.bottom - viewHeight;
                  viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
              }
          }
          return viewport;
      }
      mapViewport(viewport, changes) {
          let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from, to }, bias = 0) {
          if (!this.inView)
              return true;
          let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
              (to == this.state.doc.length ||
                  bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
              (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
      }
      mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
              return gaps;
          let mapped = [];
          for (let gap of gaps)
              if (!changes.touchesRange(gap.from, gap.to))
                  mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
          return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
          let wrapping = this.heightOracle.lineWrapping;
          let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
          // The non-wrapping logic won't work at all in predominantly right-to-left text.
          if (this.defaultTextDirection != Direction$1.LTR && !wrapping)
              return [];
          let gaps = [];
          let addGap = (from, to, line, structure) => {
              if (to - from < halfMargin)
                  return;
              let sel = this.state.selection.main, avoid = [sel.from];
              if (!sel.empty)
                  avoid.push(sel.to);
              for (let pos of avoid) {
                  if (pos > from && pos < to) {
                      addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                      addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                      return;
                  }
              }
              let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                  Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                  !avoid.some(pos => gap.from < pos && gap.to > pos));
              if (!gap) {
                  // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                  if (to < line.to && mayMeasure && wrapping &&
                      mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                      let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                      if (lineStart > from)
                          to = lineStart;
                  }
                  let size = this.gapSize(line, from, to, structure);
                  let displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
                  gap = new LineGap(from, to, size, displaySize);
              }
              gaps.push(gap);
          };
          let checkLine = (line) => {
              if (line.length < doubleMargin || line.type != BlockType.Text)
                  return;
              let structure = lineStructure(line.from, line.to, this.stateDeco);
              if (structure.total < doubleMargin)
                  return;
              let target = this.scrollTarget ? this.scrollTarget.range.head : null;
              let viewFrom, viewTo;
              if (wrapping) {
                  let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                  let top, bot;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                      top = targetFrac - spaceFrac;
                      bot = targetFrac + spaceFrac;
                  }
                  else {
                      top = (this.visibleTop - line.top - marginHeight) / line.height;
                      bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                  }
                  viewFrom = findPosition(structure, top);
                  viewTo = findPosition(structure, bot);
              }
              else {
                  let totalWidth = structure.total * this.heightOracle.charWidth;
                  let marginWidth = margin * this.heightOracle.charWidth;
                  let horizOffset = 0;
                  if (totalWidth > 2000000 /* VP.MaxHorizGap */)
                      for (let old of current) {
                          if (old.from >= line.from && old.from < line.to && old.size != old.displaySize &&
                              old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                              horizOffset = old.size - old.displaySize;
                      }
                  let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
                  let left, right;
                  if (target != null) {
                      let targetFrac = findFraction(structure, target);
                      let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
                      left = targetFrac - spaceFrac;
                      right = targetFrac + spaceFrac;
                  }
                  else {
                      left = (pxLeft - marginWidth) / totalWidth;
                      right = (pxRight + marginWidth) / totalWidth;
                  }
                  viewFrom = findPosition(structure, left);
                  viewTo = findPosition(structure, right);
              }
              if (viewFrom > line.from)
                  addGap(line.from, viewFrom, line, structure);
              if (viewTo < line.to)
                  addGap(viewTo, line.to, line, structure);
          };
          for (let line of this.viewportLines) {
              if (Array.isArray(line.type))
                  line.type.forEach(checkLine);
              else
                  checkLine(line);
          }
          return gaps;
      }
      gapSize(line, from, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from);
          if (this.heightOracle.lineWrapping) {
              return line.height * fraction;
          }
          else {
              return structure.total * this.heightOracle.charWidth * fraction;
          }
      }
      updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
          }
      }
      computeVisibleRanges(changes) {
          let deco = this.stateDeco;
          if (this.lineGaps.length)
              deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
              span(from, to) { ranges.push({ from, to }); },
              point() { }
          }, 20);
          let changed = 0;
          if (ranges.length != this.visibleRanges.length) {
              changed = 8 /* UpdateFlag.ViewportMoved */ | 4 /* UpdateFlag.Viewport */;
          }
          else {
              for (let i = 0; i < ranges.length && !(changed & 8 /* UpdateFlag.ViewportMoved */); i++) {
                  let old = this.visibleRanges[i], nw = ranges[i];
                  if (old.from != nw.from || old.to != nw.to) {
                      changed |= 4 /* UpdateFlag.Viewport */;
                      if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
                          changed |= 8 /* UpdateFlag.ViewportMoved */;
                  }
              }
          }
          this.visibleRanges = ranges;
          return changed;
      }
      lineBlockAt(pos) {
          return (pos >= this.viewport.from && pos <= this.viewport.to &&
              this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
              scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
          return (height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom &&
              this.viewportLines.find(l => l.top <= height && l.bottom >= height)) ||
              scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
      scrollAnchorAt(scrollTop) {
          let block = this.lineBlockAtHeight(scrollTop + 8);
          return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
      }
      elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
      get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
      }
  }
  class Viewport {
      constructor(from, to) {
          this.from = from;
          this.to = to;
      }
  }
  function lineStructure(from, to, stateDeco) {
      let ranges = [], pos = from, total = 0;
      RangeSet.spans(stateDeco, from, to, {
          span() { },
          point(from, to) {
              if (from > pos) {
                  ranges.push({ from: pos, to: from });
                  total += from - pos;
              }
              pos = to;
          }
      }, 20); // We're only interested in collapsed ranges of a significant size
      if (pos < to) {
          ranges.push({ from: pos, to });
          total += to - pos;
      }
      return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
      if (ratio <= 0)
          return ranges[0].from;
      if (ratio >= 1)
          return ranges[ranges.length - 1].to;
      let dist = Math.floor(total * ratio);
      for (let i = 0;; i++) {
          let { from, to } = ranges[i], size = to - from;
          if (dist <= size)
              return from + dist;
          dist -= size;
      }
  }
  function findFraction(structure, pos) {
      let counted = 0;
      for (let { from, to } of structure.ranges) {
          if (pos <= to) {
              counted += pos - from;
              break;
          }
          counted += to - from;
      }
      return counted / structure.total;
  }
  function find(array, f) {
      for (let val of array)
          if (f(val))
              return val;
      return undefined;
  }
  // Don't scale when the document height is within the range of what
  // the DOM can handle.
  const IdScaler = {
      toDOM(n) { return n; },
      fromDOM(n) { return n; },
      scale: 1,
      eq(other) { return other == this; }
  };
  // When the height is too big (> VP.MaxDOMHeight), scale down the
  // regions outside the viewports so that the total height is
  // VP.MaxDOMHeight.
  class BigScaler {
      constructor(oracle, heightMap, viewports) {
          let vpHeight = 0, base = 0, domBase = 0;
          this.viewports = viewports.map(({ from, to }) => {
              let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
              let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
              vpHeight += bottom - top;
              return { from, to, top, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
          }
      }
      toDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.top)
                  return domBase + (n - base) * this.scale;
              if (n <= vp.bottom)
                  return vp.domTop + (n - vp.top);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      fromDOM(n) {
          for (let i = 0, base = 0, domBase = 0;; i++) {
              let vp = i < this.viewports.length ? this.viewports[i] : null;
              if (!vp || n < vp.domTop)
                  return base + (n - domBase) / this.scale;
              if (n <= vp.domBottom)
                  return vp.top + (n - vp.domTop);
              base = vp.bottom;
              domBase = vp.domBottom;
          }
      }
      eq(other) {
          if (!(other instanceof BigScaler))
              return false;
          return this.scale == other.scale && this.viewports.length == other.viewports.length &&
              this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
      }
  }
  function scaleBlock(block, scaler) {
      if (scaler.scale == 1)
          return block;
      let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
      return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
  }

  const theme$4 = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
  const darkTheme$1 = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
  const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
  const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
      return new StyleModule(spec, {
          finish(sel) {
              return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                  if (m == "&")
                      return main;
                  if (!scopes || !scopes[m])
                      throw new RangeError(`Unsupported selector: ${m}`);
                  return scopes[m];
              }) : main + " " + sel;
          }
      });
  }
  const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
      "&": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
              // Provide a simple default outline to make sure a focused
              // editor is visually distinct. Can't leave the default behavior
              // because that will apply to the content element, which is
              // inside the scrollable container and doesn't include the
              // gutters. We also can't use an 'auto' outline, since those
              // are, for some reason, drawn behind the element content, which
              // will cause things like the active line background to cover
              // the outline (#297).
              outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
      },
      ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0,
          overflowAnchor: "none",
      },
      ".cm-content": {
          margin: 0,
          flexGrow: 2,
          flexShrink: 0,
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
          boxSizing: "border-box",
          minHeight: "100%",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
              WebkitUserModify: "read-write-plaintext-only",
          }
      },
      ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap", // For IE
          whiteSpace: "break-spaces",
          wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
          overflowWrap: "anywhere",
          flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
          display: "block",
          padding: "0 2px 0 6px"
      },
      ".cm-layer": {
          position: "absolute",
          left: 0,
          top: 0,
          contain: "size style",
          "& > *": {
              position: "absolute"
          }
      },
      "&light .cm-selectionBackground": {
          background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
          background: "#222"
      },
      "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#d7d4f0"
      },
      "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
          background: "#233"
      },
      ".cm-cursorLayer": {
          pointerEvents: "none"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
      },
      ".cm-cursor": {
          display: "none"
      },
      "&dark .cm-cursor": {
          borderLeftColor: "#ddd"
      },
      ".cm-dropCursor": {
          position: "absolute"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
          display: "block"
      },
      ".cm-iso": {
          unicodeBidi: "isolate"
      },
      ".cm-announced": {
          position: "fixed",
          top: "-10000px"
      },
      "@media print": {
          ".cm-announced": { display: "none" }
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
          flexShrink: 0,
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          insetInlineStart: 0,
          zIndex: 200
      },
      "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#6c6c6c",
          borderRight: "1px solid #ddd"
      },
      "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
      },
      ".cm-gutter": {
          display: "flex !important", // Necessary -- prevents margin collapsing
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
      },
      ".cm-gutterElement": {
          boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
      },
      ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0,
          zIndex: 300
      },
      "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
      },
      "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
          verticalAlign: "text-top",
          height: "1em",
          width: 0,
          display: "inline"
      },
      ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top",
      },
      ".cm-highlightSpace": {
          backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
          backgroundPosition: "center",
      },
      ".cm-highlightTab": {
          backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
          backgroundSize: "auto 100%",
          backgroundPosition: "right 90%",
          backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
          backgroundColor: "#ff332255"
      },
      ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
      },
      "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
      },
      "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
              backgroundImage: "linear-gradient(#111, #333)"
          }
      },
      ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
      },
      "&light .cm-textfield": {
          backgroundColor: "white"
      },
      "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
      }
  }, lightDarkIDs);

  const observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
  };
  // IE11 has very broken mutation observers, so we also listen to
  // DOMCharacterDataModified there
  const useCharData = browser.ie && browser.ie_version <= 11;
  class DOMObserver {
      constructor(view) {
          this.view = view;
          this.active = false;
          this.editContext = null;
          // The known selection. Kept in our own object, as opposed to just
          // directly accessing the selection because:
          //  - Safari doesn't report the right selection in shadow DOM
          //  - Reading from the selection forces a DOM layout
          //  - This way, we can ignore selectionchange events if we have
          //    already seen the 'new' selection
          this.selectionRange = new DOMSelectionState;
          // Set when a selection change is detected, cleared on flush
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
          this.lastChange = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.resizeScroll = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          this.printQuery = null;
          // Timeout for scheduling check of the parents that need scroll handlers
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(mutations => {
              for (let mut of mutations)
                  this.queue.push(mut);
              // IE11 will sometimes (on typing over a selection or
              // backspacing out a single character text node) call the
              // observer callback before actually updating the DOM.
              //
              // Unrelatedly, iOS Safari will, when ending a composition,
              // sometimes first clear it, deliver the mutations, and then
              // reinsert the finished text. CodeMirror's handling of the
              // deletion will prevent the reinsertion from happening,
              // breaking composition.
              if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                  mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                      m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                  this.flushSoon();
              else
                  this.flush();
          });
          if (window.EditContext && view.constructor.EDIT_CONTEXT !== false &&
              // Chrome <126 doesn't support inverted selections in edit context (#1392)
              !(browser.chrome && browser.chrome_version < 126)) {
              this.editContext = new EditContextManager(view);
              if (view.state.facet(editable))
                  view.contentDOM.editContext = this.editContext.editContext;
          }
          if (useCharData)
              this.onCharData = (event) => {
                  this.queue.push({ target: event.target,
                      type: "characterData",
                      oldValue: event.prevValue });
                  this.flushSoon();
              };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.onResize = this.onResize.bind(this);
          this.onPrint = this.onPrint.bind(this);
          this.onScroll = this.onScroll.bind(this);
          if (window.matchMedia)
              this.printQuery = window.matchMedia("print");
          if (typeof ResizeObserver == "function") {
              this.resizeScroll = new ResizeObserver(() => {
                  var _a;
                  if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                      this.onResize();
              });
              this.resizeScroll.observe(view.scrollDOM);
          }
          this.addWindowListeners(this.win = view.win);
          this.start();
          if (typeof IntersectionObserver == "function") {
              this.intersection = new IntersectionObserver(entries => {
                  if (this.parentCheck < 0)
                      this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                  if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                      this.intersecting = !this.intersecting;
                      if (this.intersecting != this.view.inView)
                          this.onScrollChanged(document.createEvent("Event"));
                  }
              }, { threshold: [0, .001] });
              this.intersection.observe(this.dom);
              this.gapIntersection = new IntersectionObserver(entries => {
                  if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                      this.onScrollChanged(document.createEvent("Event"));
              }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
      }
      onScrollChanged(e) {
          this.view.inputState.runHandlers("scroll", e);
          if (this.intersecting)
              this.view.measure();
      }
      onScroll(e) {
          if (this.intersecting)
              this.flush(false);
          if (this.editContext)
              this.view.requestMeasure(this.editContext.measureReq);
          this.onScrollChanged(e);
      }
      onResize() {
          if (this.resizeTimeout < 0)
              this.resizeTimeout = setTimeout(() => {
                  this.resizeTimeout = -1;
                  this.view.requestMeasure();
              }, 50);
      }
      onPrint(event) {
          if ((event.type == "change" || !event.type) && !event.matches)
              return;
          this.view.viewState.printing = true;
          this.view.measure();
          setTimeout(() => {
              this.view.viewState.printing = false;
              this.view.requestMeasure();
          }, 500);
      }
      updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
              this.gapIntersection.disconnect();
              for (let gap of gaps)
                  this.gapIntersection.observe(gap);
              this.gaps = gaps;
          }
      }
      onSelectionChange(event) {
          let wasChanged = this.selectionChanged;
          if (!this.readSelectionRange() || this.delayedAndroidKey)
              return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
              return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event)) {
              if (!wasChanged)
                  this.selectionChanged = false;
              return;
          }
          // Deletions on IE11 fire their events in the wrong order, giving
          // us a selection change event before the DOM changes are
          // reported.
          // Chrome Android has a similar issue when backspacing out a
          // selection (#645).
          if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
              // (Selection.isCollapsed isn't reliable on IE)
              sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
              this.flushSoon();
          else
              this.flush(false);
      }
      readSelectionRange() {
          let { view } = this;
          // The Selection object is broken in shadow roots in Safari. See
          // https://github.com/codemirror/dev/issues/414
          let selection = getSelection(view.root);
          if (!selection)
              return false;
          let range = browser.safari && view.root.nodeType == 11 &&
              view.root.activeElement == this.dom &&
              safariSelectionRangeHack(this.view, selection) || selection;
          if (!range || this.selectionRange.eq(range))
              return false;
          let local = hasSelection(this.dom, range);
          // Detect the situation where the browser has, on focus, moved the
          // selection to the start of the content element. Reset it to the
          // position from the editor state.
          if (local && !this.selectionChanged &&
              view.inputState.lastFocusTime > Date.now() - 200 &&
              view.inputState.lastTouchTime < Date.now() - 300 &&
              atElementStart(this.dom, range)) {
              this.view.inputState.lastFocusTime = 0;
              view.docView.updateSelection();
              return false;
          }
          this.selectionRange.setRange(range);
          if (local)
              this.selectionChanged = true;
          return true;
      }
      setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
      }
      clearSelectionRange() {
          this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                  if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                      i++;
                  else if (!changed)
                      changed = this.scrollTargets.slice(0, i);
                  if (changed)
                      changed.push(dom);
                  dom = dom.assignedSlot || dom.parentNode;
              }
              else if (dom.nodeType == 11) { // Shadow root
                  dom = dom.host;
              }
              else {
                  break;
              }
          }
          if (i < this.scrollTargets.length && !changed)
              changed = this.scrollTargets.slice(0, i);
          if (changed) {
              for (let dom of this.scrollTargets)
                  dom.removeEventListener("scroll", this.onScroll);
              for (let dom of this.scrollTargets = changed)
                  dom.addEventListener("scroll", this.onScroll);
          }
      }
      ignore(f) {
          if (!this.active)
              return f();
          try {
              this.stop();
              return f();
          }
          finally {
              this.start();
              this.clear();
          }
      }
      start() {
          if (this.active)
              return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
              this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
      }
      stop() {
          if (!this.active)
              return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
              this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
          this.processRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key, keyCode) {
          var _a;
          if (!this.delayedAndroidKey) {
              let flush = () => {
                  let key = this.delayedAndroidKey;
                  if (key) {
                      this.clearDelayedAndroidKey();
                      this.view.inputState.lastKeyCode = key.keyCode;
                      this.view.inputState.lastKeyTime = Date.now();
                      let flushed = this.flush();
                      if (!flushed && key.force)
                          dispatchKey(this.dom, key.key, key.keyCode);
                  }
              };
              this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
          }
          // Since backspace beforeinput is sometimes signalled spuriously,
          // Enter always takes precedence.
          if (!this.delayedAndroidKey || key == "Enter")
              this.delayedAndroidKey = {
                  key, keyCode,
                  // Only run the key handler when no changes are detected if
                  // this isn't coming right after another change, in which case
                  // it is probably part of a weird chain of updates, and should
                  // be ignored if it returns the DOM to its previous state.
                  force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
              };
      }
      clearDelayedAndroidKey() {
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
      }
      flushSoon() {
          if (this.delayedFlush < 0)
              this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
      }
      forceFlush() {
          if (this.delayedFlush >= 0) {
              this.view.win.cancelAnimationFrame(this.delayedFlush);
              this.delayedFlush = -1;
          }
          this.flush();
      }
      pendingRecords() {
          for (let mut of this.observer.takeRecords())
              this.queue.push(mut);
          return this.queue;
      }
      processRecords() {
          let records = this.pendingRecords();
          if (records.length)
              this.queue = [];
          let from = -1, to = -1, typeOver = false;
          for (let record of records) {
              let range = this.readMutation(record);
              if (!range)
                  continue;
              if (range.typeOver)
                  typeOver = true;
              if (from == -1) {
                  ({ from, to } = range);
              }
              else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
              }
          }
          return { from, to, typeOver };
      }
      readChange() {
          let { from, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from < 0 && !newSel)
              return null;
          if (from > -1)
              this.lastChange = Date.now();
          this.view.inputState.lastFocusTime = 0;
          this.selectionChanged = false;
          let change = new DOMChange(this.view, from, to, typeOver);
          this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
          return change;
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
          // Completely hold off flushing when pending keys are set—the code
          // managing those will make sure processRecords is called and the
          // view is resynchronized after
          if (this.delayedFlush >= 0 || this.delayedAndroidKey)
              return false;
          if (readSelection)
              this.readSelectionRange();
          let domChange = this.readChange();
          if (!domChange) {
              this.view.requestMeasure();
              return false;
          }
          let startState = this.view.state;
          let handled = applyDOMChange(this.view, domChange);
          // The view wasn't updated but DOM/selection changes were seen. Reset the view.
          if (this.view.state == startState &&
              (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
              this.view.update([]);
          return handled;
      }
      readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
              return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
              cView.flags |= 4 /* ViewFlag.AttrsDirty */;
          if (rec.type == "childList") {
              let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                  to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
          }
          else if (rec.type == "characterData") {
              return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          }
          else {
              return null;
          }
      }
      setWindow(win) {
          if (win != this.win) {
              this.removeWindowListeners(this.win);
              this.win = win;
              this.addWindowListeners(this.win);
          }
      }
      addWindowListeners(win) {
          win.addEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.addEventListener)
                  this.printQuery.addEventListener("change", this.onPrint);
              else
                  this.printQuery.addListener(this.onPrint);
          }
          else
              win.addEventListener("beforeprint", this.onPrint);
          win.addEventListener("scroll", this.onScroll);
          win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
          win.removeEventListener("scroll", this.onScroll);
          win.removeEventListener("resize", this.onResize);
          if (this.printQuery) {
              if (this.printQuery.removeEventListener)
                  this.printQuery.removeEventListener("change", this.onPrint);
              else
                  this.printQuery.removeListener(this.onPrint);
          }
          else
              win.removeEventListener("beforeprint", this.onPrint);
          win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      update(update) {
          if (this.editContext) {
              this.editContext.update(update);
              if (update.startState.facet(editable) != update.state.facet(editable))
                  update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
          }
      }
      destroy() {
          var _a, _b, _c;
          this.stop();
          (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
          (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
          for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
          this.removeWindowListeners(this.win);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
          this.win.cancelAnimationFrame(this.delayedFlush);
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          if (this.editContext) {
              this.view.contentDOM.editContext = null;
              this.editContext.destroy();
          }
      }
  }
  function findChild(cView, dom, dir) {
      while (dom) {
          let curView = ContentView.get(dom);
          if (curView && curView.parent == cView)
              return curView;
          let parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
      }
      return null;
  }
  function buildSelectionRangeFromRange(view, range) {
      let anchorNode = range.startContainer, anchorOffset = range.startOffset;
      let focusNode = range.endContainer, focusOffset = range.endOffset;
      let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
      // Since such a range doesn't distinguish between anchor and head,
      // use a heuristic that flips it around if its end matches the
      // current anchor.
      if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  // Used to work around a Safari Selection/shadow DOM bug (#414)
  function safariSelectionRangeHack(view, selection) {
      if (selection.getComposedRanges) {
          let range = selection.getComposedRanges(view.root)[0];
          if (range)
              return buildSelectionRangeFromRange(view, range);
      }
      let found = null;
      // Because Safari (at least in 2018-2021) doesn't provide regular
      // access to the selection inside a shadowroot, we have to perform a
      // ridiculous hack to get at it—using `execCommand` to trigger a
      // `beforeInput` event so that we can read the target range from the
      // event.
      function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
      }
      view.contentDOM.addEventListener("beforeinput", read, true);
      view.dom.ownerDocument.execCommand("indent");
      view.contentDOM.removeEventListener("beforeinput", read, true);
      return found ? buildSelectionRangeFromRange(view, found) : null;
  }
  class EditContextManager {
      constructor(view) {
          // The document window for which the text in the context is
          // maintained. For large documents, this may be smaller than the
          // editor document. This window always includes the selection head.
          this.from = 0;
          this.to = 0;
          // When applying a transaction, this is used to compare the change
          // made to the context content to the change in the transaction in
          // order to make the minimal changes to the context (since touching
          // that sometimes breaks series of multiple edits made for a single
          // user action on some Android keyboards)
          this.pendingContextChange = null;
          this.handlers = Object.create(null);
          // Kludge to work around the fact that EditContext does not respond
          // well to having its content updated during a composition (see #1472)
          this.composing = null;
          this.resetRange(view.state);
          let context = this.editContext = new window.EditContext({
              text: view.state.doc.sliceString(this.from, this.to),
              selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
              selectionEnd: this.toContextPos(view.state.selection.main.head)
          });
          this.handlers.textupdate = e => {
              let main = view.state.selection.main, { anchor, head } = main;
              let from = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
              if (view.inputState.composing >= 0 && !this.composing)
                  this.composing = { contextBase: e.updateRangeStart, editorBase: from, drifted: false };
              let change = { from, to, insert: Text.of(e.text.split("\n")) };
              // If the window doesn't include the anchor, assume changes
              // adjacent to a side go up to the anchor.
              if (change.from == this.from && anchor < this.from)
                  change.from = anchor;
              else if (change.to == this.to && anchor > this.to)
                  change.to = anchor;
              // Edit contexts sometimes fire empty changes
              if (change.from == change.to && !change.insert.length) {
                  let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
                  if (!newSel.main.eq(main))
                      view.dispatch({ selection: newSel, userEvent: "select" });
                  return;
              }
              if ((browser.mac || browser.android) && change.from == head - 1 &&
                  /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
                  change = { from, to, insert: Text.of([e.text.replace(".", " ")]) };
              this.pendingContextChange = change;
              if (!view.state.readOnly) {
                  let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
                  applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
              }
              // If the transaction didn't flush our change, revert it so
              // that the context is in sync with the editor state again.
              if (this.pendingContextChange) {
                  this.revertPending(view.state);
                  this.setSelection(view.state);
              }
          };
          this.handlers.characterboundsupdate = e => {
              let rects = [], prev = null;
              for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
                  let rect = view.coordsForChar(i);
                  prev = (rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top))
                      || prev || new DOMRect;
                  rects.push(prev);
              }
              context.updateCharacterBounds(e.rangeStart, rects);
          };
          this.handlers.textformatupdate = e => {
              let deco = [];
              for (let format of e.getTextFormats()) {
                  let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
                  if (lineStyle != "None" && thickness != "None") {
                      let from = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
                      if (from < to) {
                          let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                          deco.push(Decoration.mark({ attributes: { style } }).range(from, to));
                      }
                  }
              }
              view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
          };
          this.handlers.compositionstart = () => {
              if (view.inputState.composing < 0) {
                  view.inputState.composing = 0;
                  view.inputState.compositionFirstChange = true;
              }
          };
          this.handlers.compositionend = () => {
              view.inputState.composing = -1;
              view.inputState.compositionFirstChange = null;
              if (this.composing) {
                  let { drifted } = this.composing;
                  this.composing = null;
                  if (drifted)
                      this.reset(view.state);
              }
          };
          for (let event in this.handlers)
              context.addEventListener(event, this.handlers[event]);
          this.measureReq = { read: view => {
                  this.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
                  let sel = getSelection(view.root);
                  if (sel && sel.rangeCount)
                      this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
              } };
      }
      applyEdits(update) {
          let off = 0, abort = false, pending = this.pendingContextChange;
          update.changes.iterChanges((fromA, toA, _fromB, _toB, insert) => {
              if (abort)
                  return;
              let dLen = insert.length - (toA - fromA);
              if (pending && toA >= pending.to) {
                  if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
                      pending = this.pendingContextChange = null; // Match
                      off += dLen;
                      this.to += dLen;
                      return;
                  }
                  else { // Mismatch, revert
                      pending = null;
                      this.revertPending(update.state);
                  }
              }
              fromA += off;
              toA += off;
              if (toA <= this.from) { // Before the window
                  this.from += dLen;
                  this.to += dLen;
              }
              else if (fromA < this.to) { // Overlaps with window
                  if (fromA < this.from || toA > this.to || (this.to - this.from) + insert.length > 30000 /* CxVp.MaxSize */) {
                      abort = true;
                      return;
                  }
                  this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert.toString());
                  this.to += dLen;
              }
              off += dLen;
          });
          if (pending && !abort)
              this.revertPending(update.state);
          return !abort;
      }
      update(update) {
          let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
          if (this.composing &&
              (this.composing.drifted ||
                  (!update.changes.touchesRange(startSel.from, startSel.to) &&
                      update.transactions.some(tr => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to))))) {
              this.composing.drifted = true;
              this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
          }
          else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
              this.pendingContextChange = null;
              this.reset(update.state);
          }
          else if (update.docChanged || update.selectionSet || reverted) {
              this.setSelection(update.state);
          }
          if (update.geometryChanged || update.docChanged || update.selectionSet)
              update.view.requestMeasure(this.measureReq);
      }
      resetRange(state) {
          let { head } = state.selection.main;
          this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
          this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
      }
      reset(state) {
          this.resetRange(state);
          this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
          this.setSelection(state);
      }
      revertPending(state) {
          let pending = this.pendingContextChange;
          this.pendingContextChange = null;
          this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
      setSelection(state) {
          let { main } = state.selection;
          let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
          let end = this.toContextPos(main.head);
          if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
              this.editContext.updateSelection(start, end);
      }
      rangeIsValid(state) {
          let { head } = state.selection.main;
          return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ ||
              this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ ||
              this.to - this.from > 10000 /* CxVp.Margin */ * 3);
      }
      toEditorPos(contextPos, clipLen = this.to - this.from) {
          contextPos = Math.min(contextPos, clipLen);
          let c = this.composing;
          return c && c.drifted ? c.editorBase + (contextPos - c.contextBase) : contextPos + this.from;
      }
      toContextPos(editorPos) {
          let c = this.composing;
          return c && c.drifted ? c.contextBase + (editorPos - c.editorBase) : editorPos - this.from;
      }
      destroy() {
          for (let event in this.handlers)
              this.editContext.removeEventListener(event, this.handlers[event]);
      }
  }

  // The editor's update state machine looks something like this:
  //
  //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
  //                                         ↑      ↓
  //                                         Updating (measure)
  //
  // The difference between 'Idle' and 'Idle (unchecked)' lies in
  // whether a layout check has been scheduled. A regular update through
  // the `update` method updates the DOM in a write-only fashion, and
  // relies on a check (scheduled with `requestAnimationFrame`) to make
  // sure everything is where it should be and the viewport covers the
  // visible code. That check continues to measure and then optionally
  // update until it reaches a coherent state.
  /**
  An editor view represents the editor's user interface. It holds
  the editable DOM surface, and possibly other elements such as the
  line number gutter. It handles events and dispatches state
  transactions for editing actions.
  */
  class EditorView {
      /**
      The current editor state.
      */
      get state() { return this.viewState.state; }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() { return this.viewState.viewport; }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() { return this.viewState.visibleRanges; }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() { return this.viewState.inView; }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() { return this.inputState.composing > 0; }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() { return this.inputState.composing >= 0; }
      /**
      The document or shadow root that the view lives in.
      */
      get root() { return this._root; }
      /**
      @internal
      */
      get win() { return this.dom.ownerDocument.defaultView || window; }
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config = {}) {
          var _a;
          this.plugins = [];
          this.pluginMap = new Map;
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          /**
          @internal
          */
          this.updateState = 2 /* UpdateState.Updating */;
          /**
          @internal
          */
          this.measureScheduled = -1;
          /**
          @internal
          */
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.className = "cm-announced";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          if (config.parent)
              config.parent.appendChild(this.dom);
          let { dispatch } = config;
          this.dispatchTransactions = config.dispatchTransactions ||
              (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
              ((trs) => this.update(trs));
          this.dispatch = this.dispatch.bind(this);
          this._root = (config.root || getRoot$1(config.parent) || document);
          this.viewState = new ViewState(config.state || EditorState.create(config));
          if (config.scrollTo && config.scrollTo.is(scrollIntoView$1))
              this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
          this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
          for (let plugin of this.plugins)
              plugin.update(this);
          this.observer = new DOMObserver(this);
          this.inputState = new InputState(this);
          this.inputState.ensureHandlers(this.plugins);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0 /* UpdateState.Idle */;
          this.requestMeasure();
          if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready)
              document.fonts.ready.then(() => this.requestMeasure());
      }
      dispatch(...input) {
          let trs = input.length == 1 && input[0] instanceof Transaction ? input
              : input.length == 1 && Array.isArray(input[0]) ? input[0]
                  : [this.state.update(...input)];
          this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, attrsChanged = false, update;
          let state = this.state;
          for (let tr of transactions) {
              if (tr.startState != state)
                  throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
              state = tr.state;
          }
          if (this.destroyed) {
              this.viewState.state = state;
              return;
          }
          let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
          if (transactions.some(tr => tr.annotation(isFocusChange))) {
              this.inputState.notifiedFocused = focus;
              // If a focus-change transaction is being dispatched, set this update flag.
              focusFlag = 1 /* UpdateFlag.Focus */;
          }
          else if (focus != this.inputState.notifiedFocused) {
              this.inputState.notifiedFocused = focus;
              // Schedule a separate focus transaction if necessary, otherwise
              // add a flag to this update
              dispatchFocus = focusChangeTransaction(state, focus);
              if (!dispatchFocus)
                  focusFlag = 1 /* UpdateFlag.Focus */;
          }
          // If there was a pending DOM change, eagerly read it and try to
          // apply it after the given transactions.
          let pendingKey = this.observer.delayedAndroidKey, domChange = null;
          if (pendingKey) {
              this.observer.clearDelayedAndroidKey();
              domChange = this.observer.readChange();
              // Only try to apply DOM changes if the transactions didn't
              // change the doc or selection.
              if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                  domChange = null;
          }
          else {
              this.observer.clear();
          }
          // When the phrases change, redraw the editor
          if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
              return this.setState(state);
          update = ViewUpdate.create(this, state, transactions);
          update.flags |= focusFlag;
          let scrollTarget = this.viewState.scrollTarget;
          try {
              this.updateState = 2 /* UpdateState.Updating */;
              for (let tr of transactions) {
                  if (scrollTarget)
                      scrollTarget = scrollTarget.map(tr.changes);
                  if (tr.scrollIntoView) {
                      let { main } = tr.state.selection;
                      scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                  }
                  for (let e of tr.effects)
                      if (e.is(scrollIntoView$1))
                          scrollTarget = e.value.clip(this.state);
              }
              this.viewState.update(update, scrollTarget);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
              if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
              }
              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules)
                  this.mountStyles();
              attrsChanged = this.updateAttrs();
              this.showAnnouncements(transactions);
              this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (update.startState.facet(theme$4) != update.state.facet(theme$4))
              this.viewState.mustMeasureContent = true;
          if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
              this.requestMeasure();
          if (redrawn)
              this.docViewUpdate();
          if (!update.empty)
              for (let listener of this.state.facet(updateListener)) {
                  try {
                      listener(update);
                  }
                  catch (e) {
                      logException(this.state, e, "update listener");
                  }
              }
          if (dispatchFocus || domChange)
              Promise.resolve().then(() => {
                  if (dispatchFocus && this.state == dispatchFocus.startState)
                      this.dispatch(dispatchFocus);
                  if (domChange) {
                      if (!applyDOMChange(this, domChange) && pendingKey.force)
                          dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                  }
              });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
          if (this.updateState != 0 /* UpdateState.Idle */)
              throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
              this.viewState.state = newState;
              return;
          }
          this.updateState = 2 /* UpdateState.Updating */;
          let hadFocus = this.hasFocus;
          try {
              for (let plugin of this.plugins)
                  plugin.destroy(this);
              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
              this.pluginMap.clear();
              for (let plugin of this.plugins)
                  plugin.update(this);
              this.docView.destroy();
              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this.plugins);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
          }
          if (hadFocus)
              this.focus();
          this.requestMeasure();
      }
      updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
              let newPlugins = [];
              for (let spec of specs) {
                  let found = prevSpecs.indexOf(spec);
                  if (found < 0) {
                      newPlugins.push(new PluginInstance(spec));
                  }
                  else {
                      let plugin = this.plugins[found];
                      plugin.mustUpdate = update;
                      newPlugins.push(plugin);
                  }
              }
              for (let plugin of this.plugins)
                  if (plugin.mustUpdate != update)
                      plugin.destroy(this);
              this.plugins = newPlugins;
              this.pluginMap.clear();
          }
          else {
              for (let p of this.plugins)
                  p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
              this.plugins[i].update(this);
          if (prevSpecs != specs)
              this.inputState.ensureHandlers(this.plugins);
      }
      docViewUpdate() {
          for (let plugin of this.plugins) {
              let val = plugin.value;
              if (val && val.docViewUpdate) {
                  try {
                      val.docViewUpdate(this);
                  }
                  catch (e) {
                      logException(this.state, e, "doc view update listener");
                  }
              }
          }
      }
      /**
      @internal
      */
      measure(flush = true) {
          if (this.destroyed)
              return;
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          if (this.observer.delayedAndroidKey) {
              this.measureScheduled = -1;
              this.requestMeasure();
              return;
          }
          this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
          if (flush)
              this.observer.forceFlush();
          let updated = null;
          let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
          let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
          if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
              scrollAnchorHeight = -1;
          this.viewState.scrollAnchorHeight = -1;
          try {
              for (let i = 0;; i++) {
                  if (scrollAnchorHeight < 0) {
                      if (isScrolledToBottom(sDOM)) {
                          scrollAnchorPos = -1;
                          scrollAnchorHeight = this.viewState.heightMap.height;
                      }
                      else {
                          let block = this.viewState.scrollAnchorAt(scrollTop);
                          scrollAnchorPos = block.from;
                          scrollAnchorHeight = block.top;
                      }
                  }
                  this.updateState = 1 /* UpdateState.Measuring */;
                  let changed = this.viewState.measure(this);
                  if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                      break;
                  if (i > 5) {
                      console.warn(this.measureRequests.length
                          ? "Measure loop restarted more than 5 times"
                          : "Viewport failed to stabilize");
                      break;
                  }
                  let measuring = [];
                  // Only run measure requests in this cycle when the viewport didn't change
                  if (!(changed & 4 /* UpdateFlag.Viewport */))
                      [this.measureRequests, measuring] = [measuring, this.measureRequests];
                  let measured = measuring.map(m => {
                      try {
                          return m.read(this);
                      }
                      catch (e) {
                          logException(this.state, e);
                          return BadMeasure;
                      }
                  });
                  let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                  update.flags |= changed;
                  if (!updated)
                      updated = update;
                  else
                      updated.flags |= changed;
                  this.updateState = 2 /* UpdateState.Updating */;
                  if (!update.empty) {
                      this.updatePlugins(update);
                      this.inputState.update(update);
                      this.updateAttrs();
                      redrawn = this.docView.update(update);
                      if (redrawn)
                          this.docViewUpdate();
                  }
                  for (let i = 0; i < measuring.length; i++)
                      if (measured[i] != BadMeasure) {
                          try {
                              let m = measuring[i];
                              if (m.write)
                                  m.write(measured[i], this);
                          }
                          catch (e) {
                              logException(this.state, e);
                          }
                      }
                  if (redrawn)
                      this.docView.updateSelection(true);
                  if (!update.viewportChanged && this.measureRequests.length == 0) {
                      if (this.viewState.editorHeight) {
                          if (this.viewState.scrollTarget) {
                              this.docView.scrollIntoView(this.viewState.scrollTarget);
                              this.viewState.scrollTarget = null;
                              scrollAnchorHeight = -1;
                              continue;
                          }
                          else {
                              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                  this.viewState.lineBlockAt(scrollAnchorPos).top;
                              let diff = newAnchorHeight - scrollAnchorHeight;
                              if (diff > 1 || diff < -1) {
                                  scrollTop = scrollTop + diff;
                                  sDOM.scrollTop = scrollTop / this.scaleY;
                                  scrollAnchorHeight = -1;
                                  continue;
                              }
                          }
                      }
                      break;
                  }
              }
          }
          finally {
              this.updateState = 0 /* UpdateState.Idle */;
              this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
              for (let listener of this.state.facet(updateListener))
                  listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
          return baseThemeID + " " +
              (this.state.facet(darkTheme$1) ? baseDarkID : baseLightID) + " " +
              this.state.facet(theme$4);
      }
      updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
              class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              writingsuggestions: "false",
              translate: "no",
              contenteditable: !this.state.facet(editable) ? "false" : "true",
              class: "cm-content",
              style: `${browser.tabSize}: ${this.state.tabSize}`,
              role: "textbox",
              "aria-multiline": "true"
          };
          if (this.state.readOnly)
              contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          let changed = this.observer.ignore(() => {
              let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
              let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
              return changedContent || changedEditor;
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
          return changed;
      }
      showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
              for (let effect of tr.effects)
                  if (effect.is(EditorView.announce)) {
                      if (first)
                          this.announceDOM.textContent = "";
                      first = false;
                      let div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                  }
      }
      mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          let nonce = this.state.facet(EditorView.cspNonce);
          StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse(), nonce ? { nonce } : undefined);
      }
      readMeasured() {
          if (this.updateState == 2 /* UpdateState.Updating */)
              throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
              this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
          if (this.measureScheduled < 0)
              this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
          if (request) {
              if (this.measureRequests.indexOf(request) > -1)
                  return;
              if (request.key != null)
                  for (let i = 0; i < this.measureRequests.length; i++) {
                      if (this.measureRequests[i].key === request.key) {
                          this.measureRequests[i] = request;
                          return;
                      }
                  }
              this.measureRequests.push(request);
          }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
          let known = this.pluginMap.get(plugin);
          if (known === undefined || known && known.spec != plugin)
              this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
          return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
      get scaleX() { return this.viewState.scaleX; }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
      get scaleY() { return this.viewState.scaleY; }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
          return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
          return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start, forward, by) {
          return skipAtoms(this, start, moveByChar(this, start, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start, forward) {
          return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
      visualLineSide(line, end) {
          let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
          let span = order[end ? order.length - 1 : 0];
          return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start, forward, includeWrap = true) {
          return moveToLineBoundary(this, start, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start, forward, distance) {
          return skipAtoms(this, start, moveVertically(this, start, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos) {
          return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset = 0) {
          return this.docView.posFromDOM(node, offset);
      }
      posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
              return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, (span.dir == Direction$1.LTR) == (side > 0));
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
      coordsForChar(pos) {
          this.readMeasured();
          return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() { return this.viewState.defaultTextDirection; }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos) {
          let perLine = this.state.facet(perLineTextDirection);
          if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
              return this.textDirection;
          this.readMeasured();
          return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line) {
          if (line.length > MaxBidiLine)
              return trivialOrder(line.length);
          let dir = this.textDirectionAt(line.from), isolates;
          for (let entry of this.bidiCache) {
              if (entry.from == line.from && entry.dir == dir &&
                  (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                  return entry.order;
          }
          if (!isolates)
              isolates = getIsolatedRanges(this, line);
          let order = computeOrder(line.text, dir, isolates);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
          return order;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
          var _a;
          // Safari return false for hasFocus when the context menu is open
          // or closing, which leads us to ignore selection changes from the
          // context menu because it looks like the editor isn't focused.
          // This kludges around that.
          return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
              this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
          this.observer.ignore(() => {
              focusPreventScroll(this.contentDOM);
              this.docView.updateSelection();
          });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root) {
          if (this._root != root) {
              this._root = root;
              this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
              this.mountStyles();
          }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
          if (this.root.activeElement == this.contentDOM)
              this.contentDOM.blur();
          for (let plugin of this.plugins)
              plugin.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.docView.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
              this.win.cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos, options = {}) {
          return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      scrollSnapshot() {
          let { scrollTop, scrollLeft } = this.scrollDOM;
          let ref = this.viewState.scrollAnchorAt(scrollTop);
          return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
      setTabFocusMode(to) {
          if (to == null)
              this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
          else if (typeof to == "boolean")
              this.inputState.tabFocusMode = to ? 0 : -1;
          else if (this.inputState.tabFocusMode != 0)
              this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
      static domEventObservers(observers) {
          return ViewPlugin.define(() => ({}), { eventObservers: observers });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
          let prefix = StyleModule.newName();
          let result = [theme$4.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
          if (options && options.dark)
              result.push(darkTheme$1.of(true));
          return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
          return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
          var _a;
          let content = dom.querySelector(".cm-content");
          let cView = content && ContentView.get(content) || ContentView.get(dom);
          return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
      }
  }
  /**
  Facet to add a [style
  module](https://github.com/marijnh/style-mod#documentation) to
  an editor view. The view will ensure that the module is
  mounted in its [document
  root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
  */
  EditorView.styleModule = styleModule;
  /**
  An input handler can override the way changes to the editable
  DOM content are handled. Handlers are passed the document
  positions between which the change was found, and the new
  content. When one returns true, no further input handlers are
  called and the default behavior is prevented.

  The `insert` argument can be used to get the default transaction
  that would be applied for this input. This can be useful when
  dispatching the custom behavior as a separate transaction.
  */
  EditorView.inputHandler = inputHandler$1;
  /**
  Functions provided in this facet will be used to transform text
  pasted or dropped into the editor.
  */
  EditorView.clipboardInputFilter = clipboardInputFilter;
  /**
  Transform text copied or dragged from the editor.
  */
  EditorView.clipboardOutputFilter = clipboardOutputFilter;
  /**
  Scroll handlers can override how things are scrolled into view.
  If they return `true`, no further handling happens for the
  scrolling. If they return false, the default scroll behavior is
  applied. Scroll handlers should never initiate editor updates.
  */
  EditorView.scrollHandler = scrollHandler;
  /**
  This facet can be used to provide functions that create effects
  to be dispatched when the editor's focus state changes.
  */
  EditorView.focusChangeEffect = focusChangeEffect;
  /**
  By default, the editor assumes all its content has the same
  [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
  value to make it read the text direction of every (rendered)
  line separately.
  */
  EditorView.perLineTextDirection = perLineTextDirection;
  /**
  Allows you to provide a function that should be called when the
  library catches an exception from an extension (mostly from view
  plugins, but may be used by other extensions to route exceptions
  from user-code-provided callbacks). This is mostly useful for
  debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
  */
  EditorView.exceptionSink = exceptionSink;
  /**
  A facet that can be used to register a function to be called
  every time the view updates.
  */
  EditorView.updateListener = updateListener;
  /**
  Facet that controls whether the editor content DOM is editable.
  When its highest-precedence value is `false`, the element will
  not have its `contenteditable` attribute set. (Note that this
  doesn't affect API calls that change the editor content, even
  when those are bound to keys or buttons. See the
  [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
  */
  EditorView.editable = editable;
  /**
  Allows you to influence the way mouse selection happens. The
  functions in this facet will be called for a `mousedown` event
  on the editor, and can return an object that overrides the way a
  selection is computed from that mouse click or drag.
  */
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  /**
  Facet used to configure whether a given selection drag event
  should move or copy the selection. The given predicate will be
  called with the `mousedown` event, and can return `true` when
  the drag should move the content.
  */
  EditorView.dragMovesSelection = dragMovesSelection$1;
  /**
  Facet used to configure whether a given selecting click adds a
  new range to the existing selection or replaces it entirely. The
  default behavior is to check `event.metaKey` on macOS, and
  `event.ctrlKey` elsewhere.
  */
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  /**
  A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
  are shown in the view. Decorations can be provided in two
  ways—directly, or via a function that takes an editor view.

  Only decoration sets provided directly are allowed to influence
  the editor's vertical layout structure. The ones provided as
  functions are called _after_ the new viewport has been computed,
  and thus **must not** introduce block widgets or replacing
  decorations that cover line breaks.

  If you want decorated ranges to behave like atomic units for
  cursor motion and deletion purposes, also provide the range set
  containing the decorations to
  [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
  */
  EditorView.decorations = decorations;
  /**
  Facet that works much like
  [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
  inputs at the very bottom of the precedence stack, meaning mark
  decorations provided here will only be split by other, partially
  overlapping \`outerDecorations\` ranges, and wrap around all
  regular decorations. Use this for mark elements that should, as
  much as possible, remain in one piece.
  */
  EditorView.outerDecorations = outerDecorations;
  /**
  Used to provide ranges that should be treated as atoms as far as
  cursor motion is concerned. This causes methods like
  [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
  [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
  commands built on top of them) to skip across such regions when
  a selection endpoint would enter them. This does _not_ prevent
  direct programmatic [selection
  updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
  regions.
  */
  EditorView.atomicRanges = atomicRanges;
  /**
  When range decorations add a `unicode-bidi: isolate` style, they
  should also include a
  [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
  in their decoration spec, and be exposed through this facet, so
  that the editor can compute the proper text order. (Other values
  for `unicode-bidi`, except of course `normal`, are not
  supported.)
  */
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  /**
  Facet that allows extensions to provide additional scroll
  margins (space around the sides of the scrolling element that
  should be considered invisible). This can be useful when the
  plugin introduces elements that cover part of that element (for
  example a horizontally fixed gutter).
  */
  EditorView.scrollMargins = scrollMargins;
  /**
  This facet records whether a dark theme is active. The extension
  returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
  includes an instance of this when the `dark` option is set to
  true.
  */
  EditorView.darkTheme = darkTheme$1;
  /**
  Provides a Content Security Policy nonce to use when creating
  the style sheets for the editor. Holds the empty string when no
  nonce has been provided.
  */
  EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
  /**
  Facet that provides additional DOM attributes for the editor's
  editable DOM element.
  */
  EditorView.contentAttributes = contentAttributes;
  /**
  Facet that provides DOM attributes for the editor's outer
  element.
  */
  EditorView.editorAttributes = editorAttributes;
  /**
  An extension that enables line wrapping in the editor (by
  setting CSS `white-space` to `pre-wrap` in the content).
  */
  EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  /**
  State effect used to include screen reader announcements in a
  transaction. These will be added to the DOM in a visually hidden
  element with `aria-live="polite"` set, and should be used to
  describe effects that are visually obvious but may not be
  noticed by screen reader users (such as moving to the next
  search match).
  */
  EditorView.announce = /*@__PURE__*/StateEffect.define();
  // Maximum line length for which we compute accurate bidi info
  const MaxBidiLine = 4096;
  const BadMeasure = {};
  class CachedOrder {
      constructor(from, to, dir, isolates, fresh, order) {
          this.from = from;
          this.to = to;
          this.dir = dir;
          this.isolates = isolates;
          this.fresh = fresh;
          this.order = order;
      }
      static update(cache, changes) {
          if (changes.empty && !cache.some(c => c.fresh))
              return cache;
          let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction$1.LTR;
          for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
              let entry = cache[i];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                  result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
          }
          return result;
      }
  }
  function attrsFromFacet(view, facet, base) {
      for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
          let source = sources[i], value = typeof source == "function" ? source(view) : source;
          if (value)
              combineAttrs(value, base);
      }
      return base;
  }

  const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name, platform) {
      const parts = name.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result == "Space")
          result = " ";
      let alt, ctrl, shift, meta;
      for (let i = 0; i < parts.length - 1; ++i) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
              meta = true;
          else if (/^a(lt)?$/i.test(mod))
              alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
              ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
              shift = true;
          else if (/^mod$/i.test(mod)) {
              if (platform == "mac")
                  meta = true;
              else
                  ctrl = true;
          }
          else
              throw new Error("Unrecognized modifier name: " + mod);
      }
      if (alt)
          result = "Alt-" + result;
      if (ctrl)
          result = "Ctrl-" + result;
      if (meta)
          result = "Meta-" + result;
      if (shift)
          result = "Shift-" + result;
      return result;
  }
  function modifiers(name, event, shift) {
      if (event.altKey)
          name = "Alt-" + name;
      if (event.ctrlKey)
          name = "Ctrl-" + name;
      if (event.metaKey)
          name = "Meta-" + name;
      if (shift !== false && event.shiftKey)
          name = "Shift-" + name;
      return name;
  }
  const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
      }
  }));
  /**
  Facet used for registering keymaps.

  You can add multiple keymaps to an editor. Their priorities
  determine their precedence (the ones specified early or with high
  priority get checked first). When a handler has returned `true`
  for a given key, no further handlers are called.
  */
  const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
  const Keymaps = /*@__PURE__*/new WeakMap();
  // This is hidden behind an indirection, rather than directly computed
  // by the facet, to keep internal types out of the facet's type.
  function getKeymap(state) {
      let bindings = state.facet(keymap);
      let map = Keymaps.get(bindings);
      if (!map)
          Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
      return map;
  }
  let storedPrefix = null;
  const PrefixTimeout = 4000;
  function buildKeymap(bindings, platform = currentPlatform) {
      let bound = Object.create(null);
      let isPrefix = Object.create(null);
      let checkPrefix = (name, is) => {
          let current = isPrefix[name];
          if (current == null)
              isPrefix[name] = is;
          else if (current != is)
              throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
      };
      let add = (scope, key, command, preventDefault, stopPropagation) => {
          var _a, _b;
          let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
          for (let i = 1; i < parts.length; i++) {
              let prefix = parts.slice(0, i).join(" ");
              checkPrefix(prefix, true);
              if (!scopeObj[prefix])
                  scopeObj[prefix] = {
                      preventDefault: true,
                      stopPropagation: false,
                      run: [(view) => {
                              let ourObj = storedPrefix = { view, prefix, scope };
                              setTimeout(() => { if (storedPrefix == ourObj)
                                  storedPrefix = null; }, PrefixTimeout);
                              return true;
                          }]
                  };
          }
          let full = parts.join(" ");
          checkPrefix(full, false);
          let binding = scopeObj[full] || (scopeObj[full] = {
              preventDefault: false,
              stopPropagation: false,
              run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
          });
          if (command)
              binding.run.push(command);
          if (preventDefault)
              binding.preventDefault = true;
          if (stopPropagation)
              binding.stopPropagation = true;
      };
      for (let b of bindings) {
          let scopes = b.scope ? b.scope.split(" ") : ["editor"];
          if (b.any)
              for (let scope of scopes) {
                  let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                  if (!scopeObj._any)
                      scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                  let { any } = b;
                  for (let key in scopeObj)
                      scopeObj[key].run.push(view => any(view, currentKeyEvent));
              }
          let name = b[platform] || b.key;
          if (!name)
              continue;
          for (let scope of scopes) {
              add(scope, name, b.run, b.preventDefault, b.stopPropagation);
              if (b.shift)
                  add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
          }
      }
      return bound;
  }
  let currentKeyEvent = null;
  function runHandlers(map, event, view, scope) {
      currentKeyEvent = event;
      let name = keyName(event);
      let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
      let prefix = "", handled = false, prevented = false, stopPropagation = false;
      if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (modifierCodes.indexOf(event.keyCode) < 0) {
              prevented = true;
              storedPrefix = null;
          }
      }
      let ran = new Set;
      let runFor = (binding) => {
          if (binding) {
              for (let cmd of binding.run)
                  if (!ran.has(cmd)) {
                      ran.add(cmd);
                      if (cmd(view)) {
                          if (binding.stopPropagation)
                              stopPropagation = true;
                          return true;
                      }
                  }
              if (binding.preventDefault) {
                  if (binding.stopPropagation)
                      stopPropagation = true;
                  prevented = true;
              }
          }
          return false;
      };
      let scopeObj = map[scope], baseName, shiftName;
      if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
              handled = true;
          }
          else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
              // Ctrl-Alt may be used for AltGr on Windows
              !(browser.windows && event.ctrlKey && event.altKey) &&
              (baseName = base[event.keyCode]) && baseName != name) {
              if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                  handled = true;
              }
              else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                  runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                  handled = true;
              }
          }
          else if (isChar && event.shiftKey &&
              runFor(scopeObj[prefix + modifiers(name, event, true)])) {
              handled = true;
          }
          if (!handled && runFor(scopeObj._any))
              handled = true;
      }
      if (prevented)
          handled = true;
      if (handled && stopPropagation)
          event.stopPropagation();
      currentKeyEvent = null;
      return handled;
  }

  const CanHidePrimary = !(browser.ios && browser.webkit && browser.webkit_version < 534);
  const themeSpec = {
      ".cm-line": {
          },
      ".cm-content": {
          }
  };
  if (CanHidePrimary)
      themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";

  const Outside = "-10000px";
  class TooltipViewManager {
      constructor(view, facet, createTooltipView, removeTooltipView) {
          this.facet = facet;
          this.createTooltipView = createTooltipView;
          this.removeTooltipView = removeTooltipView;
          this.input = view.state.facet(facet);
          this.tooltips = this.input.filter(t => t);
          let prev = null;
          this.tooltipViews = this.tooltips.map(t => prev = createTooltipView(t, prev));
      }
      update(update, above) {
          var _a;
          let input = update.state.facet(this.facet);
          let tooltips = input.filter(x => x);
          if (input === this.input) {
              for (let t of this.tooltipViews)
                  if (t.update)
                      t.update(update);
              return false;
          }
          let tooltipViews = [], newAbove = above ? [] : null;
          for (let i = 0; i < tooltips.length; i++) {
              let tip = tooltips[i], known = -1;
              if (!tip)
                  continue;
              for (let i = 0; i < this.tooltips.length; i++) {
                  let other = this.tooltips[i];
                  if (other && other.create == tip.create)
                      known = i;
              }
              if (known < 0) {
                  tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
                  if (newAbove)
                      newAbove[i] = !!tip.above;
              }
              else {
                  let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                  if (newAbove)
                      newAbove[i] = above[known];
                  if (tooltipView.update)
                      tooltipView.update(update);
              }
          }
          for (let t of this.tooltipViews)
              if (tooltipViews.indexOf(t) < 0) {
                  this.removeTooltipView(t);
                  (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
              }
          if (above) {
              newAbove.forEach((val, i) => above[i] = val);
              above.length = newAbove.length;
          }
          this.input = input;
          this.tooltips = tooltips;
          this.tooltipViews = tooltipViews;
          return true;
      }
  }
  /**
  Creates an extension that configures tooltip behavior.
  */
  function tooltips(config = {}) {
      return tooltipConfig.of(config);
  }
  function windowSpace(view) {
      let docElt = view.dom.ownerDocument.documentElement;
      return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
  }
  const tooltipConfig = /*@__PURE__*/Facet.define({
      combine: values => {
          var _a, _b, _c;
          return ({
              position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
              parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
              tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
          });
      }
  });
  const knownHeight = /*@__PURE__*/new WeakMap();
  const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.above = [];
          this.inView = true;
          this.madeAbsolute = false;
          this.lastTransaction = 0;
          this.measureTimeout = -1;
          let config = view.state.facet(tooltipConfig);
          this.position = config.position;
          this.parent = config.parent;
          this.classes = view.themeClasses;
          this.createContainer();
          this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
          this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
          this.manager = new TooltipViewManager(view, showTooltip, (t, p) => this.createTooltip(t, p), t => {
              if (this.resizeObserver)
                  this.resizeObserver.unobserve(t.dom);
              t.dom.remove();
          });
          this.above = this.manager.tooltips.map(t => !!t.above);
          this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
              if (Date.now() > this.lastTransaction - 50 &&
                  entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                  this.measureSoon();
          }, { threshold: [1] }) : null;
          this.observeIntersection();
          view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
          this.maybeMeasure();
      }
      createContainer() {
          if (this.parent) {
              this.container = document.createElement("div");
              this.container.style.position = "relative";
              this.container.className = this.view.themeClasses;
              this.parent.appendChild(this.container);
          }
          else {
              this.container = this.view.dom;
          }
      }
      observeIntersection() {
          if (this.intersectionObserver) {
              this.intersectionObserver.disconnect();
              for (let tooltip of this.manager.tooltipViews)
                  this.intersectionObserver.observe(tooltip.dom);
          }
      }
      measureSoon() {
          if (this.measureTimeout < 0)
              this.measureTimeout = setTimeout(() => {
                  this.measureTimeout = -1;
                  this.maybeMeasure();
              }, 50);
      }
      update(update) {
          if (update.transactions.length)
              this.lastTransaction = Date.now();
          let updated = this.manager.update(update, this.above);
          if (updated)
              this.observeIntersection();
          let shouldMeasure = updated || update.geometryChanged;
          let newConfig = update.state.facet(tooltipConfig);
          if (newConfig.position != this.position && !this.madeAbsolute) {
              this.position = newConfig.position;
              for (let t of this.manager.tooltipViews)
                  t.dom.style.position = this.position;
              shouldMeasure = true;
          }
          if (newConfig.parent != this.parent) {
              if (this.parent)
                  this.container.remove();
              this.parent = newConfig.parent;
              this.createContainer();
              for (let t of this.manager.tooltipViews)
                  this.container.appendChild(t.dom);
              shouldMeasure = true;
          }
          else if (this.parent && this.view.themeClasses != this.classes) {
              this.classes = this.container.className = this.view.themeClasses;
          }
          if (shouldMeasure)
              this.maybeMeasure();
      }
      createTooltip(tooltip, prev) {
          let tooltipView = tooltip.create(this.view);
          let before = prev ? prev.dom : null;
          tooltipView.dom.classList.add("cm-tooltip");
          if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
              let arrow = document.createElement("div");
              arrow.className = "cm-tooltip-arrow";
              tooltipView.dom.appendChild(arrow);
          }
          tooltipView.dom.style.position = this.position;
          tooltipView.dom.style.top = Outside;
          tooltipView.dom.style.left = "0px";
          this.container.insertBefore(tooltipView.dom, before);
          if (tooltipView.mount)
              tooltipView.mount(this.view);
          if (this.resizeObserver)
              this.resizeObserver.observe(tooltipView.dom);
          return tooltipView;
      }
      destroy() {
          var _a, _b, _c;
          this.view.win.removeEventListener("resize", this.measureSoon);
          for (let tooltipView of this.manager.tooltipViews) {
              tooltipView.dom.remove();
              (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
          }
          if (this.parent)
              this.container.remove();
          (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
          clearTimeout(this.measureTimeout);
      }
      readMeasure() {
          let scaleX = 1, scaleY = 1, makeAbsolute = false;
          if (this.position == "fixed" && this.manager.tooltipViews.length) {
              let { dom } = this.manager.tooltipViews[0];
              if (browser.gecko) {
                  // Firefox sets the element's `offsetParent` to the
                  // transformed element when a transform interferes with fixed
                  // positioning.
                  makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
              }
              else if (dom.style.top == Outside && dom.style.left == "0px") {
                  // On other browsers, we have to awkwardly try and use other
                  // information to detect a transform.
                  let rect = dom.getBoundingClientRect();
                  makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
              }
          }
          if (makeAbsolute || this.position == "absolute") {
              if (this.parent) {
                  let rect = this.parent.getBoundingClientRect();
                  if (rect.width && rect.height) {
                      scaleX = rect.width / this.parent.offsetWidth;
                      scaleY = rect.height / this.parent.offsetHeight;
                  }
              }
              else {
                  ({ scaleX, scaleY } = this.view.viewState);
              }
          }
          let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
          return {
              visible: {
                  left: visible.left + margins.left, top: visible.top + margins.top,
                  right: visible.right - margins.right, bottom: visible.bottom - margins.bottom
              },
              parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
              pos: this.manager.tooltips.map((t, i) => {
                  let tv = this.manager.tooltipViews[i];
                  return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
              }),
              size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
              space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
              scaleX, scaleY, makeAbsolute
          };
      }
      writeMeasure(measured) {
          var _a;
          if (measured.makeAbsolute) {
              this.madeAbsolute = true;
              this.position = "absolute";
              for (let t of this.manager.tooltipViews)
                  t.dom.style.position = "absolute";
          }
          let { visible, space, scaleX, scaleY } = measured;
          let others = [];
          for (let i = 0; i < this.manager.tooltips.length; i++) {
              let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
              let pos = measured.pos[i], size = measured.size[i];
              // Hide tooltips that are outside of the editor.
              if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space.top) ||
                  pos.top >= Math.min(visible.bottom, space.bottom) ||
                  pos.right < Math.max(visible.left, space.left) - .1 ||
                  pos.left > Math.min(visible.right, space.right) + .1)) {
                  dom.style.top = Outside;
                  continue;
              }
              let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
              let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
              let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
              let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction$1.LTR;
              let left = size.width > space.right - space.left
                  ? (ltr ? space.left : space.right - size.width)
                  : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width))
                      : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
              let above = this.above[i];
              if (!tooltip.strictSide && (above
                  ? pos.top - height - arrowHeight - offset.y < space.top
                  : pos.bottom + height + arrowHeight + offset.y > space.bottom) &&
                  above == (space.bottom - pos.bottom > pos.top - space.top))
                  above = this.above[i] = !above;
              let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
              if (spaceVert < height && tView.resize !== false) {
                  if (spaceVert < this.view.defaultLineHeight) {
                      dom.style.top = Outside;
                      continue;
                  }
                  knownHeight.set(tView, height);
                  dom.style.height = (height = spaceVert) / scaleY + "px";
              }
              else if (dom.style.height) {
                  dom.style.height = "";
              }
              let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
              let right = left + width;
              if (tView.overlap !== true)
                  for (let r of others)
                      if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                          top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
              if (this.position == "absolute") {
                  dom.style.top = (top - measured.parent.top) / scaleY + "px";
                  setLeftStyle(dom, (left - measured.parent.left) / scaleX);
              }
              else {
                  dom.style.top = top / scaleY + "px";
                  setLeftStyle(dom, left / scaleX);
              }
              if (arrow) {
                  let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
                  arrow.style.left = arrowLeft / scaleX + "px";
              }
              if (tView.overlap !== true)
                  others.push({ left, top, right, bottom: top + height });
              dom.classList.toggle("cm-tooltip-above", above);
              dom.classList.toggle("cm-tooltip-below", !above);
              if (tView.positioned)
                  tView.positioned(measured.space);
          }
      }
      maybeMeasure() {
          if (this.manager.tooltips.length) {
              if (this.view.inView)
                  this.view.requestMeasure(this.measureReq);
              if (this.inView != this.view.inView) {
                  this.inView = this.view.inView;
                  if (!this.inView)
                      for (let tv of this.manager.tooltipViews)
                          tv.dom.style.top = Outside;
              }
          }
      }
  }, {
      eventObservers: {
          scroll() { this.maybeMeasure(); }
      }
  });
  function setLeftStyle(elt, value) {
      let current = parseInt(elt.style.left, 10);
      if (isNaN(current) || Math.abs(value - current) > 1)
          elt.style.left = value + "px";
  }
  const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip": {
          zIndex: 500,
          boxSizing: "border-box"
      },
      "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
      },
      "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb",
      },
      "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
      },
      ".cm-tooltip-arrow": {
          height: `${7 /* Arrow.Size */}px`,
          width: `${7 /* Arrow.Size */ * 2}px`,
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
              content: "''",
              position: "absolute",
              width: 0,
              height: 0,
              borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
              borderRight: `${7 /* Arrow.Size */}px solid transparent`,
          },
          ".cm-tooltip-above &": {
              bottom: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  bottom: "1px"
              }
          },
          ".cm-tooltip-below &": {
              top: `-${7 /* Arrow.Size */}px`,
              "&:before": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
              },
              "&:after": {
                  borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                  top: "1px"
              }
          },
      },
      "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
              borderTopColor: "#333338",
              borderBottomColor: "#333338"
          },
          "&:after": {
              borderTopColor: "transparent",
              borderBottomColor: "transparent"
          }
      }
  });
  const noOffset = { x: 0, y: 0 };
  /**
  Facet to which an extension can add a value to show a tooltip.
  */
  const showTooltip = /*@__PURE__*/Facet.define({
      enables: [tooltipPlugin, baseTheme$4]
  });
  const showHoverTooltip = /*@__PURE__*/Facet.define({
      combine: inputs => inputs.reduce((a, i) => a.concat(i), [])
  });
  class HoverTooltipHost {
      // Needs to be static so that host tooltip instances always match
      static create(view) {
          return new HoverTooltipHost(view);
      }
      constructor(view) {
          this.view = view;
          this.mounted = false;
          this.dom = document.createElement("div");
          this.dom.classList.add("cm-tooltip-hover");
          this.manager = new TooltipViewManager(view, showHoverTooltip, (t, p) => this.createHostedView(t, p), t => t.dom.remove());
      }
      createHostedView(tooltip, prev) {
          let hostedView = tooltip.create(this.view);
          hostedView.dom.classList.add("cm-tooltip-section");
          this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
          if (this.mounted && hostedView.mount)
              hostedView.mount(this.view);
          return hostedView;
      }
      mount(view) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.mount)
                  hostedView.mount(view);
          }
          this.mounted = true;
      }
      positioned(space) {
          for (let hostedView of this.manager.tooltipViews) {
              if (hostedView.positioned)
                  hostedView.positioned(space);
          }
      }
      update(update) {
          this.manager.update(update);
      }
      destroy() {
          var _a;
          for (let t of this.manager.tooltipViews)
              (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
      }
      passProp(name) {
          let value = undefined;
          for (let view of this.manager.tooltipViews) {
              let given = view[name];
              if (given !== undefined) {
                  if (value === undefined)
                      value = given;
                  else if (value !== given)
                      return undefined;
              }
          }
          return value;
      }
      get offset() { return this.passProp("offset"); }
      get getCoords() { return this.passProp("getCoords"); }
      get overlap() { return this.passProp("overlap"); }
      get resize() { return this.passProp("resize"); }
  }
  const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
      let tooltips = state.facet(showHoverTooltip);
      if (tooltips.length === 0)
          return null;
      return {
          pos: Math.min(...tooltips.map(t => t.pos)),
          end: Math.max(...tooltips.map(t => { var _a; return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos; })),
          create: HoverTooltipHost.create,
          above: tooltips[0].above,
          arrow: tooltips.some(t => t.arrow),
      };
  });
  class HoverPlugin {
      constructor(view, source, field, setHover, hoverTime) {
          this.view = view;
          this.source = source;
          this.field = field;
          this.setHover = setHover;
          this.hoverTime = hoverTime;
          this.hoverTimeout = -1;
          this.restartTimeout = -1;
          this.pending = null;
          this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
          this.checkHover = this.checkHover.bind(this);
          view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
          view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
      }
      update() {
          if (this.pending) {
              this.pending = null;
              clearTimeout(this.restartTimeout);
              this.restartTimeout = setTimeout(() => this.startHover(), 20);
          }
      }
      get active() {
          return this.view.state.field(this.field);
      }
      checkHover() {
          this.hoverTimeout = -1;
          if (this.active.length)
              return;
          let hovered = Date.now() - this.lastMove.time;
          if (hovered < this.hoverTime)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
          else
              this.startHover();
      }
      startHover() {
          clearTimeout(this.restartTimeout);
          let { view, lastMove } = this;
          let desc = view.docView.nearest(lastMove.target);
          if (!desc)
              return;
          let pos, side = 1;
          if (desc instanceof WidgetView) {
              pos = desc.posAtStart;
          }
          else {
              pos = view.posAtCoords(lastMove);
              if (pos == null)
                  return;
              let posCoords = view.coordsAtPos(pos);
              if (!posCoords ||
                  lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                  lastMove.x < posCoords.left - view.defaultCharacterWidth ||
                  lastMove.x > posCoords.right + view.defaultCharacterWidth)
                  return;
              let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
              let rtl = bidi && bidi.dir == Direction$1.RTL ? -1 : 1;
              side = (lastMove.x < posCoords.left ? -rtl : rtl);
          }
          let open = this.source(view, pos, side);
          if (open === null || open === void 0 ? void 0 : open.then) {
              let pending = this.pending = { pos };
              open.then(result => {
                  if (this.pending == pending) {
                      this.pending = null;
                      if (result && !(Array.isArray(result) && !result.length))
                          view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
                  }
              }, e => logException(view.state, e, "hover tooltip"));
          }
          else if (open && !(Array.isArray(open) && !open.length)) {
              view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
          }
      }
      get tooltip() {
          let plugin = this.view.plugin(tooltipPlugin);
          let index = plugin ? plugin.manager.tooltips.findIndex(t => t.create == HoverTooltipHost.create) : -1;
          return index > -1 ? plugin.manager.tooltipViews[index] : null;
      }
      mousemove(event) {
          var _a, _b;
          this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
          if (this.hoverTimeout < 0)
              this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
          let { active, tooltip } = this;
          if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
              let { pos } = active[0] || this.pending, end = (_b = (_a = active[0]) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : pos;
              if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                  : !isOverRange(this.view, pos, end, event.clientX, event.clientY))) {
                  this.view.dispatch({ effects: this.setHover.of([]) });
                  this.pending = null;
              }
          }
      }
      mouseleave(event) {
          clearTimeout(this.hoverTimeout);
          this.hoverTimeout = -1;
          let { active } = this;
          if (active.length) {
              let { tooltip } = this;
              let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
              if (!inTooltip)
                  this.view.dispatch({ effects: this.setHover.of([]) });
              else
                  this.watchTooltipLeave(tooltip.dom);
          }
      }
      watchTooltipLeave(tooltip) {
          let watch = (event) => {
              tooltip.removeEventListener("mouseleave", watch);
              if (this.active.length && !this.view.dom.contains(event.relatedTarget))
                  this.view.dispatch({ effects: this.setHover.of([]) });
          };
          tooltip.addEventListener("mouseleave", watch);
      }
      destroy() {
          clearTimeout(this.hoverTimeout);
          this.view.dom.removeEventListener("mouseleave", this.mouseleave);
          this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
  }
  const tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
      let { left, right, top, bottom } = tooltip.getBoundingClientRect(), arrow;
      if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
          let arrowRect = arrow.getBoundingClientRect();
          top = Math.min(arrowRect.top, top);
          bottom = Math.max(arrowRect.bottom, bottom);
      }
      return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin &&
          event.clientY >= top - tooltipMargin && event.clientY <= bottom + tooltipMargin;
  }
  function isOverRange(view, from, to, x, y, margin) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
      if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)
          return false;
      let pos = view.posAtCoords({ x, y }, false);
      return pos >= from && pos <= to;
  }
  /**
  Set up a hover tooltip, which shows up when the pointer hovers
  over ranges of text. The callback is called when the mouse hovers
  over the document text. It should, if there is a tooltip
  associated with position `pos`, return the tooltip description
  (either directly or in a promise). The `side` argument indicates
  on which side of the position the pointer is—it will be -1 if the
  pointer is before the position, 1 if after the position.

  Note that all hover tooltips are hosted within a single tooltip
  container element. This allows multiple tooltips over the same
  range to be "merged" together without overlapping.

  The return value is a valid [editor extension](https://codemirror.net/6/docs/ref/#state.Extension)
  but also provides an `active` property holding a state field that
  can be used to read the currently active tooltips produced by this
  extension.
  */
  function hoverTooltip(source, options = {}) {
      let setHover = StateEffect.define();
      let hoverState = StateField.define({
          create() { return []; },
          update(value, tr) {
              if (value.length) {
                  if (options.hideOnChange && (tr.docChanged || tr.selection))
                      value = [];
                  else if (options.hideOn)
                      value = value.filter(v => !options.hideOn(tr, v));
                  if (tr.docChanged) {
                      let mapped = [];
                      for (let tooltip of value) {
                          let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
                          if (newPos != null) {
                              let copy = Object.assign(Object.create(null), tooltip);
                              copy.pos = newPos;
                              if (copy.end != null)
                                  copy.end = tr.changes.mapPos(copy.end);
                              mapped.push(copy);
                          }
                      }
                      value = mapped;
                  }
              }
              for (let effect of tr.effects) {
                  if (effect.is(setHover))
                      value = effect.value;
                  if (effect.is(closeHoverTooltipEffect))
                      value = [];
              }
              return value;
          },
          provide: f => showHoverTooltip.from(f)
      });
      return {
          active: hoverState,
          extension: [
              hoverState,
              ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
              showHoverTooltipHost
          ]
      };
  }
  /**
  Get the active tooltip view for a given tooltip, if available.
  */
  function getTooltip(view, tooltip) {
      let plugin = view.plugin(tooltipPlugin);
      if (!plugin)
          return null;
      let found = plugin.manager.tooltips.indexOf(tooltip);
      return found < 0 ? null : plugin.manager.tooltipViews[found];
  }
  const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

  const panelConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          let topContainer, bottomContainer;
          for (let c of configs) {
              topContainer = topContainer || c.topContainer;
              bottomContainer = bottomContainer || c.bottomContainer;
          }
          return { topContainer, bottomContainer };
      }
  });
  const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.input = view.state.facet(showPanel);
          this.specs = this.input.filter(s => s);
          this.panels = this.specs.map(spec => spec(view));
          let conf = view.state.facet(panelConfig);
          this.top = new PanelGroup(view, true, conf.topContainer);
          this.bottom = new PanelGroup(view, false, conf.bottomContainer);
          this.top.sync(this.panels.filter(p => p.top));
          this.bottom.sync(this.panels.filter(p => !p.top));
          for (let p of this.panels) {
              p.dom.classList.add("cm-panel");
              if (p.mount)
                  p.mount();
          }
      }
      update(update) {
          let conf = update.state.facet(panelConfig);
          if (this.top.container != conf.topContainer) {
              this.top.sync([]);
              this.top = new PanelGroup(update.view, true, conf.topContainer);
          }
          if (this.bottom.container != conf.bottomContainer) {
              this.bottom.sync([]);
              this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
          }
          this.top.syncClasses();
          this.bottom.syncClasses();
          let input = update.state.facet(showPanel);
          if (input != this.input) {
              let specs = input.filter(x => x);
              let panels = [], top = [], bottom = [], mount = [];
              for (let spec of specs) {
                  let known = this.specs.indexOf(spec), panel;
                  if (known < 0) {
                      panel = spec(update.view);
                      mount.push(panel);
                  }
                  else {
                      panel = this.panels[known];
                      if (panel.update)
                          panel.update(update);
                  }
                  panels.push(panel);
                  (panel.top ? top : bottom).push(panel);
              }
              this.specs = specs;
              this.panels = panels;
              this.top.sync(top);
              this.bottom.sync(bottom);
              for (let p of mount) {
                  p.dom.classList.add("cm-panel");
                  if (p.mount)
                      p.mount();
              }
          }
          else {
              for (let p of this.panels)
                  if (p.update)
                      p.update(update);
          }
      }
      destroy() {
          this.top.sync([]);
          this.bottom.sync([]);
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
      })
  });
  class PanelGroup {
      constructor(view, top, container) {
          this.view = view;
          this.top = top;
          this.container = container;
          this.dom = undefined;
          this.classes = "";
          this.panels = [];
          this.syncClasses();
      }
      sync(panels) {
          for (let p of this.panels)
              if (p.destroy && panels.indexOf(p) < 0)
                  p.destroy();
          this.panels = panels;
          this.syncDOM();
      }
      syncDOM() {
          if (this.panels.length == 0) {
              if (this.dom) {
                  this.dom.remove();
                  this.dom = undefined;
              }
              return;
          }
          if (!this.dom) {
              this.dom = document.createElement("div");
              this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
              this.dom.style[this.top ? "top" : "bottom"] = "0";
              let parent = this.container || this.view.dom;
              parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
          }
          let curDOM = this.dom.firstChild;
          for (let panel of this.panels) {
              if (panel.dom.parentNode == this.dom) {
                  while (curDOM != panel.dom)
                      curDOM = rm(curDOM);
                  curDOM = curDOM.nextSibling;
              }
              else {
                  this.dom.insertBefore(panel.dom, curDOM);
              }
          }
          while (curDOM)
              curDOM = rm(curDOM);
      }
      scrollMargin() {
          return !this.dom || this.container ? 0
              : Math.max(0, this.top ?
                  this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                  Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
      syncClasses() {
          if (!this.container || this.classes == this.view.themeClasses)
              return;
          for (let cls of this.classes.split(" "))
              if (cls)
                  this.container.classList.remove(cls);
          for (let cls of (this.classes = this.view.themeClasses).split(" "))
              if (cls)
                  this.container.classList.add(cls);
      }
  }
  function rm(node) {
      let next = node.nextSibling;
      node.remove();
      return next;
  }
  /**
  Opening a panel is done by providing a constructor function for
  the panel through this facet. (The panel is closed again when its
  constructor is no longer provided.) Values of `null` are ignored.
  */
  const showPanel = /*@__PURE__*/Facet.define({
      enables: panelPlugin
  });

  /**
  A gutter marker represents a bit of information attached to a line
  in a specific gutter. Your own custom markers have to extend this
  class.
  */
  class GutterMarker extends RangeValue {
      /**
      @internal
      */
      compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) { return false; }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) { }
  }
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = undefined;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  /**
  Facet used to add a class to all gutter elements for a given line.
  Markers given to this facet should _only_ define an
  [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
  [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
  in all gutters for the line).
  */
  const gutterLineClass = /*@__PURE__*/Facet.define();
  /**
  Facet used to add a class to all gutter elements next to a widget.
  Should not provide widgets with a `toDOM` method.
  */
  const gutterWidgetClass = /*@__PURE__*/Facet.define();
  const activeGutters = /*@__PURE__*/Facet.define();
  const unfixGutters = /*@__PURE__*/Facet.define({
      combine: values => values.some(x => x)
  });
  /**
  The gutter-drawing plugin is automatically enabled when you add a
  gutter, but you can use this function to explicitly configure it.

  Unless `fixed` is explicitly set to `false`, the gutters are
  fixed, meaning they don't scroll along with the content
  horizontally (except on Internet Explorer, which doesn't support
  CSS [`position:
  sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
  */
  function gutters(config) {
      let result = [
          gutterView,
      ];
      return result;
  }
  const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.prevViewport = view.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
          this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
          for (let gutter of this.gutters)
              this.dom.appendChild(gutter.dom);
          this.fixed = !view.state.facet(unfixGutters);
          if (this.fixed) {
              // FIXME IE11 fallback, which doesn't support position: sticky,
              // by using position: relative + event handlers that realign the
              // gutter (or just force fixed=false on IE11?)
              this.dom.style.position = "sticky";
          }
          this.syncGutters(false);
          view.scrollDOM.insertBefore(this.dom, view.contentDOM);
      }
      update(update) {
          if (this.updateGutters(update)) {
              // Detach during sync when the viewport changed significantly
              // (such as during scrolling), since for large updates that is
              // faster.
              let vpA = this.prevViewport, vpB = update.view.viewport;
              let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
              this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
          }
          if (update.geometryChanged) {
              this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
          }
          if (this.view.state.facet(unfixGutters) != !this.fixed) {
              this.fixed = !this.fixed;
              this.dom.style.position = this.fixed ? "sticky" : "";
          }
          this.prevViewport = update.view.viewport;
      }
      syncGutters(detach) {
          let after = this.dom.nextSibling;
          if (detach)
              this.dom.remove();
          let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
          let classSet = [];
          let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
          for (let line of this.view.viewportLineBlocks) {
              if (classSet.length)
                  classSet = [];
              if (Array.isArray(line.type)) {
                  let first = true;
                  for (let b of line.type) {
                      if (b.type == BlockType.Text && first) {
                          advanceCursor(lineClasses, classSet, b.from);
                          for (let cx of contexts)
                              cx.line(this.view, b, classSet);
                          first = false;
                      }
                      else if (b.widget) {
                          for (let cx of contexts)
                              cx.widget(this.view, b);
                      }
                  }
              }
              else if (line.type == BlockType.Text) {
                  advanceCursor(lineClasses, classSet, line.from);
                  for (let cx of contexts)
                      cx.line(this.view, line, classSet);
              }
              else if (line.widget) {
                  for (let cx of contexts)
                      cx.widget(this.view, line);
              }
          }
          for (let cx of contexts)
              cx.finish();
          if (detach)
              this.view.scrollDOM.insertBefore(this.dom, after);
      }
      updateGutters(update) {
          let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
          let change = update.docChanged || update.heightChanged || update.viewportChanged ||
              !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
          if (prev == cur) {
              for (let gutter of this.gutters)
                  if (gutter.update(update))
                      change = true;
          }
          else {
              change = true;
              let gutters = [];
              for (let conf of cur) {
                  let known = prev.indexOf(conf);
                  if (known < 0) {
                      gutters.push(new SingleGutterView(this.view, conf));
                  }
                  else {
                      this.gutters[known].update(update);
                      gutters.push(this.gutters[known]);
                  }
              }
              for (let g of this.gutters) {
                  g.dom.remove();
                  if (gutters.indexOf(g) < 0)
                      g.destroy();
              }
              for (let g of gutters)
                  this.dom.appendChild(g.dom);
              this.gutters = gutters;
          }
          return change;
      }
      destroy() {
          for (let view of this.gutters)
              view.destroy();
          this.dom.remove();
      }
  }, {
      provide: plugin => EditorView.scrollMargins.of(view => {
          let value = view.plugin(plugin);
          if (!value || value.gutters.length == 0 || !value.fixed)
              return null;
          return view.textDirection == Direction$1.LTR
              ? { left: value.dom.offsetWidth * view.scaleX }
              : { right: value.dom.offsetWidth * view.scaleX };
      })
  });
  function asArray(val) { return (Array.isArray(val) ? val : [val]); }
  function advanceCursor(cursor, collect, pos) {
      while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos)
              collect.push(cursor.value);
          cursor.next();
      }
  }
  class UpdateContext {
      constructor(gutter, viewport, height) {
          this.gutter = gutter;
          this.height = height;
          this.i = 0;
          this.cursor = RangeSet.iter(gutter.markers, viewport.from);
      }
      addElement(view, block, markers) {
          let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
          if (this.i == gutter.elements.length) {
              let newElt = new GutterElement(view, height, above, markers);
              gutter.elements.push(newElt);
              gutter.dom.appendChild(newElt.dom);
          }
          else {
              gutter.elements[this.i].update(view, height, above, markers);
          }
          this.height = block.bottom;
          this.i++;
      }
      line(view, line, extraMarkers) {
          let localMarkers = [];
          advanceCursor(this.cursor, localMarkers, line.from);
          if (extraMarkers.length)
              localMarkers = localMarkers.concat(extraMarkers);
          let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
          if (forLine)
              localMarkers.unshift(forLine);
          let gutter = this.gutter;
          if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
              return;
          this.addElement(view, line, localMarkers);
      }
      widget(view, block) {
          let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
          for (let cls of view.state.facet(gutterWidgetClass)) {
              let marker = cls(view, block.widget, block);
              if (marker)
                  (markers || (markers = [])).push(marker);
          }
          if (markers)
              this.addElement(view, block, markers);
      }
      finish() {
          let gutter = this.gutter;
          while (gutter.elements.length > this.i) {
              let last = gutter.elements.pop();
              gutter.dom.removeChild(last.dom);
              last.destroy();
          }
      }
  }
  class SingleGutterView {
      constructor(view, config) {
          this.view = view;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
          for (let prop in config.domEventHandlers) {
              this.dom.addEventListener(prop, (event) => {
                  let target = event.target, y;
                  if (target != this.dom && this.dom.contains(target)) {
                      while (target.parentNode != this.dom)
                          target = target.parentNode;
                      let rect = target.getBoundingClientRect();
                      y = (rect.top + rect.bottom) / 2;
                  }
                  else {
                      y = event.clientY;
                  }
                  let line = view.lineBlockAtHeight(y - view.documentTop);
                  if (config.domEventHandlers[prop](view, line, event))
                      event.preventDefault();
              });
          }
          this.markers = asArray(config.markers(view));
          if (config.initialSpacer) {
              this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
              this.dom.appendChild(this.spacer.dom);
              this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
      }
      update(update) {
          let prevMarkers = this.markers;
          this.markers = asArray(this.config.markers(update.view));
          if (this.spacer && this.config.updateSpacer) {
              let updated = this.config.updateSpacer(this.spacer.markers[0], update);
              if (updated != this.spacer.markers[0])
                  this.spacer.update(update.view, 0, 0, [updated]);
          }
          let vp = update.view.viewport;
          return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
              (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
      }
      destroy() {
          for (let elt of this.elements)
              elt.destroy();
      }
  }
  class GutterElement {
      constructor(view, height, above, markers) {
          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutterElement";
          this.update(view, height, above, markers);
      }
      update(view, height, above, markers) {
          if (this.height != height) {
              this.height = height;
              this.dom.style.height = height + "px";
          }
          if (this.above != above)
              this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
          if (!sameMarkers(this.markers, markers))
              this.setMarkers(view, markers);
      }
      setMarkers(view, markers) {
          let cls = "cm-gutterElement", domPos = this.dom.firstChild;
          for (let iNew = 0, iOld = 0;;) {
              let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
              if (marker) {
                  let c = marker.elementClass;
                  if (c)
                      cls += " " + c;
                  for (let i = iOld; i < this.markers.length; i++)
                      if (this.markers[i].compare(marker)) {
                          skipTo = i;
                          matched = true;
                          break;
                      }
              }
              else {
                  skipTo = this.markers.length;
              }
              while (iOld < skipTo) {
                  let next = this.markers[iOld++];
                  if (next.toDOM) {
                      next.destroy(domPos);
                      let after = domPos.nextSibling;
                      domPos.remove();
                      domPos = after;
                  }
              }
              if (!marker)
                  break;
              if (marker.toDOM) {
                  if (matched)
                      domPos = domPos.nextSibling;
                  else
                      this.dom.insertBefore(marker.toDOM(view), domPos);
              }
              if (matched)
                  iOld++;
          }
          this.dom.className = cls;
          this.markers = markers;
      }
      destroy() {
          this.setMarkers(null, []); // First argument not used unless creating markers
      }
  }
  function sameMarkers(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!a[i].compare(b[i]))
              return false;
      return true;
  }
  /**
  Facet used to provide markers to the line number gutter.
  */
  const lineNumberMarkers = /*@__PURE__*/Facet.define();
  /**
  Facet used to create markers in the line number gutter next to widgets.
  */
  const lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
  const lineNumberConfig = /*@__PURE__*/Facet.define({
      combine(values) {
          return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
              domEventHandlers(a, b) {
                  let result = Object.assign({}, a);
                  for (let event in b) {
                      let exists = result[event], add = b[event];
                      result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                  }
                  return result;
              }
          });
      }
  });
  class NumberMarker extends GutterMarker {
      constructor(number) {
          super();
          this.number = number;
      }
      eq(other) { return this.number == other.number; }
      toDOM() { return document.createTextNode(this.number); }
  }
  function formatNumber(view, number) {
      return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
  }
  const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
      class: "cm-lineNumbers",
      renderEmptyElements: false,
      markers(view) { return view.state.facet(lineNumberMarkers); },
      lineMarker(view, line, others) {
          if (others.some(m => m.toDOM))
              return null;
          return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: (view, widget, block) => {
          for (let m of view.state.facet(lineNumberWidgetMarker)) {
              let result = m(view, widget, block);
              if (result)
                  return result;
          }
          return null;
      },
      lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
      initialSpacer(view) {
          return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer(spacer, update) {
          let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
          return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  /**
  Create a line number gutter extension.
  */
  function lineNumbers(config = {}) {
      return [
          lineNumberConfig.of(config),
          gutters(),
          lineNumberGutter
      ];
  }
  function maxLineNumber(lines) {
      let last = 9;
      while (last < lines)
          last = last * 10 + 9;
      return last;
  }

  var _a;
  /**
  Node prop stored in a parser's top syntax node to provide the
  facet that stores language-specific data for that language.
  */
  const languageDataProp = /*@__PURE__*/new NodeProp();
  /**
  Helper function to define a facet (to be added to the top syntax
  node(s) for a language via
  [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
  used to associate language data with the language. You
  probably only need this when subclassing
  [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
  */
  function defineLanguageFacet(baseData) {
      return Facet.define({
          combine: baseData ? values => values.concat(baseData) : undefined
      });
  }
  /**
  Syntax node prop used to register sublanguages. Should be added to
  the top level node type for the language.
  */
  const sublanguageProp = /*@__PURE__*/new NodeProp();
  /**
  A language object manages parsing and per-language
  [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
  managed as a [Lezer](https://lezer.codemirror.net) tree. The class
  can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
  subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
  via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
  for stream parsers.
  */
  class Language {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(
      /**
      The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
      used for this language.
      */
      data, parser, extraExtensions = [], 
      /**
      A language name.
      */
      name = "") {
          this.data = data;
          this.name = name;
          // Kludge to define EditorState.tree as a debugging helper,
          // without the EditorState package actually knowing about
          // languages and lezer trees.
          if (!EditorState.prototype.hasOwnProperty("tree"))
              Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
          this.parser = parser;
          this.extension = [
              language$1.of(this),
              EditorState.languageData.of((state, pos, side) => {
                  let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                  if (!data)
                      return [];
                  let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                  if (sub) {
                      let innerNode = top.resolve(pos - top.from, side);
                      for (let sublang of sub)
                          if (sublang.test(innerNode, state)) {
                              let data = state.facet(sublang.facet);
                              return sublang.type == "replace" ? data : data.concat(base);
                          }
                  }
                  return base;
              })
          ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos, side = -1) {
          return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
          let lang = state.facet(language$1);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
              return [{ from: 0, to: state.doc.length }];
          if (!lang || !lang.allowsNesting)
              return [];
          let result = [];
          let explore = (tree, from) => {
              if (tree.prop(languageDataProp) == this.data) {
                  result.push({ from, to: from + tree.length });
                  return;
              }
              let mount = tree.prop(NodeProp.mounted);
              if (mount) {
                  if (mount.tree.prop(languageDataProp) == this.data) {
                      if (mount.overlay)
                          for (let r of mount.overlay)
                              result.push({ from: r.from + from, to: r.to + from });
                      else
                          result.push({ from: from, to: from + tree.length });
                      return;
                  }
                  else if (mount.overlay) {
                      let size = result.length;
                      explore(mount.tree, mount.overlay[0].from + from);
                      if (result.length > size)
                          return;
                  }
              }
              for (let i = 0; i < tree.children.length; i++) {
                  let ch = tree.children[i];
                  if (ch instanceof Tree)
                      explore(ch, tree.positions[i] + from);
              }
          };
          explore(syntaxTree(state), 0);
          return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() { return true; }
  }
  /**
  @internal
  */
  Language.setState = /*@__PURE__*/StateEffect.define();
  function topNodeAt(state, pos, side) {
      let topLang = state.facet(language$1), tree = syntaxTree(state).topNode;
      if (!topLang || topLang.allowsNesting) {
          for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
              if (node.type.isTop)
                  tree = node;
      }
      return tree;
  }
  /**
  A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
  [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
  parsers.
  */
  class LRLanguage extends Language {
      constructor(data, parser, name) {
          super(data, parser, [], name);
          this.parser = parser;
      }
      /**
      Define a language from a parser.
      */
      static define(spec) {
          let data = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data, spec.parser.configure({
              props: [languageDataProp.add(type => type.isTop ? data : undefined)]
          }), spec.name);
      }
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      configure(options, name) {
          return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
      }
      get allowsNesting() { return this.parser.hasWrappers(); }
  }
  /**
  Get the syntax tree for a state, which is the current (possibly
  incomplete) parse tree of the active
  [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
  language available.
  */
  function syntaxTree(state) {
      let field = state.field(Language.state, false);
      return field ? field.tree : Tree.empty;
  }
  /**
  Lezer-style
  [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
  object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
  */
  class DocInput {
      /**
      Create an input object for the given document.
      */
      constructor(doc) {
          this.doc = doc;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
      }
      get length() { return this.doc.length; }
      syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
      }
      chunk(pos) {
          this.syncTo(pos);
          return this.string;
      }
      get lineChunks() { return true; }
      read(from, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from < stringStart || to >= this.cursorPos)
              return this.doc.sliceString(from, to);
          else
              return this.string.slice(from - stringStart, to - stringStart);
      }
  }
  let currentContext = null;
  /**
  A parse context provided to parsers working on the editor content.
  */
  class ParseContext {
      constructor(parser, 
      /**
      The current editor state.
      */
      state, 
      /**
      Tree fragments that can be reused by incremental re-parses.
      */
      fragments = [], 
      /**
      @internal
      */
      tree, 
      /**
      @internal
      */
      treeLen, 
      /**
      The current editor viewport (or some overapproximation
      thereof). Intended to be used for opportunistically avoiding
      work (in which case
      [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
      should be called to make sure the parser is restarted when the
      skipped region becomes visible).
      */
      viewport, 
      /**
      @internal
      */
      skipped, 
      /**
      This is where skipping parsers can register a promise that,
      when resolved, will schedule a new parse. It is cleared when
      the parse worker picks up the promise. @internal
      */
      scheduleOn) {
          this.parser = parser;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          /**
          @internal
          */
          this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser, state, viewport) {
          return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
      }
      startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
          if (upto != null && upto >= this.state.doc.length)
              upto = undefined;
          if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
              this.takeTree();
              return true;
          }
          return this.withContext(() => {
              var _a;
              if (typeof until == "number") {
                  let endTime = Date.now() + until;
                  until = () => Date.now() > endTime;
              }
              if (!this.parse)
                  this.parse = this.startParse();
              if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                  upto < this.state.doc.length)
                  this.parse.stopAt(upto);
              for (;;) {
                  let done = this.parse.advance();
                  if (done) {
                      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                      this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                      this.tree = done;
                      this.parse = null;
                      if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                          this.parse = this.startParse();
                      else
                          return true;
                  }
                  if (until())
                      return false;
              }
          });
      }
      /**
      @internal
      */
      takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
              if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                  this.parse.stopAt(pos);
              this.withContext(() => { while (!(tree = this.parse.advance())) { } });
              this.treeLen = pos;
              this.tree = tree;
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
              this.parse = null;
          }
      }
      withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
              return f();
          }
          finally {
              currentContext = prev;
          }
      }
      withoutTempSkipped(fragments) {
          for (let r; r = this.tempSkipped.pop();)
              fragments = cutFragments(fragments, r.from, r.to);
          return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
              let ranges = [];
              changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
              fragments = TreeFragment.applyChanges(fragments, ranges);
              tree = Tree.empty;
              treeLen = 0;
              viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
              if (this.skipped.length) {
                  skipped = [];
                  for (let r of this.skipped) {
                      let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                      if (from < to)
                          skipped.push({ from, to });
                  }
              }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
              return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
              let { from, to } = this.skipped[i];
              if (from < viewport.to && to > viewport.from) {
                  this.fragments = cutFragments(this.fragments, from, to);
                  this.skipped.splice(i--, 1);
              }
          }
          if (this.skipped.length >= startLen)
              return false;
          this.reset();
          return true;
      }
      /**
      @internal
      */
      reset() {
          if (this.parse) {
              this.takeTree();
              this.parse = null;
          }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from, to) {
          this.skipped.push({ from, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
          return new class extends Parser {
              createParse(input, fragments, ranges) {
                  let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                  let parser = {
                      parsedPos: from,
                      advance() {
                          let cx = currentContext;
                          if (cx) {
                              for (let r of ranges)
                                  cx.tempSkipped.push(r);
                              if (until)
                                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                          }
                          this.parsedPos = to;
                          return new Tree(NodeType.none, [], [], to - from);
                      },
                      stoppedAt: null,
                      stopAt() { }
                  };
                  return parser;
              }
          };
      }
      /**
      @internal
      */
      isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() { return currentContext; }
  }
  function cutFragments(fragments, from, to) {
      return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
  }
  class LanguageState {
      constructor(
      // A mutable parse state that is used to preserve work done during
      // the lifetime of a state when moving to the next state.
      context) {
          this.context = context;
          this.tree = context.tree;
      }
      apply(tr) {
          if (!tr.docChanged && this.tree == this.context.tree)
              return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          // If the previous parse wasn't done, go forward only up to its
          // end position or the end of the viewport, to avoid slowing down
          // state updates with parse work beyond the viewport.
          let upto = this.context.treeLen == tr.startState.doc.length ? undefined
              : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20 /* Work.Apply */, upto))
              newCx.takeTree();
          return new LanguageState(newCx);
      }
      static init(state) {
          let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
          let parseState = ParseContext.create(state.facet(language$1).parser, state, { from: 0, to: vpTo });
          if (!parseState.work(20 /* Work.Apply */, vpTo))
              parseState.takeTree();
          return new LanguageState(parseState);
      }
  }
  Language.state = /*@__PURE__*/StateField.define({
      create: LanguageState.init,
      update(value, tr) {
          for (let e of tr.effects)
              if (e.is(Language.setState))
                  return e.value;
          if (tr.startState.facet(language$1) != tr.state.facet(language$1))
              return LanguageState.init(tr.state);
          return value.apply(tr);
      }
  });
  let requestIdle = (callback) => {
      let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
      return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(() => {
              idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
          }, 100 /* Work.MinPause */);
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
  const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
      ? () => navigator.scheduling.isInputPending() : null;
  const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
          this.view = view;
          this.working = null;
          this.workScheduled = 0;
          // End of the current time chunk
          this.chunkEnd = -1;
          // Milliseconds of budget left for this chunk
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
      }
      update(update) {
          let cx = this.view.state.field(Language.state).context;
          if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
              this.scheduleWork();
          if (update.docChanged || update.selectionSet) {
              if (this.view.hasFocus)
                  this.chunkBudget += 50 /* Work.ChangeBonus */;
              this.scheduleWork();
          }
          this.checkAsyncSchedule(cx);
      }
      scheduleWork() {
          if (this.working)
              return;
          let { state } = this.view, field = state.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
              this.working = requestIdle(this.work);
      }
      work(deadline) {
          this.working = null;
          let now = Date.now();
          if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
              this.chunkEnd = now + 30000 /* Work.ChunkTime */;
              this.chunkBudget = 3000 /* Work.ChunkBudget */;
          }
          if (this.chunkBudget <= 0)
              return; // No more budget
          let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
              return;
          let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
          let done = field.context.work(() => {
              return isInputPending && isInputPending() || Date.now() > endTime;
          }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
          this.chunkBudget -= Date.now() - now;
          if (done || this.chunkBudget <= 0) {
              field.context.takeTree();
              this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
              this.scheduleWork();
          this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx) {
          if (cx.scheduleOn) {
              this.workScheduled++;
              cx.scheduleOn
                  .then(() => this.scheduleWork())
                  .catch(err => logException(this.view.state, err))
                  .then(() => this.workScheduled--);
              cx.scheduleOn = null;
          }
      }
      destroy() {
          if (this.working)
              this.working();
      }
      isWorking() {
          return !!(this.working || this.workScheduled > 0);
      }
  }, {
      eventHandlers: { focus() { this.scheduleWork(); } }
  });
  /**
  The facet used to associate a language with an editor state. Used
  by `Language` object's `extension` property (so you don't need to
  manually wrap your languages in this). Can be used to access the
  current language on a state.
  */
  const language$1 = /*@__PURE__*/Facet.define({
      combine(languages) { return languages.length ? languages[0] : null; },
      enables: language => [
          Language.state,
          parseWorker,
          EditorView.contentAttributes.compute([language], state => {
              let lang = state.facet(language);
              return lang && lang.name ? { "data-language": lang.name } : {};
          })
      ]
  });
  /**
  This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
  optional set of supporting extensions. Language packages are
  encouraged to export a function that optionally takes a
  configuration object and returns a `LanguageSupport` instance, as
  the main way for client code to use the package.
  */
  class LanguageSupport {
      /**
      Create a language support object.
      */
      constructor(
      /**
      The language object.
      */
      language, 
      /**
      An optional set of supporting extensions. When nesting a
      language in another language, the outer language is encouraged
      to include the supporting extensions for its inner languages
      in its own set of support extensions.
      */
      support = []) {
          this.language = language;
          this.support = support;
          this.extension = [language, support];
      }
  }

  /**
  Facet that defines a way to provide a function that computes the
  appropriate indentation depth, as a column number (see
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
  line. A return value of `null` indicates no indentation can be
  determined, and the line should inherit the indentation of the one
  above it. A return value of `undefined` defers to the next indent
  service.
  */
  const indentService = /*@__PURE__*/Facet.define();
  /**
  Facet for overriding the unit by which indentation happens. Should
  be a string consisting either entirely of the same whitespace
  character. When not set, this defaults to 2 spaces.
  */
  const indentUnit = /*@__PURE__*/Facet.define({
      combine: values => {
          if (!values.length)
              return "  ";
          let unit = values[0];
          if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
              throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return unit;
      }
  });
  /**
  Return the _column width_ of an indent unit in the state.
  Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
  facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
  contains tabs.
  */
  function getIndentUnit(state) {
      let unit = state.facet(indentUnit);
      return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  /**
  Create an indentation string that covers columns 0 to `cols`.
  Will use tabs for as much of the columns as possible when the
  [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
  tabs.
  */
  function indentString(state, cols) {
      let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
      if (ch == "\t") {
          while (cols >= ts) {
              result += "\t";
              cols -= ts;
          }
          ch = " ";
      }
      for (let i = 0; i < cols; i++)
          result += ch;
      return result;
  }
  /**
  Get the indentation, as a column number, at the given position.
  Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
  that are registered, and if none of those return an indentation,
  this will check the syntax tree for the [indent node
  prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
  number when an indentation could be determined, and null
  otherwise.
  */
  function getIndentation(context, pos) {
      if (context instanceof EditorState)
          context = new IndentContext(context);
      for (let service of context.state.facet(indentService)) {
          let result = service(context, pos);
          if (result !== undefined)
              return result;
      }
      let tree = syntaxTree(context.state);
      return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  /**
  Indentation contexts are used when calling [indentation
  services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
  useful in indentation logic, and can selectively override the
  indentation reported for some lines.
  */
  class IndentContext {
      /**
      Create an indent context.
      */
      constructor(
      /**
      The editor state.
      */
      state, 
      /**
      @internal
      */
      options = {}) {
          this.state = state;
          this.options = options;
          this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos, bias = 1) {
          let line = this.state.doc.lineAt(pos);
          let { simulateBreak, simulateDoubleBreak } = this.options;
          if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
              if (simulateDoubleBreak && simulateBreak == pos)
                  return { text: "", from: pos };
              else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                  return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
              else
                  return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
          }
          return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos, bias = 1) {
          if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
              return "";
          let { text, from } = this.lineAt(pos, bias);
          return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
      }
      /**
      Find the column for the given position.
      */
      column(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let result = this.countColumn(text, pos - from);
          let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
          if (override > -1)
              result += override - this.countColumn(text, text.search(/\S|$/));
          return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line, pos = line.length) {
          return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos, bias = 1) {
          let { text, from } = this.lineAt(pos, bias);
          let override = this.options.overrideIndentation;
          if (override) {
              let overriden = override(from);
              if (overriden > -1)
                  return overriden;
          }
          return this.countColumn(text, text.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
          return this.options.simulateBreak || null;
      }
  }
  /**
  A syntax tree node prop used to associate indentation strategies
  with node types. Such a strategy is a function from an indentation
  context to a column number (see also
  [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
  indicates that no definitive indentation can be determined.
  */
  const indentNodeProp = /*@__PURE__*/new NodeProp();
  // Compute the indentation for a given position from the syntax tree.
  function syntaxIndentation(cx, ast, pos) {
      let stack = ast.resolveStack(pos);
      let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
      if (inner != stack.node) {
          let add = [];
          for (let cur = inner; cur && !(cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
              add.push(cur);
          for (let i = add.length - 1; i >= 0; i--)
              stack = { node: add[i], next: stack };
      }
      return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
      for (let cur = stack; cur; cur = cur.next) {
          let strategy = indentStrategy(cur.node);
          if (strategy)
              return strategy(TreeIndentContext.create(cx, pos, cur));
      }
      return 0;
  }
  function ignoreClosed(cx) {
      return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
      let strategy = tree.type.prop(indentNodeProp);
      if (strategy)
          return strategy;
      let first = tree.firstChild, close;
      if (first && (close = first.type.prop(NodeProp.closedBy))) {
          let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
          return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
      }
      return tree.parent == null ? topIndent : null;
  }
  function topIndent() { return 0; }
  /**
  Objects of this type provide context information and helper
  methods to indentation functions registered on syntax nodes.
  */
  class TreeIndentContext extends IndentContext {
      constructor(base, 
      /**
      The position at which indentation is being computed.
      */
      pos, 
      /**
      @internal
      */
      context) {
          super(base.state, base.options);
          this.base = base;
          this.pos = pos;
          this.context = context;
      }
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      get node() { return this.context.node; }
      /**
      @internal
      */
      static create(base, pos, context) {
          return new TreeIndentContext(base, pos, context);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
          return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
          return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
      baseIndentFor(node) {
          let line = this.state.doc.lineAt(node.from);
          // Skip line starts that are covered by a sibling (or cousin, etc)
          for (;;) {
              let atBreak = node.resolve(line.from);
              while (atBreak.parent && atBreak.parent.from == atBreak.from)
                  atBreak = atBreak.parent;
              if (isParent(atBreak, node))
                  break;
              line = this.state.doc.lineAt(atBreak.from);
          }
          return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
          return indentFor(this.context.next, this.base, this.pos);
      }
  }
  function isParent(parent, of) {
      for (let cur = of; cur; cur = cur.parent)
          if (parent == cur)
              return true;
      return false;
  }
  // Check whether a delimited node is aligned (meaning there are
  // non-skipped nodes on the same line as the opening delimiter). And
  // if so, return the opening token.
  function bracketedAligned(context) {
      let tree = context.node;
      let openToken = tree.childAfter(tree.from), last = tree.lastChild;
      if (!openToken)
          return null;
      let sim = context.options.simulateBreak;
      let openLine = context.state.doc.lineAt(openToken.from);
      let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
      for (let pos = openToken.to;;) {
          let next = tree.childAfter(pos);
          if (!next || next == last)
              return null;
          if (!next.type.isSkipped) {
              if (next.from >= lineEnd)
                  return null;
              let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
              return { from: openToken.from, to: openToken.to + space };
          }
          pos = next.to;
      }
  }
  /**
  An indentation strategy for delimited (usually bracketed) nodes.
  Will, by default, indent one unit more than the parent's base
  indent unless the line starts with a closing token. When `align`
  is true and there are non-skipped nodes on the node's opening
  line, the content of the node will be aligned with the end of the
  opening node, like this:

      foo(bar,
          baz)
  */
  function delimitedIndent({ closing, align = true, units = 1 }) {
      return (context) => delimitedStrategy(context, align, units, closing);
  }
  function delimitedStrategy(context, align, units, closing, closedAt) {
      let after = context.textAfter, space = after.match(/^\s*/)[0].length;
      let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
      let aligned = align ? bracketedAligned(context) : null;
      if (aligned)
          return closed ? context.column(aligned.from) : context.column(aligned.to);
      return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  /**
  Creates an indentation strategy that, by default, indents
  continued lines one unit more than the node's base indentation.
  You can provide `except` to prevent indentation of lines that
  match a pattern (for example `/^else\b/` in `if`/`else`
  constructs), and you can change the amount of units used with the
  `units` option.
  */
  function continuedIndent({ except, units = 1 } = {}) {
      return (context) => {
          let matchExcept = except && except.test(context.textAfter);
          return context.baseIndent + (matchExcept ? 0 : units * context.unit);
      };
  }
  const DontIndentBeyond = 200;
  /**
  Enables reindentation on input. When a language defines an
  `indentOnInput` field in its [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
  expression, the line at the cursor will be reindented whenever new
  text is typed and the input from the start of the line up to the
  cursor matches that regexp.

  To avoid unneccesary reindents, it is recommended to start the
  regexp with `^` (usually followed by `\s*`), and end it with `$`.
  For example, `/^\s*\}$/` will reindent when a closing brace is
  added at the start of a line.
  */
  function indentOnInput() {
      return EditorState.transactionFilter.of(tr => {
          if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
              return tr;
          let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
          if (!rules.length)
              return tr;
          let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
          if (head > line.from + DontIndentBeyond)
              return tr;
          let lineStart = doc.sliceString(line.from, head);
          if (!rules.some(r => r.test(lineStart)))
              return tr;
          let { state } = tr, last = -1, changes = [];
          for (let { head } of state.selection.ranges) {
              let line = state.doc.lineAt(head);
              if (line.from == last)
                  continue;
              last = line.from;
              let indent = getIndentation(state, line.from);
              if (indent == null)
                  continue;
              let cur = /^\s*/.exec(line.text)[0];
              let norm = indentString(state, indent);
              if (cur != norm)
                  changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
          return changes.length ? [tr, { changes, sequential: true }] : tr;
      });
  }
  /**
  This node prop is used to associate folding information with
  syntax node types. Given a syntax node, it should check whether
  that tree is foldable and return the range that can be collapsed
  when it is.
  */
  const foldNodeProp = /*@__PURE__*/new NodeProp();
  /**
  [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
  the first and the last child of a syntax node. Useful for nodes
  that start and end with delimiters.
  */
  function foldInside(node) {
      let first = node.firstChild, last = node.lastChild;
      return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
  }

  /**
  A highlight style associates CSS styles with higlighting
  [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
  */
  class HighlightStyle {
      constructor(
      /**
      The tag styles used to create this highlight style.
      */
      specs, options) {
          this.specs = specs;
          let modSpec;
          function def(spec) {
              let cls = StyleModule.newName();
              (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
              return cls;
          }
          const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
          const scopeOpt = options.scope;
          this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
              : scopeOpt ? (type) => type == scopeOpt : undefined;
          this.style = tagHighlighter(specs.map(style => ({
              tag: style.tag,
              class: style.class || def(Object.assign({}, style, { tag: null }))
          })), {
              all,
          }).style;
          this.module = modSpec ? new StyleModule(modSpec) : null;
          this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
          return new HighlightStyle(specs, options || {});
      }
  }
  const highlighterFacet = /*@__PURE__*/Facet.define();
  const fallbackHighlighter = /*@__PURE__*/Facet.define({
      combine(values) { return values.length ? [values[0]] : null; }
  });
  function getHighlighters(state) {
      let main = state.facet(highlighterFacet);
      return main.length ? main : state.facet(fallbackHighlighter);
  }
  /**
  Wrap a highlighter in an editor extension that uses it to apply
  syntax highlighting to the editor content.

  When multiple (non-fallback) styles are provided, the styling
  applied is the union of the classes they emit.
  */
  function syntaxHighlighting(highlighter, options) {
      let ext = [treeHighlighter], themeType;
      if (highlighter instanceof HighlightStyle) {
          if (highlighter.module)
              ext.push(EditorView.styleModule.of(highlighter.module));
          themeType = highlighter.themeType;
      }
      if (themeType)
          ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
              return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
          }));
      else
          ext.push(highlighterFacet.of(highlighter));
      return ext;
  }
  class TreeHighlighter {
      constructor(view) {
          this.markCache = Object.create(null);
          this.tree = syntaxTree(view.state);
          this.decorations = this.buildDeco(view, getHighlighters(view.state));
          this.decoratedTo = view.viewport.to;
      }
      update(update) {
          let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
          let styleChange = highlighters != getHighlighters(update.startState);
          let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
          if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
              this.decorations = this.decorations.map(update.changes);
              this.decoratedTo = decoratedToMapped;
          }
          else if (tree != this.tree || update.viewportChanged || styleChange) {
              this.tree = tree;
              this.decorations = this.buildDeco(update.view, highlighters);
              this.decoratedTo = viewport.to;
          }
      }
      buildDeco(view, highlighters) {
          if (!highlighters || !this.tree.length)
              return Decoration.none;
          let builder = new RangeSetBuilder();
          for (let { from, to } of view.visibleRanges) {
              highlightTree(this.tree, highlighters, (from, to, style) => {
                  builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
              }, from, to);
          }
          return builder.finish();
      }
  }
  const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
      decorations: v => v.decorations
  }));

  const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
  const bracketMatchingConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              afterCursor: true,
              brackets: DefaultBrackets,
              maxScanDistance: DefaultScanDist,
              renderMatch: defaultRenderMatch
          });
      }
  });
  const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
      let decorations = [];
      let mark = match.matched ? matchingMark : nonmatchingMark;
      decorations.push(mark.range(match.start.from, match.start.to));
      if (match.end)
          decorations.push(mark.range(match.end.from, match.end.to));
      return decorations;
  }
  const bracketMatchingState = /*@__PURE__*/StateField.define({
      create() { return Decoration.none; },
      update(deco, tr) {
          if (!tr.docChanged && !tr.selection)
              return deco;
          let decorations = [];
          let config = tr.state.facet(bracketMatchingConfig);
          for (let range of tr.state.selection.ranges) {
              if (!range.empty)
                  continue;
              let match = matchBrackets(tr.state, range.head, -1, config)
                  || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                  || (config.afterCursor &&
                      (matchBrackets(tr.state, range.head, 1, config) ||
                          (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
              if (match)
                  decorations = decorations.concat(config.renderMatch(match, tr.state));
          }
          return Decoration.set(decorations, true);
      },
      provide: f => EditorView.decorations.from(f)
  });
  const bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme$3
  ];
  /**
  Create an extension that enables bracket matching. Whenever the
  cursor is next to a bracket, that bracket and the one it matches
  are highlighted. Or, when no matching bracket is found, another
  highlighting style is used to indicate this.
  */
  function bracketMatching(config = {}) {
      return [bracketMatchingConfig.of(config), bracketMatchingUnique];
  }
  /**
  When larger syntax nodes, such as HTML tags, are marked as
  opening/closing, it can be a bit messy to treat the whole node as
  a matchable bracket. This node prop allows you to define, for such
  a node, a ‘handle’—the part of the node that is highlighted, and
  that the cursor must be on to activate highlighting in the first
  place.
  */
  const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
  function matchingNodes(node, dir, brackets) {
      let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
      if (byProp)
          return byProp;
      if (node.name.length == 1) {
          let index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
              return [brackets[index + dir]];
      }
      return null;
  }
  function findHandle(node) {
      let hasHandle = node.type.prop(bracketMatchingHandle);
      return hasHandle ? hasHandle(node.node) : node;
  }
  /**
  Find the matching bracket for the token at `pos`, scanning
  direction `dir`. Only the `brackets` and `maxScanDistance`
  properties are used from `config`, if given. Returns null if no
  bracket was found at `pos`, or a match result otherwise.
  */
  function matchBrackets(state, pos, dir, config = {}) {
      let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
      let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
      for (let cur = node; cur; cur = cur.parent) {
          let matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to) {
              let handle = findHandle(cur);
              if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                  return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
          }
      }
      return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
      let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
      let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
      if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
          do {
              if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                  if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                      let endHandle = findHandle(cursor);
                      return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                  }
                  else if (matchingNodes(cursor.type, dir, brackets)) {
                      depth++;
                  }
                  else if (matchingNodes(cursor.type, -dir, brackets)) {
                      if (depth == 0) {
                          let endHandle = findHandle(cursor);
                          return {
                              start: firstToken,
                              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                              matched: false
                          };
                      }
                      depth--;
                  }
              }
          } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
      return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
      let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
      let bracket = brackets.indexOf(startCh);
      if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
          return null;
      let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
      let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
      for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
          let text = iter.value;
          if (dir < 0)
              distance += text.length;
          let basePos = pos + distance * dir;
          for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
              let found = brackets.indexOf(text[pos]);
              if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                  continue;
              if ((found % 2 == 0) == (dir > 0)) {
                  depth++;
              }
              else if (depth == 1) { // Closing
                  return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
              }
              else {
                  depth--;
              }
          }
          if (dir > 0)
              distance += text.length;
      }
      return iter.done ? { start: startToken, matched: false } : null;
  }
  const noTokens = /*@__PURE__*/Object.create(null);
  const typeArray = [NodeType.none];
  const warned = [];
  // Cache of node types by name and tags
  const byTag = /*@__PURE__*/Object.create(null);
  const defaultTable = /*@__PURE__*/Object.create(null);
  for (let [legacyName, name] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
  ])
      defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
  function warnForPart(part, msg) {
      if (warned.indexOf(part) > -1)
          return;
      warned.push(part);
      console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
      let tags$1$1 = [];
      for (let name of tagStr.split(" ")) {
          let found = [];
          for (let part of name.split(".")) {
              let value = (extra[part] || tags$1[part]);
              if (!value) {
                  warnForPart(part, `Unknown highlighting tag ${part}`);
              }
              else if (typeof value == "function") {
                  if (!found.length)
                      warnForPart(part, `Modifier ${part} used at start of tag`);
                  else
                      found = found.map(value);
              }
              else {
                  if (found.length)
                      warnForPart(part, `Tag ${part} used as modifier`);
                  else
                      found = Array.isArray(value) ? value : [value];
              }
          }
          for (let tag of found)
              tags$1$1.push(tag);
      }
      if (!tags$1$1.length)
          return 0;
      let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1$1.map(t => t.id);
      let known = byTag[key];
      if (known)
          return known.id;
      let type = byTag[key] = NodeType.define({
          id: typeArray.length,
          name,
          props: [styleTags({ [name]: tags$1$1 })]
      });
      typeArray.push(type);
      return type.id;
  }
  ({
      rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction$1.RTL }),
      ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction$1.LTR })});

  /**
  An instance of this is passed to completion source functions.
  */
  class CompletionContext {
      /**
      Create a new completion context. (Mostly useful for testing
      completion sources—in the editor, the extension will create
      these for you.)
      */
      constructor(
      /**
      The editor state that the completion happens in.
      */
      state, 
      /**
      The position at which the completion is happening.
      */
      pos, 
      /**
      Indicates whether completion was activated explicitly, or
      implicitly by typing. The usual way to respond to this is to
      only return completions when either there is part of a
      completable entity before the cursor, or `explicit` is true.
      */
      explicit, 
      /**
      The editor view. May be undefined if the context was created
      in a situation where there is no such view available, such as
      in synchronous updates via
      [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
      or when called by test code.
      */
      view) {
          this.state = state;
          this.pos = pos;
          this.explicit = explicit;
          this.view = view;
          /**
          @internal
          */
          this.abortListeners = [];
          /**
          @internal
          */
          this.abortOnDocChange = false;
      }
      /**
      Get the extent, content, and (if there is a token) type of the
      token before `this.pos`.
      */
      tokenBefore(types) {
          let token = syntaxTree(this.state).resolveInner(this.pos, -1);
          while (token && types.indexOf(token.name) < 0)
              token = token.parent;
          return token ? { from: token.from, to: this.pos,
              text: this.state.sliceDoc(token.from, this.pos),
              type: token.type } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
      matchBefore(expr) {
          let line = this.state.doc.lineAt(this.pos);
          let start = Math.max(line.from, this.pos - 250);
          let str = line.text.slice(start - line.from, this.pos - line.from);
          let found = str.search(ensureAnchor(expr, false));
          return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
      get aborted() { return this.abortListeners == null; }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
      addEventListener(type, listener, options) {
          if (type == "abort" && this.abortListeners) {
              this.abortListeners.push(listener);
              if (options && options.onDocChange)
                  this.abortOnDocChange = true;
          }
      }
  }
  function toSet(chars) {
      let flat = Object.keys(chars).join("");
      let words = /\w/.test(flat);
      if (words)
          flat = flat.replace(/\w/g, "");
      return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
      let first = Object.create(null), rest = Object.create(null);
      for (let { label } of options) {
          first[label[0]] = true;
          for (let i = 1; i < label.length; i++)
              rest[label[i]] = true;
      }
      let source = toSet(first) + toSet(rest) + "*$";
      return [new RegExp("^" + source), new RegExp(source)];
  }
  /**
  Given a a fixed array of options, return an autocompleter that
  completes them.
  */
  function completeFromList(list) {
      let options = list.map(o => typeof o == "string" ? { label: o } : o);
      let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
      return (context) => {
          let token = context.matchBefore(match);
          return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
      };
  }
  class Option {
      constructor(completion, source, match, score) {
          this.completion = completion;
          this.source = source;
          this.match = match;
          this.score = score;
      }
  }
  function cur(state) { return state.selection.main.from; }
  // Make sure the given regexp has a $ at its end and, if `start` is
  // true, a ^ at its start.
  function ensureAnchor(expr, start) {
      var _a;
      let { source } = expr;
      let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
      if (!addStart && !addEnd)
          return expr;
      return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
  }
  /**
  This annotation is added to transactions that are produced by
  picking a completion.
  */
  const pickedCompletion = /*@__PURE__*/Annotation.define();
  /**
  Helper function that returns a transaction spec which inserts a
  completion's text in the main selection range, and any other
  selection range that has the same text in front of it.
  */
  function insertCompletionText(state, text, from, to) {
      let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
      return Object.assign(Object.assign({}, state.changeByRange(range => {
          if (range != main && from != to &&
              state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
              return { range };
          let lines = state.toText(text);
          return {
              changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
              range: EditorSelection.cursor(range.from + fromOff + lines.length)
          };
      })), { scrollIntoView: true, userEvent: "input.complete" });
  }
  const SourceCache = /*@__PURE__*/new WeakMap();
  function asSource(source) {
      if (!Array.isArray(source))
          return source;
      let known = SourceCache.get(source);
      if (!known)
          SourceCache.set(source, known = completeFromList(source));
      return known;
  }
  const startCompletionEffect = /*@__PURE__*/StateEffect.define();
  const closeCompletionEffect = /*@__PURE__*/StateEffect.define();

  // A pattern matcher for fuzzy completion matching. Create an instance
  // once for a pattern, and then use that to match any number of
  // completions.
  class FuzzyMatcher {
      constructor(pattern) {
          this.pattern = pattern;
          this.chars = [];
          this.folded = [];
          // Buffers reused by calls to `match` to track matched character
          // positions.
          this.any = [];
          this.precise = [];
          this.byWord = [];
          this.score = 0;
          this.matched = [];
          for (let p = 0; p < pattern.length;) {
              let char = codePointAt(pattern, p), size = codePointSize(char);
              this.chars.push(char);
              let part = pattern.slice(p, p + size), upper = part.toUpperCase();
              this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
              p += size;
          }
          this.astral = pattern.length != this.chars.length;
      }
      ret(score, matched) {
          this.score = score;
          this.matched = matched;
          return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
      match(word) {
          if (this.pattern.length == 0)
              return this.ret(-100 /* Penalty.NotFull */, []);
          if (word.length < this.pattern.length)
              return null;
          let { chars, folded, any, precise, byWord } = this;
          // For single-character queries, only match when they occur right
          // at the start
          if (chars.length == 1) {
              let first = codePointAt(word, 0), firstSize = codePointSize(first);
              let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
              if (first == chars[0]) ;
              else if (first == folded[0])
                  score += -200 /* Penalty.CaseFold */;
              else
                  return null;
              return this.ret(score, [0, firstSize]);
          }
          let direct = word.indexOf(this.pattern);
          if (direct == 0)
              return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
          let len = chars.length, anyTo = 0;
          if (direct < 0) {
              for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                  let next = codePointAt(word, i);
                  if (next == chars[anyTo] || next == folded[anyTo])
                      any[anyTo++] = i;
                  i += codePointSize(next);
              }
              // No match, exit immediately
              if (anyTo < len)
                  return null;
          }
          // This tracks the extent of the precise (non-folded, not
          // necessarily adjacent) match
          let preciseTo = 0;
          // Tracks whether there is a match that hits only characters that
          // appear to be starting words. `byWordFolded` is set to true when
          // a case folded character is encountered in such a match
          let byWordTo = 0, byWordFolded = false;
          // If we've found a partial adjacent match, these track its state
          let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
          let hasLower = /[a-z]/.test(word), wordAdjacent = true;
          // Go over the option's text, scanning for the various kinds of matches
          for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
              let next = codePointAt(word, i);
              if (direct < 0) {
                  if (preciseTo < len && next == chars[preciseTo])
                      precise[preciseTo++] = i;
                  if (adjacentTo < len) {
                      if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                          if (adjacentTo == 0)
                              adjacentStart = i;
                          adjacentEnd = i + 1;
                          adjacentTo++;
                      }
                      else {
                          adjacentTo = 0;
                      }
                  }
              }
              let ch, type = next < 0xff
                  ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                  : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
              if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                  if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                      byWord[byWordTo++] = i;
                  else if (byWord.length)
                      wordAdjacent = false;
              }
              prevType = type;
              i += codePointSize(next);
          }
          if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
          if (adjacentTo == len && adjacentStart == 0)
              return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
          if (direct > -1)
              return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
          if (adjacentTo == len)
              return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
          if (byWordTo == len)
              return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                  (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
          return chars.length == 2 ? null
              : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
      }
      result(score, positions, word) {
          let result = [], i = 0;
          for (let pos of positions) {
              let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
              if (i && result[i - 1] == pos)
                  result[i - 1] = to;
              else {
                  result[i++] = pos;
                  result[i++] = to;
              }
          }
          return this.ret(score - word.length, result);
      }
  }
  class StrictMatcher {
      constructor(pattern) {
          this.pattern = pattern;
          this.matched = [];
          this.score = 0;
          this.folded = pattern.toLowerCase();
      }
      match(word) {
          if (word.length < this.pattern.length)
              return null;
          let start = word.slice(0, this.pattern.length);
          let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
          if (match == null)
              return null;
          this.matched = [0, start.length];
          this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
          return this;
      }
  }

  const completionConfig = /*@__PURE__*/Facet.define({
      combine(configs) {
          return combineConfig(configs, {
              activateOnTyping: true,
              activateOnCompletion: () => false,
              activateOnTypingDelay: 100,
              selectOnOpen: true,
              override: null,
              closeOnBlur: true,
              maxRenderedOptions: 100,
              defaultKeymap: true,
              tooltipClass: () => "",
              optionClass: () => "",
              aboveCursor: false,
              icons: true,
              addToOptions: [],
              positionInfo: defaultPositionInfo,
              filterStrict: false,
              compareCompletions: (a, b) => a.label.localeCompare(b.label),
              interactionDelay: 75,
              updateSyncTime: 100
          }, {
              defaultKeymap: (a, b) => a && b,
              closeOnBlur: (a, b) => a && b,
              icons: (a, b) => a && b,
              tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
              optionClass: (a, b) => c => joinClass(a(c), b(c)),
              addToOptions: (a, b) => a.concat(b),
              filterStrict: (a, b) => a || b,
          });
      }
  });
  function joinClass(a, b) {
      return a ? b ? a + " " + b : a : b;
  }
  function defaultPositionInfo(view, list, option, info, space, tooltip) {
      let rtl = view.textDirection == Direction$1.RTL, left = rtl, narrow = false;
      let side = "top", offset, maxWidth;
      let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
      let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
      if (left && spaceLeft < Math.min(infoWidth, spaceRight))
          left = false;
      else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
          left = true;
      if (infoWidth <= (left ? spaceLeft : spaceRight)) {
          offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
          maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
      }
      else {
          narrow = true;
          maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
          let spaceBelow = space.bottom - list.bottom;
          if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
              offset = option.bottom - list.top;
          }
          else { // Above it
              side = "bottom";
              offset = list.bottom - option.top;
          }
      }
      let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
      let scaleX = (list.right - list.left) / tooltip.offsetWidth;
      return {
          style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
          class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
      };
  }

  function optionContent(config) {
      let content = config.addToOptions.slice();
      if (config.icons)
          content.push({
              render(completion) {
                  let icon = document.createElement("div");
                  icon.classList.add("cm-completionIcon");
                  if (completion.type)
                      icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                  icon.setAttribute("aria-hidden", "true");
                  return icon;
              },
              position: 20
          });
      content.push({
          render(completion, _s, _v, match) {
              let labelElt = document.createElement("span");
              labelElt.className = "cm-completionLabel";
              let label = completion.displayLabel || completion.label, off = 0;
              for (let j = 0; j < match.length;) {
                  let from = match[j++], to = match[j++];
                  if (from > off)
                      labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                  let span = labelElt.appendChild(document.createElement("span"));
                  span.appendChild(document.createTextNode(label.slice(from, to)));
                  span.className = "cm-completionMatchedText";
                  off = to;
              }
              if (off < label.length)
                  labelElt.appendChild(document.createTextNode(label.slice(off)));
              return labelElt;
          },
          position: 50
      }, {
          render(completion) {
              if (!completion.detail)
                  return null;
              let detailElt = document.createElement("span");
              detailElt.className = "cm-completionDetail";
              detailElt.textContent = completion.detail;
              return detailElt;
          },
          position: 80
      });
      return content.sort((a, b) => a.position - b.position).map(a => a.render);
  }
  function rangeAroundSelected(total, selected, max) {
      if (total <= max)
          return { from: 0, to: total };
      if (selected < 0)
          selected = 0;
      if (selected <= (total >> 1)) {
          let off = Math.floor(selected / max);
          return { from: off * max, to: (off + 1) * max };
      }
      let off = Math.floor((total - selected) / max);
      return { from: total - (off + 1) * max, to: total - off * max };
  }
  class CompletionTooltip {
      constructor(view, stateField, applyCompletion) {
          this.view = view;
          this.stateField = stateField;
          this.applyCompletion = applyCompletion;
          this.info = null;
          this.infoDestroy = null;
          this.placeInfoReq = {
              read: () => this.measureInfo(),
              write: (pos) => this.placeInfo(pos),
              key: this
          };
          this.space = null;
          this.currentClass = "";
          let cState = view.state.field(stateField);
          let { options, selected } = cState.open;
          let config = view.state.facet(completionConfig);
          this.optionContent = optionContent(config);
          this.optionClass = config.optionClass;
          this.tooltipClass = config.tooltipClass;
          this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
          this.dom = document.createElement("div");
          this.dom.className = "cm-tooltip-autocomplete";
          this.updateTooltipClass(view.state);
          this.dom.addEventListener("mousedown", (e) => {
              let { options } = view.state.field(stateField).open;
              for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                  if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                      this.applyCompletion(view, options[+match[1]]);
                      e.preventDefault();
                      return;
                  }
              }
          });
          this.dom.addEventListener("focusout", (e) => {
              let state = view.state.field(this.stateField, false);
              if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
                  e.relatedTarget != view.contentDOM)
                  view.dispatch({ effects: closeCompletionEffect.of(null) });
          });
          this.showOptions(options, cState.id);
      }
      mount() { this.updateSel(); }
      showOptions(options, id) {
          if (this.list)
              this.list.remove();
          this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
          this.list.addEventListener("scroll", () => {
              if (this.info)
                  this.view.requestMeasure(this.placeInfoReq);
          });
      }
      update(update) {
          var _a;
          let cState = update.state.field(this.stateField);
          let prevState = update.startState.field(this.stateField);
          this.updateTooltipClass(update.state);
          if (cState != prevState) {
              let { options, selected, disabled } = cState.open;
              if (!prevState.open || prevState.open.options != options) {
                  this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
                  this.showOptions(options, cState.id);
              }
              this.updateSel();
              if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))
                  this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
          }
      }
      updateTooltipClass(state) {
          let cls = this.tooltipClass(state);
          if (cls != this.currentClass) {
              for (let c of this.currentClass.split(" "))
                  if (c)
                      this.dom.classList.remove(c);
              for (let c of cls.split(" "))
                  if (c)
                      this.dom.classList.add(c);
              this.currentClass = cls;
          }
      }
      positioned(space) {
          this.space = space;
          if (this.info)
              this.view.requestMeasure(this.placeInfoReq);
      }
      updateSel() {
          let cState = this.view.state.field(this.stateField), open = cState.open;
          if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
              this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
              this.showOptions(open.options, cState.id);
          }
          if (this.updateSelectedOption(open.selected)) {
              this.destroyInfo();
              let { completion } = open.options[open.selected];
              let { info } = completion;
              if (!info)
                  return;
              let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
              if (!infoResult)
                  return;
              if ("then" in infoResult) {
                  infoResult.then(obj => {
                      if (obj && this.view.state.field(this.stateField, false) == cState)
                          this.addInfoPane(obj, completion);
                  }).catch(e => logException(this.view.state, e, "completion info"));
              }
              else {
                  this.addInfoPane(infoResult, completion);
              }
          }
      }
      addInfoPane(content, completion) {
          this.destroyInfo();
          let wrap = this.info = document.createElement("div");
          wrap.className = "cm-tooltip cm-completionInfo";
          if (content.nodeType != null) {
              wrap.appendChild(content);
              this.infoDestroy = null;
          }
          else {
              let { dom, destroy } = content;
              wrap.appendChild(dom);
              this.infoDestroy = destroy || null;
          }
          this.dom.appendChild(wrap);
          this.view.requestMeasure(this.placeInfoReq);
      }
      updateSelectedOption(selected) {
          let set = null;
          for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
              if (opt.nodeName != "LI" || !opt.id) {
                  i--; // A section header
              }
              else if (i == selected) {
                  if (!opt.hasAttribute("aria-selected")) {
                      opt.setAttribute("aria-selected", "true");
                      set = opt;
                  }
              }
              else {
                  if (opt.hasAttribute("aria-selected"))
                      opt.removeAttribute("aria-selected");
              }
          }
          if (set)
              scrollIntoView(this.list, set);
          return set;
      }
      measureInfo() {
          let sel = this.dom.querySelector("[aria-selected]");
          if (!sel || !this.info)
              return null;
          let listRect = this.dom.getBoundingClientRect();
          let infoRect = this.info.getBoundingClientRect();
          let selRect = sel.getBoundingClientRect();
          let space = this.space;
          if (!space) {
              let docElt = this.dom.ownerDocument.documentElement;
              space = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
          }
          if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
              selRect.bottom < Math.max(space.top, listRect.top) + 10)
              return null;
          return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
      }
      placeInfo(pos) {
          if (this.info) {
              if (pos) {
                  if (pos.style)
                      this.info.style.cssText = pos.style;
                  this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
              }
              else {
                  this.info.style.cssText = "top: -1e6px";
              }
          }
      }
      createListBox(options, id, range) {
          const ul = document.createElement("ul");
          ul.id = id;
          ul.setAttribute("role", "listbox");
          ul.setAttribute("aria-expanded", "true");
          ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
          ul.addEventListener("mousedown", e => {
              // Prevent focus change when clicking the scrollbar
              if (e.target == ul)
                  e.preventDefault();
          });
          let curSection = null;
          for (let i = range.from; i < range.to; i++) {
              let { completion, match } = options[i], { section } = completion;
              if (section) {
                  let name = typeof section == "string" ? section : section.name;
                  if (name != curSection && (i > range.from || range.from == 0)) {
                      curSection = name;
                      if (typeof section != "string" && section.header) {
                          ul.appendChild(section.header(section));
                      }
                      else {
                          let header = ul.appendChild(document.createElement("completion-section"));
                          header.textContent = name;
                      }
                  }
              }
              const li = ul.appendChild(document.createElement("li"));
              li.id = id + "-" + i;
              li.setAttribute("role", "option");
              let cls = this.optionClass(completion);
              if (cls)
                  li.className = cls;
              for (let source of this.optionContent) {
                  let node = source(completion, this.view.state, this.view, match);
                  if (node)
                      li.appendChild(node);
              }
          }
          if (range.from)
              ul.classList.add("cm-completionListIncompleteTop");
          if (range.to < options.length)
              ul.classList.add("cm-completionListIncompleteBottom");
          return ul;
      }
      destroyInfo() {
          if (this.info) {
              if (this.infoDestroy)
                  this.infoDestroy();
              this.info.remove();
              this.info = null;
          }
      }
      destroy() {
          this.destroyInfo();
      }
  }
  function completionTooltip(stateField, applyCompletion) {
      return (view) => new CompletionTooltip(view, stateField, applyCompletion);
  }
  function scrollIntoView(container, element) {
      let parent = container.getBoundingClientRect();
      let self = element.getBoundingClientRect();
      let scaleY = parent.height / container.offsetHeight;
      if (self.top < parent.top)
          container.scrollTop -= (parent.top - self.top) / scaleY;
      else if (self.bottom > parent.bottom)
          container.scrollTop += (self.bottom - parent.bottom) / scaleY;
  }

  // Used to pick a preferred option when two options with the same
  // label occur in the result.
  function score(option) {
      return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
          (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
      let options = [];
      let sections = null;
      let addOption = (option) => {
          options.push(option);
          let { section } = option.completion;
          if (section) {
              if (!sections)
                  sections = [];
              let name = typeof section == "string" ? section : section.name;
              if (!sections.some(s => s.name == name))
                  sections.push(typeof section == "string" ? { name } : section);
          }
      };
      let conf = state.facet(completionConfig);
      for (let a of active)
          if (a.hasResult()) {
              let getMatch = a.result.getMatch;
              if (a.result.filter === false) {
                  for (let option of a.result.options) {
                      addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
                  }
              }
              else {
                  let pattern = state.sliceDoc(a.from, a.to), match;
                  let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
                  for (let option of a.result.options)
                      if (match = matcher.match(option.label)) {
                          let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
                          addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
                      }
              }
          }
      if (sections) {
          let sectionOrder = Object.create(null), pos = 0;
          let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
          for (let s of sections.sort(cmp)) {
              pos -= 1e5;
              sectionOrder[s.name] = pos;
          }
          for (let option of options) {
              let { section } = option.completion;
              if (section)
                  option.score += sectionOrder[typeof section == "string" ? section : section.name];
          }
      }
      let result = [], prev = null;
      let compare = conf.compareCompletions;
      for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
          let cur = opt.completion;
          if (!prev || prev.label != cur.label || prev.detail != cur.detail ||
              (prev.type != null && cur.type != null && prev.type != cur.type) ||
              prev.apply != cur.apply || prev.boost != cur.boost)
              result.push(opt);
          else if (score(opt.completion) > score(prev))
              result[result.length - 1] = opt;
          prev = opt.completion;
      }
      return result;
  }
  class CompletionDialog {
      constructor(options, attrs, tooltip, timestamp, selected, disabled) {
          this.options = options;
          this.attrs = attrs;
          this.tooltip = tooltip;
          this.timestamp = timestamp;
          this.selected = selected;
          this.disabled = disabled;
      }
      setSelected(selected, id) {
          return selected == this.selected || selected >= this.options.length ? this
              : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
      static build(active, state, id, prev, conf, didSetActive) {
          if (prev && !didSetActive && active.some(s => s.isPending))
              return prev.setDisabled();
          let options = sortOptions(active, state);
          if (!options.length)
              return prev && active.some(a => a.isPending) ? prev.setDisabled() : null;
          let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
          if (prev && prev.selected != selected && prev.selected != -1) {
              let selectedValue = prev.options[prev.selected].completion;
              for (let i = 0; i < options.length; i++)
                  if (options[i].completion == selectedValue) {
                      selected = i;
                      break;
                  }
          }
          return new CompletionDialog(options, makeAttrs(id, selected), {
              pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
              create: createTooltip,
              above: conf.aboveCursor,
          }, prev ? prev.timestamp : Date.now(), selected, false);
      }
      map(changes) {
          return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
      }
      setDisabled() {
          return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
  }
  class CompletionState {
      constructor(active, id, open) {
          this.active = active;
          this.id = id;
          this.open = open;
      }
      static start() {
          return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
      update(tr) {
          let { state } = tr, conf = state.facet(completionConfig);
          let sources = conf.override ||
              state.languageDataAt("autocomplete", cur(state)).map(asSource);
          let active = sources.map(source => {
              let value = this.active.find(s => s.source == source) ||
                  new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
              return value.update(tr, conf);
          });
          if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
              active = this.active;
          let open = this.open, didSet = tr.effects.some(e => e.is(setActiveEffect));
          if (open && tr.docChanged)
              open = open.map(tr.changes);
          if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
              !sameResults(active, this.active) || didSet)
              open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
          else if (open && open.disabled && !active.some(a => a.isPending))
              open = null;
          if (!open && active.every(a => !a.isPending) && active.some(a => a.hasResult()))
              active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
          for (let effect of tr.effects)
              if (effect.is(setSelectedEffect))
                  open = open && open.setSelected(effect.value, this.id);
          return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
      get tooltip() { return this.open ? this.open.tooltip : null; }
      get attrs() { return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs; }
  }
  function sameResults(a, b) {
      if (a == b)
          return true;
      for (let iA = 0, iB = 0;;) {
          while (iA < a.length && !a[iA].hasResult())
              iA++;
          while (iB < b.length && !b[iB].hasResult())
              iB++;
          let endA = iA == a.length, endB = iB == b.length;
          if (endA || endB)
              return endA == endB;
          if (a[iA++].result != b[iB++].result)
              return false;
      }
  }
  const baseAttrs = {
      "aria-autocomplete": "list"
  };
  const noAttrs = {};
  function makeAttrs(id, selected) {
      let result = {
          "aria-autocomplete": "list",
          "aria-haspopup": "listbox",
          "aria-controls": id
      };
      if (selected > -1)
          result["aria-activedescendant"] = id + "-" + selected;
      return result;
  }
  const none$1 = [];
  function getUpdateType(tr, conf) {
      if (tr.isUserEvent("input.complete")) {
          let completion = tr.annotation(pickedCompletion);
          if (completion && conf.activateOnCompletion(completion))
              return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
      }
      let typing = tr.isUserEvent("input.type");
      return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */
          : typing ? 1 /* UpdateType.Typing */
              : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */
                  : tr.selection ? 8 /* UpdateType.Reset */
                      : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
  }
  class ActiveSource {
      constructor(source, state, explicit = false) {
          this.source = source;
          this.state = state;
          this.explicit = explicit;
      }
      hasResult() { return false; }
      get isPending() { return this.state == 1 /* State.Pending */; }
      update(tr, conf) {
          let type = getUpdateType(tr, conf), value = this;
          if ((type & 8 /* UpdateType.Reset */) || (type & 16 /* UpdateType.ResetIfTouching */) && this.touches(tr))
              value = new ActiveSource(value.source, 0 /* State.Inactive */);
          if ((type & 4 /* UpdateType.Activate */) && value.state == 0 /* State.Inactive */)
              value = new ActiveSource(this.source, 1 /* State.Pending */);
          value = value.updateFor(tr, type);
          for (let effect of tr.effects) {
              if (effect.is(startCompletionEffect))
                  value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);
              else if (effect.is(closeCompletionEffect))
                  value = new ActiveSource(value.source, 0 /* State.Inactive */);
              else if (effect.is(setActiveEffect))
                  for (let active of effect.value)
                      if (active.source == value.source)
                          value = active;
          }
          return value;
      }
      updateFor(tr, type) { return this.map(tr.changes); }
      map(changes) { return this; }
      touches(tr) {
          return tr.changes.touchesRange(cur(tr.state));
      }
  }
  class ActiveResult extends ActiveSource {
      constructor(source, explicit, limit, result, from, to) {
          super(source, 3 /* State.Result */, explicit);
          this.limit = limit;
          this.result = result;
          this.from = from;
          this.to = to;
      }
      hasResult() { return true; }
      updateFor(tr, type) {
          var _a;
          if (!(type & 3 /* UpdateType.SimpleInteraction */))
              return this.map(tr.changes);
          let result = this.result;
          if (result.map && !tr.changes.empty)
              result = result.map(result, tr.changes);
          let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
          let pos = cur(tr.state);
          if (pos > to || !result ||
              (type & 2 /* UpdateType.Backspacing */) && (cur(tr.startState) == this.from || pos < this.limit))
              return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
          let limit = tr.changes.mapPos(this.limit);
          if (checkValid(result.validFor, tr.state, from, to))
              return new ActiveResult(this.source, this.explicit, limit, result, from, to);
          if (result.update &&
              (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
              return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
          return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
      }
      map(mapping) {
          if (mapping.empty)
              return this;
          let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
          if (!result)
              return new ActiveSource(this.source, 0 /* State.Inactive */);
          return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
      touches(tr) {
          return tr.changes.touchesRange(this.from, this.to);
      }
  }
  function checkValid(validFor, state, from, to) {
      if (!validFor)
          return false;
      let text = state.sliceDoc(from, to);
      return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
  }
  const setActiveEffect = /*@__PURE__*/StateEffect.define({
      map(sources, mapping) { return sources.map(s => s.map(mapping)); }
  });
  const setSelectedEffect = /*@__PURE__*/StateEffect.define();
  const completionState = /*@__PURE__*/StateField.define({
      create() { return CompletionState.start(); },
      update(value, tr) { return value.update(tr); },
      provide: f => [
          showTooltip.from(f, val => val.tooltip),
          EditorView.contentAttributes.from(f, state => state.attrs)
      ]
  });
  function applyCompletion(view, option) {
      const apply = option.completion.apply || option.completion.label;
      let result = view.state.field(completionState).active.find(a => a.source == option.source);
      if (!(result instanceof ActiveResult))
          return false;
      if (typeof apply == "string")
          view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
      else
          apply(view, option.completion, result.from, result.to);
      return true;
  }
  const createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

  /**
  Returns a command that moves the completion selection forward or
  backward by the given amount.
  */
  function moveCompletionSelection(forward, by = "option") {
      return (view) => {
          let cState = view.state.field(completionState, false);
          if (!cState || !cState.open || cState.open.disabled ||
              Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
              return false;
          let step = 1, tooltip;
          if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
              step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                  tooltip.dom.querySelector("li").offsetHeight) - 1);
          let { length } = cState.open.options;
          let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
          if (selected < 0)
              selected = by == "page" ? 0 : length - 1;
          else if (selected >= length)
              selected = by == "page" ? length - 1 : 0;
          view.dispatch({ effects: setSelectedEffect.of(selected) });
          return true;
      };
  }
  /**
  Accept the current completion.
  */
  const acceptCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||
          Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
          return false;
      return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  /**
  Explicitly start autocompletion.
  */
  const startCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState)
          return false;
      view.dispatch({ effects: startCompletionEffect.of(true) });
      return true;
  };
  /**
  Close the currently active completion.
  */
  const closeCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
          return false;
      view.dispatch({ effects: closeCompletionEffect.of(null) });
      return true;
  };
  class RunningQuery {
      constructor(active, context) {
          this.active = active;
          this.context = context;
          this.time = Date.now();
          this.updates = [];
          // Note that 'undefined' means 'not done yet', whereas 'null' means
          // 'query returned null'.
          this.done = undefined;
      }
  }
  const MaxUpdateCount = 50, MinAbortTime = 1000;
  const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.debounceUpdate = -1;
          this.running = [];
          this.debounceAccept = -1;
          this.pendingStart = false;
          this.composing = 0 /* CompositionState.None */;
          for (let active of view.state.field(completionState).active)
              if (active.isPending)
                  this.startQuery(active);
      }
      update(update) {
          let cState = update.state.field(completionState);
          let conf = update.state.facet(completionConfig);
          if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
              return;
          let doesReset = update.transactions.some(tr => {
              let type = getUpdateType(tr, conf);
              return (type & 8 /* UpdateType.Reset */) || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
          });
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (doesReset ||
                  query.context.abortOnDocChange && update.docChanged ||
                  query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                  for (let handler of query.context.abortListeners) {
                      try {
                          handler();
                      }
                      catch (e) {
                          logException(this.view.state, e);
                      }
                  }
                  query.context.abortListeners = null;
                  this.running.splice(i--, 1);
              }
              else {
                  query.updates.push(...update.transactions);
              }
          }
          if (this.debounceUpdate > -1)
              clearTimeout(this.debounceUpdate);
          if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect))))
              this.pendingStart = true;
          let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
          this.debounceUpdate = cState.active.some(a => a.isPending && !this.running.some(q => q.active.source == a.source))
              ? setTimeout(() => this.startUpdate(), delay) : -1;
          if (this.composing != 0 /* CompositionState.None */)
              for (let tr of update.transactions) {
                  if (tr.isUserEvent("input.type"))
                      this.composing = 2 /* CompositionState.Changed */;
                  else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                      this.composing = 3 /* CompositionState.ChangedAndMoved */;
              }
      }
      startUpdate() {
          this.debounceUpdate = -1;
          this.pendingStart = false;
          let { state } = this.view, cState = state.field(completionState);
          for (let active of cState.active) {
              if (active.isPending && !this.running.some(r => r.active.source == active.source))
                  this.startQuery(active);
          }
          if (this.running.length && cState.open && cState.open.disabled)
              this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      startQuery(active) {
          let { state } = this.view, pos = cur(state);
          let context = new CompletionContext(state, pos, active.explicit, this.view);
          let pending = new RunningQuery(active, context);
          this.running.push(pending);
          Promise.resolve(active.source(context)).then(result => {
              if (!pending.context.aborted) {
                  pending.done = result || null;
                  this.scheduleAccept();
              }
          }, err => {
              this.view.dispatch({ effects: closeCompletionEffect.of(null) });
              logException(this.view.state, err);
          });
      }
      scheduleAccept() {
          if (this.running.every(q => q.done !== undefined))
              this.accept();
          else if (this.debounceAccept < 0)
              this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
          var _a;
          if (this.debounceAccept > -1)
              clearTimeout(this.debounceAccept);
          this.debounceAccept = -1;
          let updated = [];
          let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
          for (let i = 0; i < this.running.length; i++) {
              let query = this.running[i];
              if (query.done === undefined)
                  continue;
              this.running.splice(i--, 1);
              if (query.done) {
                  let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
                  let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
                  let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
                  // Replay the transactions that happened since the start of
                  // the request and see if that preserves the result
                  for (let tr of query.updates)
                      active = active.update(tr, conf);
                  if (active.hasResult()) {
                      updated.push(active);
                      continue;
                  }
              }
              let current = cState.active.find(a => a.source == query.active.source);
              if (current && current.isPending) {
                  if (query.done == null) {
                      // Explicitly failed. Should clear the pending status if it
                      // hasn't been re-set in the meantime.
                      let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                      for (let tr of query.updates)
                          active = active.update(tr, conf);
                      if (!active.isPending)
                          updated.push(active);
                  }
                  else {
                      // Cleared by subsequent transactions. Restart.
                      this.startQuery(current);
                  }
              }
          }
          if (updated.length || cState.open && cState.open.disabled)
              this.view.dispatch({ effects: setActiveEffect.of(updated) });
      }
  }, {
      eventHandlers: {
          blur(event) {
              let state = this.view.state.field(completionState, false);
              if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
                  let dialog = state.open && getTooltip(this.view, state.open.tooltip);
                  if (!dialog || !dialog.dom.contains(event.relatedTarget))
                      setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
              }
          },
          compositionstart() {
              this.composing = 1 /* CompositionState.Started */;
          },
          compositionend() {
              if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                  // Safari fires compositionend events synchronously, possibly
                  // from inside an update, so dispatch asynchronously to avoid reentrancy
                  setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
              }
              this.composing = 0 /* CompositionState.None */;
          }
      }
  });
  const windows = typeof navigator == "object" && /*@__PURE__*//Win/.test(navigator.platform);
  const commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
      keydown(event, view) {
          let field = view.state.field(completionState, false);
          if (!field || !field.open || field.open.disabled || field.open.selected < 0 ||
              event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
              return false;
          let option = field.open.options[field.open.selected];
          let result = field.active.find(a => a.source == option.source);
          let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
          if (commitChars && commitChars.indexOf(event.key) > -1)
              applyCompletion(view, option);
          return false;
      }
  }));

  const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
              fontFamily: "monospace",
              whiteSpace: "nowrap",
              overflow: "hidden auto",
              maxWidth_fallback: "700px",
              maxWidth: "min(700px, 95vw)",
              minWidth: "250px",
              maxHeight: "10em",
              height: "100%",
              listStyle: "none",
              margin: 0,
              padding: 0,
              "& > li, & > completion-section": {
                  padding: "1px 3px",
                  lineHeight: 1.2
              },
              "& > li": {
                  overflowX: "hidden",
                  textOverflow: "ellipsis",
                  cursor: "pointer"
              },
              "& > completion-section": {
                  display: "list-item",
                  borderBottom: "1px solid silver",
                  paddingLeft: "0.5em",
                  opacity: 0.7
              }
          }
      },
      "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#17c",
          color: "white",
      },
      "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#777",
      },
      "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#347",
          color: "white",
      },
      "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#444",
      },
      ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"···"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
      },
      ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: `${400 /* Info.Width */}px`,
          boxSizing: "border-box",
          whiteSpace: "pre-line"
      },
      ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
      ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
      ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
      ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
      "&light .cm-snippetField": { backgroundColor: "#00000022" },
      "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
      ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          display: "inline-block",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
      },
      ".cm-completionMatchedText": {
          textDecoration: "underline"
      },
      ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
      },
      ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6",
          boxSizing: "content-box"
      },
      ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": { content: "'ƒ'" }
      },
      ".cm-completionIcon-class": {
          "&:after": { content: "'○'" }
      },
      ".cm-completionIcon-interface": {
          "&:after": { content: "'◌'" }
      },
      ".cm-completionIcon-variable": {
          "&:after": { content: "'𝑥'" }
      },
      ".cm-completionIcon-constant": {
          "&:after": { content: "'𝐶'" }
      },
      ".cm-completionIcon-type": {
          "&:after": { content: "'𝑡'" }
      },
      ".cm-completionIcon-enum": {
          "&:after": { content: "'∪'" }
      },
      ".cm-completionIcon-property": {
          "&:after": { content: "'□'" }
      },
      ".cm-completionIcon-keyword": {
          "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
      },
      ".cm-completionIcon-namespace": {
          "&:after": { content: "'▢'" }
      },
      ".cm-completionIcon-text": {
          "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
      }
  });

  class FieldPos {
      constructor(field, line, from, to) {
          this.field = field;
          this.line = line;
          this.from = from;
          this.to = to;
      }
  }
  class FieldRange {
      constructor(field, from, to) {
          this.field = field;
          this.from = from;
          this.to = to;
      }
      map(changes) {
          let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
          let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
          return from == null || to == null ? null : new FieldRange(this.field, from, to);
      }
  }
  class Snippet {
      constructor(lines, fieldPositions) {
          this.lines = lines;
          this.fieldPositions = fieldPositions;
      }
      instantiate(state, pos) {
          let text = [], lineStart = [pos];
          let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
          for (let line of this.lines) {
              if (text.length) {
                  let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                  for (let i = 0; i < tabs; i++)
                      indent += state.facet(indentUnit);
                  lineStart.push(pos + indent.length - tabs);
                  line = indent + line.slice(tabs);
              }
              text.push(line);
              pos += line.length + 1;
          }
          let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
          return { text, ranges };
      }
      static parse(template) {
          let fields = [];
          let lines = [], positions = [], m;
          for (let line of template.split(/\r\n?|\n/)) {
              while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
                  let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
                  let name = rawName.replace(/\\[{}]/g, m => m[1]);
                  for (let i = 0; i < fields.length; i++) {
                      if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                          found = i;
                  }
                  if (found < 0) {
                      let i = 0;
                      while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                          i++;
                      fields.splice(i, 0, { seq, name });
                      found = i;
                      for (let pos of positions)
                          if (pos.field >= found)
                              pos.field++;
                  }
                  positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                  line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
              }
              line = line.replace(/\\([{}])/g, (_, brace, index) => {
                  for (let pos of positions)
                      if (pos.line == lines.length && pos.from > index) {
                          pos.from--;
                          pos.to--;
                      }
                  return brace;
              });
              lines.push(line);
          }
          return new Snippet(lines, positions);
      }
  }
  let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
          toDOM() {
              let span = document.createElement("span");
              span.className = "cm-snippetFieldPosition";
              return span;
          }
          ignoreEvent() { return false; }
      } });
  let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
  class ActiveSnippet {
      constructor(ranges, active) {
          this.ranges = ranges;
          this.active = active;
          this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
      }
      map(changes) {
          let ranges = [];
          for (let r of this.ranges) {
              let mapped = r.map(changes);
              if (!mapped)
                  return null;
              ranges.push(mapped);
          }
          return new ActiveSnippet(ranges, this.active);
      }
      selectionInsideField(sel) {
          return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
      }
  }
  const setActive = /*@__PURE__*/StateEffect.define({
      map(value, changes) { return value && value.map(changes); }
  });
  const moveToField = /*@__PURE__*/StateEffect.define();
  const snippetState = /*@__PURE__*/StateField.define({
      create() { return null; },
      update(value, tr) {
          for (let effect of tr.effects) {
              if (effect.is(setActive))
                  return effect.value;
              if (effect.is(moveToField) && value)
                  return new ActiveSnippet(value.ranges, effect.value);
          }
          if (value && tr.docChanged)
              value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection))
              value = null;
          return value;
      },
      provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
      return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
  }
  /**
  Convert a snippet template to a function that can
  [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
  using syntax like this:

      "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

  Each `${}` placeholder (you may also use `#{}`) indicates a field
  that the user can fill in. Its name, if any, will be the default
  content for the field.

  When the snippet is activated by calling the returned function,
  the code is inserted at the given position. Newlines in the
  template are indented by the indentation of the start line, plus
  one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
  the newline.

  On activation, (all instances of) the first field are selected.
  The user can move between fields with Tab and Shift-Tab as long as
  the fields are active. Moving to the last field or moving the
  cursor out of the current field deactivates the fields.

  The order of fields defaults to textual order, but you can add
  numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
  a custom order.

  To include a literal `{` or `}` in your template, put a backslash
  in front of it. This will be removed and the brace will not be
  interpreted as indicating a placeholder.
  */
  function snippet(template) {
      let snippet = Snippet.parse(template);
      return (editor, completion, from, to) => {
          let { text, ranges } = snippet.instantiate(editor.state, from);
          let { main } = editor.state.selection;
          let spec = {
              changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
              scrollIntoView: true,
              annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
          };
          if (ranges.length)
              spec.selection = fieldSelection(ranges, 0);
          if (ranges.some(r => r.field > 0)) {
              let active = new ActiveSnippet(ranges, 0);
              let effects = spec.effects = [setActive.of(active)];
              if (editor.state.field(snippetState, false) === undefined)
                  effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$2]));
          }
          editor.dispatch(editor.state.update(spec));
      };
  }
  function moveField(dir) {
      return ({ state, dispatch }) => {
          let active = state.field(snippetState, false);
          if (!active || dir < 0 && active.active == 0)
              return false;
          let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
          dispatch(state.update({
              selection: fieldSelection(active.ranges, next),
              effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
              scrollIntoView: true
          }));
          return true;
      };
  }
  /**
  A command that clears the active snippet, if any.
  */
  const clearSnippet = ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active)
          return false;
      dispatch(state.update({ effects: setActive.of(null) }));
      return true;
  };
  /**
  Move to the next snippet field, if available.
  */
  const nextSnippetField = /*@__PURE__*/moveField(1);
  /**
  Move to the previous snippet field, if available.
  */
  const prevSnippetField = /*@__PURE__*/moveField(-1);
  const defaultSnippetKeymap = [
      { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
      { key: "Escape", run: clearSnippet }
  ];
  /**
  A facet that can be used to configure the key bindings used by
  snippets. The default binds Tab to
  [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
  [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
  to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
  */
  const snippetKeymap = /*@__PURE__*/Facet.define({
      combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
  });
  const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
  /**
  Create a completion from a snippet. Returns an object with the
  properties from `completion`, plus an `apply` function that
  applies the snippet.
  */
  function snippetCompletion(template, completion) {
      return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
      mousedown(event, view) {
          let active = view.state.field(snippetState, false), pos;
          if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
              return false;
          let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
          if (!match || match.field == active.active)
              return false;
          view.dispatch({
              selection: fieldSelection(active.ranges, match.field),
              effects: setActive.of(active.ranges.some(r => r.field > match.field)
                  ? new ActiveSnippet(active.ranges, match.field) : null),
              scrollIntoView: true
          });
          return true;
      }
  });

  const defaults = {
      brackets: ["(", "[", "{", "'", '"'],
      before: ")]}:;>",
      stringPrefixes: []
  };
  const closeBracketEffect = /*@__PURE__*/StateEffect.define({
      map(value, mapping) {
          let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
          return mapped == null ? undefined : mapped;
      }
  });
  const closedBracket = /*@__PURE__*/new class extends RangeValue {
  };
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  const bracketState = /*@__PURE__*/StateField.define({
      create() { return RangeSet.empty; },
      update(value, tr) {
          value = value.map(tr.changes);
          if (tr.selection) {
              let line = tr.state.doc.lineAt(tr.selection.main.head);
              value = value.update({ filter: from => from >= line.from && from <= line.to });
          }
          for (let effect of tr.effects)
              if (effect.is(closeBracketEffect))
                  value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
          return value;
      }
  });
  /**
  Extension to enable bracket-closing behavior. When a closeable
  bracket is typed, its closing bracket is immediately inserted
  after the cursor. When closing a bracket directly in front of a
  closing bracket inserted by the extension, the cursor moves over
  that bracket.
  */
  function closeBrackets() {
      return [inputHandler, bracketState];
  }
  const definedClosing = "()[]{}<>«»»«［］｛｝";
  function closing(ch) {
      for (let i = 0; i < definedClosing.length; i += 2)
          if (definedClosing.charCodeAt(i) == ch)
              return definedClosing.charAt(i + 1);
      return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
      return state.languageDataAt("closeBrackets", pos)[0] || defaults;
  }
  const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
  const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
      if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
          return false;
      let sel = view.state.selection.main;
      if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
          from != sel.from || to != sel.to)
          return false;
      let tr = insertBracket(view.state, insert);
      if (!tr)
          return false;
      view.dispatch(tr);
      return true;
  });
  /**
  Implements the extension's behavior on text insertion. If the
  given string counts as a bracket in the language around the
  selection, and replacing the selection with it requires custom
  behavior (inserting a closing version or skipping past a
  previously-closed bracket), this function returns a transaction
  representing that custom behavior. (You only need this if you want
  to programmatically insert brackets—the
  [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
  take care of running this for user input.)
  */
  function insertBracket(state, bracket) {
      let conf = config(state, state.selection.main.head);
      let tokens = conf.brackets || defaults.brackets;
      for (let tok of tokens) {
          let closed = closing(codePointAt(tok, 0));
          if (bracket == tok)
              return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                  : handleOpen(state, tok, closed, conf.before || defaults.before);
          if (bracket == closed && closedBracketAt(state, state.selection.main.from))
              return handleClose(state, tok, closed);
      }
      return null;
  }
  function closedBracketAt(state, pos) {
      let found = false;
      state.field(bracketState).between(0, state.doc.length, from => {
          if (from == pos)
              found = true;
      });
      return found;
  }
  function nextChar(doc, pos) {
      let next = doc.sliceString(pos, pos + 2);
      return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function handleOpen(state, open, close, closeBefore) {
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                  effects: closeBracketEffect.of(range.to + open.length),
                  range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
          let next = nextChar(state.doc, range.head);
          if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
              return { changes: { insert: open + close, from: range.head },
                  effects: closeBracketEffect.of(range.head + open.length),
                  range: EditorSelection.cursor(range.head + open.length) };
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function handleClose(state, _open, close) {
      let dont = null, changes = state.changeByRange(range => {
          if (range.empty && nextChar(state.doc, range.head) == close)
              return { changes: { from: range.head, to: range.head + close.length, insert: close },
                  range: EditorSelection.cursor(range.head + close.length) };
          return dont = { range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  // Handles cases where the open and close token are the same, and
  // possibly triple quotes (as in `"""abc"""`-style quoting).
  function handleSame(state, token, allowTriple, config) {
      let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
      let dont = null, changes = state.changeByRange(range => {
          if (!range.empty)
              return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                  effects: closeBracketEffect.of(range.to + token.length),
                  range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
          let pos = range.head, next = nextChar(state.doc, pos), start;
          if (next == token) {
              if (nodeStart(state, pos)) {
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
              }
              else if (closedBracketAt(state, pos)) {
                  let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                  let content = isTriple ? token + token + token : token;
                  return { changes: { from: pos, to: pos + content.length, insert: content },
                      range: EditorSelection.cursor(pos + content.length) };
              }
          }
          else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
              (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
              nodeStart(state, start)) {
              return { changes: { insert: token + token + token + token, from: pos },
                  effects: closeBracketEffect.of(pos + token.length),
                  range: EditorSelection.cursor(pos + token.length) };
          }
          else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
              if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                  return { changes: { insert: token + token, from: pos },
                      effects: closeBracketEffect.of(pos + token.length),
                      range: EditorSelection.cursor(pos + token.length) };
          }
          return { range: dont = range };
      });
      return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
      });
  }
  function nodeStart(state, pos) {
      let tree = syntaxTree(state).resolveInner(pos + 1);
      return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
      let node = syntaxTree(state).resolveInner(pos, -1);
      let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
      for (let i = 0; i < 5; i++) {
          let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
          let quotePos = start.indexOf(quoteToken);
          if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
              let first = node.firstChild;
              while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                  if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                      return false;
                  first = first.firstChild;
              }
              return true;
          }
          let parent = node.to == pos && node.parent;
          if (!parent)
              break;
          node = parent;
      }
      return false;
  }
  function canStartStringAt(state, pos, prefixes) {
      let charCat = state.charCategorizer(pos);
      if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
          return pos;
      for (let prefix of prefixes) {
          let start = pos - prefix.length;
          if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
              return start;
      }
      return -1;
  }

  /**
  Returns an extension that enables autocompletion.
  */
  function autocompletion$1(config = {}) {
      return [
          commitCharacters,
          completionState,
          completionConfig.of(config),
          completionPlugin,
          completionKeymapExt,
          baseTheme$2
      ];
  }
  /**
  Basic keybindings for autocompletion.

   - Ctrl-Space (and Alt-\` on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
   - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
   - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
   - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
   - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
  */
  const completionKeymap = [
      { key: "Ctrl-Space", run: startCompletion },
      { mac: "Alt-`", run: startCompletion },
      { key: "Escape", run: closeCompletion },
      { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
      { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
      { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
      { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
      { key: "Enter", run: acceptCompletion }
  ];
  const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

  /**
  Comment or uncomment the current selection. Will use line comments
  if available, otherwise falling back to block comments.
  */
  const toggleComment = target => {
      let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
      return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f, option) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let tr = f(option, state);
          if (!tr)
              return false;
          dispatch(state.update(tr));
          return true;
      };
  }
  /**
  Comment or uncomment the current selection using line comments.
  The line comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the current selection using block comments.
  The block comment syntax is taken from the
  [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
  data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
  */
  const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
  /**
  Comment or uncomment the lines around the current selection using
  block comments.
  */
  const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
  function getConfig(state, pos) {
      let data = state.languageDataAt("commentTokens", pos);
      return data.length ? data[0] : {};
  }
  const SearchMargin = 50;
  /**
  Determines if the given range is block-commented in the given
  state.
  */
  function findBlockComment(state, { open, close }, from, to) {
      let textBefore = state.sliceDoc(from - SearchMargin, from);
      let textAfter = state.sliceDoc(to, to + SearchMargin);
      let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
      let beforeOff = textBefore.length - spaceBefore;
      if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
          textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
          return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
              close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
      }
      let startText, endText;
      if (to - from <= 2 * SearchMargin) {
          startText = endText = state.sliceDoc(from, to);
      }
      else {
          startText = state.sliceDoc(from, from + SearchMargin);
          endText = state.sliceDoc(to - SearchMargin, to);
      }
      let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
      let endOff = endText.length - endSpace - close.length;
      if (startText.slice(startSpace, startSpace + open.length) == open &&
          endText.slice(endOff, endOff + close.length) == close) {
          return { open: { pos: from + startSpace + open.length,
                  margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
              close: { pos: to - endSpace - close.length,
                  margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
      }
      return null;
  }
  function selectedLineRanges(state) {
      let ranges = [];
      for (let r of state.selection.ranges) {
          let fromLine = state.doc.lineAt(r.from);
          let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
          if (toLine.from > fromLine.from && toLine.from == r.to)
              toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
          let last = ranges.length - 1;
          if (last >= 0 && ranges[last].to > fromLine.from)
              ranges[last].to = toLine.to;
          else
              ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
      }
      return ranges;
  }
  // Performs toggle, comment and uncomment of block comments in
  // languages that support them.
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
      let tokens = ranges.map(r => getConfig(state, r.from).block);
      if (!tokens.every(c => c))
          return null;
      let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
      if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
          return { changes: state.changes(ranges.map((range, i) => {
                  if (comments[i])
                      return [];
                  return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
              })) };
      }
      else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
          let changes = [];
          for (let i = 0, comment; i < comments.length; i++)
              if (comment = comments[i]) {
                  let token = tokens[i], { open, close } = comment;
                  changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
              }
          return { changes };
      }
      return null;
  }
  // Performs toggle, comment and uncomment of line comments.
  function changeLineComment(option, state, ranges = state.selection.ranges) {
      let lines = [];
      let prevLine = -1;
      for (let { from, to } of ranges) {
          let startI = lines.length, minIndent = 1e9;
          let token = getConfig(state, from).line;
          if (!token)
              continue;
          for (let pos = from; pos <= to;) {
              let line = state.doc.lineAt(pos);
              if (line.from > prevLine && (from == to || to > line.from)) {
                  prevLine = line.from;
                  let indent = /^\s*/.exec(line.text)[0].length;
                  let empty = indent == line.length;
                  let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                  if (indent < line.text.length && indent < minIndent)
                      minIndent = indent;
                  lines.push({ line, comment, token, indent, empty, single: false });
              }
              pos = line.to + 1;
          }
          if (minIndent < 1e9)
              for (let i = startI; i < lines.length; i++)
                  if (lines[i].indent < lines[i].line.text.length)
                      lines[i].indent = minIndent;
          if (lines.length == startI + 1)
              lines[startI].single = true;
      }
      if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
          let changes = [];
          for (let { line, token, indent, empty, single } of lines)
              if (single || !empty)
                  changes.push({ from: line.from + indent, insert: token + " " });
          let changeSet = state.changes(changes);
          return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
      }
      else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
          let changes = [];
          for (let { line, comment, token } of lines)
              if (comment >= 0) {
                  let from = line.from + comment, to = from + token.length;
                  if (line.text[to - line.from] == " ")
                      to++;
                  changes.push({ from, to });
              }
          return { changes };
      }
      return null;
  }

  function updateSel(sel, by) {
      return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
      return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
      let selection = updateSel(state.selection, how);
      if (selection.eq(state.selection, true))
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  function rangeEnd(range, forward) {
      return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
      return view.textDirectionAt(view.state.selection.main.head) == Direction$1.LTR;
  }
  /**
  Move the selection one character to the left (which is backward in
  left-to-right text, forward in right-to-left text).
  */
  const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
  /**
  Move the selection one character to the right.
  */
  const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
  function cursorByGroup(view, forward) {
      return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  /**
  Move the selection to the left across one group of word or
  non-word (but also non-space) characters.
  */
  const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection one group to the right.
  */
  const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
  function interestingNode(state, node, bracketProp) {
      if (node.type.prop(bracketProp))
          return true;
      let len = node.to - node.from;
      return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
  }
  function moveBySyntax(state, start, forward) {
      let pos = syntaxTree(state).resolveInner(start.head);
      let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
      // Scan forward through child nodes to see if there's an interesting
      // node ahead.
      for (let at = start.head;;) {
          let next = forward ? pos.childAfter(at) : pos.childBefore(at);
          if (!next)
              break;
          if (interestingNode(state, next, bracketProp))
              pos = next;
          else
              at = forward ? next.to : next.from;
      }
      let bracket = pos.type.prop(bracketProp), match, newPos;
      if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
          newPos = forward ? match.end.to : match.end.from;
      else
          newPos = forward ? pos.to : pos.from;
      return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  /**
  Move the cursor over the next syntactic element to the left.
  */
  const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the cursor over the next syntactic element to the right.
  */
  const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
      return moveSel(view, range => {
          if (!range.empty)
              return rangeEnd(range, forward);
          let moved = view.moveVertically(range, forward);
          return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
      });
  }
  /**
  Move the selection one line up.
  */
  const cursorLineUp = view => cursorByLine(view, false);
  /**
  Move the selection one line down.
  */
  const cursorLineDown = view => cursorByLine(view, true);
  function pageInfo(view) {
      let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
      let marginTop = 0, marginBottom = 0, height;
      if (selfScroll) {
          for (let source of view.state.facet(EditorView.scrollMargins)) {
              let margins = source(view);
              if (margins === null || margins === void 0 ? void 0 : margins.top)
                  marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
              if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                  marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
          }
          height = view.scrollDOM.clientHeight - marginTop - marginBottom;
      }
      else {
          height = (view.dom.ownerDocument.defaultView || window).innerHeight;
      }
      return { marginTop, marginBottom, selfScroll,
          height: Math.max(view.defaultLineHeight, height - 5) };
  }
  function cursorByPage(view, forward) {
      let page = pageInfo(view);
      let { state } = view, selection = updateSel(state.selection, range => {
          return range.empty ? view.moveVertically(range, forward, page.height)
              : rangeEnd(range, forward);
      });
      if (selection.eq(state.selection))
          return false;
      let effect;
      if (page.selfScroll) {
          let startPos = view.coordsAtPos(state.selection.main.head);
          let scrollRect = view.scrollDOM.getBoundingClientRect();
          let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
          if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
              effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
      }
      view.dispatch(setSel(state, selection), { effects: effect });
      return true;
  }
  /**
  Move the selection one page up.
  */
  const cursorPageUp = view => cursorByPage(view, false);
  /**
  Move the selection one page down.
  */
  const cursorPageDown = view => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
      let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
      if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
          moved = view.moveToLineBoundary(start, forward, false);
      if (!forward && moved.head == line.from && line.length) {
          let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space)
              moved = EditorSelection.cursor(line.from + space);
      }
      return moved;
  }
  /**
  Move the selection to the next line wrap point, or to the end of
  the line if there isn't one left on this line.
  */
  const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection to previous line wrap point, or failing that to
  the start of the line. If the line is indented, and the cursor
  isn't already at the end of the indentation, this will move to the
  end of the indentation instead of the start of the line.
  */
  const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection one line wrap point to the left.
  */
  const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection one line wrap point to the right.
  */
  const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection to the start of the line.
  */
  const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  /**
  Move the selection to the end of the line.
  */
  const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend) {
      let found = false, selection = updateSel(state.selection, range => {
          let matching = matchBrackets(state, range.head, -1)
              || matchBrackets(state, range.head, 1)
              || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
              || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
          if (!matching || !matching.end)
              return range;
          found = true;
          let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
          return EditorSelection.cursor(head);
      });
      if (!found)
          return false;
      dispatch(setSel(state, selection));
      return true;
  }
  /**
  Move the selection to the bracket matching the one it is currently
  on, if any.
  */
  const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch);
  function extendSel(target, how) {
      let selection = updateSel(target.state.selection, range => {
          let head = how(range);
          return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
      });
      if (selection.eq(target.state.selection))
          return false;
      target.dispatch(setSel(target.state, selection));
      return true;
  }
  function selectByChar(view, forward) {
      return extendSel(view, range => view.moveByChar(range, forward));
  }
  /**
  Move the selection head one character to the left, while leaving
  the anchor in place.
  */
  const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
  /**
  Move the selection head one character to the right.
  */
  const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
  function selectByGroup(view, forward) {
      return extendSel(view, range => view.moveByGroup(range, forward));
  }
  /**
  Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
  the left.
  */
  const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
  /**
  Move the selection head one group to the right.
  */
  const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
  /**
  Move the selection head over the next syntactic element to the left.
  */
  const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  /**
  Move the selection head over the next syntactic element to the right.
  */
  const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward));
  }
  /**
  Move the selection head one line up.
  */
  const selectLineUp = view => selectByLine(view, false);
  /**
  Move the selection head one line down.
  */
  const selectLineDown = view => selectByLine(view, true);
  function selectByPage(view, forward) {
      return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
  }
  /**
  Move the selection head one page up.
  */
  const selectPageUp = view => selectByPage(view, false);
  /**
  Move the selection head one page down.
  */
  const selectPageDown = view => selectByPage(view, true);
  /**
  Move the selection head to the next line boundary.
  */
  const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
  /**
  Move the selection head to the previous line boundary.
  */
  const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
  /**
  Move the selection head one line boundary to the left.
  */
  const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  /**
  Move the selection head one line boundary to the right.
  */
  const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
  /**
  Move the selection head to the start of the line.
  */
  const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  /**
  Move the selection head to the end of the line.
  */
  const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  /**
  Move the selection to the start of the document.
  */
  const cursorDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: 0 }));
      return true;
  };
  /**
  Move the selection to the end of the document.
  */
  const cursorDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.doc.length }));
      return true;
  };
  /**
  Move the selection head to the start of the document.
  */
  const selectDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
      return true;
  };
  /**
  Move the selection head to the end of the document.
  */
  const selectDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
      return true;
  };
  /**
  Select the entire document.
  */
  const selectAll = ({ state, dispatch }) => {
      dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
      return true;
  };
  /**
  Expand the selection to cover entire lines.
  */
  const selectLine = ({ state, dispatch }) => {
      let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
      dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
      return true;
  };
  /**
  Select the next syntactic construct that is larger than the
  selection. Note that this will only work insofar as the language
  [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
  syntax tree.
  */
  const selectParentSyntax = ({ state, dispatch }) => {
      let selection = updateSel(state.selection, range => {
          let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
          if (range.empty) {
              let stackBefore = tree.resolveStack(range.from, -1);
              if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
                  stack = stackBefore;
          }
          for (let cur = stack; cur; cur = cur.next) {
              let { node } = cur;
              if (((node.from < range.from && node.to >= range.to) ||
                  (node.to > range.to && node.from <= range.from)) &&
                  cur.next)
                  return EditorSelection.range(node.to, node.from);
          }
          return range;
      });
      if (selection.eq(state.selection))
          return false;
      dispatch(setSel(state, selection));
      return true;
  };
  /**
  Simplify the current selection. When multiple ranges are selected,
  reduce it to its main range. Otherwise, if the selection is
  non-empty, convert it to a cursor selection.
  */
  const simplifySelection = ({ state, dispatch }) => {
      let cur = state.selection, selection = null;
      if (cur.ranges.length > 1)
          selection = EditorSelection.create([cur.main]);
      else if (!cur.main.empty)
          selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
      if (!selection)
          return false;
      dispatch(setSel(state, selection));
      return true;
  };
  function deleteBy(target, by) {
      if (target.state.readOnly)
          return false;
      let event = "delete.selection", { state } = target;
      let changes = state.changeByRange(range => {
          let { from, to } = range;
          if (from == to) {
              let towards = by(range);
              if (towards < from) {
                  event = "delete.backward";
                  towards = skipAtomic(target, towards, false);
              }
              else if (towards > from) {
                  event = "delete.forward";
                  towards = skipAtomic(target, towards, true);
              }
              from = Math.min(from, towards);
              to = Math.max(to, towards);
          }
          else {
              from = skipAtomic(target, from, false);
              to = skipAtomic(target, to, true);
          }
          return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
      });
      if (changes.changes.empty)
          return false;
      target.dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: event,
          effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
      }));
      return true;
  }
  function skipAtomic(target, pos, forward) {
      if (target instanceof EditorView)
          for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
              ranges.between(pos, pos, (from, to) => {
                  if (from < pos && to > pos)
                      pos = forward ? to : from;
              });
      return pos;
  }
  const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {
      let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
      if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&
          !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
          if (before[before.length - 1] == "\t")
              return pos - 1;
          let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
          for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
              pos--;
          targetPos = pos;
      }
      else {
          targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
          if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
              targetPos += forward ? 1 : -1;
          else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
              targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
      }
      return targetPos;
  });
  /**
  Delete the selection, or, for cursor selections, the character or
  indentation unit before the cursor.
  */
  const deleteCharBackward = view => deleteByChar(view, false, true);
  /**
  Delete the selection or the character after the cursor.
  */
  const deleteCharForward = view => deleteByChar(view, true, false);
  const deleteByGroup = (target, forward) => deleteBy(target, range => {
      let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
      let categorize = state.charCategorizer(pos);
      for (let cat = null;;) {
          if (pos == (forward ? line.to : line.from)) {
              if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
                  pos += forward ? 1 : -1;
              break;
          }
          let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
          let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
          let nextCat = categorize(nextChar);
          if (cat != null && nextCat != cat)
              break;
          if (nextChar != " " || pos != range.head)
              cat = nextCat;
          pos = next;
      }
      return pos;
  });
  /**
  Delete the selection or backward until the end of the next
  [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
  whitespace when they consist of a single space.
  */
  const deleteGroupBackward = target => deleteByGroup(target, false);
  /**
  Delete the selection or forward until the end of the next group.
  */
  const deleteGroupForward = target => deleteByGroup(target, true);
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line. If the cursor is directly at the end of the
  line, delete the line break after it.
  */
  const deleteToLineEnd = view => deleteBy(view, range => {
      let lineEnd = view.lineBlockAt(range.head).to;
      return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the start of the line or the next line wrap before the cursor.
  */
  const deleteLineBoundaryBackward = view => deleteBy(view, range => {
      let lineStart = view.moveToLineBoundary(range, false).head;
      return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  });
  /**
  Delete the selection, or, if it is a cursor selection, delete to
  the end of the line or the next line wrap after the cursor.
  */
  const deleteLineBoundaryForward = view => deleteBy(view, range => {
      let lineStart = view.moveToLineBoundary(range, true).head;
      return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
  });
  /**
  Replace each selection range with a line break, leaving the cursor
  on the line before the break.
  */
  const splitLine = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
              range: EditorSelection.cursor(range.from) };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
  };
  /**
  Flip the characters before and after the cursor(s).
  */
  const transposeChars = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let changes = state.changeByRange(range => {
          if (!range.empty || range.from == 0 || range.from == state.doc.length)
              return { range };
          let pos = range.from, line = state.doc.lineAt(pos);
          let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
          let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
          return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
              range: EditorSelection.cursor(to) };
      });
      if (changes.changes.empty)
          return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
      return true;
  };
  function selectedLineBlocks(state) {
      let blocks = [], upto = -1;
      for (let range of state.selection.ranges) {
          let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
          if (!range.empty && range.to == endLine.from)
              endLine = state.doc.lineAt(range.to - 1);
          if (upto >= startLine.number) {
              let prev = blocks[blocks.length - 1];
              prev.to = endLine.to;
              prev.ranges.push(range);
          }
          else {
              blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
          }
          upto = endLine.number + 1;
      }
      return blocks;
  }
  function moveLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [], ranges = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward ? block.to == state.doc.length : block.from == 0)
              continue;
          let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
          let size = nextLine.length + 1;
          if (forward) {
              changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
          else {
              changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
              for (let r of block.ranges)
                  ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
          }
      }
      if (!changes.length)
          return false;
      dispatch(state.update({
          changes,
          scrollIntoView: true,
          selection: EditorSelection.create(ranges, state.selection.mainIndex),
          userEvent: "move.line"
      }));
      return true;
  }
  /**
  Move the selected lines up one line.
  */
  const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
  /**
  Move the selected lines down one line.
  */
  const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
      if (state.readOnly)
          return false;
      let changes = [];
      for (let block of selectedLineBlocks(state)) {
          if (forward)
              changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
          else
              changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
      }
      dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
      return true;
  }
  /**
  Create a copy of the selected lines. Keep the selection in the top copy.
  */
  const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
  /**
  Create a copy of the selected lines. Keep the selection in the bottom copy.
  */
  const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
  /**
  Delete selected lines.
  */
  const deleteLine = view => {
      if (view.state.readOnly)
          return false;
      let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
          if (from > 0)
              from--;
          else if (to < state.doc.length)
              to++;
          return { from, to };
      }));
      let selection = updateSel(state.selection, range => {
          let dist = undefined;
          if (view.lineWrapping) {
              let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
              if (pos)
                  dist = (block.bottom + view.documentTop) - pos.bottom + view.defaultLineHeight / 2;
          }
          return view.moveVertically(range, true, dist);
      }).map(changes);
      view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
      return true;
  };
  function isBetweenBrackets(state, pos) {
      if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
          return { from: pos, to: pos };
      let context = syntaxTree(state).resolveInner(pos);
      let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
      if (before && after && before.to <= pos && after.from >= pos &&
          (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
          state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
          !/\S/.test(state.sliceDoc(before.to, after.from)))
          return { from: before.to, to: after.from };
      return null;
  }
  /**
  Replace the selection with a newline and indent the newly created
  line(s). If the current line consists only of whitespace, this
  will also delete that whitespace. When the cursor is between
  matching brackets, an additional newline will be inserted after
  the cursor.
  */
  const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
  /**
  Create a blank, indented line below the current line.
  */
  const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
  function newlineAndIndent(atEof) {
      return ({ state, dispatch }) => {
          if (state.readOnly)
              return false;
          let changes = state.changeByRange(range => {
              let { from, to } = range, line = state.doc.lineAt(from);
              let explode = !atEof && from == to && isBetweenBrackets(state, from);
              if (atEof)
                  from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
              let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
              let indent = getIndentation(cx, from);
              if (indent == null)
                  indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
              while (to < line.to && /\s/.test(line.text[to - line.from]))
                  to++;
              if (explode)
                  ({ from, to } = explode);
              else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                  from = line.from;
              let insert = ["", indentString(state, indent)];
              if (explode)
                  insert.push(indentString(state, cx.lineIndent(line.from, -1)));
              return { changes: { from, to, insert: Text.of(insert) },
                  range: EditorSelection.cursor(from + 1 + insert[1].length) };
          });
          dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
          return true;
      };
  }
  function changeBySelectedLine(state, f) {
      let atLine = -1;
      return state.changeByRange(range => {
          let changes = [];
          for (let pos = range.from; pos <= range.to;) {
              let line = state.doc.lineAt(pos);
              if (line.number > atLine && (range.empty || range.to > line.from)) {
                  f(line, changes, range);
                  atLine = line.number;
              }
              pos = line.to + 1;
          }
          let changeSet = state.changes(changes);
          return { changes,
              range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
      });
  }
  /**
  Auto-indent the selected lines. This uses the [indentation service
  facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
  information.
  */
  const indentSelection = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      let updated = Object.create(null);
      let context = new IndentContext(state, { overrideIndentation: start => {
              let found = updated[start];
              return found == null ? -1 : found;
          } });
      let changes = changeBySelectedLine(state, (line, changes, range) => {
          let indent = getIndentation(context, line.from);
          if (indent == null)
              return;
          if (!/\S/.test(line.text))
              indent = 0;
          let cur = /^\s*/.exec(line.text)[0];
          let norm = indentString(state, indent);
          if (cur != norm || range.from < line.from + cur.length) {
              updated[line.from] = indent;
              changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
      });
      if (!changes.changes.empty)
          dispatch(state.update(changes, { userEvent: "indent" }));
      return true;
  };
  /**
  Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
  lines.
  */
  const indentMore = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          changes.push({ from: line.from, insert: state.facet(indentUnit) });
      }), { userEvent: "input.indent" }));
      return true;
  };
  /**
  Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
  selected lines.
  */
  const indentLess = ({ state, dispatch }) => {
      if (state.readOnly)
          return false;
      dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
          let space = /^\s*/.exec(line.text)[0];
          if (!space)
              return;
          let col = countColumn(space, state.tabSize), keep = 0;
          let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
          while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
              keep++;
          changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
      }), { userEvent: "delete.dedent" }));
      return true;
  };
  /**
  Enables or disables
  [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
  prevents the editor's key bindings from capturing Tab or
  Shift-Tab, making it possible for the user to move focus out of
  the editor with the keyboard.
  */
  const toggleTabFocusMode = view => {
      view.setTabFocusMode();
      return true;
  };
  /**
  Array of key bindings containing the Emacs-style bindings that are
  available on macOS by default.

   - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
   - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
   - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
   - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
   - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
  */
  const emacsStyleKeymap = [
      { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
      { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
      { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
      { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
      { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
      { key: "Ctrl-d", run: deleteCharForward },
      { key: "Ctrl-h", run: deleteCharBackward },
      { key: "Ctrl-k", run: deleteToLineEnd },
      { key: "Ctrl-Alt-h", run: deleteGroupBackward },
      { key: "Ctrl-o", run: splitLine },
      { key: "Ctrl-t", run: transposeChars },
      { key: "Ctrl-v", run: cursorPageDown },
  ];
  /**
  An array of key bindings closely sticking to platform-standard or
  widely used bindings. (This includes the bindings from
  [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
  property changed to `mac`.)

   - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
   - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
   - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
   - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
   - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
   - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
   - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
   - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
   - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
   - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
   - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
   - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
   - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
   - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
   - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
   - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
   - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
   - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
   - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
   - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
   - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
   - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
  */
  const standardKeymap = /*@__PURE__*/[
      { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
      { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
      { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
      { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
      { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
      { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
      { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
      { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
      { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
      { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
      { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
      { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
      { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
      { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
      { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
      { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
      { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
      { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
      { key: "Mod-a", run: selectAll },
      { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
      { key: "Delete", run: deleteCharForward },
      { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
      { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
      { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
      { mac: "Mod-Delete", run: deleteLineBoundaryForward }
  ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
  /**
  The default keymap. Includes all bindings from
  [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

  - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
  - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
  - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
  - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
  - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
  - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
  - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
  - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
  - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
  - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
  - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
  - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
  - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
  - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
  - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
  - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
  - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
  - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
  */
  const defaultKeymap = /*@__PURE__*/[
      { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
      { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
      { key: "Alt-ArrowUp", run: moveLineUp },
      { key: "Shift-Alt-ArrowUp", run: copyLineUp },
      { key: "Alt-ArrowDown", run: moveLineDown },
      { key: "Shift-Alt-ArrowDown", run: copyLineDown },
      { key: "Escape", run: simplifySelection },
      { key: "Mod-Enter", run: insertBlankLine },
      { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
      { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
      { key: "Mod-[", run: indentLess },
      { key: "Mod-]", run: indentMore },
      { key: "Mod-Alt-\\", run: indentSelection },
      { key: "Shift-Mod-k", run: deleteLine },
      { key: "Shift-Mod-\\", run: cursorMatchingBracket },
      { key: "Mod-/", run: toggleComment },
      { key: "Alt-A", run: toggleBlockComment },
      { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode },
  ].concat(standardKeymap);

  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string") elt = document.createElement(elt);
    var i = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);
        else if (value != null) elt[name] = value;
      }
      i++;
    }
    for (; i < arguments.length; i++) add(elt, arguments[i]);
    return elt
  }

  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) ; else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i = 0; i < child.length; i++) add(elt, child[i]);
    } else {
      throw new RangeError("Unsupported child node: " + child)
    }
  }

  class SelectedDiagnostic {
      constructor(from, to, diagnostic) {
          this.from = from;
          this.to = to;
          this.diagnostic = diagnostic;
      }
  }
  class LintState {
      constructor(diagnostics, panel, selected) {
          this.diagnostics = diagnostics;
          this.panel = panel;
          this.selected = selected;
      }
      static init(diagnostics, panel, state) {
          // Filter the list of diagnostics for which to create markers
          let markedDiagnostics = diagnostics;
          let diagnosticFilter = state.facet(lintConfig).markerFilter;
          if (diagnosticFilter)
              markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
          let sorted = diagnostics.slice().sort((a, b) => a.from - b.from || a.to - b.to);
          let deco = new RangeSetBuilder(), active = [], pos = 0;
          for (let i = 0;;) {
              let next = i == sorted.length ? null : sorted[i];
              if (!next && !active.length)
                  break;
              let from, to;
              if (active.length) {
                  from = pos;
                  to = active.reduce((p, d) => Math.min(p, d.to), next && next.from > from ? next.from : 1e8);
              }
              else {
                  from = next.from;
                  to = next.to;
                  active.push(next);
                  i++;
              }
              while (i < sorted.length) {
                  let next = sorted[i];
                  if (next.from == from && (next.to > next.from || next.to == from)) {
                      active.push(next);
                      i++;
                      to = Math.min(next.to, to);
                  }
                  else {
                      to = Math.min(next.from, to);
                      break;
                  }
              }
              let sev = maxSeverity(active);
              if (active.some(d => d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from))) {
                  deco.add(from, from, Decoration.widget({
                      widget: new DiagnosticWidget(sev),
                      diagnostics: active.slice()
                  }));
              }
              else {
                  let markClass = active.reduce((c, d) => d.markClass ? c + " " + d.markClass : c, "");
                  deco.add(from, to, Decoration.mark({
                      class: "cm-lintRange cm-lintRange-" + sev + markClass,
                      diagnostics: active.slice(),
                      inclusiveEnd: active.some(a => a.to > to)
                  }));
              }
              pos = to;
              for (let i = 0; i < active.length; i++)
                  if (active[i].to <= pos)
                      active.splice(i--, 1);
          }
          let set = deco.finish();
          return new LintState(set, panel, findDiagnostic(set));
      }
  }
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
      let found = null;
      diagnostics.between(after, 1e9, (from, to, { spec }) => {
          if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
              return;
          if (!found)
              found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
          else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
              return false;
          else
              found = new SelectedDiagnostic(found.from, to, found.diagnostic);
      });
      return found;
  }
  function hideTooltip(tr, tooltip) {
      let from = tooltip.pos, to = tooltip.end || from;
      let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
      if (result != null)
          return result;
      let line = tr.startState.doc.lineAt(tooltip.pos);
      return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  function maybeEnableLint(state, effects) {
      return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  /**
  Returns a transaction spec which updates the current set of
  diagnostics, and enables the lint extension if if wasn't already
  active.
  */
  function setDiagnostics(state, diagnostics) {
      return {
          effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
      };
  }
  /**
  The state effect that updates the set of active diagnostics. Can
  be useful when writing an extension that needs to track these.
  */
  const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
  const togglePanel = /*@__PURE__*/StateEffect.define();
  const movePanelSelection = /*@__PURE__*/StateEffect.define();
  const lintState = /*@__PURE__*/StateField.define({
      create() {
          return new LintState(Decoration.none, null, null);
      },
      update(value, tr) {
          if (tr.docChanged && value.diagnostics.size) {
              let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
              if (value.selected) {
                  let selPos = tr.changes.mapPos(value.selected.from, 1);
                  selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
              }
              if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
                  panel = null;
              value = new LintState(mapped, panel, selected);
          }
          for (let effect of tr.effects) {
              if (effect.is(setDiagnosticsEffect)) {
                  let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
                  value = LintState.init(effect.value, panel, tr.state);
              }
              else if (effect.is(togglePanel)) {
                  value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
              }
              else if (effect.is(movePanelSelection)) {
                  value = new LintState(value.diagnostics, value.panel, effect.value);
              }
          }
          return value;
      },
      provide: f => [showPanel.from(f, val => val.panel),
          EditorView.decorations.from(f, s => s.diagnostics)]
  });
  const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
  function lintTooltip(view, pos, side) {
      let { diagnostics } = view.state.field(lintState);
      let found, start = -1, end = -1;
      diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
          if (pos >= from && pos <= to &&
              (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
              found = spec.diagnostics;
              start = from;
              end = to;
              return false;
          }
      });
      let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
      if (found && diagnosticFilter)
          found = diagnosticFilter(found, view.state);
      if (!found)
          return null;
      return {
          pos: start,
          end: end,
          above: view.state.doc.lineAt(start).to < end,
          create() {
              return { dom: diagnosticsTooltip(view, found) };
          }
      };
  }
  function diagnosticsTooltip(view, diagnostics) {
      return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
  }
  /**
  Command to close the lint panel, when open.
  */
  const closeLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
          return false;
      view.dispatch({ effects: togglePanel.of(false) });
      return true;
  };
  const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
      constructor(view) {
          this.view = view;
          this.timeout = -1;
          this.set = true;
          let { delay } = view.state.facet(lintConfig);
          this.lintTime = Date.now() + delay;
          this.run = this.run.bind(this);
          this.timeout = setTimeout(this.run, delay);
      }
      run() {
          clearTimeout(this.timeout);
          let now = Date.now();
          if (now < this.lintTime - 10) {
              this.timeout = setTimeout(this.run, this.lintTime - now);
          }
          else {
              this.set = false;
              let { state } = this.view, { sources } = state.facet(lintConfig);
              if (sources.length)
                  batchResults(sources.map(s => Promise.resolve(s(this.view))), annotations => {
                      if (this.view.state.doc == state.doc)
                          this.view.dispatch(setDiagnostics(this.view.state, annotations.reduce((a, b) => a.concat(b))));
                  }, error => { logException(this.view.state, error); });
          }
      }
      update(update) {
          let config = update.state.facet(lintConfig);
          if (update.docChanged || config != update.startState.facet(lintConfig) ||
              config.needsRefresh && config.needsRefresh(update)) {
              this.lintTime = Date.now() + config.delay;
              if (!this.set) {
                  this.set = true;
                  this.timeout = setTimeout(this.run, config.delay);
              }
          }
      }
      force() {
          if (this.set) {
              this.lintTime = Date.now();
              this.run();
          }
      }
      destroy() {
          clearTimeout(this.timeout);
      }
  });
  function batchResults(promises, sink, error) {
      let collected = [], timeout = -1;
      for (let p of promises)
          p.then(value => {
              collected.push(value);
              clearTimeout(timeout);
              if (collected.length == promises.length)
                  sink(collected);
              else
                  timeout = setTimeout(() => sink(collected), 200);
          }, error);
  }
  const lintConfig = /*@__PURE__*/Facet.define({
      combine(input) {
          return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {
              delay: 750,
              markerFilter: null,
              tooltipFilter: null,
              needsRefresh: null,
              hideOn: () => null,
          }, {
              needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)
          }));
      }
  });
  /**
  Given a diagnostic source, this function returns an extension that
  enables linting with that source. It will be called whenever the
  editor is idle (after its content changed). If `null` is given as
  source, this only configures the lint extension.
  */
  function linter$1(source, config = {}) {
      return [
          lintConfig.of({ source, config }),
          lintPlugin,
          lintExtensions
      ];
  }
  function assignKeys(actions) {
      let assigned = [];
      if (actions)
          actions: for (let { name } of actions) {
              for (let i = 0; i < name.length; i++) {
                  let ch = name[i];
                  if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                      assigned.push(ch);
                      continue actions;
                  }
              }
              assigned.push("");
          }
      return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
      var _a;
      let keys = inPanel ? assignKeys(diagnostic.actions) : [];
      return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
          let fired = false, click = (e) => {
              e.preventDefault();
              if (fired)
                  return;
              fired = true;
              let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
              if (found)
                  action.apply(view, found.from, found.to);
          };
          let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
          let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
              crelt("u", name.slice(keyIndex, keyIndex + 1)),
              name.slice(keyIndex + 1)];
          return crelt("button", {
              type: "button",
              class: "cm-diagnosticAction",
              onclick: click,
              onmousedown: click,
              "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
          }, nameElt);
      }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  class DiagnosticWidget extends WidgetType {
      constructor(sev) {
          super();
          this.sev = sev;
      }
      eq(other) { return other.sev == this.sev; }
      toDOM() {
          return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
      }
  }
  class PanelItem {
      constructor(view, diagnostic) {
          this.diagnostic = diagnostic;
          this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
          this.dom = renderDiagnostic(view, diagnostic, true);
          this.dom.id = this.id;
          this.dom.setAttribute("role", "option");
      }
  }
  class LintPanel {
      constructor(view) {
          this.view = view;
          this.items = [];
          let onkeydown = (event) => {
              if (event.keyCode == 27) { // Escape
                  closeLintPanel(this.view);
                  this.view.focus();
              }
              else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                  this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
              }
              else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                  this.moveSelection((this.selectedIndex + 1) % this.items.length);
              }
              else if (event.keyCode == 36) { // Home
                  this.moveSelection(0);
              }
              else if (event.keyCode == 35) { // End
                  this.moveSelection(this.items.length - 1);
              }
              else if (event.keyCode == 13) { // Enter
                  this.view.focus();
              }
              else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                  let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                  for (let i = 0; i < keys.length; i++)
                      if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                          let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                          if (found)
                              diagnostic.actions[i].apply(view, found.from, found.to);
                      }
              }
              else {
                  return;
              }
              event.preventDefault();
          };
          let onclick = (event) => {
              for (let i = 0; i < this.items.length; i++) {
                  if (this.items[i].dom.contains(event.target))
                      this.moveSelection(i);
              }
          };
          this.list = crelt("ul", {
              tabIndex: 0,
              role: "listbox",
              "aria-label": this.view.state.phrase("Diagnostics"),
              onkeydown,
              onclick
          });
          this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
              type: "button",
              name: "close",
              "aria-label": this.view.state.phrase("close"),
              onclick: () => closeLintPanel(this.view)
          }, "×"));
          this.update();
      }
      get selectedIndex() {
          let selected = this.view.state.field(lintState).selected;
          if (!selected)
              return -1;
          for (let i = 0; i < this.items.length; i++)
              if (this.items[i].diagnostic == selected.diagnostic)
                  return i;
          return -1;
      }
      update() {
          let { diagnostics, selected } = this.view.state.field(lintState);
          let i = 0, needsSync = false, newSelectedItem = null;
          let seen = new Set();
          diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
              for (let diagnostic of spec.diagnostics) {
                  if (seen.has(diagnostic))
                      continue;
                  seen.add(diagnostic);
                  let found = -1, item;
                  for (let j = i; j < this.items.length; j++)
                      if (this.items[j].diagnostic == diagnostic) {
                          found = j;
                          break;
                      }
                  if (found < 0) {
                      item = new PanelItem(this.view, diagnostic);
                      this.items.splice(i, 0, item);
                      needsSync = true;
                  }
                  else {
                      item = this.items[found];
                      if (found > i) {
                          this.items.splice(i, found - i);
                          needsSync = true;
                      }
                  }
                  if (selected && item.diagnostic == selected.diagnostic) {
                      if (!item.dom.hasAttribute("aria-selected")) {
                          item.dom.setAttribute("aria-selected", "true");
                          newSelectedItem = item;
                      }
                  }
                  else if (item.dom.hasAttribute("aria-selected")) {
                      item.dom.removeAttribute("aria-selected");
                  }
                  i++;
              }
          });
          while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
              needsSync = true;
              this.items.pop();
          }
          if (this.items.length == 0) {
              this.items.push(new PanelItem(this.view, {
                  from: -1, to: -1,
                  severity: "info",
                  message: this.view.state.phrase("No diagnostics")
              }));
              needsSync = true;
          }
          if (newSelectedItem) {
              this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
              this.view.requestMeasure({
                  key: this,
                  read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                  write: ({ sel, panel }) => {
                      let scaleY = panel.height / this.list.offsetHeight;
                      if (sel.top < panel.top)
                          this.list.scrollTop -= (panel.top - sel.top) / scaleY;
                      else if (sel.bottom > panel.bottom)
                          this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
                  }
              });
          }
          else if (this.selectedIndex < 0) {
              this.list.removeAttribute("aria-activedescendant");
          }
          if (needsSync)
              this.sync();
      }
      sync() {
          let domPos = this.list.firstChild;
          function rm() {
              let prev = domPos;
              domPos = prev.nextSibling;
              prev.remove();
          }
          for (let item of this.items) {
              if (item.dom.parentNode == this.list) {
                  while (domPos != item.dom)
                      rm();
                  domPos = item.dom.nextSibling;
              }
              else {
                  this.list.insertBefore(item.dom, domPos);
              }
          }
          while (domPos)
              rm();
      }
      moveSelection(selectedIndex) {
          if (this.selectedIndex < 0)
              return;
          let field = this.view.state.field(lintState);
          let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
          if (!selection)
              return;
          this.view.dispatch({
              selection: { anchor: selection.from, head: selection.to },
              scrollIntoView: true,
              effects: movePanelSelection.of(selection)
          });
      }
      static open(view) { return new LintPanel(view); }
  }
  function svg(content, attrs = `viewBox="0 0 40 40"`) {
      return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
  }
  function underline(color) {
      return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
      ".cm-diagnostic": {
          padding: "3px 6px 3px 8px",
          marginLeft: "-1px",
          display: "block",
          whiteSpace: "pre-wrap"
      },
      ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
      ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
      ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
      ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
      ".cm-diagnosticAction": {
          font: "inherit",
          border: "none",
          padding: "2px 4px",
          backgroundColor: "#444",
          color: "white",
          borderRadius: "3px",
          marginLeft: "8px",
          cursor: "pointer"
      },
      ".cm-diagnosticSource": {
          fontSize: "70%",
          opacity: .7
      },
      ".cm-lintRange": {
          backgroundPosition: "left bottom",
          backgroundRepeat: "repeat-x",
          paddingBottom: "0.7px",
      },
      ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
      ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
      ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
      ".cm-lintRange-hint": { backgroundImage: /*@__PURE__*/underline("#66d") },
      ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
      ".cm-tooltip-lint": {
          padding: 0,
          margin: 0
      },
      ".cm-lintPoint": {
          position: "relative",
          "&:after": {
              content: '""',
              position: "absolute",
              bottom: 0,
              left: "-2px",
              borderLeft: "3px solid transparent",
              borderRight: "3px solid transparent",
              borderBottom: "4px solid #d11"
          }
      },
      ".cm-lintPoint-warning": {
          "&:after": { borderBottomColor: "orange" }
      },
      ".cm-lintPoint-info": {
          "&:after": { borderBottomColor: "#999" }
      },
      ".cm-lintPoint-hint": {
          "&:after": { borderBottomColor: "#66d" }
      },
      ".cm-panel.cm-panel-lint": {
          position: "relative",
          "& ul": {
              maxHeight: "100px",
              overflowY: "auto",
              "& [aria-selected]": {
                  backgroundColor: "#ddd",
                  "& u": { textDecoration: "underline" }
              },
              "&:focus [aria-selected]": {
                  background_fallback: "#bdf",
                  backgroundColor: "Highlight",
                  color_fallback: "white",
                  color: "HighlightText"
              },
              "& u": { textDecoration: "none" },
              padding: 0,
              margin: 0
          },
          "& [name=close]": {
              position: "absolute",
              top: "0",
              right: "2px",
              background: "inherit",
              border: "none",
              font: "inherit",
              padding: 0,
              margin: 0
          }
      }
  });
  function severityWeight(sev) {
      return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
  }
  function maxSeverity(diagnostics) {
      let sev = "hint", weight = 1;
      for (let d of diagnostics) {
          let w = severityWeight(d.severity);
          if (w > weight) {
              weight = w;
              sev = d.severity;
          }
      }
      return sev;
  }
  const lintExtensions = [
      lintState,
      /*@__PURE__*/EditorView.decorations.compute([lintState], state => {
          let { selected, panel } = state.field(lintState);
          return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
              activeMark.range(selected.from, selected.to)
          ]);
      }),
      /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
      baseTheme$1
  ];

  class CompositeBlock {
      static create(type, value, from, parentHash, end) {
          let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
          return new CompositeBlock(type, value, from, hash, end, [], []);
      }
      constructor(type, 
      // Used for indentation in list items, markup character in lists
      value, from, hash, end, children, positions) {
          this.type = type;
          this.value = value;
          this.from = from;
          this.hash = hash;
          this.end = end;
          this.children = children;
          this.positions = positions;
          this.hashProp = [[NodeProp.contextHash, hash]];
      }
      addChild(child, pos) {
          if (child.prop(NodeProp.contextHash) != this.hash)
              child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
          this.children.push(child);
          this.positions.push(pos);
      }
      toTree(nodeSet, end = this.end) {
          let last = this.children.length - 1;
          if (last >= 0)
              end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
          return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
              makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
          });
      }
  }
  var Type$1;
  (function (Type) {
      Type[Type["Document"] = 1] = "Document";
      Type[Type["CodeBlock"] = 2] = "CodeBlock";
      Type[Type["FencedCode"] = 3] = "FencedCode";
      Type[Type["Blockquote"] = 4] = "Blockquote";
      Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
      Type[Type["BulletList"] = 6] = "BulletList";
      Type[Type["OrderedList"] = 7] = "OrderedList";
      Type[Type["ListItem"] = 8] = "ListItem";
      Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
      Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
      Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
      Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
      Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
      Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
      Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
      Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
      Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
      Type[Type["LinkReference"] = 18] = "LinkReference";
      Type[Type["Paragraph"] = 19] = "Paragraph";
      Type[Type["CommentBlock"] = 20] = "CommentBlock";
      Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
      // Inline
      Type[Type["Escape"] = 22] = "Escape";
      Type[Type["Entity"] = 23] = "Entity";
      Type[Type["HardBreak"] = 24] = "HardBreak";
      Type[Type["Emphasis"] = 25] = "Emphasis";
      Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
      Type[Type["Link"] = 27] = "Link";
      Type[Type["Image"] = 28] = "Image";
      Type[Type["InlineCode"] = 29] = "InlineCode";
      Type[Type["HTMLTag"] = 30] = "HTMLTag";
      Type[Type["Comment"] = 31] = "Comment";
      Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
      Type[Type["Autolink"] = 33] = "Autolink";
      // Smaller tokens
      Type[Type["HeaderMark"] = 34] = "HeaderMark";
      Type[Type["QuoteMark"] = 35] = "QuoteMark";
      Type[Type["ListMark"] = 36] = "ListMark";
      Type[Type["LinkMark"] = 37] = "LinkMark";
      Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
      Type[Type["CodeMark"] = 39] = "CodeMark";
      Type[Type["CodeText"] = 40] = "CodeText";
      Type[Type["CodeInfo"] = 41] = "CodeInfo";
      Type[Type["LinkTitle"] = 42] = "LinkTitle";
      Type[Type["LinkLabel"] = 43] = "LinkLabel";
      Type[Type["URL"] = 44] = "URL";
  })(Type$1 || (Type$1 = {}));
  /**
  Data structure used to accumulate a block's content during [leaf
  block parsing](#BlockParser.leaf).
  */
  class LeafBlock {
      /**
      @internal
      */
      constructor(
      /**
      The start position of the block.
      */
      start, 
      /**
      The block's text content.
      */
      content) {
          this.start = start;
          this.content = content;
          /**
          @internal
          */
          this.marks = [];
          /**
          The block parsers active for this block.
          */
          this.parsers = [];
      }
  }
  /**
  Data structure used during block-level per-line parsing.
  */
  class Line {
      constructor() {
          /**
          The line's full text.
          */
          this.text = "";
          /**
          The base indent provided by the composite contexts (that have
          been handled so far).
          */
          this.baseIndent = 0;
          /**
          The string position corresponding to the base indent.
          */
          this.basePos = 0;
          /**
          The number of contexts handled @internal
          */
          this.depth = 0;
          /**
          Any markers (i.e. block quote markers) parsed for the contexts. @internal
          */
          this.markers = [];
          /**
          The position of the next non-whitespace character beyond any
          list, blockquote, or other composite block markers.
          */
          this.pos = 0;
          /**
          The column of the next non-whitespace character.
          */
          this.indent = 0;
          /**
          The character code of the character after `pos`.
          */
          this.next = -1;
      }
      /**
      @internal
      */
      forward() {
          if (this.basePos > this.pos)
              this.forwardInner();
      }
      /**
      @internal
      */
      forwardInner() {
          let newPos = this.skipSpace(this.basePos);
          this.indent = this.countIndent(newPos, this.pos, this.indent);
          this.pos = newPos;
          this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
      }
      /**
      Skip whitespace after the given position, return the position of
      the next non-space character or the end of the line if there's
      only space after `from`.
      */
      skipSpace(from) { return skipSpace(this.text, from); }
      /**
      @internal
      */
      reset(text) {
          this.text = text;
          this.baseIndent = this.basePos = this.pos = this.indent = 0;
          this.forwardInner();
          this.depth = 1;
          while (this.markers.length)
              this.markers.pop();
      }
      /**
      Move the line's base position forward to the given position.
      This should only be called by composite [block
      parsers](#BlockParser.parse) or [markup skipping
      functions](#NodeSpec.composite).
      */
      moveBase(to) {
          this.basePos = to;
          this.baseIndent = this.countIndent(to, this.pos, this.indent);
      }
      /**
      Move the line's base position forward to the given _column_.
      */
      moveBaseColumn(indent) {
          this.baseIndent = indent;
          this.basePos = this.findColumn(indent);
      }
      /**
      Store a composite-block-level marker. Should be called from
      [markup skipping functions](#NodeSpec.composite) when they
      consume any non-whitespace characters.
      */
      addMarker(elt) {
          this.markers.push(elt);
      }
      /**
      Find the column position at `to`, optionally starting at a given
      position and column.
      */
      countIndent(to, from = 0, indent = 0) {
          for (let i = from; i < to; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return indent;
      }
      /**
      Find the position corresponding to the given column.
      */
      findColumn(goal) {
          let i = 0;
          for (let indent = 0; i < this.text.length && indent < goal; i++)
              indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return i;
      }
      /**
      @internal
      */
      scrub() {
          if (!this.baseIndent)
              return this.text;
          let result = "";
          for (let i = 0; i < this.basePos; i++)
              result += " ";
          return result + this.text.slice(this.basePos);
      }
  }
  function skipForList(bl, cx, line) {
      if (line.pos == line.text.length ||
          (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
          return true;
      if (line.indent >= line.baseIndent + 4)
          return false;
      let size = (bl.type == Type$1.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
      return size > 0 &&
          (bl.type != Type$1.BulletList || isHorizontalRule(line, cx, false) < 0) &&
          line.text.charCodeAt(line.pos + size - 1) == bl.value;
  }
  const DefaultSkipMarkup = {
      [Type$1.Blockquote](bl, cx, line) {
          if (line.next != 62 /* '>' */)
              return false;
          line.markers.push(elt(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
          line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
          bl.end = cx.lineStart + line.text.length;
          return true;
      },
      [Type$1.ListItem](bl, _cx, line) {
          if (line.indent < line.baseIndent + bl.value && line.next > -1)
              return false;
          line.moveBaseColumn(line.baseIndent + bl.value);
          return true;
      },
      [Type$1.OrderedList]: skipForList,
      [Type$1.BulletList]: skipForList,
      [Type$1.Document]() { return true; }
  };
  function space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
  function skipSpace(line, i = 0) {
      while (i < line.length && space(line.charCodeAt(i)))
          i++;
      return i;
  }
  function skipSpaceBack(line, i, to) {
      while (i > to && space(line.charCodeAt(i - 1)))
          i--;
      return i;
  }
  function isFencedCode(line) {
      if (line.next != 96 && line.next != 126 /* '`~' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      if (pos < line.pos + 3)
          return -1;
      if (line.next == 96)
          for (let i = pos; i < line.text.length; i++)
              if (line.text.charCodeAt(i) == 96)
                  return -1;
      return pos;
  }
  function isBlockquote(line) {
      return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
  }
  function isHorizontalRule(line, cx, breaking) {
      if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
          return -1;
      let count = 1;
      for (let pos = line.pos + 1; pos < line.text.length; pos++) {
          let ch = line.text.charCodeAt(pos);
          if (ch == line.next)
              count++;
          else if (!space(ch))
              return -1;
      }
      // Setext headers take precedence
      if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length &&
          cx.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)
          return -1;
      return count < 3 ? -1 : 1;
  }
  function inList(cx, type) {
      for (let i = cx.stack.length - 1; i >= 0; i--)
          if (cx.stack[i].type == type)
              return true;
      return false;
  }
  function isBulletList(line, cx, breaking) {
      return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
          (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&
          (!breaking || inList(cx, Type$1.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
  }
  function isOrderedList(line, cx, breaking) {
      let pos = line.pos, next = line.next;
      for (;;) {
          if (next >= 48 && next <= 57 /* '0-9' */)
              pos++;
          else
              break;
          if (pos == line.text.length)
              return -1;
          next = line.text.charCodeAt(pos);
      }
      if (pos == line.pos || pos > line.pos + 9 ||
          (next != 46 && next != 41 /* '.)' */) ||
          (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||
          breaking && !inList(cx, Type$1.OrderedList) &&
              (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
          return -1;
      return pos + 1 - line.pos;
  }
  function isAtxHeading(line) {
      if (line.next != 35 /* '#' */)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
          pos++;
      if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
          return -1;
      let size = pos - line.pos;
      return size > 6 ? -1 : size;
  }
  function isSetextUnderline(line) {
      if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
          return -1;
      let pos = line.pos + 1;
      while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
      let end = pos;
      while (pos < line.text.length && space(line.text.charCodeAt(pos)))
          pos++;
      return pos == line.text.length ? end : -1;
  }
  const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
  const HTMLBlockStyle = [
      [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
      [/^\s*<!--/, CommentEnd],
      [/^\s*<\?/, ProcessingEnd],
      [/^\s*<![A-Z]/, />/],
      [/^\s*<!\[CDATA\[/, /\]\]>/],
      [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
      [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
  ];
  function isHTMLBlock(line, _cx, breaking) {
      if (line.next != 60 /* '<' */)
          return -1;
      let rest = line.text.slice(line.pos);
      for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
          if (HTMLBlockStyle[i][0].test(rest))
              return i;
      return -1;
  }
  function getListIndent(line, pos) {
      let indentAfter = line.countIndent(pos, line.pos, line.indent);
      let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
      return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
  }
  function addCodeText(marks, from, to) {
      let last = marks.length - 1;
      if (last >= 0 && marks[last].to == from && marks[last].type == Type$1.CodeText)
          marks[last].to = to;
      else
          marks.push(elt(Type$1.CodeText, from, to));
  }
  // Rules for parsing blocks. A return value of false means the rule
  // doesn't apply here, true means it does. When true is returned and
  // `p.line` has been updated, the rule is assumed to have consumed a
  // leaf block. Otherwise, it is assumed to have opened a context.
  const DefaultBlockParsers = {
      LinkReference: undefined,
      IndentedCode(cx, line) {
          let base = line.baseIndent + 4;
          if (line.indent < base)
              return false;
          let start = line.findColumn(base);
          let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
          let marks = [], pendingMarks = [];
          addCodeText(marks, from, to);
          while (cx.nextLine() && line.depth >= cx.stack.length) {
              if (line.pos == line.text.length) { // Empty
                  addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      pendingMarks.push(m);
              }
              else if (line.indent < base) {
                  break;
              }
              else {
                  if (pendingMarks.length) {
                      for (let m of pendingMarks) {
                          if (m.type == Type$1.CodeText)
                              addCodeText(marks, m.from, m.to);
                          else
                              marks.push(m);
                      }
                      pendingMarks = [];
                  }
                  addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  to = cx.lineStart + line.text.length;
                  let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                  if (codeStart < to)
                      addCodeText(marks, codeStart, to);
              }
          }
          if (pendingMarks.length) {
              pendingMarks = pendingMarks.filter(m => m.type != Type$1.CodeText);
              if (pendingMarks.length)
                  line.markers = pendingMarks.concat(line.markers);
          }
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type$1.CodeBlock, to - from), from);
          return true;
      },
      FencedCode(cx, line) {
          let fenceEnd = isFencedCode(line);
          if (fenceEnd < 0)
              return false;
          let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
          let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
          let marks = [elt(Type$1.CodeMark, from, from + len)];
          if (infoFrom < infoTo)
              marks.push(elt(Type$1.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
          for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
              let i = line.pos;
              if (line.indent - line.baseIndent < 4)
                  while (i < line.text.length && line.text.charCodeAt(i) == ch)
                      i++;
              if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                  for (let m of line.markers)
                      marks.push(m);
                  marks.push(elt(Type$1.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                  cx.nextLine();
                  break;
              }
              else {
                  if (!first)
                      addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                  for (let m of line.markers)
                      marks.push(m);
                  let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                  if (textStart < textEnd)
                      addCodeText(marks, textStart, textEnd);
              }
          }
          cx.addNode(cx.buffer.writeElements(marks, -from)
              .finish(Type$1.FencedCode, cx.prevLineEnd() - from), from);
          return true;
      },
      Blockquote(cx, line) {
          let size = isBlockquote(line);
          if (size < 0)
              return false;
          cx.startContext(Type$1.Blockquote, line.pos);
          cx.addNode(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
          line.moveBase(line.pos + size);
          return null;
      },
      HorizontalRule(cx, line) {
          if (isHorizontalRule(line, cx, false) < 0)
              return false;
          let from = cx.lineStart + line.pos;
          cx.nextLine();
          cx.addNode(Type$1.HorizontalRule, from);
          return true;
      },
      BulletList(cx, line) {
          let size = isBulletList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type$1.BulletList)
              cx.startContext(Type$1.BulletList, line.basePos, line.next);
          let newBase = getListIndent(line, line.pos + 1);
          cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      OrderedList(cx, line) {
          let size = isOrderedList(line, cx, false);
          if (size < 0)
              return false;
          if (cx.block.type != Type$1.OrderedList)
              cx.startContext(Type$1.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
          let newBase = getListIndent(line, line.pos + size);
          cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
      },
      ATXHeading(cx, line) {
          let size = isAtxHeading(line);
          if (size < 0)
              return false;
          let off = line.pos, from = cx.lineStart + off;
          let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
          while (after > off && line.text.charCodeAt(after - 1) == line.next)
              after--;
          if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
              after = line.text.length;
          let buf = cx.buffer
              .write(Type$1.HeaderMark, 0, size)
              .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
          if (after < line.text.length)
              buf.write(Type$1.HeaderMark, after - off, endOfSpace - off);
          let node = buf.finish(Type$1.ATXHeading1 - 1 + size, line.text.length - off);
          cx.nextLine();
          cx.addNode(node, from);
          return true;
      },
      HTMLBlock(cx, line) {
          let type = isHTMLBlock(line, cx, false);
          if (type < 0)
              return false;
          let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
          let marks = [], trailing = end != EmptyLine;
          while (!end.test(line.text) && cx.nextLine()) {
              if (line.depth < cx.stack.length) {
                  trailing = false;
                  break;
              }
              for (let m of line.markers)
                  marks.push(m);
          }
          if (trailing)
              cx.nextLine();
          let nodeType = end == CommentEnd ? Type$1.CommentBlock : end == ProcessingEnd ? Type$1.ProcessingInstructionBlock : Type$1.HTMLBlock;
          let to = cx.prevLineEnd();
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
          return true;
      },
      SetextHeading: undefined // Specifies relative precedence for block-continue function
  };
  // This implements a state machine that incrementally parses link references. At each
  // next line, it looks ahead to see if the line continues the reference or not. If it
  // doesn't and a valid link is available ending before that line, it finishes that.
  // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
  // creates a link reference if there's a valid reference up to the current point.
  class LinkReferenceParser {
      constructor(leaf) {
          this.stage = 0 /* RefStage.Start */;
          this.elts = [];
          this.pos = 0;
          this.start = leaf.start;
          this.advance(leaf.content);
      }
      nextLine(cx, line, leaf) {
          if (this.stage == -1 /* RefStage.Failed */)
              return false;
          let content = leaf.content + "\n" + line.scrub();
          let finish = this.advance(content);
          if (finish > -1 && finish < content.length)
              return this.complete(cx, leaf, finish);
          return false;
      }
      finish(cx, leaf) {
          if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
              return this.complete(cx, leaf, leaf.content.length);
          return false;
      }
      complete(cx, leaf, len) {
          cx.addLeafElement(leaf, elt(Type$1.LinkReference, this.start, this.start + len, this.elts));
          return true;
      }
      nextStage(elt) {
          if (elt) {
              this.pos = elt.to - this.start;
              this.elts.push(elt);
              this.stage++;
              return true;
          }
          if (elt === false)
              this.stage = -1 /* RefStage.Failed */;
          return false;
      }
      advance(content) {
          for (;;) {
              if (this.stage == -1 /* RefStage.Failed */) {
                  return -1;
              }
              else if (this.stage == 0 /* RefStage.Start */) {
                  if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                      return -1;
                  if (content.charCodeAt(this.pos) != 58 /* ':' */)
                      return this.stage = -1 /* RefStage.Failed */;
                  this.elts.push(elt(Type$1.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                  this.pos++;
              }
              else if (this.stage == 1 /* RefStage.Label */) {
                  if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                      return -1;
              }
              else if (this.stage == 2 /* RefStage.Link */) {
                  let skip = skipSpace(content, this.pos), end = 0;
                  if (skip > this.pos) {
                      let title = parseLinkTitle(content, skip, this.start);
                      if (title) {
                          let titleEnd = lineEnd(content, title.to - this.start);
                          if (titleEnd > 0) {
                              this.nextStage(title);
                              end = titleEnd;
                          }
                      }
                  }
                  if (!end)
                      end = lineEnd(content, this.pos);
                  return end > 0 && end < content.length ? end : -1;
              }
              else { // RefStage.Title
                  return lineEnd(content, this.pos);
              }
          }
      }
  }
  function lineEnd(text, pos) {
      for (; pos < text.length; pos++) {
          let next = text.charCodeAt(pos);
          if (next == 10)
              break;
          if (!space(next))
              return -1;
      }
      return pos;
  }
  class SetextHeadingParser {
      nextLine(cx, line, leaf) {
          let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
          let next = line.next;
          if (underline < 0)
              return false;
          let underlineMark = elt(Type$1.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
          cx.nextLine();
          cx.addLeafElement(leaf, elt(next == 61 ? Type$1.SetextHeading1 : Type$1.SetextHeading2, leaf.start, cx.prevLineEnd(), [
              ...cx.parser.parseInline(leaf.content, leaf.start),
              underlineMark
          ]));
          return true;
      }
      finish() {
          return false;
      }
  }
  const DefaultLeafBlocks = {
      LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
      SetextHeading() { return new SetextHeadingParser; }
  };
  const DefaultEndLeaf = [
      (_, line) => isAtxHeading(line) >= 0,
      (_, line) => isFencedCode(line) >= 0,
      (_, line) => isBlockquote(line) >= 0,
      (p, line) => isBulletList(line, p, true) >= 0,
      (p, line) => isOrderedList(line, p, true) >= 0,
      (p, line) => isHorizontalRule(line, p, true) >= 0,
      (p, line) => isHTMLBlock(line, p, true) >= 0
  ];
  const scanLineResult = { text: "", end: 0 };
  /**
  Block-level parsing functions get access to this context object.
  */
  class BlockContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser configuration used.
      */
      parser, 
      /**
      @internal
      */
      input, fragments, 
      /**
      @internal
      */
      ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.line = new Line();
          this.atEnd = false;
          /**
          For reused nodes on gaps, we can't directly put the original
          node into the tree, since that may be bigger than its parent.
          When this happens, we create a dummy tree that is replaced by
          the proper node in `injectGaps` @internal
          */
          this.reusePlaceholders = new Map;
          this.stoppedAt = null;
          /**
          The range index that absoluteLineStart points into @internal
          */
          this.rangeI = 0;
          this.to = ranges[ranges.length - 1].to;
          this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
          this.block = CompositeBlock.create(Type$1.Document, 0, this.lineStart, 0, 0);
          this.stack = [this.block];
          this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
          this.readLine();
      }
      get parsedPos() {
          return this.absoluteLineStart;
      }
      advance() {
          if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
              return this.finish();
          let { line } = this;
          for (;;) {
              for (let markI = 0;;) {
                  let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
                  while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {
                      let mark = line.markers[markI++];
                      this.addNode(mark.type, mark.from, mark.to);
                  }
                  if (!next)
                      break;
                  this.finishContext();
              }
              if (line.pos < line.text.length)
                  break;
              // Empty line
              if (!this.nextLine())
                  return this.finish();
          }
          if (this.fragments && this.reuseFragment(line.basePos))
              return null;
          start: for (;;) {
              for (let type of this.parser.blockParsers)
                  if (type) {
                      let result = type(this, line);
                      if (result != false) {
                          if (result == true)
                              return null;
                          line.forward();
                          continue start;
                      }
                  }
              break;
          }
          let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
          for (let parse of this.parser.leafBlockParsers)
              if (parse) {
                  let parser = parse(this, leaf);
                  if (parser)
                      leaf.parsers.push(parser);
              }
          lines: while (this.nextLine()) {
              if (line.pos == line.text.length)
                  break;
              if (line.indent < line.baseIndent + 4) {
                  for (let stop of this.parser.endLeafBlock)
                      if (stop(this, line, leaf))
                          break lines;
              }
              for (let parser of leaf.parsers)
                  if (parser.nextLine(this, line, leaf))
                      return null;
              leaf.content += "\n" + line.scrub();
              for (let m of line.markers)
                  leaf.marks.push(m);
          }
          this.finishLeaf(leaf);
          return null;
      }
      stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
              throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
      }
      reuseFragment(start) {
          if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
              !this.fragments.matches(this.block.hash))
              return false;
          let taken = this.fragments.takeNodes(this);
          if (!taken)
              return false;
          this.absoluteLineStart += taken;
          this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
          this.moveRangeI();
          if (this.absoluteLineStart < this.to) {
              this.lineStart++;
              this.absoluteLineStart++;
              this.readLine();
          }
          else {
              this.atEnd = true;
              this.readLine();
          }
          return true;
      }
      /**
      The number of parent blocks surrounding the current block.
      */
      get depth() {
          return this.stack.length;
      }
      /**
      Get the type of the parent block at the given depth. When no
      depth is passed, return the type of the innermost parent.
      */
      parentType(depth = this.depth - 1) {
          return this.parser.nodeSet.types[this.stack[depth].type];
      }
      /**
      Move to the next input line. This should only be called by
      (non-composite) [block parsers](#BlockParser.parse) that consume
      the line directly, or leaf block parser
      [`nextLine`](#LeafBlockParser.nextLine) methods when they
      consume the current line (and return true).
      */
      nextLine() {
          this.lineStart += this.line.text.length;
          if (this.absoluteLineEnd >= this.to) {
              this.absoluteLineStart = this.absoluteLineEnd;
              this.atEnd = true;
              this.readLine();
              return false;
          }
          else {
              this.lineStart++;
              this.absoluteLineStart = this.absoluteLineEnd + 1;
              this.moveRangeI();
              this.readLine();
              return true;
          }
      }
      /**
      Retrieve the text of the line after the current one, without
      actually moving the context's current line forward.
      */
      peekLine() {
          return this.scanLine(this.absoluteLineEnd + 1).text;
      }
      moveRangeI() {
          while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
              this.rangeI++;
              this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
          }
      }
      /**
      @internal
      Collect the text for the next line.
      */
      scanLine(start) {
          let r = scanLineResult;
          r.end = start;
          if (start >= this.to) {
              r.text = "";
          }
          else {
              r.text = this.lineChunkAt(start);
              r.end += r.text.length;
              if (this.ranges.length > 1) {
                  let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                  while (this.ranges[rangeI].to < r.end) {
                      rangeI++;
                      let nextFrom = this.ranges[rangeI].from;
                      let after = this.lineChunkAt(nextFrom);
                      r.end = nextFrom + after.length;
                      r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                      textOffset = r.end - r.text.length;
                  }
              }
          }
          return r;
      }
      /**
      @internal
      Populate this.line with the content of the next line. Skip
      leading characters covered by composite blocks.
      */
      readLine() {
          let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
          this.absoluteLineEnd = end;
          line.reset(text);
          for (; line.depth < this.stack.length; line.depth++) {
              let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
              if (!handler)
                  throw new Error("Unhandled block context " + Type$1[cx.type]);
              if (!handler(cx, this, line))
                  break;
              line.forward();
          }
      }
      lineChunkAt(pos) {
          let next = this.input.chunk(pos), text;
          if (!this.input.lineChunks) {
              let eol = next.indexOf("\n");
              text = eol < 0 ? next : next.slice(0, eol);
          }
          else {
              text = next == "\n" ? "" : next;
          }
          return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
      }
      /**
      The end position of the previous line.
      */
      prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
      /**
      @internal
      */
      startContext(type, start, value = 0) {
          this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
          this.stack.push(this.block);
      }
      /**
      Start a composite block. Should only be called from [block
      parser functions](#BlockParser.parse) that return null.
      */
      startComposite(type, start, value = 0) {
          this.startContext(this.parser.getNodeType(type), start, value);
      }
      /**
      @internal
      */
      addNode(block, from, to) {
          if (typeof block == "number")
              block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
          this.block.addChild(block, from - this.block.from);
      }
      /**
      Add a block element. Can be called by [block
      parsers](#BlockParser.parse).
      */
      addElement(elt) {
          this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
      }
      /**
      Add a block element from a [leaf parser](#LeafBlockParser). This
      makes sure any extra composite block markup (such as blockquote
      markers) inside the block are also added to the syntax tree.
      */
      addLeafElement(leaf, elt) {
          this.addNode(this.buffer
              .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
              .finish(elt.type, elt.to - elt.from), elt.from);
      }
      /**
      @internal
      */
      finishContext() {
          let cx = this.stack.pop();
          let top = this.stack[this.stack.length - 1];
          top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
          this.block = top;
      }
      finish() {
          while (this.stack.length > 1)
              this.finishContext();
          return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
      }
      addGaps(tree) {
          return this.ranges.length > 1 ?
              injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
      }
      /**
      @internal
      */
      finishLeaf(leaf) {
          for (let parser of leaf.parsers)
              if (parser.finish(this, leaf))
                  return;
          let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
          this.addNode(this.buffer
              .writeElements(inline, -leaf.start)
              .finish(Type$1.Paragraph, leaf.content.length), leaf.start);
      }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
      /**
      @internal
      */
      get buffer() { return new Buffer(this.parser.nodeSet); }
  }
  function injectGaps(ranges, rangeI, tree, offset, dummies) {
      let rangeEnd = ranges[rangeI].to;
      let children = [], positions = [], start = tree.from + offset;
      function movePastNext(upto, inclusive) {
          while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
              let size = ranges[rangeI + 1].from - rangeEnd;
              offset += size;
              upto += size;
              rangeI++;
              rangeEnd = ranges[rangeI].to;
          }
      }
      for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
          movePastNext(ch.from + offset, true);
          let from = ch.from + offset, node, reuse = dummies.get(ch.tree);
          if (reuse) {
              node = reuse;
          }
          else if (ch.to + offset > rangeEnd) {
              node = injectGaps(ranges, rangeI, ch, offset, dummies);
              movePastNext(ch.to + offset, false);
          }
          else {
              node = ch.toTree();
          }
          children.push(node);
          positions.push(from - start);
      }
      movePastNext(tree.to + offset, false);
      return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
  }
  /**
  A Markdown parser configuration.
  */
  class MarkdownParser extends Parser {
      /**
      @internal
      */
      constructor(
      /**
      The parser's syntax [node
      types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
      */
      nodeSet, 
      /**
      @internal
      */
      blockParsers, 
      /**
      @internal
      */
      leafBlockParsers, 
      /**
      @internal
      */
      blockNames, 
      /**
      @internal
      */
      endLeafBlock, 
      /**
      @internal
      */
      skipContextMarkup, 
      /**
      @internal
      */
      inlineParsers, 
      /**
      @internal
      */
      inlineNames, 
      /**
      @internal
      */
      wrappers) {
          super();
          this.nodeSet = nodeSet;
          this.blockParsers = blockParsers;
          this.leafBlockParsers = leafBlockParsers;
          this.blockNames = blockNames;
          this.endLeafBlock = endLeafBlock;
          this.skipContextMarkup = skipContextMarkup;
          this.inlineParsers = inlineParsers;
          this.inlineNames = inlineNames;
          this.wrappers = wrappers;
          /**
          @internal
          */
          this.nodeTypes = Object.create(null);
          for (let t of nodeSet.types)
              this.nodeTypes[t.name] = t.id;
      }
      createParse(input, fragments, ranges) {
          let parse = new BlockContext(this, input, fragments, ranges);
          for (let w of this.wrappers)
              parse = w(parse, input, fragments, ranges);
          return parse;
      }
      /**
      Reconfigure the parser.
      */
      configure(spec) {
          let config = resolveConfig(spec);
          if (!config)
              return this;
          let { nodeSet, skipContextMarkup } = this;
          let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
          if (nonEmpty(config.defineNodes)) {
              skipContextMarkup = Object.assign({}, skipContextMarkup);
              let nodeTypes = nodeSet.types.slice(), styles;
              for (let s of config.defineNodes) {
                  let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                  if (nodeTypes.some(t => t.name == name))
                      continue;
                  if (composite)
                      skipContextMarkup[nodeTypes.length] =
                          (bl, cx, line) => composite(cx, line, bl.value);
                  let id = nodeTypes.length;
                  let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                      : id >= Type$1.ATXHeading1 && id <= Type$1.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                  nodeTypes.push(NodeType.define({
                      id,
                      name,
                      props: group && [[NodeProp.group, group]]
                  }));
                  if (style) {
                      if (!styles)
                          styles = {};
                      if (Array.isArray(style) || style instanceof Tag)
                          styles[name] = style;
                      else
                          Object.assign(styles, style);
                  }
              }
              nodeSet = new NodeSet(nodeTypes);
              if (styles)
                  nodeSet = nodeSet.extend(styleTags(styles));
          }
          if (nonEmpty(config.props))
              nodeSet = nodeSet.extend(...config.props);
          if (nonEmpty(config.remove)) {
              for (let rm of config.remove) {
                  let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                  if (block > -1)
                      blockParsers[block] = leafBlockParsers[block] = undefined;
                  if (inline > -1)
                      inlineParsers[inline] = undefined;
              }
          }
          if (nonEmpty(config.parseBlock)) {
              for (let spec of config.parseBlock) {
                  let found = blockNames.indexOf(spec.name);
                  if (found > -1) {
                      blockParsers[found] = spec.parse;
                      leafBlockParsers[found] = spec.leaf;
                  }
                  else {
                      let pos = spec.before ? findName(blockNames, spec.before)
                          : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                      blockParsers.splice(pos, 0, spec.parse);
                      leafBlockParsers.splice(pos, 0, spec.leaf);
                      blockNames.splice(pos, 0, spec.name);
                  }
                  if (spec.endLeaf)
                      endLeafBlock.push(spec.endLeaf);
              }
          }
          if (nonEmpty(config.parseInline)) {
              for (let spec of config.parseInline) {
                  let found = inlineNames.indexOf(spec.name);
                  if (found > -1) {
                      inlineParsers[found] = spec.parse;
                  }
                  else {
                      let pos = spec.before ? findName(inlineNames, spec.before)
                          : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                      inlineParsers.splice(pos, 0, spec.parse);
                      inlineNames.splice(pos, 0, spec.name);
                  }
              }
          }
          if (config.wrap)
              wrappers = wrappers.concat(config.wrap);
          return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
      }
      /**
      @internal
      */
      getNodeType(name) {
          let found = this.nodeTypes[name];
          if (found == null)
              throw new RangeError(`Unknown node type '${name}'`);
          return found;
      }
      /**
      Parse the given piece of inline text at the given offset,
      returning an array of [`Element`](#Element) objects representing
      the inline content.
      */
      parseInline(text, offset) {
          let cx = new InlineContext(this, text, offset);
          outer: for (let pos = offset; pos < cx.end;) {
              let next = cx.char(pos);
              for (let token of this.inlineParsers)
                  if (token) {
                      let result = token(cx, next, pos);
                      if (result >= 0) {
                          pos = result;
                          continue outer;
                      }
                  }
              pos++;
          }
          return cx.resolveMarkers(0);
      }
  }
  function nonEmpty(a) {
      return a != null && a.length > 0;
  }
  function resolveConfig(spec) {
      if (!Array.isArray(spec))
          return spec;
      if (spec.length == 0)
          return null;
      let conf = resolveConfig(spec[0]);
      if (spec.length == 1)
          return conf;
      let rest = resolveConfig(spec.slice(1));
      if (!rest || !conf)
          return conf || rest;
      let conc = (a, b) => (a || none).concat(b || none);
      let wrapA = conf.wrap, wrapB = rest.wrap;
      return {
          props: conc(conf.props, rest.props),
          defineNodes: conc(conf.defineNodes, rest.defineNodes),
          parseBlock: conc(conf.parseBlock, rest.parseBlock),
          parseInline: conc(conf.parseInline, rest.parseInline),
          remove: conc(conf.remove, rest.remove),
          wrap: !wrapA ? wrapB : !wrapB ? wrapA :
              (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
      };
  }
  function findName(names, name) {
      let found = names.indexOf(name);
      if (found < 0)
          throw new RangeError(`Position specified relative to unknown parser ${name}`);
      return found;
  }
  let nodeTypes = [NodeType.none];
  for (let i = 1, name; name = Type$1[i]; i++) {
      nodeTypes[i] = NodeType.define({
          id: i,
          name,
          props: i >= Type$1.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
          top: name == "Document"
      });
  }
  const none = [];
  class Buffer {
      constructor(nodeSet) {
          this.nodeSet = nodeSet;
          this.content = [];
          this.nodes = [];
      }
      write(type, from, to, children = 0) {
          this.content.push(type, from, to, 4 + children * 4);
          return this;
      }
      writeElements(elts, offset = 0) {
          for (let e of elts)
              e.writeTo(this, offset);
          return this;
      }
      finish(type, length) {
          return Tree.build({
              buffer: this.content,
              nodeSet: this.nodeSet,
              reused: this.nodes,
              topID: type,
              length
          });
      }
  }
  /**
  Elements are used to compose syntax nodes during parsing.
  */
  let Element$1 = class Element {
      /**
      @internal
      */
      constructor(
      /**
      The node's
      [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
      */
      type, 
      /**
      The start of the node, as an offset from the start of the document.
      */
      from, 
      /**
      The end of the node.
      */
      to, 
      /**
      The node's child nodes @internal
      */
      children = none) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.children = children;
      }
      /**
      @internal
      */
      writeTo(buf, offset) {
          let startOff = buf.content.length;
          buf.writeElements(this.children, offset);
          buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
      }
      /**
      @internal
      */
      toTree(nodeSet) {
          return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
      }
  };
  class TreeElement {
      constructor(tree, from) {
          this.tree = tree;
          this.from = from;
      }
      get to() { return this.from + this.tree.length; }
      get type() { return this.tree.type.id; }
      get children() { return none; }
      writeTo(buf, offset) {
          buf.nodes.push(this.tree);
          buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
      }
      toTree() { return this.tree; }
  }
  function elt(type, from, to, children) {
      return new Element$1(type, from, to, children);
  }
  const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
  const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
  const LinkStart = {}, ImageStart = {};
  class InlineDelimiter {
      constructor(type, from, to, side) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.side = side;
      }
  }
  const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
  let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
  try {
      Punctuation = new RegExp("[\\p{S}|\\p{P}]", "u");
  }
  catch (_) { }
  const DefaultInline = {
      Escape(cx, next, start) {
          if (next != 92 /* '\\' */ || start == cx.end - 1)
              return -1;
          let escaped = cx.char(start + 1);
          for (let i = 0; i < Escapable.length; i++)
              if (Escapable.charCodeAt(i) == escaped)
                  return cx.append(elt(Type$1.Escape, start, start + 2));
          return -1;
      },
      Entity(cx, next, start) {
          if (next != 38 /* '&' */)
              return -1;
          let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
          return m ? cx.append(elt(Type$1.Entity, start, start + 1 + m[0].length)) : -1;
      },
      InlineCode(cx, next, start) {
          if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
              return -1;
          let pos = start + 1;
          while (pos < cx.end && cx.char(pos) == 96)
              pos++;
          let size = pos - start, curSize = 0;
          for (; pos < cx.end; pos++) {
              if (cx.char(pos) == 96) {
                  curSize++;
                  if (curSize == size && cx.char(pos + 1) != 96)
                      return cx.append(elt(Type$1.InlineCode, start, pos + 1, [
                          elt(Type$1.CodeMark, start, start + size),
                          elt(Type$1.CodeMark, pos + 1 - size, pos + 1)
                      ]));
              }
              else {
                  curSize = 0;
              }
          }
          return -1;
      },
      HTMLTag(cx, next, start) {
          if (next != 60 /* '<' */ || start == cx.end - 1)
              return -1;
          let after = cx.slice(start + 1, cx.end);
          let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
          if (url) {
              return cx.append(elt(Type$1.Autolink, start, start + 1 + url[0].length, [
                  elt(Type$1.LinkMark, start, start + 1),
                  // url[0] includes the closing bracket, so exclude it from this slice
                  elt(Type$1.URL, start + 1, start + url[0].length),
                  elt(Type$1.LinkMark, start + url[0].length, start + 1 + url[0].length)
              ]));
          }
          let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
          if (comment)
              return cx.append(elt(Type$1.Comment, start, start + 1 + comment[0].length));
          let procInst = /^\?[^]*?\?>/.exec(after);
          if (procInst)
              return cx.append(elt(Type$1.ProcessingInstruction, start, start + 1 + procInst[0].length));
          let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
          if (!m)
              return -1;
          return cx.append(elt(Type$1.HTMLTag, start, start + 1 + m[0].length));
      },
      Emphasis(cx, next, start) {
          if (next != 95 && next != 42)
              return -1;
          let pos = start + 1;
          while (cx.char(pos) == next)
              pos++;
          let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
          let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
          let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
          let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
          let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
          return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      },
      HardBreak(cx, next, start) {
          if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
              return cx.append(elt(Type$1.HardBreak, start, start + 2));
          if (next == 32) {
              let pos = start + 1;
              while (cx.char(pos) == 32)
                  pos++;
              if (cx.char(pos) == 10 && pos >= start + 2)
                  return cx.append(elt(Type$1.HardBreak, start, pos + 1));
          }
          return -1;
      },
      Link(cx, next, start) {
          return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;
      },
      Image(cx, next, start) {
          return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
              ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;
      },
      LinkEnd(cx, next, start) {
          if (next != 93 /* ']' */)
              return -1;
          // Scanning back to the next link/image start marker
          for (let i = cx.parts.length - 1; i >= 0; i--) {
              let part = cx.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                  // If this one has been set invalid (because it would produce
                  // a nested link) or there's no valid link here ignore both.
                  if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                      cx.parts[i] = null;
                      return -1;
                  }
                  // Finish the content and replace the entire range in
                  // this.parts with the link/image node.
                  let content = cx.takeContent(i);
                  let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type$1.Link : Type$1.Image, part.from, start + 1);
                  // Set any open-link markers before this link to invalid.
                  if (part.type == LinkStart)
                      for (let j = 0; j < i; j++) {
                          let p = cx.parts[j];
                          if (p instanceof InlineDelimiter && p.type == LinkStart)
                              p.side = 0 /* Mark.None */;
                      }
                  return link.to;
              }
          }
          return -1;
      }
  };
  function finishLink(cx, content, type, start, startPos) {
      let { text } = cx, next = cx.char(startPos), endPos = startPos;
      content.unshift(elt(Type$1.LinkMark, start, start + (type == Type$1.Image ? 2 : 1)));
      content.push(elt(Type$1.LinkMark, startPos - 1, startPos));
      if (next == 40 /* '(' */) {
          let pos = cx.skipSpace(startPos + 1);
          let dest = parseURL(text, pos - cx.offset, cx.offset), title;
          if (dest) {
              pos = cx.skipSpace(dest.to);
              // The destination and title must be separated by whitespace
              if (pos != dest.to) {
                  title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                  if (title)
                      pos = cx.skipSpace(title.to);
              }
          }
          if (cx.char(pos) == 41 /* ')' */) {
              content.push(elt(Type$1.LinkMark, startPos, startPos + 1));
              endPos = pos + 1;
              if (dest)
                  content.push(dest);
              if (title)
                  content.push(title);
              content.push(elt(Type$1.LinkMark, pos, endPos));
          }
      }
      else if (next == 91 /* '[' */) {
          let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
          if (label) {
              content.push(label);
              endPos = label.to;
          }
      }
      return elt(type, start, endPos, content);
  }
  // These return `null` when falling off the end of the input, `false`
  // when parsing fails otherwise (for use in the incremental link
  // reference parser).
  function parseURL(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next == 60 /* '<' */) {
          for (let pos = start + 1; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (ch == 62 /* '>' */)
                  return elt(Type$1.URL, start + offset, pos + 1 + offset);
              if (ch == 60 || ch == 10 /* '<\n' */)
                  return false;
          }
          return null;
      }
      else {
          let depth = 0, pos = start;
          for (let escaped = false; pos < text.length; pos++) {
              let ch = text.charCodeAt(pos);
              if (space(ch)) {
                  break;
              }
              else if (escaped) {
                  escaped = false;
              }
              else if (ch == 40 /* '(' */) {
                  depth++;
              }
              else if (ch == 41 /* ')' */) {
                  if (!depth)
                      break;
                  depth--;
              }
              else if (ch == 92 /* '\\' */) {
                  escaped = true;
              }
          }
          return pos > start ? elt(Type$1.URL, start + offset, pos + offset) : pos == text.length ? null : false;
      }
  }
  function parseLinkTitle(text, start, offset) {
      let next = text.charCodeAt(start);
      if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
          return false;
      let end = next == 40 ? 41 : next;
      for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == end)
              return elt(Type$1.LinkTitle, start + offset, pos + 1 + offset);
          else if (ch == 92 /* '\\' */)
              escaped = true;
      }
      return null;
  }
  function parseLinkLabel(text, start, offset, requireNonWS) {
      for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
              escaped = false;
          else if (ch == 93 /* ']' */)
              return requireNonWS ? false : elt(Type$1.LinkLabel, start + offset, pos + 1 + offset);
          else {
              if (requireNonWS && !space(ch))
                  requireNonWS = false;
              if (ch == 91 /* '[' */)
                  return false;
              else if (ch == 92 /* '\\' */)
                  escaped = true;
          }
      }
      return null;
  }
  /**
  Inline parsing functions get access to this context, and use it to
  read the content and emit syntax nodes.
  */
  class InlineContext {
      /**
      @internal
      */
      constructor(
      /**
      The parser that is being used.
      */
      parser, 
      /**
      The text of this inline section.
      */
      text, 
      /**
      The starting offset of the section in the document.
      */
      offset) {
          this.parser = parser;
          this.text = text;
          this.offset = offset;
          /**
          @internal
          */
          this.parts = [];
      }
      /**
      Get the character code at the given (document-relative)
      position.
      */
      char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
      /**
      The position of the end of this inline section.
      */
      get end() { return this.offset + this.text.length; }
      /**
      Get a substring of this inline section. Again uses
      document-relative positions.
      */
      slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
      /**
      @internal
      */
      append(elt) {
          this.parts.push(elt);
          return elt.to;
      }
      /**
      Add a [delimiter](#DelimiterType) at this given position. `open`
      and `close` indicate whether this delimiter is opening, closing,
      or both. Returns the end of the delimiter, for convenient
      returning from [parse functions](#InlineParser.parse).
      */
      addDelimiter(type, from, to, open, close) {
          return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));
      }
      /**
      Returns true when there is an unmatched link or image opening
      token before the current position.
      */
      get hasOpenLink() {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))
                  return true;
          }
          return false;
      }
      /**
      Add an inline element. Returns the end of the element.
      */
      addElement(elt) {
          return this.append(elt);
      }
      /**
      Resolve markers between this.parts.length and from, wrapping matched markers in the
      appropriate node and updating the content of this.parts. @internal
      */
      resolveMarkers(from) {
          // Scan forward, looking for closing tokens
          for (let i = from; i < this.parts.length; i++) {
              let close = this.parts[i];
              if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))
                  continue;
              let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
              let closeSize = close.to - close.from;
              let open, j = i - 1;
              // Continue scanning for a matching opening token
              for (; j >= from; j--) {
                  let part = this.parts[j];
                  if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&
                      // Ignore emphasis delimiters where the character count doesn't match
                      !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&
                          (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                      open = part;
                      break;
                  }
              }
              if (!open)
                  continue;
              let type = close.type.resolve, content = [];
              let start = open.from, end = close.to;
              // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
              // markers.
              if (emp) {
                  let size = Math.min(2, open.to - open.from, closeSize);
                  start = open.to - size;
                  end = close.from + size;
                  type = size == 1 ? "Emphasis" : "StrongEmphasis";
              }
              // Move the covered region into content, optionally adding marker nodes
              if (open.type.mark)
                  content.push(this.elt(open.type.mark, start, open.to));
              for (let k = j + 1; k < i; k++) {
                  if (this.parts[k] instanceof Element$1)
                      content.push(this.parts[k]);
                  this.parts[k] = null;
              }
              if (close.type.mark)
                  content.push(this.elt(close.type.mark, close.from, end));
              let element = this.elt(type, start, end, content);
              // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
              this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
              let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
              // Insert the new element in this.parts
              if (keep)
                  this.parts.splice(i, 0, element);
              else
                  this.parts[i] = element;
          }
          // Collect the elements remaining in this.parts into an array.
          let result = [];
          for (let i = from; i < this.parts.length; i++) {
              let part = this.parts[i];
              if (part instanceof Element$1)
                  result.push(part);
          }
          return result;
      }
      /**
      Find an opening delimiter of the given type. Returns `null` if
      no delimiter is found, or an index that can be passed to
      [`takeContent`](#InlineContext.takeContent) otherwise.
      */
      findOpeningDelimiter(type) {
          for (let i = this.parts.length - 1; i >= 0; i--) {
              let part = this.parts[i];
              if (part instanceof InlineDelimiter && part.type == type)
                  return i;
          }
          return null;
      }
      /**
      Remove all inline elements and delimiters starting from the
      given index (which you should get from
      [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
      resolve delimiters inside of them, and return them as an array
      of elements.
      */
      takeContent(startIndex) {
          let content = this.resolveMarkers(startIndex);
          this.parts.length = startIndex;
          return content;
      }
      /**
      Skip space after the given (document) position, returning either
      the position of the next non-space character or the end of the
      section.
      */
      skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
      elt(type, from, to, children) {
          if (typeof type == "string")
              return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
      }
  }
  function injectMarks(elements, marks) {
      if (!marks.length)
          return elements;
      if (!elements.length)
          return marks;
      let elts = elements.slice(), eI = 0;
      for (let mark of marks) {
          while (eI < elts.length && elts[eI].to < mark.to)
              eI++;
          if (eI < elts.length && elts[eI].from < mark.from) {
              let e = elts[eI];
              if (e instanceof Element$1)
                  elts[eI] = new Element$1(e.type, e.from, e.to, injectMarks(e.children, [mark]));
          }
          else {
              elts.splice(eI++, 0, mark);
          }
      }
      return elts;
  }
  // These are blocks that can span blank lines, and should thus only be
  // reused if their next sibling is also being reused.
  const NotLast = [Type$1.CodeBlock, Type$1.ListItem, Type$1.OrderedList, Type$1.BulletList];
  class FragmentCursor {
      constructor(fragments, input) {
          this.fragments = fragments;
          this.input = input;
          // Index into fragment array
          this.i = 0;
          // Active fragment
          this.fragment = null;
          this.fragmentEnd = -1;
          // Cursor into the current fragment, if any. When `moveTo` returns
          // true, this points at the first block after `pos`.
          this.cursor = null;
          if (fragments.length)
              this.fragment = fragments[this.i++];
      }
      nextFragment() {
          this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
          this.cursor = null;
          this.fragmentEnd = -1;
      }
      moveTo(pos, lineStart) {
          while (this.fragment && this.fragment.to <= pos)
              this.nextFragment();
          if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
              return false;
          if (this.fragmentEnd < 0) {
              let end = this.fragment.to;
              while (end > 0 && this.input.read(end - 1, end) != "\n")
                  end--;
              this.fragmentEnd = end ? end - 1 : 0;
          }
          let c = this.cursor;
          if (!c) {
              c = this.cursor = this.fragment.tree.cursor();
              c.firstChild();
          }
          let rPos = pos + this.fragment.offset;
          while (c.to <= rPos)
              if (!c.parent())
                  return false;
          for (;;) {
              if (c.from >= rPos)
                  return this.fragment.from <= lineStart;
              if (!c.childAfter(rPos))
                  return false;
          }
      }
      matches(hash) {
          let tree = this.cursor.tree;
          return tree && tree.prop(NodeProp.contextHash) == hash;
      }
      takeNodes(cx) {
          let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
          let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
          let prevEnd = end, prevI = blockI;
          for (;;) {
              if (cur.to - off > fragEnd) {
                  if (cur.type.isAnonymous && cur.firstChild())
                      continue;
                  break;
              }
              let pos = toRelative(cur.from - off, cx.ranges);
              if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range
                  cx.addNode(cur.tree, pos);
              }
              else {
                  let dummy = new Tree(cx.parser.nodeSet.types[Type$1.Paragraph], [], [], 0, cx.block.hashProp);
                  cx.reusePlaceholders.set(dummy, cur.tree);
                  cx.addNode(dummy, pos);
              }
              // Taken content must always end in a block, because incremental
              // parsing happens on block boundaries. Never stop directly
              // after an indented code block, since those can continue after
              // any number of blank lines.
              if (cur.type.is("Block")) {
                  if (NotLast.indexOf(cur.type.id) < 0) {
                      end = cur.to - off;
                      blockI = cx.block.children.length;
                  }
                  else {
                      end = prevEnd;
                      blockI = prevI;
                      prevEnd = cur.to - off;
                      prevI = cx.block.children.length;
                  }
              }
              if (!cur.nextSibling())
                  break;
          }
          while (cx.block.children.length > blockI) {
              cx.block.children.pop();
              cx.block.positions.pop();
          }
          return end - start;
      }
  }
  // Convert an input-stream-relative position to a
  // Markdown-doc-relative position by subtracting the size of all input
  // gaps before `abs`.
  function toRelative(abs, ranges) {
      let pos = abs;
      for (let i = 1; i < ranges.length; i++) {
          let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;
          if (gapFrom < abs)
              pos -= gapTo - gapFrom;
      }
      return pos;
  }
  const markdownHighlighting = styleTags({
      "Blockquote/...": tags$1.quote,
      HorizontalRule: tags$1.contentSeparator,
      "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
      "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
      "ATXHeading3/...": tags$1.heading3,
      "ATXHeading4/...": tags$1.heading4,
      "ATXHeading5/...": tags$1.heading5,
      "ATXHeading6/...": tags$1.heading6,
      "Comment CommentBlock": tags$1.comment,
      Escape: tags$1.escape,
      Entity: tags$1.character,
      "Emphasis/...": tags$1.emphasis,
      "StrongEmphasis/...": tags$1.strong,
      "Link/... Image/...": tags$1.link,
      "OrderedList/... BulletList/...": tags$1.list,
      "BlockQuote/...": tags$1.quote,
      "InlineCode CodeText": tags$1.monospace,
      "URL Autolink": tags$1.url,
      "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
      "CodeInfo LinkLabel": tags$1.labelName,
      LinkTitle: tags$1.string,
      Paragraph: tags$1.content
  });
  /**
  The default CommonMark parser.
  */
  const parser$1 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  superscript using `^` markers.
  */
  ({
      defineNodes: [
          { name: "Superscript", style: tags$1.special(tags$1.content) },
          { name: "SuperscriptMark", style: tags$1.processingInstruction }
      ]});
  /**
  Extension providing
  [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
  subscript using `~` markers.
  */
  ({
      defineNodes: [
          { name: "Subscript", style: tags$1.special(tags$1.content) },
          { name: "SubscriptMark", style: tags$1.processingInstruction }
      ]});

  /**
   * @typedef {import('@lezer/common').Tree} Tree
   * @typedef {import('@codemirror/lint').Diagnostic} LintMessage
   */

  /**
   * Create an array of syntax errors in the given tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of syntax errors
   */
  function lintSyntax(syntaxTree) {

    const lintMessages = [];

    syntaxTree.iterate({
      enter: ref => {
        const node = ref.node;

        if (!node.type.isError) {
          return;
        }

        const parent = node.parent;
        const next = getNextNode(node);

        const message = {
          from: node.from,
          to: node.to,
          severity: 'error',
          type: 'Syntax Error'
        };

        if (node.from !== node.to) {
          message.message = `Unrecognized token in <${parent.name}>`;
        } else if (next) {
          message.message = `Unrecognized token <${next.name}> in <${parent.name}>`;
          message.to = next.to;
        } else {
          const before = parent.enterUnfinishedNodesBefore(node.to);
          message.message = `Incomplete <${ (before || parent).name }>`;
        }

        lintMessages.push(message);
      }
    });

    return lintMessages;
  }

  function getNextNode(node) {
    if (!node) {
      return null;
    }

    return node.nextSibling || getNextNode(node.parent);
  }

  /**
   * @typedef {object} Context
   * @property {function} report
   * @property {(from: number, to: number) => string} readContent
   * @property {(from: number, to: number, content: string) => void} updateContent
   */

  const RULE_NAME = 'first-item';

  var firstItem = {
    create(/** @type {Context} */ context) {
      return {
        enter(node) {
          if (node.name !== 'FilterExpression') {
            return;
          }

          const content = context.readContent(node.from, node.to);

          if (zeroIndexPattern().test(content)) {
            const {
              from,
              to
            } = node;

            context.report({
              from,
              to,
              message: 'First item is accessed via [1]',
              severity: 'warning',
              type: RULE_NAME,
              actions: [
                {
                  name: 'fix',
                  apply(_, start = from, end = to) {
                    context.updateContent(start, end, content.replace(zeroIndexPattern(), '[1]'));
                  }
                }
              ]
            });
          }
        }
      };
    }
  };

  function zeroIndexPattern() {
    return /\[\s*0\s*\]$/;
  }

  /**
   * @typedef {import('@lezer/common').Tree} Tree
   * @typedef {import('@codemirror/lint').Diagnostic} LintMessage
   * @typedef {import('./index').LintAllContext} LintAllContext
   */

  const RULES = [
    firstItem
  ];

  /**
   * Create an array of messages reported from rules in the given tree.
   *
   * @param {LintAllContext} context
   * @returns {LintMessage[]} array of syntax errors
   */
  function lintRules(context) {
    const {
      readContent,
      syntaxTree,
      updateContent
    } = context;

    const lintMessages = [];

    const ruleContext = {
      readContent,
      report: message => {
        lintMessages.push(message);
      },
      updateContent
    };

    const rules = RULES.map(rule => rule.create(ruleContext));

    syntaxTree.iterate({
      enter: ref => {
        for (const rule of rules) {
          rule.enter && rule.enter(ref);
        }
      },
      leave: ref => {
        for (const rule of rules) {
          rule.leave && rule.leave(ref);
        }
      }
    });

    return lintMessages;
  }

  /**
   * @typedef {import('@lezer/common').Tree} Tree
   * @typedef {import('@codemirror/lint').Diagnostic} LintMessage
   */

  /**
   * @typedef {object} LintAllContext
   * @property {Tree} syntaxTree
   * @property {(from: number, to: number) => string} readContent
   * @property {(from: number, to: number, content: string) => void} updateContent
   */

  /**
   * Generates lint messages for the given context.
   *
   * @param {LintAllContext} context
   * @returns {LintMessage[]} array of all lint messages
   */
  function lintAll$1(context) {

    const lintMessages = [
      ...lintSyntax(context.syntaxTree),
      ...lintRules(context)
    ];

    return lintMessages;
  }

  /**
   * CodeMirror extension that provides linting for FEEL expressions.
   *
   * @returns {import('@codemirror/lint').LintSource} CodeMirror linting source
   */
  const cmFeelLinter = () => editorView => {

    // don't lint if the Editor is empty
    if (editorView.state.doc.length === 0) {
      return [];
    }

    const tree = syntaxTree(editorView.state);

    const messages = lintAll$1({
      syntaxTree: tree,
      readContent: (from, to) => editorView.state.sliceDoc(from, to),
      updateContent: (from, to, content) => editorView.dispatch({
        changes: { from, to, insert: content }
      })
    });

    return messages.map(message => ({
      ...message,
      source: message.type
    }));
  };

  const highlightStyle$2 = syntaxHighlighting(HighlightStyle.define([
    { tag: tags$1.strong, fontWeight: 'bold' },
    { tag: tags$1.emphasis, fontStyle: 'italic' },
  ]));

  const theme$2 = EditorView.theme({
    '& .cm-lintRange': {
      position: 'relative',
    },
    '& .cm-lintRange::after': {
      content: '""',
      width: '100%',
      position: 'absolute',
      left: '0px',
      bottom: '-2px',
      height: '3px',
      backgroundRepeat: 'repeat-x',
    },
    '& .cm-lintRange.cm-lintRange-warning, & .cm-lintRange.cm-lintRange-error': {
      backgroundImage: 'none',
    },
    '& .cm-lintPoint::after': {
      bottom: '-2px'
    }
  });

  var commonTheme = [
    theme$2,
    highlightStyle$2
  ];

  const _urlify = (color) => `%23${color.slice(1)}`;

  const colors = {
    black: '#1f2b36',
    darkGrey: '#2f3d58',
    grey: '#404a5c',
    midGrey: '#576071',
    offWhite: '#d9e0f5',
    snowWhite: '#eaf1ff',
    white: '#ffffff',
    mossGreen: '#7ab6aa',
    iceBlue: '#6cbfd8',
    waterBlue: '#065aaa',
    brightBlue: '#0a56b9',
    deepBlue: '#355472',
    red: '#9f1c15',
    orangeBrown: '#b4502f',
    yellow: '#debd71',
    lila: '#9a4890',
    purple: '#5b2c83'
  };

  const colorByRole = {
    lightBackground: colors.white,
    darkBackground: colors.snowWhite,
    selection: colors.snowWhite,
    tooltipBackground: colors.offWhite,
    error: colors.red,
    warning: colors.yellow,
    invalid: '#b40000'
  };

  const theme$1 = EditorView.theme(
    {
      '&': { color: colors.black, backgroundColor: colorByRole.lightBackground },
      '.cm-content': { caretColor: colors.darkGrey },
      '.cm-cursor, .cm-dropCursor': { borderLeftColor: colors.darkGrey },
      '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection':
        { backgroundColor: colorByRole.selection },

      '.cm-panels': { backgroundColor: colorByRole.darkBackground, color: colors.grey },
      '.cm-panels.cm-panels-top': { borderBottom: `2px solid ${ colors.black }` },
      '.cm-panels.cm-panels-bottom': { borderTop: `2px solid ${ colors.black }` },

      '.cm-searchMatch': {
        backgroundColor: '#72a1ff59',
        outline: `1px solid ${colors.midGrey}`
      },
      '.cm-searchMatch.cm-searchMatch-selected': { backgroundColor: colors.offWhite },
      '.cm-activeLine': { backgroundColor: colorByRole.selection },
      '.cm-selectionMatch': { backgroundColor: colors.offWhite },

      '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
        outline: `1px solid ${colors.grey}`
      },

      '&.cm-focused .cm-matchingBracket': {
        backgroundColor: colors.snowWhite
      },

      '.cm-gutters': {
        backgroundColor: '#f3f7fe',
        color: '#52668d',
        border: 'none',
        padding: '0 5px'
      },

      '.cm-activeLineGutter': {
        backgroundColor: colorByRole.selection
      },

      '.cm-foldPlaceholder': {
        backgroundColor: 'transparent',
        border: 'none',
        color: '#ddd'
      },

      '.cm-tooltip': {
        border: 'none',
        backgroundColor: colorByRole.tooltipBackground
      },
      '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent'
      },
      '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: colorByRole.tooltipBackground,
        borderBottomColor: colorByRole.tooltipBackground
      },
      '.cm-tooltip-autocomplete': {
        '& > ul > li[aria-selected]': {
          backgroundColor: colorByRole.darkBackground,
          color: colors.midGrey
        }
      },
      '& .cm-lintRange.cm-lintRange-warning::after': {
        backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${_urlify(colorByRole.warning)}' fill='none' stroke-width='1.2'/></svg>")`,
      },
      '& .cm-lintRange.cm-lintRange-error::after': {
        backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${_urlify(colorByRole.error)}' fill='none' stroke-width='1.2'/></svg>")`,
      },
      '& .cm-diagnostic-warning': {
        border: `1px solid ${colorByRole.warning}`,
        borderLeft: `5px solid ${colorByRole.warning}`,
        background: colorByRole.lightBackground,
      },
      '& .cm-diagnostic-error': {
        border: `1px solid ${colorByRole.error}`,
        borderLeft: `5px solid ${colorByRole.error}`,
        background: colorByRole.lightBackground
      },
      '& .cm-diagnostic': {
        padding: '3px 8px'
      }
    },
    { dark: false }
  );

  const highlightStyle$1 = syntaxHighlighting(HighlightStyle.define([
    {
      tag: [ tags$1.macroName, tags$1.variableName ],
      color: colors.waterBlue
    },
    {
      tag: [ tags$1.special(tags$1.bracket) ],
      color: colors.waterBlue,
      fontWeight: 'bold'
    },
    {
      tag: [ tags$1.color, tags$1.name, tags$1.definition(tags$1.name), tags$1.constant(tags$1.name), tags$1.standard(tags$1.name), tags$1.propertyName, ],
      color: colors.deepBlue
    },
    {
      tag: [ tags$1.definition(tags$1.variableName), tags$1.function(tags$1.variableName), tags$1.function(tags$1.propertyName) ],
      color: colors.brightBlue,
    },
    { tag: [ tags$1.labelName ], color: colors.orangeBrown },
    {
      tag: [ tags$1.annotation ],
      color: colorByRole.invalid
    },
    {
      tag: [ tags$1.number, tags$1.changed, tags$1.annotation, tags$1.modifier, tags$1.self, tags$1.namespace, tags$1.atom, tags$1.bool, tags$1.special(tags$1.variableName) ],
      color: colors.red
    },
    {
      tag: [ tags$1.typeName, tags$1.className, tags$1.attributeName ],
      color: colors.lila
    },
    {
      tag: [ tags$1.operator, tags$1.operatorKeyword, tags$1.tagName, tags$1.keyword ],
      color: colors.purple
    },
    {
      tag: [ tags$1.angleBracket, tags$1.squareBracket, tags$1.brace, tags$1.separator, tags$1.punctuation ],
      color: colors.midGrey
    },
    {
      tag: [ tags$1.regexp ],
      color: colors.deepBlue
    },
    {
      tag: [ tags$1.quote ],
      color: colors.darkGrey
    },
    { tag: [ tags$1.string, tags$1.character, tags$1.deleted ], color: colors.orangeBrown },
    {
      tag: tags$1.link,
      color: colors.mossGreen,
      textDecoration: 'underline',
      textUnderlinePosition: 'under'
    },
    {
      tag: [ tags$1.url, tags$1.escape, tags$1.special(tags$1.string) ],
      color: colors.red
    },
    { tag: [ tags$1.meta ], color: colors.iceBlue },
    { tag: [ tags$1.comment ], color: colors.midGrey, fontStyle: 'italic' },
    { tag: tags$1.strong, fontWeight: 'bold', color: colors.deepBlue },
    { tag: tags$1.emphasis, fontStyle: 'italic', color: colors.deepBlue },
    { tag: tags$1.strikethrough, textDecoration: 'line-through' },
    { tag: tags$1.heading, fontWeight: 'bold', color: colors.midGray },
    { tag: tags$1.special(tags$1.heading1), fontWeight: 'bold', color: colors.darkGrey },
    {
      tag: [ tags$1.heading1, tags$1.heading2, tags$1.heading3, tags$1.heading4 ],
      fontWeight: 'bold',
      color: colors.midGrey
    },
    { tag: [ tags$1.heading5, tags$1.heading6, tags$1.processingInstruction, tags$1.inserted ], color: colors.grey },
    {
      tag: [ tags$1.contentSeparator ],
      color: colors.yellow
    },
    { tag: tags$1.invalid, color: colors.midGrey, borderBottom: `1px dotted ${colorByRole.invalid}` }
  ]));

  var bpmnioLight = [
    theme$1,
    highlightStyle$1
  ];

  const ivory = '#abb2bf',
        peach = '#f07178',
        stone = '#7d8799',
        invalid = '#ffffff',
        pastelYellow = '#fffce1',
        pastelOrange = '#ec9e6f',
        raisinBlack = '#21252b',
        highlightBackground = 'rgba(0, 0, 0, 0.5)',
        background = '#292d3e',
        tooltipBackground = '#353a42',
        selection = 'rgba(128, 203, 196, 0.2)',
        cursor = '#ffcc00';

  const urlHash = '%23';
  const warningColorHex = 'fff890';
  const errorColor = 'red';
  const warningBackgroundColor = '#281e16';
  const errorBackgroundColor = '#281616';

  const theme$3 = EditorView.theme(
    {
      '&': {
        color: '#ffffff',
        backgroundColor: background
      },
      '.cm-content': {
        caretColor: cursor
      },
      '&.cm-focused .cm-cursor': {
        borderLeftColor: cursor
      },
      '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection':
        { backgroundColor: selection },
      '.cm-panels': { backgroundColor: raisinBlack, color: '#ffffff' },
      '.cm-panels.cm-panels-top': { borderBottom: '2px solid black' },
      '.cm-panels.cm-panels-bottom': { borderTop: '2px solid black' },
      '.cm-searchMatch': {
        backgroundColor: '#72a1ff59',
        outline: '1px solid #457dff'
      },
      '.cm-searchMatch.cm-searchMatch-selected': {
        backgroundColor: '#6199ff2f'
      },
      '.cm-activeLine': { backgroundColor: highlightBackground },
      '.cm-selectionMatch': { backgroundColor: '#aafe661a' },
      '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
        backgroundColor: '#bad0f847',
        outline: '1px solid #515a6b'
      },
      '.cm-gutters': {
        background: '#292d3e',
        color: '#676e95',
        border: 'none',
        padding: '0 5px'
      },
      '.cm-activeLineGutter': {
        backgroundColor: highlightBackground
      },
      '.cm-foldPlaceholder': {
        backgroundColor: 'transparent',
        border: 'none',
        color: '#ddd'
      },
      '.cm-tooltip': {
        border: 'none',
        backgroundColor: tooltipBackground
      },
      '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent'
      },
      '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: tooltipBackground,
        borderBottomColor: tooltipBackground
      },
      '.cm-tooltip-autocomplete': {
        '& > ul > li[aria-selected]': {
          backgroundColor: highlightBackground,
          color: ivory
        }
      },
      '& .cm-lintRange.cm-lintRange-warning::after': {
        backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${urlHash + warningColorHex}' fill='none' stroke-width='1.2'/></svg>")`,
      },
      '& .cm-lintRange.cm-lintRange-error::after': {
        backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${errorColor}' fill='none' stroke-width='1.2'/></svg>")`,
      },
      '& .cm-diagnostic-warning': {
        borderLeft: `5px solid #${warningColorHex}`,
        background: warningBackgroundColor
      },
      '& .cm-diagnostic-error': {
        borderLeft: `5px solid ${errorColor}`,
        background: errorBackgroundColor
      },
      '& .cm-diagnostic': {
        borderRadius: '2px',
        padding: '3px 8px'
      }
    },
    { dark: true }
  );

  const highlightStyle = syntaxHighlighting(HighlightStyle.define([

    // Markdown headings
    { tag: tags$1.heading1, color: pastelYellow },
    { tag: tags$1.heading2, color: pastelYellow },
    { tag: tags$1.heading3, color: pastelYellow },
    { tag: tags$1.heading4, color: pastelYellow },
    { tag: tags$1.heading5, color: pastelYellow },
    { tag: tags$1.heading6, color: pastelYellow },

    // Feelers
    { tag: tags$1.special(tags$1.bracket), color: pastelOrange, fontWeight: 'bold' },

    // Everything else
    { tag: tags$1.keyword, color: '#c792ea' },
    { tag: tags$1.operator, color: '#89ddff' },
    { tag: tags$1.special(tags$1.variableName), color: '#eeffff' },
    { tag: tags$1.typeName, color: '#f07178' },
    { tag: tags$1.atom, color: '#f78c6c' },
    { tag: tags$1.number, color: '#ff5370' },
    { tag: tags$1.bool, color: '#ff5370' },
    { tag: tags$1.definition(tags$1.variableName), color: '#82aaff' },
    { tag: tags$1.string, color: '#c3e88d' },
    { tag: tags$1.comment, color: stone },
    { tag: tags$1.tagName, color: '#ff5370' },
    { tag: tags$1.bracket, color: '#a2a1a4' },
    { tag: tags$1.meta, color: '#ffcb6b' },
    { tag: tags$1.special(tags$1.string), color: peach },
    { tag: tags$1.propertyName, color: pastelOrange },
    { tag: tags$1.variableName, color: pastelOrange },
    { tag: tags$1.attributeName, color: peach },
    { tag: tags$1.className, color: peach },
    { tag: tags$1.invalid, color: invalid }
  ]));

  var bpmnioDark = [
    theme$3,
    highlightStyle
  ];

  const lightTheme = [ ...commonTheme, ...bpmnioLight ];
  const darkTheme = [ ...commonTheme, ...bpmnioDark ];

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const Feel = 1,
    FeelBlock = 2,
    SimpleTextBlock = 3;

  /* global console */


  const CHAR_TABLE = {
    '{': 123,
    '}': 125
  };

  const isClosingFeelScope = (input, offset = 0) => {

    const isReadingCloseCurrent = input.peek(offset) === CHAR_TABLE['}'];
    const isReadingCloseAhead = input.peek(offset + 1) === CHAR_TABLE['}'];

    const isReadingClose = isReadingCloseCurrent && isReadingCloseAhead;

    return isReadingClose || input.peek(offset) === -1;

  };

  const feelBlock = new ExternalTokenizer((input, stack) => {

    let lookAhead = 0;

    // check if we haven't reached the end of a templating tag
    while (!isClosingFeelScope(input, lookAhead)) { lookAhead++; }

    if (lookAhead > 0) {
      input.advance(lookAhead);
      input.acceptToken(FeelBlock);
    }

  });

  const isClosingTextScope = (input, offset = 0) => {
    const isReadingOpenCurrent = input.peek(offset) === CHAR_TABLE['{'];
    const isReadingOpenAhead = input.peek(offset + 1) === CHAR_TABLE['{'];

    const isReadOpen = isReadingOpenCurrent && isReadingOpenAhead;

    return isReadOpen || input.peek(offset) === -1;
  };


  const simpleTextBlock = new ExternalTokenizer((input, stack) => {

    let lookAhead = 0;

    // check if we haven't reached the start of a templating tag
    while (!isClosingTextScope(input, lookAhead)) { lookAhead++; }

    if (lookAhead > 0) {
      input.advance(lookAhead);
      input.acceptToken(SimpleTextBlock);
    }

  });

  // Anytime this tokenizer is run, simply tag the rest of the input as FEEL
  const feel = new ExternalTokenizer((input, stack) => {

    let lookAhead = 0;

    while (input.peek(lookAhead) !== -1) { lookAhead++; }

    if (lookAhead > 0) {
      input.advance(lookAhead);
      input.acceptToken(Feel);
    }

  });

  const feelersHighlighting = styleTags({
    ConditionalSpanner: tags$1.special(tags$1.bracket),
    ConditionalSpannerClose: tags$1.special(tags$1.bracket),
    ConditionalSpannerCloseNl: tags$1.special(tags$1.bracket),
    LoopSpanner: tags$1.special(tags$1.bracket),
    LoopSpannerClose: tags$1.special(tags$1.bracket),
    LoopSpannerCloseNl: tags$1.special(tags$1.bracket),
    EmptyInsert: tags$1.special(tags$1.bracket),
    Insert: tags$1.special(tags$1.bracket),
  });

  // This file was generated by lezer-generator. You probably shouldn't edit it.
  const parser = LRParser.deserialize({
    version: 14,
    states: "$bOQOaOOOfOXO'#CbOOO`'#Cm'#CmOqOWO'#CcOvOWO'#CfOOO`'#Cp'#CpOOO`'#Ci'#CiO{OaO'#ClO!jOSOOQOOOOOO!oOPO,58{O!tOXO,58|OOO`,58|,58|O!|OQO,58}O#ROQO,59QOOO`-E6g-E6gOOO`1G.g1G.gO#WOPO1G.gOOO`1G.h1G.hO#]OaO1G.iO#qOaO1G.lOOO`7+$R7+$RO$VOPO7+$TO$_OPO7+$WOOO`<<Go<<GoOOO`<<Gr<<Gr",
    stateData: "$g~ORUO_WObPOeROgSO^`P~OQYO_ZOc[O~OQ]O~OQ^O~ORUObPOeROgSO^`XW`XX`XZ`X[`X~OPXO~Oc`O~OQaOcbO~OfcO~OfdO~OceO~ORUObPOeROgSOW`PX`P~ORUObPOeROgSOZ`P[`P~OWhOXhO~OZiO[iO~O",
    goto: "!ZePPPPPfflPPlPPrPPz!TPP!TXQOVcdXTOVcdUVOcdR_VQXOQfcRgdXUOVcd",
    nodeNames: "⚠ Feel FeelBlock SimpleTextBlock Feelers Insert EmptyInsert ConditionalSpanner ConditionalSpannerClose ConditionalSpannerCloseNl LoopSpanner LoopSpannerClose LoopSpannerCloseNl",
    maxTerm: 23,
    propSources: [feelersHighlighting],
    skippedNodes: [0],
    repeatNodeCount: 1,
    tokenData: "%X~RR!_!`[#o#pa#q#r$r~aO_~~dP#o#pg~lQb~str!P!Q!{~uQ#]#^{#`#a!^~!OP#Y#Z!R~!UPpq!X~!^Oe~~!aP#c#d!d~!gP#c#d!j~!mP#d#e!p~!sPpq!v~!{Og~~#OQ#]#^#U#`#a#u~#XP#Y#Z#[~#_P#q#r#b~#eP#q#r#h~#mPW~YZ#p~#uOX~~#xP#c#d#{~$OP#c#d$R~$UP#d#e$X~$[P#q#r$_~$bP#q#r$e~$jPZ~YZ$m~$rO[~R$uP#q#r$xR%PPcPfQYZ%SQ%XOfQ",
    tokenizers: [0, 1, feel, feelBlock, simpleTextBlock],
    topRules: {"Feelers":[0,4]},
    tokenPrec: 0
  });

  const foldMetadata = {
    ConditionalSpanner: foldInside,
    LoopSpanner: foldInside
  };

  function createMixedLanguage(hostLanguage = null) {
    const _mixedParser = parser.configure({

      wrap: parseMixed(node => {

        if (node.name == 'Feel' || node.name == 'FeelBlock') {
          return { parser: parser$2 };
        }

        if (hostLanguage && node.name == 'SimpleTextBlock') {
          return { parser: hostLanguage };
        }

        return null;
      }),

      props: [
        foldNodeProp.add(foldMetadata)
      ]
    });

    return LRLanguage.define({ parser: _mixedParser });
  }

  const createFeelersLanguageSupport = (hostLanguageParser) => new LanguageSupport(createMixedLanguage(hostLanguageParser), []);

  /**
   * Create warnings for empty inserts in the given tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of syntax errors
   */
  function lintEmptyInserts(syntaxTree) {

    const lintMessages = [];

    syntaxTree.iterate({
      enter: node => {
        if (node.type.name === 'EmptyInsert') {
          lintMessages.push(
            {
              from: node.from,
              to: node.to,
              severity: 'warning',
              message: 'this insert is empty and will be ignored',
              type: 'emptyInsert'
            }
          );
        }
      }
    });

    return lintMessages;
  }

  /**
   * Generates lint messages for the given syntax tree.
   *
   * @param {Tree} syntaxTree
   * @returns {LintMessage[]} array of all lint messages
   */
  function lintAll(syntaxTree) {

    const lintMessages = [

      ...lintEmptyInserts(syntaxTree)
    ];

    return lintMessages;
  }


  /**
   * CodeMirror extension that provides linting for FEEL expressions.
   *
   * @param {EditorView} editorView
   * @returns {Source} CodeMirror linting source
   */
  function cmFeelersLinter() {
    const lintFeel = cmFeelLinter();
    return editorView => {

      const feelMessages = lintFeel(editorView);

      // don't lint if the Editor is empty
      if (editorView.state.doc.length === 0) {
        return [];
      }

      const tree = syntaxTree(editorView.state);

      const feelersMessages = lintAll(tree);

      return [
        ...feelMessages,
        ...feelersMessages.map(message => ({
          ...message,
          source: 'feelers linter'
        }))
      ];
    };
  }

  var lint = linter$1(cmFeelersLinter());

  /**
   * Creates a Feelers editor in the supplied container.
   *
   * @param {Object} config Configuration options for the Feelers editor.
   * @param {DOMNode} [config.container] The DOM node that will contain the editor.
   * @param {DOMNode|String} [config.tooltipContainer] The DOM node or CSS selector string for the tooltip container.
   * @param {String} [config.hostLanguage] The host language for the editor (e.g., 'markdown').
   * @param {Object} [config.hostLanguageParser] A custom parser for the host language.
   * @param {Function} [config.onChange] Callback function that is called when the editor's content changes.
   * @param {Function} [config.onKeyDown] Callback function that is called when a key is pressed within the editor.
   * @param {Function} [config.onLint] Callback function that is called when linting messages are available.
   * @param {Object} [config.contentAttributes] Additional attributes to set on the editor's content element.
   * @param {Boolean} [config.readOnly] Set to true to make the editor read-only.
   * @param {String} [config.value] Initial value of the editor.
   * @param {Boolean} [config.enableGutters] Set to true to enable gutter decorations (e.g., line numbers).
   * @param {Boolean} [config.singleLine] Set to true to limit the editor to a single line.
   * @param {Boolean} [config.lineWrap] Set to true to enable line wrapping.
   * @param {Boolean} [config.darkMode] Set to true to use the dark theme for the editor.
   *
   * @returns {Object} editor An instance of the FeelersEditor class.
   */
  function FeelersEditor({
    container,
    tooltipContainer,
    hostLanguage,
    hostLanguageParser,
    onChange = () => { },
    onKeyDown = () => { },
    onLint = () => { },
    contentAttributes = { },
    readOnly = false,
    value = '',
    enableGutters = false,
    singleLine = false,
    lineWrap = false,
    darkMode = false
  }) {

    const changeHandler = EditorView.updateListener.of((update) => {
      if (update.docChanged) {
        onChange(update.state.doc.toString());
      }
    });

    const lintHandler = EditorView.updateListener.of((update) => {
      const diagnosticEffects = update.transactions
        .flatMap(t => t.effects)
        .filter(effect => effect.is(setDiagnosticsEffect));

      if (!diagnosticEffects.length) {
        return;
      }

      const messages = diagnosticEffects.flatMap(effect => effect.value);

      onLint(messages);
    });

    const contentAttributesExtension = EditorView.contentAttributes.of(contentAttributes);

    const keyHandler = EditorView.domEventHandlers(
      {
        keydown: onKeyDown
      }
    );

    if (typeof tooltipContainer === 'string') {
      // eslint-disable-next-line no-undef
      tooltipContainer = document.querySelector(tooltipContainer);
    }

    const tooltipLayout = tooltipContainer ? tooltips({
      tooltipSpace: function() {
        return tooltipContainer.getBoundingClientRect();
      }
    }) : [];

    const _getHostLanguageParser = (hostLanguage) => {
      switch (hostLanguage) {
      case 'markdown':
        return parser$1;
      default:
        return null;
      }
    };

    const feelersLanguageSupport = createFeelersLanguageSupport(hostLanguageParser || hostLanguage && _getHostLanguageParser(hostLanguage));

    const extensions = [
      bracketMatching(),
      changeHandler,
      contentAttributesExtension,
      closeBrackets(),
      indentOnInput(),
      keyHandler,
      keymap.of([
        ...defaultKeymap,
      ]),
      feelersLanguageSupport,
      lint,
      lintHandler,
      tooltipLayout,
      darkMode ? darkTheme : lightTheme,
      ...(enableGutters ? [

        // todo: adjust folding boundaries first foldGutter(),
        lineNumbers()
      ] : []),
      ...(singleLine ? [
        EditorState.transactionFilter.of(tr => tr.newDoc.lines > 1 ? [] : tr)
      ] : []),
      ...(lineWrap ? [
        EditorView.lineWrapping
      ] : [])
    ];

    if (readOnly) {
      extensions.push(EditorView.editable.of(false));
    }

    if (singleLine && value) {
      value = value.toString().split('\n')[0];
    }

    this._cmEditor = new EditorView({
      state: EditorState.create({
        doc: value,
        extensions: extensions
      }),
      parent: container
    });

    return this;
  }

  /**
   * Replaces the content of the Editor
   *
   * @param {String} value
   */
  FeelersEditor.prototype.setValue = function(value) {
    this._cmEditor.dispatch({
      changes: {
        from: 0,
        to: this._cmEditor.state.doc.length,
        insert: value,
      }
    });
  };

  /**
   * Sets the focus in the editor.
   */
  FeelersEditor.prototype.focus = function(position) {
    const cmEditor = this._cmEditor;

    // the Codemirror `focus` method always calls `focus` with `preventScroll`,
    // so we have to focus + scroll manually
    cmEditor.contentDOM.focus();
    cmEditor.focus();

    if (typeof position === 'number') {
      const end = cmEditor.state.doc.length;
      cmEditor.dispatch({ selection: { anchor: position <= end ? position : end } });
    }
  };

  /**
   * Returns the current selection ranges. If no text is selected, a single
   * range with the start and end index at the cursor position will be returned.
   *
   * @returns {Object} selection
   * @returns {Array} selection.ranges
   */
  FeelersEditor.prototype.getSelection = function() {
    return this._cmEditor.state.selection;
  };

  // / A collection of FEEL-related
  // / [snippets](#autocomplete.snippet).
  const snippets = [
      /*@__PURE__*/snippetCompletion('function(${params}) ${body}', {
          label: 'function',
          detail: 'definition',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('for ${var} in ${collection} return ${value}', {
          label: 'for',
          detail: 'expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('every ${var} in ${collection} satisfies ${condition}', {
          label: 'every',
          detail: 'quantified expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('some ${var} in ${collection} satisfies ${condition}', {
          label: 'some',
          detail: 'quantified expression',
          type: 'keyword'
      }),
      /*@__PURE__*/snippetCompletion('if ${condition} then ${value} else ${other value}', {
          label: 'if',
          detail: 'block',
          type: 'keyword'
      })
  ];

  // / A language provider based on the [Lezer FEEL
  // / parser](https://github.com/nikku/lezer-feel), extended with
  // / highlighting and indentation information.
  const feelLanguage = /*@__PURE__*/LRLanguage.define({
      parser: /*@__PURE__*/parser$2.configure({
          props: [
              /*@__PURE__*/indentNodeProp.add({
                  'Context': /*@__PURE__*/delimitedIndent({
                      closing: '}'
                  }),
                  'List FilterExpression': /*@__PURE__*/delimitedIndent({
                      closing: ']'
                  }),
                  'ParenthesizedExpression FunctionInvocation': /*@__PURE__*/continuedIndent({
                      except: /^\s*\)/
                  }),
                  'ForExpression QuantifiedExpression IfExpression': /*@__PURE__*/continuedIndent({
                      except: /^\s*(then|else|return|satisfies)\b/
                  }),
                  'FunctionDefinition': /*@__PURE__*/continuedIndent({
                      except: /^\s*(\(|\))/
                  })
              }),
              /*@__PURE__*/foldNodeProp.add({
                  Context: foldInside,
                  List: foldInside,
                  ParenthesizedExpression: foldInside,
                  FunctionDefinition(node) {
                      const last = node.getChild(')');
                      if (!last)
                          return null;
                      return {
                          from: last.to,
                          to: node.to
                      };
                  }
              })
          ]
      }),
      languageData: {
          indentOnInput: /^\s*(\)|\}|\]|then|else|return|satisfies)$/,
          commentTokens: {
              line: '//',
              block: {
                  open: '/*',
                  close: '*/'
              }
          }
      }
  });

  // helpers ///////////////////////////////

  function isNodeEmpty(node) {
    return node.from === node.to;
  }

  function isPathExpression(node) {
    if (!node) {
      return false;
    }

    if (node.name === 'PathExpression') {
      return true;
    }

    return isPathExpression(node.parent);
  }

  var tags = [
  	{
  		name: "not()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>negand</code>: boolean</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">not(true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "is defined()",
  		description: "<p>Checks if a given value is defined. A value is defined if it exists, and it is an instance of one of the FEEL data types including <code>null</code>.</p>\n<p>The function can be used to check if a variable or a context entry (e.g. a property of a variable) exists. It allows differentiating between a <code>null</code> variable and a value that doesn&#39;t exist.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">is defined(1)\n// true\n\nis defined(null)\n// true\n\nis defined(x)\n// false - if no variable &quot;x&quot; exists\n\nis defined(x.y)\n// false - if no variable &quot;x&quot; exists or it doesn&#39;t have a property &quot;y&quot;\n</code></pre>\n"
  	},
  	{
  		name: "get value()",
  		description: "<p>Returns the value of the context entry with the given key.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n</ul>\n</li>\n<li>result: any</li>\n</ul>\n<pre><code class=\"language-feel\">get value({foo: 123}, &quot;foo&quot;)\n// 123\n</code></pre>\n"
  	},
  	{
  		name: "get entries()",
  		description: "<p>Returns the entries of the context as a list of key-value-pairs.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n</ul>\n</li>\n<li>result: list of context which contains two entries for &quot;key&quot; and &quot;value&quot;</li>\n</ul>\n<pre><code class=\"language-feel\">get entries({foo: 123})\n// [{key: &quot;foo&quot;, value: 123}]\n</code></pre>\n"
  	},
  	{
  		name: "put()",
  		description: "<p>Add the given key and value to a context. Returns a new context that includes the entry. It might override an existing entry of the context.</p>\n<p>Returns <code>null</code> if the value is not defined.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>context</code>: context</li>\n<li><code>key</code>: string</li>\n<li><code>value</code>: any</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put({x:1}, &quot;y&quot;, 2)\n// {x:1, y:2}\n</code></pre>\n"
  	},
  	{
  		name: "put all()",
  		description: "<p>Union the given contexts (two or more). Returns a new context that includes all entries of the given contexts. It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts are passed in the method.</p>\n<p>Returns <code>null</code> if one of the values is not a context.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>contexts</code>: contexts as varargs</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">put all({x:1}, {y:2})\n// {x:1, y:2}\n</code></pre>\n"
  	},
  	{
  		name: "date()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>year</code>, <code>month</code>, <code>day</code>: number</li>\n</ul>\n</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">date(birthday)\n// date(&quot;2018-04-29&quot;)\n\ndate(date and time(&quot;2012-12-25T11:00:00&quot;))\n// date(&quot;2012-12-25&quot;)\n\ndate(2012, 12, 25)\n// date(&quot;2012-12-25&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "time()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string / date-time</li>\n<li>or <code>hour</code>, <code>minute</code>, <code>second</code>: number<ul>\n<li>(optional) <code>offset</code>: day-time-duration</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>result: time</li>\n</ul>\n<pre><code class=\"language-feel\">time(lunchTime)\n// time(&quot;12:00:00&quot;)\n\ntime(date and time(&quot;2012-12-25T11:00:00&quot;))\n// time(&quot;11:00:00&quot;)\n\ntime(23, 59, 0)\n// time(&quot;23:59:00&quot;)\n\ntime(14, 30, 0, duration(&quot;PT1H&quot;))\n// time(&quot;15:30:00&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "date and time()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date / date-time</li>\n<li><code>time</code>: time</li>\n<li>or <code>from</code>: string</li>\n</ul>\n</li>\n<li>result: date-time</li>\n</ul>\n<pre><code class=\"language-feel\">date and time(date(&quot;2012-12-24&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-24T23:59:00&quot;)\n\ndate and time(date and time(&quot;2012-12-25T11:00:00&quot;),time(&quot;T23:59:00&quot;))\n// date and time(&quot;2012-12-25T23:59:00&quot;)\n\ndate and time(birthday)\n// date and time(&quot;2018-04-29T009:30:00&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "duration()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: day-time-duration or year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">duration(weekDays)\n// duration(&quot;P5D&quot;)\n\nduration(age)\n// duration(&quot;P32Y&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "years and months duration()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: date</li>\n<li><code>to</code>: date</li>\n</ul>\n</li>\n<li>result: year-month-duration</li>\n</ul>\n<pre><code class=\"language-feel\">years and months duration(date(&quot;2011-12-22&quot;), date(&quot;2013-08-24&quot;))\n// duration(&quot;P1Y8M&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "number()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">number(&quot;1500.5&quot;)\n// 1500.5\n</code></pre>\n"
  	},
  	{
  		name: "string()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>from</code>: any</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">string(1.1)\n// &quot;1.1&quot;\n\nstring(date(&quot;2012-12-25&quot;))\n// &quot;2012-12-25&quot;\n</code></pre>\n"
  	},
  	{
  		name: "context()",
  		description: "<p>Constructs a context of the given list of key-value pairs. It is the reverse function to <a href=\"feel-built-in-functions-context.md#get-entries\">get entries()</a>.</p>\n<p>Each key-value pair must be a context with two entries: <code>key</code> and <code>value</code>. The entry with name <code>key</code> must have a value of the type <code>string</code>.</p>\n<p>It might override context entries if the keys are equal. The entries are overridden in the same order as the contexts in the given list.</p>\n<p>Returns <code>null</code> if one of the entries is not a context or if a context doesn&#39;t contain the required entries.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>entries</code>: list of contexts</li>\n</ul>\n</li>\n<li>result: context</li>\n</ul>\n<pre><code class=\"language-feel\">context([{&quot;key&quot;:&quot;a&quot;, &quot;value&quot;:1}, {&quot;key&quot;:&quot;b&quot;, &quot;value&quot;:2}])\n// {a:1, b:2}\n</code></pre>\n"
  	},
  	{
  		name: "list contains()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>element</code>: any</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">list contains([1,2,3], 2)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "count()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">count([1,2,3])\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "min()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">min([1,2,3])\n// 1\n\nmin(1,2,3)\n// 1\n</code></pre>\n"
  	},
  	{
  		name: "max()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">max([1,2,3])\n// 3\n\nmax(1,2,3)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "sum()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sum([1,2,3])\n// 6\n\nsum(1,2,3)\n// 6\n</code></pre>\n"
  	},
  	{
  		name: "product()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">product([2, 3, 4])\n// 24\n\nproduct(2, 3, 4)\n// 24\n</code></pre>\n"
  	},
  	{
  		name: "mean()",
  		description: "<p>Returns the arithmetic mean (i.e. average).</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">mean([1,2,3])\n// 2\n\nmean(1,2,3)\n// 2\n</code></pre>\n"
  	},
  	{
  		name: "median()",
  		description: "<p>Returns the median element of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">median(8, 2, 5, 3, 4)\n// 4\n\nmedian([6, 1, 2, 3])\n// 2.5\n</code></pre>\n"
  	},
  	{
  		name: "stddev()",
  		description: "<p>Returns the standard deviation.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">stddev(2, 4, 7, 5)\n// 2.0816659994661326\n\nstddev([2, 4, 7, 5])\n// 2.0816659994661326\n</code></pre>\n"
  	},
  	{
  		name: "mode()",
  		description: "<p>Returns the mode of the list of numbers.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of numbers</li>\n<li>or numbers as varargs</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">mode(6, 3, 9, 6, 6)\n// [6]\n\nmode([6, 1, 9, 6, 1])\n// [1, 6]\n</code></pre>\n"
  	},
  	{
  		name: "and()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "all()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">and([true,false])\n// false\n\nand(false,null,true)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "or()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "any()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list of booleans</li>\n<li>or booleans as varargs</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">or([false,true])\n// true\n\nor(false,null,true)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "sublist()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sublist([1,2,3], 2)\n// [2,3]\n\nsublist([1,2,3], 1, 2)\n// [1,2]\n</code></pre>\n"
  	},
  	{
  		name: "append()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>items</code>: elements as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">append([1], 2, 3)\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "concatenate()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">concatenate([1,2],[3])\n// [1,2,3]\n\nconcatenate([1],[2],[3])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "insert before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n<li><code>newItem</code>: any</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">insert before([1,3],1,2)\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "remove()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>position</code>: number</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">remove([1,2,3], 2)\n// [1,3]\n</code></pre>\n"
  	},
  	{
  		name: "reverse()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">reverse([1,2,3])\n// [3,2,1]\n</code></pre>\n"
  	},
  	{
  		name: "index of()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>match</code>: any</li>\n</ul>\n</li>\n<li>result: list of numbers</li>\n</ul>\n<pre><code class=\"language-feel\">index of([1,2,3,2],2)\n// [2,4]\n</code></pre>\n"
  	},
  	{
  		name: "union()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>lists</code>: lists as varargs</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">union([1,2],[2,3])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "distinct values()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">distinct values([1,2,3,2,1])\n// [1,2,3]\n</code></pre>\n"
  	},
  	{
  		name: "flatten()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">flatten([[1,2],[[3]], 4])\n// [1,2,3,4]\n</code></pre>\n"
  	},
  	{
  		name: "sort()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>list</code>: list</li>\n<li><code>precedes</code>: function with two arguments and boolean result</li>\n</ul>\n</li>\n<li>result: list</li>\n</ul>\n<pre><code class=\"language-feel\">sort(list: [3,1,4,5,2], precedes: function(x,y) x &lt; y)\n// [1,2,3,4,5]\n</code></pre>\n"
  	},
  	{
  		name: "string join()",
  		description: "<p>This joins a list of strings into a single string. This is similar to\nJava&#39;s <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)\">joining</a>\nfunction.</p>\n<p>If an item of the list is <code>null</code>, the item is ignored for the result string. If an item is\nneither a string nor <code>null</code>, the function returns <code>null</code> instead of a string.</p>\n<ul>\n<li>Parameters:<ul>\n<li><code>list</code>: The list of strings to join</li>\n<li><code>delimiter</code>: (Optional) The string used between each element (default: empty string)</li>\n<li><code>prefix</code>: (Optional) The string used at the beginning of the joined result (default:\nempty string)</li>\n<li><code>suffix</code>: (Optional) The string used at the end of the joined result (default: empty\nstring)</li>\n</ul>\n</li>\n<li>Result: The joined list as a string</li>\n</ul>\n<pre><code class=\"language-feel\">string join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])\n// &quot;abc&quot;\nstring join([&quot;a&quot;], &quot;X&quot;)\n// &quot;a&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;)\n// &quot;a, b, c&quot;\nstring join([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], &quot;, &quot;, &quot;[&quot;, &quot;]&quot;)\n// &quot;[a, b, c]&quot;\nstring join([&quot;a&quot;,null,&quot;c&quot;])\n// &quot;ac&quot;\nstring join([])\n// &quot;&quot;\n</code></pre>\n"
  	},
  	{
  		name: "decimal()",
  		description: "<p>Round the given number at the given scale using the given rounding mode. If no rounding mode is passed in, it uses <code>HALF_EVEN</code> as default.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n<li><code>scale</code>: number</li>\n<li>(optional) <code>mode</code>: string - one of <code>UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY</code> (default: <code>HALF_EVEN</code>)</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">decimal(1/3, 2)\n// .33\n\ndecimal(1.5, 0)\n// 2\n\ndecimal(2.5, 0, &quot;half_up&quot;)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "floor()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">floor(1.5)\n// 1\n\nfloor(-1.5)\n// -2\n</code></pre>\n"
  	},
  	{
  		name: "ceiling()",
  		description: "<p>Round the given number at the given scale using the ceiling rounding mode.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">ceiling(1.5)\n// 2\n\nceiling(-1.5)\n// -1\n</code></pre>\n"
  	},
  	{
  		name: "abs()",
  		description: "<p>Returns the absolute value of the given numeric value.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">abs(10)\n// 10\n\nabs(-10)\n// 10\n</code></pre>\n"
  	},
  	{
  		name: "modulo()",
  		description: "<p>Returns the remainder of the division of dividend by divisor.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>dividend</code>: number</li>\n<li><code>divisor</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">modulo(12, 5)\n// 2\n</code></pre>\n"
  	},
  	{
  		name: "sqrt()",
  		description: "<p>Returns the square root.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">sqrt(16)\n// 4\n</code></pre>\n"
  	},
  	{
  		name: "log()",
  		description: "<p>Returns the natural logarithm (base e) of the number.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">log(10)\n// 2.302585092994046\n</code></pre>\n"
  	},
  	{
  		name: "exp()",
  		description: "<p>Returns the Euler’s number e raised to the power of number .</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">exp(5)\n// 148.4131591025766\n</code></pre>\n"
  	},
  	{
  		name: "odd()",
  		description: "<p>Returns <code>true</code> if the given numeric value is odd. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">odd(5)\n// true\n\nodd(2)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "even()",
  		description: "<p>Returns <code>true</code> if the given numeric value is even. Otherwise, it returns <code>false</code>.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>number</code>: number</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">even(5)\n// false\n\neven(2)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">before(1, 10)\n// true\n\nbefore(10, 1)\n// false\n\nbefore(1, [2..5])\n// true\n\nbefore([1..5], 10)\n// true\n\nbefore([1..5], [6..10])\n// true\n\nbefore([1..5),[5..10])\n// true\n</code></pre>\n"
  	},
  	{
  		name: "after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">after(10, 1)\n// true\n\nafter(1, 10)\n// false\n\nafter(12, [2..5])\n// true\n\n([1..5], 10)\n// false\n\nbefore([6..10], [1..5])\n// true\n\nbefore([5..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "meets()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">meets([1..5], [5..10])\n// true\n\nmeets([1..3], [4..6])\n// false\n\nmeets([1..3], [3..5])\n// true\n\nmeets([1..5], (5..8])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "met by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">met by([5..10], [1..5])\n// true\n\nmet by([3..4], [1..2])\n// false\n\nmet by([3..5], [1..3])\n// true\n\nmet by((5..8], [1..5))\n// false\n\nmet by([5..10], [1..5))\n// false\n</code></pre>\n"
  	},
  	{
  		name: "overlaps()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps([5..10], [1..6])\n// true\n\noverlaps((3..7], [1..4])\n// true\n\noverlaps([1..3], (3..6])\n// false\n\noverlaps((5..8], [1..5))\n// false\n\noverlaps([4..10], [1..5))\n// treu\n</code></pre>\n"
  	},
  	{
  		name: "overlaps before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps before([1..5], [4..10])\n// true\n\noverlaps before([3..4], [1..2])\n// false\n\noverlaps before([1..3], (3..5])\n// false\n\noverlaps before([1..5), (3..8])\n// true\n\noverlaps before([1..5), [5..10])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "overlaps after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range1</code>: range</li>\n<li><code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">overlaps after([4..10], [1..5])\n// true\n\noverlaps after([3..4], [1..2])\n// false\n\noverlaps after([3..5], [1..3))\n// false\n\noverlaps after((5..8], [1..5))\n// false\n\noverlaps after([4..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "finishes()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes(5, [1..5])\n// true\n\nfinishes(10, [1..7])\n// false\n\nfinishes([3..5], [1..5])\n// true\n\nfinishes((1..5], [1..5))\n// false\n\nfinishes([5..10], [1..10))\n// false\n</code></pre>\n"
  	},
  	{
  		name: "finished by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">finishes by([5..10], 10)\n// true\n\nfinishes by([3..4], 2)\n// false\n\nfinishes by([3..5], [1..5])\n// true\n\nfinishes by((5..8], [1..5))\n// false\n\nfinishes by([5..10], (1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "includes()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">includes([5..10], 6)\n// true\n\nincludes([3..4], 5)\n// false\n\nincludes([1..10], [4..6])\n// true\n\nincludes((5..8], [1..5))\n// false\n\nincludes([1..10], [1..5))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "during()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">during(5, [1..10])\n// true\n\nduring(12, [1..10])\n// false\n\nduring(1, (1..10])\n// false\n\nduring([4..6], [1..10))\n// true\n\nduring((1..5], (1..10])\n// true\n</code></pre>\n"
  	},
  	{
  		name: "starts()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point</code>: any, <code>range</code>: range</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts(1, [1..5])\n// true\n\nstarts(1, (1..8])\n// false\n\nstarts((1..5], [1..5])\n// false\n\nstarts([1..10], [1..10])\n// true\n\nstarts((1..10), (1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "started by()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>range</code>: range, <code>point</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">started by([1..10], 1)\n// true\n\nstarted by((1..10], 1)\n// false\n\nstarted by([1..10], [1..5])\n// true\n\nstarted by((1..10], [1..5))\n// false\n\nstarted by([1..10], [1..10))\n// true\n</code></pre>\n"
  	},
  	{
  		name: "coincides()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>point1</code>, <code>point2</code>: any</li>\n<li>or <code>range1</code>, <code>range2</code>: range</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">coincides(5, 5)\n// true\n\ncoincides(3, 4)\n// false\n\ncoincides([1..5], [1..5])\n// true\n\ncoincides((1..5], [1..5))\n// false\n\ncoincides([1..5], [2..6])\n// false\n</code></pre>\n"
  	},
  	{
  		name: "substring()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>start position</code>: number</li>\n<li>(optional) <code>length</code>: number</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring(&quot;foobar&quot;,3)\n// &quot;obar&quot;\n\nsubstring(&quot;foobar&quot;,3,3)\n// &quot;oba&quot;\n</code></pre>\n"
  	},
  	{
  		name: "string length()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">string length(&quot;foo&quot;)\n// 3\n</code></pre>\n"
  	},
  	{
  		name: "upper case()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">upper case(&quot;aBc4&quot;)\n// &quot;ABC4&quot;\n</code></pre>\n"
  	},
  	{
  		name: "lower case()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">lower case(&quot;aBc4&quot;)\n// &quot;abc4&quot;\n</code></pre>\n"
  	},
  	{
  		name: "substring before()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring before(&quot;foobar&quot;, &quot;bar&quot;)\n// &quot;foo&quot;\n</code></pre>\n"
  	},
  	{
  		name: "substring after()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">substring after(&quot;foobar&quot;, &quot;ob&quot;)\n// &quot;ar&quot;\n</code></pre>\n"
  	},
  	{
  		name: "contains()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">contains(&quot;foobar&quot;, &quot;of&quot;)\n// false\n</code></pre>\n"
  	},
  	{
  		name: "starts with()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">starts with(&quot;foobar&quot;, &quot;fo&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "ends with()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>match</code>: string</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">ends with(&quot;foobar&quot;, &quot;r&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "matches()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: boolean</li>\n</ul>\n<pre><code class=\"language-feel\">matches(&quot;foobar&quot;, &quot;^fo*bar&quot;)\n// true\n</code></pre>\n"
  	},
  	{
  		name: "replace()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>input</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n<li><code>replacement</code>: string (e.g. <code>$1</code> returns the first match group)</li>\n<li>(optional) <code>flags</code>: string (&quot;s&quot;, &quot;m&quot;, &quot;i&quot;, &quot;x&quot;)</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">replace(&quot;abcd&quot;, &quot;(ab)|(a)&quot;, &quot;[1=$1][2=$2]&quot;)\n// &quot;[1=ab][2=]cd&quot;\n\nreplace(&quot;0123456789&quot;, &quot;(\\d{3})(\\d{3})(\\d{4})&quot;, &quot;($1) $2-$3&quot;)\n// &quot;(012) 345-6789&quot;\n</code></pre>\n"
  	},
  	{
  		name: "split()",
  		description: "<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>delimiter</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">split(&quot;John Doe&quot;, &quot;\\s&quot; )\n// [&quot;John&quot;, &quot;Doe&quot;]\n\nsplit(&quot;a;b;c;;&quot;, &quot;;&quot;)\n// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;&quot;, &quot;&quot;]\n</code></pre>\n"
  	},
  	{
  		name: "extract()",
  		description: "<p>Returns all matches of the pattern in the given string. Returns an empty list if the pattern doesn&#39;t\nmatch.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>string</code>: string</li>\n<li><code>pattern</code>: string (regular expression)</li>\n</ul>\n</li>\n<li>result: list of strings</li>\n</ul>\n<pre><code class=\"language-feel\">extract(&quot;references are 1234, 1256, 1378&quot;, &quot;12[0-9]*&quot;)\n// [&quot;1234&quot;,&quot;1256&quot;]\n</code></pre>\n"
  	},
  	{
  		name: "now()",
  		description: "<p>Returns the current date and time including the timezone.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date-time with timezone</li>\n</ul>\n<pre><code class=\"language-feel\">now()\n// date and time(&quot;2020-07-31T14:27:30@Europe/Berlin&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "today()",
  		description: "<p>Returns the current date.</p>\n<ul>\n<li>parameters: no</li>\n<li>result: date</li>\n</ul>\n<pre><code class=\"language-feel\">today()\n// date(&quot;2020-07-31&quot;)\n</code></pre>\n"
  	},
  	{
  		name: "day of week()",
  		description: "<p>Returns the day of the week according to the Gregorian calendar. Note that it always returns the English name of the day.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">day of week(date(&quot;2019-09-17&quot;))\n// &quot;Tuesday&quot;\n</code></pre>\n"
  	},
  	{
  		name: "day of year()",
  		description: "<p>Returns the Gregorian number of the day within the year.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">day of year(date(&quot;2019-09-17&quot;))\n// 260\n</code></pre>\n"
  	},
  	{
  		name: "week of year()",
  		description: "<p>Returns the Gregorian number of the week within the year, according to ISO 8601.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: number</li>\n</ul>\n<pre><code class=\"language-feel\">week of year(date(&quot;2019-09-17&quot;))\n// 38\n</code></pre>\n"
  	},
  	{
  		name: "month of year()",
  		description: "<p>Returns the month of the week according to the Gregorian calendar. Note that it always returns the English name of the month.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>date</code>: date/date-time</li>\n</ul>\n</li>\n<li>result: string</li>\n</ul>\n<pre><code class=\"language-feel\">month of year(date(&quot;2019-09-17&quot;))\n// &quot;September&quot;\n</code></pre>\n"
  	},
  	{
  		name: "abs()",
  		description: "<p>Returns the absolute value of a given duration.</p>\n<ul>\n<li>parameters:<ul>\n<li><code>n</code>: days-time-duration/years-months-duration</li>\n</ul>\n</li>\n<li>result: duration</li>\n</ul>\n<pre><code class=\"language-feel\">abs(duration(&quot;-PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;PT5H&quot;))\n// &quot;duration(&quot;PT5H&quot;)&quot;\n\nabs(duration(&quot;-P2M&quot;))\n// duration(&quot;P2M&quot;)\n</code></pre>\n"
  	}
  ];

  const options = tags.map(tag => snippetCompletion(
    tag.name.replace('()', '(#{1})'),
    {
      label: tag.name,
      type: 'function',
      info: () => {
        const html = domify$1(`<div class="description">${tag.description}<div>`);
        return html;
      },
      boost: -1
    }
  ));

  var builtins = context => {

    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode =
          isNodeEmpty(nodeBefore) ||
          nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);

    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options
      } : null;
    }

    // Don't auto-complete on path expressions/context keys/...
    if ((nodeBefore.parent && nodeBefore.parent.name !== 'VariableName') || isPathExpression(nodeBefore)) {
      return null;
    }

    return {
      from: nodeBefore.from,
      options: options
    };
  };

  /**
   * @type {Facet<import('..').Variable[]>} Variable
   */
  const variablesFacet = Facet.define();

  var pathExpression = context => {
    const variables = context.state.facet(variablesFacet)[0];
    const nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    if (!isPathExpression(nodeBefore)) {
      return;
    }

    const expression = findPathExpression(nodeBefore);

    // if the cursor is directly after the `.`, variable starts at the cursor position
    const from = nodeBefore === expression ? context.pos : nodeBefore.from;

    const path = getPath(expression, context);

    let options = variables;
    for (var i = 0; i < path.length - 1; i++) {
      var childVar = options.find(val => val.name === path[i].name);

      if (!childVar) {
        return null;
      }

      // only suggest if variable type matches
      if (
        childVar.isList !== 'optional' &&
        !!childVar.isList !== path[i].isList
      ) {
        return;
      }

      options = childVar.entries;
    }

    if (!options) return;

    options = options.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));

    const result = {
      from: from,
      options: options
    };

    return result;
  };


  function findPathExpression(node) {
    while (node) {
      if (node.name === 'PathExpression') {
        return node;
      }
      node = node.parent;
    }
  }

  // parses the path expression into a list of variable names with type information
  // e.g. foo[0].bar => [ { name: 'foo', isList: true }, { name: 'bar', isList: false } ]
  function getPath(node, context) {
    let path = [];

    for (let child = node.firstChild; child; child = child.nextSibling) {
      if (child.name === 'PathExpression') {
        path.push(...getPath(child, context));
      } else if (child.name === 'FilterExpression') {
        path.push(...getFilter(child, context));
      }
      else {
        path.push({
          name: getNodeContent(child, context),
          isList: false
        });
      }
    }
    return path;
  }

  function getFilter(node, context) {
    const list = node.firstChild;

    if (list.name === 'PathExpression') {
      const path = getPath(list, context);
      const last = path[path.length - 1];
      last.isList = true;

      return path;
    }

    return [ {
      name: getNodeContent(list, context),
      isList: true
    } ];
  }

  function getNodeContent(node, context) {
    return context.state.sliceDoc(node.from, node.to);
  }

  /**
   * @type {import('@codemirror/autocomplete').CompletionSource}
   */
  var variables = context => {

    const variables = context.state.facet(variablesFacet)[0];

    const options = variables.map(v => ({
      label: v.name,
      type: 'variable',
      info: v.info,
      detail: v.detail
    }));

    // In most cases, use what is typed before the cursor
    let nodeBefore = syntaxTree(context.state).resolve(context.pos, -1);

    // For the special case of empty nodes, we need to check the current node
    // as well. The previous node could be part of another token, e.g.
    // when typing functions "abs(".
    let nextNode = nodeBefore.nextSibling;
    const isInEmptyNode =
          isNodeEmpty(nodeBefore) ||
          nextNode && nextNode.from === context.pos && isNodeEmpty(nextNode);

    if (isInEmptyNode) {
      return context.explicit ? {
        from: context.pos,
        options: options
      } : null;
    }

    const result = {
      from: nodeBefore.from,
      options: options
    };

    // Only auto-complete variables
    if ((nodeBefore.parent && nodeBefore.parent.name !== 'VariableName') || isPathExpression(nodeBefore)) {
      return null;
    }

    return result;
  };

  function autocompletion() {
    return [
      autocompletion$1({
        override: [
          variables,
          builtins,
          completeFromList(snippets.map(s => ({ ...s, boost: -1 }))),
          pathExpression
        ]
      })
    ];
  }

  function language() {
    return new LanguageSupport(feelLanguage, [ ]);
  }

  var linter = [ linter$1(cmFeelLinter()) ];

  const baseTheme = EditorView.theme({
    '& .cm-content': {
      padding: '0px',
    },
    '& .cm-line': {
      padding: '0px',
    },
    '&.cm-editor.cm-focused': {
      outline: 'none',
    },
    '& .cm-completionInfo': {
      whiteSpace: 'pre-wrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    },

    // Don't wrap whitespace for custom HTML
    '& .cm-completionInfo > *': {
      whiteSpace: 'normal'
    },
    '& .cm-completionInfo ul': {
      margin: 0,
      paddingLeft: '15px'
    },
    '& .cm-completionInfo pre': {
      marginBottom: 0,
      whiteSpace: 'pre-wrap'
    },
    '& .cm-completionInfo p': {
      marginTop: 0,
    },
    '& .cm-completionInfo p:not(:last-of-type)': {
      marginBottom: 0,
    }
  });

  const highlightTheme = EditorView.baseTheme({
    '& .variableName': {
      color: '#10f'
    },
    '& .number': {
      color: '#164'
    },
    '& .string': {
      color: '#a11'
    },
    '& .bool': {
      color: '#219'
    },
    '& .function': {
      color: '#aa3731',
      fontWeight: 'bold'
    },
    '& .control': {
      color: '#708'
    }
  });

  const syntaxClasses = syntaxHighlighting(
    HighlightStyle.define([
      { tag: tags$1.variableName, class: 'variableName' },
      { tag: tags$1.name, class: 'variableName' },
      { tag: tags$1.number, class: 'number' },
      { tag: tags$1.string, class: 'string' },
      { tag: tags$1.bool, class: 'bool' },
      { tag: tags$1.function(tags$1.variableName), class: 'function' },
      { tag: tags$1.function(tags$1.special(tags$1.variableName)), class: 'function' },
      { tag: tags$1.controlKeyword, class: 'control' },
      { tag: tags$1.operatorKeyword, class: 'control' }
    ])
  );

  var theme = [ baseTheme, highlightTheme, syntaxClasses ];

  /**
   * @typedef {object} Variable
   * @typedef {import('@codemirror/state').Extension} Extension
   * @property {string} name name or key of the variable
   * @property {string} [info] short information about the variable, e.g. type
   * @property {string} [detail] longer description of the variable content
   * @property {boolean} [isList] whether the variable is a list
   * @property {array<Variable>} [schema] array of child variables if the variable is a context or list
   */

  const autocompletionConf = new Compartment();

  /**
   * Creates a FEEL editor in the supplied container
   *
   * @param {Object} config
   * @param {DOMNode} config.container
   * @param {Extension[]} [config.extensions]
   * @param {DOMNode|String} [config.tooltipContainer]
   * @param {Function} [config.onChange]
   * @param {Function} [config.onKeyDown]
   * @param {Function} [config.onLint]
   * @param {Boolean} [config.readOnly]
   * @param {String} [config.value]
   * @param {Variable[]} [config.variables]
   *
   * @returns {Object} editor
   */
  function FeelEditor({
    extensions: editorExtensions = [],
    container,
    tooltipContainer,
    onChange = () => {},
    onKeyDown = () => {},
    onLint = () => {},
    readOnly = false,
    value = '',
    variables = []
  }) {

    const changeHandler = EditorView.updateListener.of((update) => {
      if (update.docChanged) {
        onChange(update.state.doc.toString());
      }
    });

    const lintHandler = EditorView.updateListener.of((update) => {
      const diagnosticEffects = update.transactions
        .flatMap(t => t.effects)
        .filter(effect => effect.is(setDiagnosticsEffect));

      if (!diagnosticEffects.length) {
        return;
      }

      const messages = diagnosticEffects.flatMap(effect => effect.value);

      onLint(messages);
    });

    const keyHandler = EditorView.domEventHandlers(
      {
        keydown: onKeyDown
      }
    );

    if (typeof tooltipContainer === 'string') {
      tooltipContainer = document.querySelector(tooltipContainer);
    }

    const tooltipLayout = tooltipContainer ? tooltips({
      tooltipSpace: function() {
        return tooltipContainer.getBoundingClientRect();
      }
    }) : [];

    const extensions = [
      autocompletionConf.of(variablesFacet.of(variables)),
      autocompletion(),
      bracketMatching(),
      changeHandler,
      closeBrackets(),
      indentOnInput(),
      keyHandler,
      keymap.of([
        ...defaultKeymap,
      ]),
      language(),
      linter,
      lintHandler,
      tooltipLayout,
      theme,
      ...editorExtensions
    ];

    if (readOnly) {
      extensions.push(EditorView.editable.of(false));
    }

    this._cmEditor = new EditorView({
      state: EditorState.create({
        doc: value,
        extensions: extensions
      }),
      parent: container
    });

    return this;
  }

  /**
   * Replaces the content of the Editor
   *
   * @param {String} value
   */
  FeelEditor.prototype.setValue = function(value) {
    this._cmEditor.dispatch({
      changes: {
        from: 0,
        to: this._cmEditor.state.doc.length,
        insert: value,
      }
    });
  };

  /**
   * Sets the focus in the editor.
   */
  FeelEditor.prototype.focus = function(position) {
    const cmEditor = this._cmEditor;

    // the Codemirror `focus` method always calls `focus` with `preventScroll`,
    // so we have to focus + scroll manually
    cmEditor.contentDOM.focus();
    cmEditor.focus();

    if (typeof position === 'number') {
      const end = cmEditor.state.doc.length;
      cmEditor.dispatch({ selection: { anchor: position <= end ? position : end } });
    }
  };

  /**
   * Returns the current selection ranges. If no text is selected, a single
   * range with the start and end index at the cursor position will be returned.
   *
   * @returns {Object} selection
   * @returns {Array} selection.ranges
   */
  FeelEditor.prototype.getSelection = function() {
    return this._cmEditor.state.selection;
  };

  /**
   * Set variables to be used for autocompletion.
   * @param {Variable[]} variables
   * @returns {void}
   */
  FeelEditor.prototype.setVariables = function(variables) {
    this._cmEditor.dispatch({
      effects: autocompletionConf.reconfigure(variablesFacet.of(variables))
    });
  };

  /*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  */
  // NOTE: separate `:not()` selectors has broader browser support than the newer
  //  `:not([inert], [inert] *)` (Feb 2023)
  // CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes
  //  the entire query to fail, resulting in no nodes found, which will break a lot
  //  of things... so we have to rely on JS to identify nodes inside an inert container
  var candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable="false"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];
  var candidateSelector = /* #__PURE__ */candidateSelectors.join(',');
  var NoElement = typeof Element === 'undefined';
  var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
    var _element$getRootNode;
    return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
  } : function (element) {
    return element === null || element === void 0 ? void 0 : element.ownerDocument;
  };

  /**
   * Determines if a node is inert or in an inert ancestor.
   * @param {Element} [node]
   * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to
   *  see if any of them are inert. If false, only `node` itself is considered.
   * @returns {boolean} True if inert itself or by way of being in an inert ancestor.
   *  False if `node` is falsy.
   */
  var isInert = function isInert(node, lookUp) {
    var _node$getAttribute;
    if (lookUp === void 0) {
      lookUp = true;
    }
    // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`
    //  JS API property; we have to check the attribute, which can either be empty or 'true';
    //  if it's `null` (not specified) or 'false', it's an active element
    var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');
    var inert = inertAtt === '' || inertAtt === 'true';

    // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`
    //  if it weren't for `matches()` not being a function on shadow roots; the following
    //  code works for any kind of node
    // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`
    //  so it likely would not support `:is([inert] *)` either...
    var result = inert || lookUp && node && isInert(node.parentNode); // recursive

    return result;
  };

  /**
   * Determines if a node's content is editable.
   * @param {Element} [node]
   * @returns True if it's content-editable; false if it's not or `node` is falsy.
   */
  var isContentEditable = function isContentEditable(node) {
    var _node$getAttribute2;
    // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have
    //  to use the attribute directly to check for this, which can either be empty or 'true';
    //  if it's `null` (not specified) or 'false', it's a non-editable element
    var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');
    return attValue === '' || attValue === 'true';
  };

  /**
   * @param {Element} el container to check in
   * @param {boolean} includeContainer add container to check
   * @param {(node: Element) => boolean} filter filter candidates
   * @returns {Element[]}
   */
  var getCandidates = function getCandidates(el, includeContainer, filter) {
    // even if `includeContainer=false`, we still have to check it for inertness because
    //  if it's inert, all its children are inert
    if (isInert(el)) {
      return [];
    }
    var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
    if (includeContainer && matches.call(el, candidateSelector)) {
      candidates.unshift(el);
    }
    candidates = candidates.filter(filter);
    return candidates;
  };

  /**
   * @callback GetShadowRoot
   * @param {Element} element to check for shadow root
   * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.
   */

  /**
   * @callback ShadowRootFilter
   * @param {Element} shadowHostNode the element which contains shadow content
   * @returns {boolean} true if a shadow root could potentially contain valid candidates.
   */

  /**
   * @typedef {Object} CandidateScope
   * @property {Element} scopeParent contains inner candidates
   * @property {Element[]} candidates list of candidates found in the scope parent
   */

  /**
   * @typedef {Object} IterativeOptions
   * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;
   *  if a function, implies shadow support is enabled and either returns the shadow root of an element
   *  or a boolean stating if it has an undisclosed shadow root
   * @property {(node: Element) => boolean} filter filter candidates
   * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list
   * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;
   */

  /**
   * @param {Element[]} elements list of element containers to match candidates from
   * @param {boolean} includeContainer add container list to check
   * @param {IterativeOptions} options
   * @returns {Array.<Element|CandidateScope>}
   */
  var getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {
    var candidates = [];
    var elementsToCheck = Array.from(elements);
    while (elementsToCheck.length) {
      var element = elementsToCheck.shift();
      if (isInert(element, false)) {
        // no need to look up since we're drilling down
        // anything inside this container will also be inert
        continue;
      }
      if (element.tagName === 'SLOT') {
        // add shadow dom slot scope (slot itself cannot be focusable)
        var assigned = element.assignedElements();
        var content = assigned.length ? assigned : element.children;
        var nestedCandidates = getCandidatesIteratively(content, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: nestedCandidates
          });
        }
      } else {
        // check candidate element
        var validCandidate = matches.call(element, candidateSelector);
        if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
          candidates.push(element);
        }

        // iterate over shadow content if possible
        var shadowRoot = element.shadowRoot ||
        // check for an undisclosed shadow
        typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);

        // no inert look up because we're already drilling down and checking for inertness
        //  on the way down, so all containers to this root node should have already been
        //  vetted as non-inert
        var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
        if (shadowRoot && validShadowRoot) {
          // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed
          //  shadow exists, so look at light dom children as fallback BUT create a scope for any
          //  child candidates found because they're likely slotted elements (elements that are
          //  children of the web component element (which has the shadow), in the light dom, but
          //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,
          //  _after_ we return from this recursive call
          var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, _nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: _nestedCandidates
            });
          }
        } else {
          // there's not shadow so just dig into the element's (light dom) children
          //  __without__ giving the element special scope treatment
          elementsToCheck.unshift.apply(elementsToCheck, element.children);
        }
      }
    }
    return candidates;
  };

  /**
   * @private
   * Determines if the node has an explicitly specified `tabindex` attribute.
   * @param {HTMLElement} node
   * @returns {boolean} True if so; false if not.
   */
  var hasTabIndex = function hasTabIndex(node) {
    return !isNaN(parseInt(node.getAttribute('tabindex'), 10));
  };

  /**
   * Determine the tab index of a given node.
   * @param {HTMLElement} node
   * @returns {number} Tab order (negative, 0, or positive number).
   * @throws {Error} If `node` is falsy.
   */
  var getTabIndex = function getTabIndex(node) {
    if (!node) {
      throw new Error('No node provided');
    }
    if (node.tabIndex < 0) {
      // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
      // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
      // yet they are still part of the regular tab order; in FF, they get a default
      // `tabIndex` of 0; since Chrome still puts those elements in the regular tab
      // order, consider their tab index to be 0.
      // Also browsers do not return `tabIndex` correctly for contentEditable nodes;
      // so if they don't have a tabindex attribute specifically set, assume it's 0.
      if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
        return 0;
      }
    }
    return node.tabIndex;
  };

  /**
   * Determine the tab index of a given node __for sort order purposes__.
   * @param {HTMLElement} node
   * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,
   *  has tabIndex -1, but needs to be sorted by document order in order for its content to be
   *  inserted into the correct sort position.
   * @returns {number} Tab order (negative, 0, or positive number).
   */
  var getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {
    var tabIndex = getTabIndex(node);
    if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
      return 0;
    }
    return tabIndex;
  };
  var sortOrderedTabbables = function sortOrderedTabbables(a, b) {
    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
  };
  var isInput = function isInput(node) {
    return node.tagName === 'INPUT';
  };
  var isHiddenInput = function isHiddenInput(node) {
    return isInput(node) && node.type === 'hidden';
  };
  var isDetailsWithSummary = function isDetailsWithSummary(node) {
    var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
      return child.tagName === 'SUMMARY';
    });
    return r;
  };
  var getCheckedRadio = function getCheckedRadio(nodes, form) {
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i].checked && nodes[i].form === form) {
        return nodes[i];
      }
    }
  };
  var isTabbableRadio = function isTabbableRadio(node) {
    if (!node.name) {
      return true;
    }
    var radioScope = node.form || getRootNode(node);
    var queryRadios = function queryRadios(name) {
      return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
    };
    var radioSet;
    if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {
      radioSet = queryRadios(window.CSS.escape(node.name));
    } else {
      try {
        radioSet = queryRadios(node.name);
      } catch (err) {
        // eslint-disable-next-line no-console
        console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);
        return false;
      }
    }
    var checked = getCheckedRadio(radioSet, node.form);
    return !checked || checked === node;
  };
  var isRadio = function isRadio(node) {
    return isInput(node) && node.type === 'radio';
  };
  var isNonTabbableRadio = function isNonTabbableRadio(node) {
    return isRadio(node) && !isTabbableRadio(node);
  };

  // determines if a node is ultimately attached to the window's document
  var isNodeAttached = function isNodeAttached(node) {
    var _nodeRoot;
    // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
    //  (but NOT _the_ document; see second 'If' comment below for more).
    // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
    //  is attached, and the one we need to check if it's in the document or not (because the
    //  shadow, and all nodes it contains, is never considered in the document since shadows
    //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
    //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
    //  visibility, including all the nodes it contains). The host could be any normal node,
    //  or a custom element (i.e. web component). Either way, that's the one that is considered
    //  part of the document, not the shadow root, nor any of its children (i.e. the node being
    //  tested).
    // To further complicate things, we have to look all the way up until we find a shadow HOST
    //  that is attached (or find none) because the node might be in nested shadows...
    // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
    //  document (per the docs) and while it's a Document-type object, that document does not
    //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
    //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
    //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
    //  node is actually detached.
    // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible
    //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed
    //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then
    //  `ownerDocument` will be `null`, hence the optional chaining on it.
    var nodeRoot = node && getRootNode(node);
    var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;

    // in some cases, a detached node will return itself as the root instead of a document or
    //  shadow root object, in which case, we shouldn't try to look further up the host chain
    var attached = false;
    if (nodeRoot && nodeRoot !== node) {
      var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
      attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
      while (!attached && nodeRootHost) {
        var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
        // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
        //  which means we need to get the host's host and check if that parent host is contained
        //  in (i.e. attached to) the document
        nodeRoot = getRootNode(nodeRootHost);
        nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
        attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
      }
    }
    return attached;
  };
  var isZeroArea = function isZeroArea(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(),
      width = _node$getBoundingClie.width,
      height = _node$getBoundingClie.height;
    return width === 0 && height === 0;
  };
  var isHidden = function isHidden(node, _ref) {
    var displayCheck = _ref.displayCheck,
      getShadowRoot = _ref.getShadowRoot;
    // NOTE: visibility will be `undefined` if node is detached from the document
    //  (see notes about this further down), which means we will consider it visible
    //  (this is legacy behavior from a very long way back)
    // NOTE: we check this regardless of `displayCheck="none"` because this is a
    //  _visibility_ check, not a _display_ check
    if (getComputedStyle(node).visibility === 'hidden') {
      return true;
    }
    var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
    var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
    if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
      return true;
    }
    if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {
      if (typeof getShadowRoot === 'function') {
        // figure out if we should consider the node to be in an undisclosed shadow and use the
        //  'non-zero-area' fallback
        var originalNode = node;
        while (node) {
          var parentElement = node.parentElement;
          var rootNode = getRootNode(node);
          if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
          ) {
            // node has an undisclosed shadow which means we can only treat it as a black box, so we
            //  fall back to a non-zero-area test
            return isZeroArea(node);
          } else if (node.assignedSlot) {
            // iterate up slot
            node = node.assignedSlot;
          } else if (!parentElement && rootNode !== node.ownerDocument) {
            // cross shadow boundary
            node = rootNode.host;
          } else {
            // iterate up normal dom
            node = parentElement;
          }
        }
        node = originalNode;
      }
      // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
      //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
      //  it might be a falsy value, which means shadow DOM support is disabled

      // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
      //  now we can just test to see if it would normally be visible or not, provided it's
      //  attached to the main document.
      // NOTE: We must consider case where node is inside a shadow DOM and given directly to
      //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.

      if (isNodeAttached(node)) {
        // this works wherever the node is: if there's at least one client rect, it's
        //  somehow displayed; it also covers the CSS 'display: contents' case where the
        //  node itself is hidden in place of its contents; and there's no need to search
        //  up the hierarchy either
        return !node.getClientRects().length;
      }

      // Else, the node isn't attached to the document, which means the `getClientRects()`
      //  API will __always__ return zero rects (this can happen, for example, if React
      //  is used to render nodes onto a detached tree, as confirmed in this thread:
      //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
      //
      // It also means that even window.getComputedStyle(node).display will return `undefined`
      //  because styles are only computed for nodes that are in the document.
      //
      // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
      //  somehow. Though it was never stated officially, anyone who has ever used tabbable
      //  APIs on nodes in detached containers has actually implicitly used tabbable in what
      //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
      //  considering __everything__ to be visible because of the innability to determine styles.
      //
      // v6.0.0: As of this major release, the default 'full' option __no longer treats detached
      //  nodes as visible with the 'none' fallback.__
      if (displayCheck !== 'legacy-full') {
        return true; // hidden
      }
      // else, fallback to 'none' mode and consider the node visible
    } else if (displayCheck === 'non-zero-area') {
      // NOTE: Even though this tests that the node's client rect is non-zero to determine
      //  whether it's displayed, and that a detached node will __always__ have a zero-area
      //  client rect, we don't special-case for whether the node is attached or not. In
      //  this mode, we do want to consider nodes that have a zero area to be hidden at all
      //  times, and that includes attached or not.
      return isZeroArea(node);
    }

    // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
    //  it's visible
    return false;
  };

  // form fields (nested) inside a disabled fieldset are not focusable/tabbable
  //  unless they are in the _first_ <legend> element of the top-most disabled
  //  fieldset
  var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
    if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
      var parentNode = node.parentElement;
      // check if `node` is contained in a disabled <fieldset>
      while (parentNode) {
        if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
          // look for the first <legend> among the children of the disabled <fieldset>
          for (var i = 0; i < parentNode.children.length; i++) {
            var child = parentNode.children.item(i);
            // when the first <legend> (in document order) is found
            if (child.tagName === 'LEGEND') {
              // if its parent <fieldset> is not nested in another disabled <fieldset>,
              // return whether `node` is a descendant of its first <legend>
              return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
            }
          }
          // the disabled <fieldset> containing `node` has no <legend>
          return true;
        }
        parentNode = parentNode.parentElement;
      }
    }

    // else, node's tabbable/focusable state should not be affected by a fieldset's
    //  enabled/disabled state
    return false;
  };
  var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
    if (node.disabled ||
    // we must do an inert look up to filter out any elements inside an inert ancestor
    //  because we're limited in the type of selectors we can use in JSDom (see related
    //  note related to `candidateSelectors`)
    isInert(node) || isHiddenInput(node) || isHidden(node, options) ||
    // For a details element with a summary, the summary element gets the focus
    isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
      return false;
    }
    return true;
  };
  var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {
    if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
      return false;
    }
    return true;
  };
  var isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {
    var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);
    if (isNaN(tabIndex) || tabIndex >= 0) {
      return true;
    }
    // If a custom element has an explicit negative tabindex,
    // browsers will not allow tab targeting said element's children.
    return false;
  };

  /**
   * @param {Array.<Element|CandidateScope>} candidates
   * @returns Element[]
   */
  var sortByOrder = function sortByOrder(candidates) {
    var regularTabbables = [];
    var orderedTabbables = [];
    candidates.forEach(function (item, i) {
      var isScope = !!item.scopeParent;
      var element = isScope ? item.scopeParent : item;
      var candidateTabindex = getSortOrderTabIndex(element, isScope);
      var elements = isScope ? sortByOrder(item.candidates) : element;
      if (candidateTabindex === 0) {
        isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
      } else {
        orderedTabbables.push({
          documentOrder: i,
          tabIndex: candidateTabindex,
          item: item,
          isScope: isScope,
          content: elements
        });
      }
    });
    return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {
      sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
      return acc;
    }, []).concat(regularTabbables);
  };
  var tabbable = function tabbable(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorTabbable.bind(null, options),
        flatten: false,
        getShadowRoot: options.getShadowRoot,
        shadowRootFilter: isValidShadowRootTabbable
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
    }
    return sortByOrder(candidates);
  };
  var focusable = function focusable(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorFocusable.bind(null, options),
        flatten: true,
        getShadowRoot: options.getShadowRoot
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
    }
    return candidates;
  };
  var isTabbable = function isTabbable(node, options) {
    options = options || {};
    if (!node) {
      throw new Error('No node provided');
    }
    if (matches.call(node, candidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorTabbable(options, node);
  };
  var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');
  var isFocusable = function isFocusable(node, options) {
    options = options || {};
    if (!node) {
      throw new Error('No node provided');
    }
    if (matches.call(node, focusableCandidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorFocusable(options, node);
  };

  /*!
  * focus-trap 7.6.4
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  */

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;
    }
  }

  var activeFocusTraps = {
    activateTrap: function activateTrap(trapStack, trap) {
      if (trapStack.length > 0) {
        var activeTrap = trapStack[trapStack.length - 1];
        if (activeTrap !== trap) {
          activeTrap._setPausedState(true);
        }
      }
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex === -1) {
        trapStack.push(trap);
      } else {
        // move this existing trap to the front of the queue
        trapStack.splice(trapIndex, 1);
        trapStack.push(trap);
      }
    },
    deactivateTrap: function deactivateTrap(trapStack, trap) {
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex !== -1) {
        trapStack.splice(trapIndex, 1);
      }
      if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {
        trapStack[trapStack.length - 1]._setPausedState(false);
      }
    }
  };
  var isSelectableInput = function isSelectableInput(node) {
    return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';
  };
  var isEscapeEvent = function isEscapeEvent(e) {
    return (e === null || e === undefined ? undefined : e.key) === 'Escape' || (e === null || e === undefined ? undefined : e.key) === 'Esc' || (e === null || e === undefined ? undefined : e.keyCode) === 27;
  };
  var isTabEvent = function isTabEvent(e) {
    return (e === null || e === undefined ? undefined : e.key) === 'Tab' || (e === null || e === undefined ? undefined : e.keyCode) === 9;
  };

  // checks for TAB by default
  var isKeyForward = function isKeyForward(e) {
    return isTabEvent(e) && !e.shiftKey;
  };

  // checks for SHIFT+TAB by default
  var isKeyBackward = function isKeyBackward(e) {
    return isTabEvent(e) && e.shiftKey;
  };
  var delay = function delay(fn) {
    return setTimeout(fn, 0);
  };

  /**
   * Get an option's value when it could be a plain value, or a handler that provides
   *  the value.
   * @param {*} value Option's value to check.
   * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.
   * @returns {*} The `value`, or the handler's returned value.
   */
  var valueOrHandler = function valueOrHandler(value) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    return typeof value === 'function' ? value.apply(undefined, params) : value;
  };
  var getActualTarget = function getActualTarget(event) {
    // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the
    //  shadow host. However, event.target.composedPath() will be an array of
    //  nodes "clicked" from inner-most (the actual element inside the shadow) to
    //  outer-most (the host HTML document). If we have access to composedPath(),
    //  then use its first element; otherwise, fall back to event.target (and
    //  this only works for an _open_ shadow DOM; otherwise,
    //  composedPath()[0] === event.target always).
    return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;
  };

  // NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this
  //  current instance use the same stack if `userOptions.trapStack` isn't specified
  var internalTrapStack = [];
  var createFocusTrap = function createFocusTrap(elements, userOptions) {
    // SSR: a live trap shouldn't be created in this type of environment so this
    //  should be safe code to execute if the `document` option isn't specified
    var doc = (userOptions === null || userOptions === undefined ? undefined : userOptions.document) || document;
    var trapStack = (userOptions === null || userOptions === undefined ? undefined : userOptions.trapStack) || internalTrapStack;
    var config = _objectSpread2({
      returnFocusOnDeactivate: true,
      escapeDeactivates: true,
      delayInitialFocus: true,
      isKeyForward: isKeyForward,
      isKeyBackward: isKeyBackward
    }, userOptions);
    var state = {
      // containers given to createFocusTrap()
      // @type {Array<HTMLElement>}
      containers: [],
      // list of objects identifying tabbable nodes in `containers` in the trap
      // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
      //  is active, but the trap should never get to a state where there isn't at least one group
      //  with at least one tabbable node in it (that would lead to an error condition that would
      //  result in an error being thrown)
      // @type {Array<{
      //   container: HTMLElement,
      //   tabbableNodes: Array<HTMLElement>, // empty if none
      //   focusableNodes: Array<HTMLElement>, // empty if none
      //   posTabIndexesFound: boolean,
      //   firstTabbableNode: HTMLElement|undefined,
      //   lastTabbableNode: HTMLElement|undefined,
      //   firstDomTabbableNode: HTMLElement|undefined,
      //   lastDomTabbableNode: HTMLElement|undefined,
      //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
      // }>}
      containerGroups: [],
      // same order/length as `containers` list

      // references to objects in `containerGroups`, but only those that actually have
      //  tabbable nodes in them
      // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
      //  the same length
      tabbableGroups: [],
      nodeFocusedBeforeActivation: null,
      mostRecentlyFocusedNode: null,
      active: false,
      paused: false,
      manuallyPaused: false,
      // timer ID for when delayInitialFocus is true and initial focus in this trap
      //  has been delayed during activation
      delayInitialFocusTimer: undefined,
      // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
      recentNavEvent: undefined
    };
    var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later

    /**
     * Gets a configuration option value.
     * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,
     *  value will be taken from this object. Otherwise, value will be taken from base configuration.
     * @param {string} optionName Name of the option whose value is sought.
     * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`
     *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.
     */
    var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {
      return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];
    };

    /**
     * Finds the index of the container that contains the element.
     * @param {HTMLElement} element
     * @param {Event} [event] If available, and `element` isn't directly found in any container,
     *  the event's composed path is used to see if includes any known trap containers in the
     *  case where the element is inside a Shadow DOM.
     * @returns {number} Index of the container in either `state.containers` or
     *  `state.containerGroups` (the order/length of these lists are the same); -1
     *  if the element isn't found.
     */
    var findContainerIndex = function findContainerIndex(element, event) {
      var composedPath = typeof (event === null || event === undefined ? undefined : event.composedPath) === 'function' ? event.composedPath() : undefined;
      // NOTE: search `containerGroups` because it's possible a group contains no tabbable
      //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)
      //  and we still need to find the element in there
      return state.containerGroups.findIndex(function (_ref) {
        var container = _ref.container,
          tabbableNodes = _ref.tabbableNodes;
        return container.contains(element) || (// fall back to explicit tabbable search which will take into consideration any
        //  web components if the `tabbableOptions.getShadowRoot` option was used for
        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
        //  look inside web components even if open)
        composedPath === null || composedPath === undefined ? undefined : composedPath.includes(container)) || tabbableNodes.find(function (node) {
          return node === element;
        });
      });
    };

    /**
     * Gets the node for the given option, which is expected to be an option that
     *  can be either a DOM node, a string that is a selector to get a node, `false`
     *  (if a node is explicitly NOT given), or a function that returns any of these
     *  values.
     * @param {string} optionName
     * @param {Object} options
     * @param {boolean} [options.hasFallback] True if the option could be a selector string
     *  and the option allows for a fallback scenario in the case where the selector is
     *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).
     * @param {Array} [options.params] Params to pass to the option if it's a function.
     * @returns {undefined | null | false | HTMLElement | SVGElement} Returns
     *  `undefined` if the option is not specified; `null` if the option didn't resolve
     *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`
     *  (node explicitly not given); otherwise, the resolved DOM node.
     * @throws {Error} If the option is set, not `false`, and is not, or does not
     *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.
     */
    var getNodeForOption = function getNodeForOption(optionName) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$hasFallback = _ref2.hasFallback,
        hasFallback = _ref2$hasFallback === undefined ? false : _ref2$hasFallback,
        _ref2$params = _ref2.params,
        params = _ref2$params === undefined ? [] : _ref2$params;
      var optionValue = config[optionName];
      if (typeof optionValue === 'function') {
        optionValue = optionValue.apply(undefined, _toConsumableArray(params));
      }
      if (optionValue === true) {
        optionValue = undefined; // use default value
      }
      if (!optionValue) {
        if (optionValue === undefined || optionValue === false) {
          return optionValue;
        }
        // else, empty string (invalid), null (invalid), 0 (invalid)

        throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
      }
      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point

      if (typeof optionValue === 'string') {
        try {
          node = doc.querySelector(optionValue); // resolve to node, or null if fails
        } catch (err) {
          throw new Error("`".concat(optionName, "` appears to be an invalid selector; error=\"").concat(err.message, "\""));
        }
        if (!node) {
          if (!hasFallback) {
            throw new Error("`".concat(optionName, "` as selector refers to no known node"));
          }
          // else, `node` MUST be `null` because that's what `Document.querySelector()` returns
          //  if the selector is valid but doesn't match anything
        }
      }
      return node;
    };
    var getInitialFocusNode = function getInitialFocusNode() {
      var node = getNodeForOption('initialFocus', {
        hasFallback: true
      });

      // false explicitly indicates we want no initialFocus at all
      if (node === false) {
        return false;
      }
      if (node === undefined || node && !isFocusable(node, config.tabbableOptions)) {
        // option not specified nor focusable: use fallback options
        if (findContainerIndex(doc.activeElement) >= 0) {
          node = doc.activeElement;
        } else {
          var firstTabbableGroup = state.tabbableGroups[0];
          var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;

          // NOTE: `fallbackFocus` option function cannot return `false` (not supported)
          node = firstTabbableNode || getNodeForOption('fallbackFocus');
        }
      } else if (node === null) {
        // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`
        //  option instead of the default behavior when the option isn't specified at all
        node = getNodeForOption('fallbackFocus');
      }
      if (!node) {
        throw new Error('Your focus-trap needs to have at least one focusable element');
      }
      return node;
    };
    var updateTabbableNodes = function updateTabbableNodes() {
      state.containerGroups = state.containers.map(function (container) {
        var tabbableNodes = tabbable(container, config.tabbableOptions);

        // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes
        //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes
        //  are focusable but not tabbable
        var focusableNodes = focusable(container, config.tabbableOptions);
        var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;
        var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;
        var firstDomTabbableNode = focusableNodes.find(function (node) {
          return isTabbable(node);
        });
        var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {
          return isTabbable(node);
        });
        var posTabIndexesFound = !!tabbableNodes.find(function (node) {
          return getTabIndex(node) > 0;
        });
        return {
          container: container,
          tabbableNodes: tabbableNodes,
          focusableNodes: focusableNodes,
          /** True if at least one node with positive `tabindex` was found in this container. */
          posTabIndexesFound: posTabIndexesFound,
          /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
          firstTabbableNode: firstTabbableNode,
          /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
          lastTabbableNode: lastTabbableNode,
          // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
          //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
          //  because that API doesn't work with Shadow DOM as well as it should (@see
          //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
          //  to address an edge case related to positive tabindex support, this seems like a much easier,
          //  "close enough most of the time" alternative for positive tabindexes which should generally
          //  be avoided anyway...
          /** First tabbable node in container, __DOM__ order; `undefined` if none. */
          firstDomTabbableNode: firstDomTabbableNode,
          /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
          lastDomTabbableNode: lastDomTabbableNode,
          /**
           * Finds the __tabbable__ node that follows the given node in the specified direction,
           *  in this container, if any.
           * @param {HTMLElement} node
           * @param {boolean} [forward] True if going in forward tab order; false if going
           *  in reverse.
           * @returns {HTMLElement|undefined} The next tabbable node, if any.
           */
          nextTabbableNode: function nextTabbableNode(node) {
            var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var nodeIdx = tabbableNodes.indexOf(node);
            if (nodeIdx < 0) {
              // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):
              //  since `node` should at least have been focusable, we assume that's the case and mimic
              //  what browsers do, which is set focus to the next node in __document position order__,
              //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE
              //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to
              //  basic DOM order
              if (forward) {
                return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {
                  return isTabbable(el);
                });
              }
              return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {
                return isTabbable(el);
              });
            }
            return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
          }
        };
      });
      state.tabbableGroups = state.containerGroups.filter(function (group) {
        return group.tabbableNodes.length > 0;
      });

      // throw if no groups have tabbable nodes and we don't have a fallback focus node either
      if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option
      ) {
        throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');
      }

      // NOTE: Positive tabindexes are only properly supported in single-container traps because
      //  doing it across multiple containers where tabindexes could be all over the place
      //  would require Tabbable to support multiple containers, would require additional
      //  specialized Shadow DOM support, and would require Tabbable's multi-container support
      //  to look at those containers in document position order rather than user-provided
      //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on
      //  https://github.com/focus-trap/focus-trap/issues/375 for more details.
      if (state.containerGroups.find(function (g) {
        return g.posTabIndexesFound;
      }) && state.containerGroups.length > 1) {
        throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
      }
    };

    /**
     * Gets the current activeElement. If it's a web-component and has open shadow-root
     * it will recursively search inside shadow roots for the "true" activeElement.
     *
     * @param {Document | ShadowRoot} el
     *
     * @returns {HTMLElement} The element that currently has the focus
     **/
    var _getActiveElement = function getActiveElement(el) {
      var activeElement = el.activeElement;
      if (!activeElement) {
        return;
      }
      if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {
        return _getActiveElement(activeElement.shadowRoot);
      }
      return activeElement;
    };
    var _tryFocus = function tryFocus(node) {
      if (node === false) {
        return;
      }
      if (node === _getActiveElement(document)) {
        return;
      }
      if (!node || !node.focus) {
        _tryFocus(getInitialFocusNode());
        return;
      }
      node.focus({
        preventScroll: !!config.preventScroll
      });
      // NOTE: focus() API does not trigger focusIn event so set MRU node manually
      state.mostRecentlyFocusedNode = node;
      if (isSelectableInput(node)) {
        node.select();
      }
    };
    var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {
      var node = getNodeForOption('setReturnFocus', {
        params: [previousActiveElement]
      });
      return node ? node : node === false ? false : previousActiveElement;
    };

    /**
     * Finds the next node (in either direction) where focus should move according to a
     *  keyboard focus-in event.
     * @param {Object} params
     * @param {Node} [params.target] Known target __from which__ to navigate, if any.
     * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event
     *  will be used to determine the `target`). Ignored if `target` is specified.
     * @param {boolean} [params.isBackward] True if focus should move backward.
     * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be
     *  determined given the current state of the trap.
     */
    var findNextNavNode = function findNextNavNode(_ref3) {
      var target = _ref3.target,
        event = _ref3.event,
        _ref3$isBackward = _ref3.isBackward,
        isBackward = _ref3$isBackward === undefined ? false : _ref3$isBackward;
      target = target || getActualTarget(event);
      updateTabbableNodes();
      var destinationNode = null;
      if (state.tabbableGroups.length > 0) {
        // make sure the target is actually contained in a group
        // NOTE: the target may also be the container itself if it's focusable
        //  with tabIndex='-1' and was given initial focus
        var containerIndex = findContainerIndex(target, event);
        var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;
        if (containerIndex < 0) {
          // target not found in any group: quite possible focus has escaped the trap,
          //  so bring it back into...
          if (isBackward) {
            // ...the last node in the last group
            destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
          } else {
            // ...the first node in the first group
            destinationNode = state.tabbableGroups[0].firstTabbableNode;
          }
        } else if (isBackward) {
          // REVERSE

          // is the target the first tabbable node in a group?
          var startOfGroupIndex = state.tabbableGroups.findIndex(function (_ref4) {
            var firstTabbableNode = _ref4.firstTabbableNode;
            return target === firstTabbableNode;
          });
          if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
            // an exception case where the target is either the container itself, or
            //  a non-tabbable node that was given focus (i.e. tabindex is negative
            //  and user clicked on it or node was programmatically given focus)
            //  and is not followed by any other tabbable node, in which
            //  case, we should handle shift+tab as if focus were on the container's
            //  first tabbable node, and go to the last tabbable node of the LAST group
            startOfGroupIndex = containerIndex;
          }
          if (startOfGroupIndex >= 0) {
            // YES: then shift+tab should go to the last tabbable node in the
            //  previous group (and wrap around to the last tabbable node of
            //  the LAST group if it's the first tabbable node of the FIRST group)
            var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
            var destinationGroup = state.tabbableGroups[destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
          } else if (!isTabEvent(event)) {
            // user must have customized the nav keys so we have to move focus manually _within_
            //  the active group: do this based on the order determined by tabbable()
            destinationNode = containerGroup.nextTabbableNode(target, false);
          }
        } else {
          // FORWARD

          // is the target the last tabbable node in a group?
          var lastOfGroupIndex = state.tabbableGroups.findIndex(function (_ref5) {
            var lastTabbableNode = _ref5.lastTabbableNode;
            return target === lastTabbableNode;
          });
          if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
            // an exception case where the target is the container itself, or
            //  a non-tabbable node that was given focus (i.e. tabindex is negative
            //  and user clicked on it or node was programmatically given focus)
            //  and is not followed by any other tabbable node, in which
            //  case, we should handle tab as if focus were on the container's
            //  last tabbable node, and go to the first tabbable node of the FIRST group
            lastOfGroupIndex = containerIndex;
          }
          if (lastOfGroupIndex >= 0) {
            // YES: then tab should go to the first tabbable node in the next
            //  group (and wrap around to the first tabbable node of the FIRST
            //  group if it's the last tabbable node of the LAST group)
            var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
            var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
          } else if (!isTabEvent(event)) {
            // user must have customized the nav keys so we have to move focus manually _within_
            //  the active group: do this based on the order determined by tabbable()
            destinationNode = containerGroup.nextTabbableNode(target);
          }
        }
      } else {
        // no groups available
        // NOTE: the fallbackFocus option does not support returning false to opt-out
        destinationNode = getNodeForOption('fallbackFocus');
      }
      return destinationNode;
    };

    // This needs to be done on mousedown and touchstart instead of click
    // so that it precedes the focus event.
    var checkPointerDown = function checkPointerDown(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        // allow the click since it ocurred inside the trap
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        // immediately deactivate the trap
        trap.deactivate({
          // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
          //  which will result in the outside click setting focus to the node
          //  that was clicked (and if not focusable, to "nothing"); by setting
          //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
          //  on activation (or the configured `setReturnFocus` node), whether the
          //  outside click was on a focusable node or not
          returnFocus: config.returnFocusOnDeactivate
        });
        return;
      }

      // This is needed for mobile devices.
      // (If we'll only let `click` events through,
      // then on mobile they will be blocked anyways if `touchstart` is blocked.)
      if (valueOrHandler(config.allowOutsideClick, e)) {
        // allow the click outside the trap to take place
        return;
      }

      // otherwise, prevent the click
      e.preventDefault();
    };

    // In case focus escapes the trap for some strange reason, pull it back in.
    // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected
    //  scrolling if the node that got focused was out of view; there's nothing we can do to
    //  prevent that from happening by the time we discover that focus escaped
    var checkFocusIn = function checkFocusIn(event) {
      var target = getActualTarget(event);
      var targetContained = findContainerIndex(target, event) >= 0;

      // In Firefox when you Tab out of an iframe the Document is briefly focused.
      if (targetContained || target instanceof Document) {
        if (targetContained) {
          state.mostRecentlyFocusedNode = target;
        }
      } else {
        // escaped! pull it back in to where it just left
        event.stopImmediatePropagation();

        // focus will escape if the MRU node had a positive tab index and user tried to nav forward;
        //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward
        //  toward a node with a positive tab index
        var nextNode; // next node to focus, if we find one
        var navAcrossContainers = true;
        if (state.mostRecentlyFocusedNode) {
          if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
            // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...
            var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
            // there MAY not be any tabbable nodes in the container if there are at least 2 containers
            //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container
            //  with at least one tabbable node in order to function, so this could be the other container
            //  with nothing tabbable in it)
            var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
            if (tabbableNodes.length > 0) {
              // MRU tab index MAY not be found if the MRU node is focusable but not tabbable
              var mruTabIdx = tabbableNodes.findIndex(function (node) {
                return node === state.mostRecentlyFocusedNode;
              });
              if (mruTabIdx >= 0) {
                if (config.isKeyForward(state.recentNavEvent)) {
                  if (mruTabIdx + 1 < tabbableNodes.length) {
                    nextNode = tabbableNodes[mruTabIdx + 1];
                    navAcrossContainers = false;
                  }
                  // else, don't wrap within the container as focus should move to next/previous
                  //  container
                } else {
                  if (mruTabIdx - 1 >= 0) {
                    nextNode = tabbableNodes[mruTabIdx - 1];
                    navAcrossContainers = false;
                  }
                  // else, don't wrap within the container as focus should move to next/previous
                  //  container
                }
                // else, don't find in container order without considering direction too
              }
            }
            // else, no tabbable nodes in that container (which means we must have at least one other
            //  container with at least one tabbable node in it, otherwise focus-trap would've thrown
            //  an error the last time updateTabbableNodes() was run): find next node among all known
            //  containers
          } else {
            // check to see if there's at least one tabbable node with a positive tab index inside
            //  the trap because focus seems to escape when navigating backward from a tabbable node
            //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with
            //  the greatest positive tab index like it should)
            if (!state.containerGroups.some(function (g) {
              return g.tabbableNodes.some(function (n) {
                return getTabIndex(n) > 0;
              });
            })) {
              // no containers with tabbable nodes with positive tab indexes which means the focus
              //  escaped for some other reason and we should just execute the fallback to the
              //  MRU node or initial focus node, if any
              navAcrossContainers = false;
            }
          }
        } else {
          // no MRU node means we're likely in some initial condition when the trap has just
          //  been activated and initial focus hasn't been given yet, in which case we should
          //  fall through to trying to focus the initial focus node, which is what should
          //  happen below at this point in the logic
          navAcrossContainers = false;
        }
        if (navAcrossContainers) {
          nextNode = findNextNavNode({
            // move FROM the MRU node, not event-related node (which will be the node that is
            //  outside the trap causing the focus escape we're trying to fix)
            target: state.mostRecentlyFocusedNode,
            isBackward: config.isKeyBackward(state.recentNavEvent)
          });
        }
        if (nextNode) {
          _tryFocus(nextNode);
        } else {
          _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
        }
      }
      state.recentNavEvent = undefined; // clear
    };

    // Hijack key nav events on the first and last focusable nodes of the trap,
    // in order to prevent focus from escaping. If it escapes for even a
    // moment it can end up scrolling the page and causing confusion so we
    // kind of need to capture the action at the keydown phase.
    var checkKeyNav = function checkKeyNav(event) {
      var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      state.recentNavEvent = event;
      var destinationNode = findNextNavNode({
        event: event,
        isBackward: isBackward
      });
      if (destinationNode) {
        if (isTabEvent(event)) {
          // since tab natively moves focus, we wouldn't have a destination node unless we
          //  were on the edge of a container and had to move to the next/previous edge, in
          //  which case we want to prevent default to keep the browser from moving focus
          //  to where it normally would
          event.preventDefault();
        }
        _tryFocus(destinationNode);
      }
      // else, let the browser take care of [shift+]tab and move the focus
    };
    var checkTabKey = function checkTabKey(event) {
      if (config.isKeyForward(event) || config.isKeyBackward(event)) {
        checkKeyNav(event, config.isKeyBackward(event));
      }
    };

    // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates
    var checkEscapeKey = function checkEscapeKey(event) {
      if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
        event.preventDefault();
        trap.deactivate();
      }
    };
    var checkClick = function checkClick(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        return;
      }
      if (valueOrHandler(config.allowOutsideClick, e)) {
        return;
      }
      e.preventDefault();
      e.stopImmediatePropagation();
    };

    //
    // EVENT LISTENERS
    //

    var addListeners = function addListeners() {
      if (!state.active) {
        return;
      }

      // There can be only one listening focus trap at a time
      activeFocusTraps.activateTrap(trapStack, trap);

      // Delay ensures that the focused element doesn't capture the event
      // that caused the focus trap activation.
      state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {
        _tryFocus(getInitialFocusNode());
      }) : _tryFocus(getInitialFocusNode());
      doc.addEventListener('focusin', checkFocusIn, true);
      doc.addEventListener('mousedown', checkPointerDown, {
        capture: true,
        passive: false
      });
      doc.addEventListener('touchstart', checkPointerDown, {
        capture: true,
        passive: false
      });
      doc.addEventListener('click', checkClick, {
        capture: true,
        passive: false
      });
      doc.addEventListener('keydown', checkTabKey, {
        capture: true,
        passive: false
      });
      doc.addEventListener('keydown', checkEscapeKey);
      return trap;
    };
    var removeListeners = function removeListeners() {
      if (!state.active) {
        return;
      }
      doc.removeEventListener('focusin', checkFocusIn, true);
      doc.removeEventListener('mousedown', checkPointerDown, true);
      doc.removeEventListener('touchstart', checkPointerDown, true);
      doc.removeEventListener('click', checkClick, true);
      doc.removeEventListener('keydown', checkTabKey, true);
      doc.removeEventListener('keydown', checkEscapeKey);
      return trap;
    };

    //
    // MUTATION OBSERVER
    //

    var checkDomRemoval = function checkDomRemoval(mutations) {
      var isFocusedNodeRemoved = mutations.some(function (mutation) {
        var removedNodes = Array.from(mutation.removedNodes);
        return removedNodes.some(function (node) {
          return node === state.mostRecentlyFocusedNode;
        });
      });

      // If the currently focused is removed then browsers will move focus to the
      // <body> element. If this happens, try to move focus back into the trap.
      if (isFocusedNodeRemoved) {
        _tryFocus(getInitialFocusNode());
      }
    };

    // Use MutationObserver - if supported - to detect if focused node is removed
    // from the DOM.
    var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;
    var updateObservedNodes = function updateObservedNodes() {
      if (!mutationObserver) {
        return;
      }
      mutationObserver.disconnect();
      if (state.active && !state.paused) {
        state.containers.map(function (container) {
          mutationObserver.observe(container, {
            subtree: true,
            childList: true
          });
        });
      }
    };

    //
    // TRAP DEFINITION
    //

    trap = {
      get active() {
        return state.active;
      },
      get paused() {
        return state.paused;
      },
      activate: function activate(activateOptions) {
        if (state.active) {
          return this;
        }
        var onActivate = getOption(activateOptions, 'onActivate');
        var onPostActivate = getOption(activateOptions, 'onPostActivate');
        var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');
        if (!checkCanFocusTrap) {
          updateTabbableNodes();
        }
        state.active = true;
        state.paused = false;
        state.nodeFocusedBeforeActivation = doc.activeElement;
        onActivate === null || onActivate === undefined || onActivate();
        var finishActivation = function finishActivation() {
          if (checkCanFocusTrap) {
            updateTabbableNodes();
          }
          addListeners();
          updateObservedNodes();
          onPostActivate === null || onPostActivate === undefined || onPostActivate();
        };
        if (checkCanFocusTrap) {
          checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
          return this;
        }
        finishActivation();
        return this;
      },
      deactivate: function deactivate(deactivateOptions) {
        if (!state.active) {
          return this;
        }
        var options = _objectSpread2({
          onDeactivate: config.onDeactivate,
          onPostDeactivate: config.onPostDeactivate,
          checkCanReturnFocus: config.checkCanReturnFocus
        }, deactivateOptions);
        clearTimeout(state.delayInitialFocusTimer); // noop if undefined
        state.delayInitialFocusTimer = undefined;
        removeListeners();
        state.active = false;
        state.paused = false;
        updateObservedNodes();
        activeFocusTraps.deactivateTrap(trapStack, trap);
        var onDeactivate = getOption(options, 'onDeactivate');
        var onPostDeactivate = getOption(options, 'onPostDeactivate');
        var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');
        var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');
        onDeactivate === null || onDeactivate === undefined || onDeactivate();
        var finishDeactivation = function finishDeactivation() {
          delay(function () {
            if (returnFocus) {
              _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
            }
            onPostDeactivate === null || onPostDeactivate === undefined || onPostDeactivate();
          });
        };
        if (returnFocus && checkCanReturnFocus) {
          checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
          return this;
        }
        finishDeactivation();
        return this;
      },
      pause: function pause(pauseOptions) {
        if (!state.active) {
          return this;
        }
        state.manuallyPaused = true;
        return this._setPausedState(true, pauseOptions);
      },
      unpause: function unpause(unpauseOptions) {
        if (!state.active) {
          return this;
        }
        state.manuallyPaused = false;
        if (trapStack[trapStack.length - 1] !== this) {
          return this;
        }
        return this._setPausedState(false, unpauseOptions);
      },
      updateContainerElements: function updateContainerElements(containerElements) {
        var elementsAsArray = [].concat(containerElements).filter(Boolean);
        state.containers = elementsAsArray.map(function (element) {
          return typeof element === 'string' ? doc.querySelector(element) : element;
        });
        if (state.active) {
          updateTabbableNodes();
        }
        updateObservedNodes();
        return this;
      }
    };
    Object.defineProperties(trap, {
      _isManuallyPaused: {
        value: function value() {
          return state.manuallyPaused;
        }
      },
      _setPausedState: {
        value: function value(paused, options) {
          if (state.paused === paused) {
            return this;
          }
          state.paused = paused;
          if (paused) {
            var onPause = getOption(options, 'onPause');
            var onPostPause = getOption(options, 'onPostPause');
            onPause === null || onPause === undefined || onPause();
            removeListeners();
            updateObservedNodes();
            onPostPause === null || onPostPause === undefined || onPostPause();
          } else {
            var onUnpause = getOption(options, 'onUnpause');
            var onPostUnpause = getOption(options, 'onPostUnpause');
            onUnpause === null || onUnpause === undefined || onUnpause();
            updateTabbableNodes();
            addListeners();
            updateObservedNodes();
            onPostUnpause === null || onPostUnpause === undefined || onPostUnpause();
          }
          return this;
        }
      }
    });

    // initialize container elements
    trap.updateContainerElements(elements);
    return trap;
  };

  var ArrowIcon = function ArrowIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        d: "m11.657 8-4.95 4.95a1 1 0 0 1-1.414-1.414L8.828 8 5.293 4.464A1 1 0 1 1 6.707 3.05L11.657 8Z"
      })
    });
  };
  ArrowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var CreateIcon = function CreateIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        d: "M9 13V9h4a1 1 0 0 0 0-2H9V3a1 1 0 1 0-2 0v4H3a1 1 0 1 0 0 2h4v4a1 1 0 0 0 2 0Z"
      })
    });
  };
  CreateIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var DeleteIcon = function DeleteIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        d: "M12 6v7c0 1.1-.4 1.55-1.5 1.55h-5C4.4 14.55 4 14.1 4 13V6h8Zm-1.5 1.5h-5v4.3c0 .66.5 1.2 1.111 1.2H9.39c.611 0 1.111-.54 1.111-1.2V7.5ZM13 3h-2l-1-1H6L5 3H3v1.5h10V3Z"
      })
    });
  };
  DeleteIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16"
  };
  var DragIcon = function DragIcon(props) {
    return u("svg", {
      ...props,
      children: [u("path", {
        fill: "#fff",
        style: {
          mixBlendMode: "multiply"
        },
        d: "M0 0h16v16H0z"
      }), u("path", {
        fill: "#fff",
        style: {
          mixBlendMode: "multiply"
        },
        d: "M0 0h16v16H0z"
      }), u("path", {
        d: "M7 3H5v2h2V3zm4 0H9v2h2V3zM7 7H5v2h2V7zm4 0H9v2h2V7zm-4 4H5v2h2v-2zm4 0H9v2h2v-2z",
        fill: "#161616"
      })]
    });
  };
  DragIcon.defaultProps = {
    width: "16",
    height: "16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };
  var ExternalLinkIcon = function ExternalLinkIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M12.637 12.637v-4.72h1.362v4.721c0 .36-.137.676-.411.95-.275.275-.591.412-.95.412H3.362c-.38 0-.703-.132-.967-.396A1.315 1.315 0 0 1 2 12.638V3.362c0-.38.132-.703.396-.967S2.982 2 3.363 2h4.553v1.363H3.363v9.274h9.274ZM14 2H9.28l-.001 1.362h2.408L5.065 9.984l.95.95 6.622-6.622v2.409H14V2Z",
        fill: "currentcolor"
      })
    });
  };
  ExternalLinkIcon.defaultProps = {
    width: "16",
    height: "16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  };

  function Header(props) {
    const {
      element,
      headerProvider
    } = props;
    const {
      getElementIcon,
      getDocumentationRef,
      getElementLabel,
      getTypeLabel
    } = headerProvider;
    const label = getElementLabel(element);
    const type = getTypeLabel(element);
    const documentationRef = getDocumentationRef && getDocumentationRef(element);
    const ElementIcon = getElementIcon(element);
    return u("div", {
      class: "bio-properties-panel-header",
      children: [u("div", {
        class: "bio-properties-panel-header-icon",
        children: ElementIcon && u(ElementIcon, {
          width: "32",
          height: "32",
          viewBox: "0 0 32 32"
        })
      }), u("div", {
        class: "bio-properties-panel-header-labels",
        children: [u("div", {
          title: type,
          class: "bio-properties-panel-header-type",
          children: type
        }), label ? u("div", {
          title: label,
          class: "bio-properties-panel-header-label",
          children: label
        }) : null]
      }), u("div", {
        class: "bio-properties-panel-header-actions",
        children: documentationRef ? u("a", {
          rel: "noopener",
          class: "bio-properties-panel-header-link",
          href: documentationRef,
          title: "Open documentation",
          target: "_blank",
          children: u(ExternalLinkIcon, {})
        }) : null
      })]
    });
  }

  const DescriptionContext = J$1({
    description: {},
    getDescriptionForId: () => {}
  });

  const ErrorsContext = J$1({
    errors: {}
  });

  /**
   * @typedef {Function} <propertiesPanel.showEntry> callback
   *
   * @example
   *
   * useEvent('propertiesPanel.showEntry', ({ focus = false, ...rest }) => {
   *   // ...
   * });
   *
   * @param {Object} context
   * @param {boolean} [context.focus]
   *
   * @returns void
   */
  const EventContext = J$1({
    eventBus: null
  });

  const LayoutContext = J$1({
    layout: {},
    setLayout: () => {},
    getLayoutForKey: () => {},
    setLayoutForKey: () => {}
  });

  const TooltipContext = J$1({
    tooltip: {},
    getTooltipForId: () => {}
  });

  /**
   * Accesses the global TooltipContext and returns a tooltip for a given id and element.
   *
   * @example
   * ```jsx
   * function TextField(props) {
   *   const tooltip = useTooltipContext('input1', element);
   * }
   * ```
   *
   * @param {string} id
   * @param {object} element
   *
   * @returns {string}
   */
  function useTooltipContext(id, element) {
    const {
      getTooltipForId
    } = x(TooltipContext);
    return getTooltipForId(id, element);
  }

  function TooltipWrapper(props) {
    const {
      forId,
      element
    } = props;
    const contextDescription = useTooltipContext(forId, element);
    const value = props.value || contextDescription;
    if (!value) {
      return props.children;
    }
    return u(Tooltip, {
      ...props,
      value: value,
      forId: prefixId$9(forId)
    });
  }
  function Tooltip(props) {
    const {
      forId,
      value,
      parent
    } = props;
    const [visible, setShow] = d(false);
    const [focusedViaKeyboard, setFocusedViaKeyboard] = d(false);
    let timeout = null;
    const wrapperRef = A$1(null);
    const tooltipRef = A$1(null);
    const showTooltip = async event => {
      const show = () => setShow(true);
      if (!visible && !timeout) {
        if (event instanceof MouseEvent) {
          timeout = setTimeout(show, 200);
        } else {
          show();
          setFocusedViaKeyboard(true);
        }
      }
    };
    const hideTooltip = () => {
      setShow(false);
      setFocusedViaKeyboard(false);
    };
    const hideTooltipViaEscape = e => {
      e.code === 'Escape' && hideTooltip();
    };
    const isTooltipHovered = ({
      x,
      y
    }) => {
      const tooltip = tooltipRef.current;
      const wrapper = wrapperRef.current;
      return tooltip && (inBounds(x, y, wrapper.getBoundingClientRect()) || inBounds(x, y, tooltip.getBoundingClientRect()));
    };
    y(() => {
      const {
        current
      } = wrapperRef;
      if (!current) {
        return;
      }
      const hideHoveredTooltip = e => {
        const isFocused = document.activeElement === wrapperRef.current || document.activeElement.closest('.bio-properties-panel-tooltip');
        if (visible && !isTooltipHovered({
          x: e.x,
          y: e.y
        }) && !(isFocused && focusedViaKeyboard)) {
          hideTooltip();
        }
      };
      const hideFocusedTooltip = e => {
        const {
          relatedTarget
        } = e;
        const isTooltipChild = el => !!el.closest('.bio-properties-panel-tooltip');
        if (visible && !isHovered(wrapperRef.current) && relatedTarget && !isTooltipChild(relatedTarget)) {
          hideTooltip();
        }
      };
      document.addEventListener('wheel', hideHoveredTooltip);
      document.addEventListener('focusout', hideFocusedTooltip);
      document.addEventListener('mousemove', hideHoveredTooltip);
      return () => {
        document.removeEventListener('wheel', hideHoveredTooltip);
        document.removeEventListener('mousemove', hideHoveredTooltip);
        document.removeEventListener('focusout', hideFocusedTooltip);
      };
    }, [wrapperRef.current, visible, focusedViaKeyboard]);
    const renderTooltip = () => {
      return u("div", {
        class: "bio-properties-panel-tooltip",
        role: "tooltip",
        id: "bio-properties-panel-tooltip",
        "aria-labelledby": forId,
        style: getTooltipPosition(wrapperRef.current),
        ref: tooltipRef,
        onClick: e => e.stopPropagation(),
        children: [u("div", {
          class: "bio-properties-panel-tooltip-content",
          children: value
        }), u("div", {
          class: "bio-properties-panel-tooltip-arrow"
        })]
      });
    };
    return u("div", {
      class: "bio-properties-panel-tooltip-wrapper",
      tabIndex: "0",
      ref: wrapperRef,
      onMouseEnter: showTooltip,
      onMouseLeave: () => {
        clearTimeout(timeout);
        timeout = null;
      },
      onFocus: showTooltip,
      onKeyDown: hideTooltipViaEscape,
      children: [props.children, visible ? parent ? $(renderTooltip(), parent.current) : renderTooltip() : null]
    });
  }

  // helper
  function inBounds(x, y, bounds) {
    const {
      top,
      right,
      bottom,
      left
    } = bounds;
    return x >= left && x <= right && y >= top && y <= bottom;
  }
  function getTooltipPosition(refElement) {
    const refPosition = refElement.getBoundingClientRect();
    const right = `calc(100% - ${refPosition.x}px)`;
    const top = `${refPosition.top - 10}px`;
    return `right: ${right}; top: ${top};`;
  }
  function isHovered(element) {
    return element.matches(':hover');
  }
  function prefixId$9(id) {
    return `bio-properties-panel-${id}`;
  }

  /**
   * Accesses the global DescriptionContext and returns a description for a given id and element.
   *
   * @example
   * ```jsx
   * function TextField(props) {
   *   const description = useDescriptionContext('input1', element);
   * }
   * ```
   *
   * @param {string} id
   * @param {object} element
   *
   * @returns {string}
   */
  function useDescriptionContext(id, element) {
    const {
      getDescriptionForId
    } = x(DescriptionContext);
    return getDescriptionForId(id, element);
  }

  function useError(id) {
    const {
      errors
    } = x(ErrorsContext);
    return errors[id];
  }
  function useErrors() {
    const {
      errors
    } = x(ErrorsContext);
    return errors;
  }

  /**
   * Subscribe to an event immediately. Update subscription after inputs changed.
   *
   * @param {string} event
   * @param {Function} callback
   */
  function useEvent(event, callback, eventBus) {
    const eventContext = x(EventContext);
    if (!eventBus) {
      ({
        eventBus
      } = eventContext);
    }
    const didMount = A$1(false);

    // (1) subscribe immediately
    if (eventBus && !didMount.current) {
      eventBus.on(event, callback);
    }

    // (2) update subscription after inputs changed
    y(() => {
      if (eventBus && didMount.current) {
        eventBus.on(event, callback);
      }
      didMount.current = true;
      return () => {
        if (eventBus) {
          eventBus.off(event, callback);
        }
      };
    }, [callback, event, eventBus]);
  }

  /**
   * Creates a state that persists in the global LayoutContext.
   *
   * @example
   * ```jsx
   * function Group(props) {
   *   const [ open, setOpen ] = useLayoutState([ 'groups', 'foo', 'open' ], false);
   * }
   * ```
   *
   * @param {(string|number)[]} path
   * @param {any} [defaultValue]
   *
   * @returns {[ any, Function ]}
   */
  function useLayoutState(path, defaultValue) {
    const {
      getLayoutForKey,
      setLayoutForKey
    } = x(LayoutContext);
    const layoutForKey = getLayoutForKey(path, defaultValue);
    const setState = q$1(newValue => {
      setLayoutForKey(path, newValue);
    }, [setLayoutForKey]);
    return [layoutForKey, setState];
  }

  /**
   * @pinussilvestrus: we need to introduce our own hook to persist the previous
   * state on updates.
   *
   * cf. https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
   */

  function usePrevious(value) {
    const ref = A$1();
    y(() => {
      ref.current = value;
    });
    return ref.current;
  }

  /**
   * Subscribe to `propertiesPanel.showEntry`.
   *
   * @param {string} id
   *
   * @returns {import('preact').Ref}
   */
  function useShowEntryEvent(id) {
    const {
      onShow
    } = x(LayoutContext);
    const ref = A$1();
    const focus = A$1(false);
    const onShowEntry = q$1(event => {
      if (event.id === id) {
        onShow();
        if (!focus.current) {
          focus.current = true;
        }
      }
    }, [id]);
    y(() => {
      if (focus.current && ref.current) {
        if (isFunction(ref.current.focus)) {
          ref.current.focus();
        }
        if (isFunction(ref.current.select)) {
          ref.current.select();
        }
        focus.current = false;
      }
    });
    useEvent('propertiesPanel.showEntry', onShowEntry);
    return ref;
  }

  /**
   * @callback setSticky
   * @param {boolean} value
   */

  /**
   * Use IntersectionObserver to identify when DOM element is in sticky mode.
   * If sticky is observered setSticky(true) will be called.
   * If sticky mode is left, setSticky(false) will be called.
   *
   *
   * @param {Object} ref
   * @param {string} scrollContainerSelector
   * @param {setSticky} setSticky
   */
  function useStickyIntersectionObserver(ref, scrollContainerSelector, setSticky) {
    const [scrollContainer, setScrollContainer] = d(query(scrollContainerSelector));
    const updateScrollContainer = q$1(() => {
      const newScrollContainer = query(scrollContainerSelector);
      if (newScrollContainer !== scrollContainer) {
        setScrollContainer(newScrollContainer);
      }
    }, [scrollContainerSelector, scrollContainer]);
    y(() => {
      updateScrollContainer();
    }, [updateScrollContainer]);
    useEvent('propertiesPanel.attach', updateScrollContainer);
    useEvent('propertiesPanel.detach', updateScrollContainer);
    y(() => {
      const Observer = IntersectionObserver;

      // return early if IntersectionObserver is not available
      if (!Observer) {
        return;
      }

      // TODO(@barmac): test this
      if (!ref.current || !scrollContainer) {
        return;
      }
      const observer = new Observer(entries => {
        // scroll container is unmounted, do not update sticky state
        if (scrollContainer.scrollHeight === 0) {
          return;
        }
        entries.forEach(entry => {
          if (entry.intersectionRatio < 1) {
            setSticky(true);
          } else if (entry.intersectionRatio === 1) {
            setSticky(false);
          }
        });
      }, {
        root: scrollContainer,
        rootMargin: '0px 0px 999999% 0px',
        // Use bottom margin to avoid stickyness when scrolling out to bottom
        threshold: [1]
      });
      observer.observe(ref.current);

      // Unobserve if unmounted
      return () => {
        observer.unobserve(ref.current);
      };
    }, [ref.current, scrollContainer, setSticky]);
  }

  /**
   * Creates a static function reference with changing body.
   * This is necessary when external libraries require a callback function
   * that has references to state variables.
   *
   * Usage:
   * const callback = useStaticCallback((val) => {val === currentState});
   *
   * The `callback` reference is static and can be safely used in external
   * libraries or as a prop that does not cause rerendering of children.
   *
   * @param {Function} callback function with changing reference
   * @returns {Function} static function reference
   */
  function useStaticCallback(callback) {
    const callbackRef = A$1(callback);
    callbackRef.current = callback;
    return q$1((...args) => callbackRef.current(...args), []);
  }

  function Group(props) {
    const {
      element,
      entries = [],
      id,
      label,
      shouldOpen = false
    } = props;
    const groupRef = A$1(null);
    const [open, setOpen] = useLayoutState(['groups', id, 'open'], shouldOpen);
    const onShow = q$1(() => setOpen(true), [setOpen]);
    const toggleOpen = () => setOpen(!open);
    const [edited, setEdited] = d(false);
    const [sticky, setSticky] = d(false);

    // set edited state depending on all entries
    y(() => {
      // TODO(@barmac): replace with CSS when `:has()` is supported in all major browsers, or rewrite as in https://github.com/camunda/camunda-modeler/issues/3815#issuecomment-1733038161
      const scheduled = requestAnimationFrame(() => {
        const hasOneEditedEntry = entries.find(entry => {
          const {
            id,
            isEdited
          } = entry;
          const entryNode = query(`[data-entry-id="${id}"]`);
          if (!isFunction(isEdited) || !entryNode) {
            return false;
          }
          const inputNode = query('.bio-properties-panel-input', entryNode);
          return isEdited(inputNode);
        });
        setEdited(hasOneEditedEntry);
      });
      return () => cancelAnimationFrame(scheduled);
    }, [entries, setEdited]);

    // set error state depending on all entries
    const allErrors = useErrors();
    const hasErrors = entries.some(entry => allErrors[entry.id]);

    // set css class when group is sticky to top
    useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
    const propertiesPanelContext = {
      ...x(LayoutContext),
      onShow
    };
    return u("div", {
      class: "bio-properties-panel-group",
      "data-group-id": 'group-' + id,
      ref: groupRef,
      children: [u("div", {
        class: classnames('bio-properties-panel-group-header', edited ? '' : 'empty', open ? 'open' : '', sticky && open ? 'sticky' : ''),
        onClick: toggleOpen,
        children: [u("div", {
          title: props.tooltip ? null : label,
          "data-title": label,
          class: "bio-properties-panel-group-header-title",
          children: u(TooltipWrapper, {
            value: props.tooltip,
            forId: 'group-' + id,
            element: element,
            parent: groupRef,
            children: label
          })
        }), u("div", {
          class: "bio-properties-panel-group-header-buttons",
          children: [u(DataMarker, {
            edited: edited,
            hasErrors: hasErrors
          }), u("button", {
            title: "Toggle section",
            class: "bio-properties-panel-group-header-button bio-properties-panel-arrow",
            children: u(ArrowIcon, {
              class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
            })
          })]
        })]
      }), u("div", {
        class: classnames('bio-properties-panel-group-entries', open ? 'open' : ''),
        children: u(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: entries.map(entry => {
            const {
              component: Component,
              id
            } = entry;
            return _$1(Component, {
              ...entry,
              element: element,
              key: id
            });
          })
        })
      })]
    });
  }
  function DataMarker(props) {
    const {
      edited,
      hasErrors
    } = props;
    if (hasErrors) {
      return u("div", {
        title: "Section contains an error",
        class: "bio-properties-panel-dot bio-properties-panel-dot--error"
      });
    }
    if (edited) {
      return u("div", {
        title: "Section contains data",
        class: "bio-properties-panel-dot"
      });
    }
    return null;
  }

  /**
   * @typedef { {
   *  text: (element: object) => string,
   *  icon?: (element: Object) => import('preact').Component
   * } } PlaceholderDefinition
   *
   * @param { PlaceholderDefinition } props
   */
  function Placeholder(props) {
    const {
      text,
      icon: Icon
    } = props;
    return u("div", {
      class: "bio-properties-panel open",
      children: u("section", {
        class: "bio-properties-panel-placeholder",
        children: [Icon && u(Icon, {
          class: "bio-properties-panel-placeholder-icon"
        }), u("p", {
          class: "bio-properties-panel-placeholder-text",
          children: text
        })]
      })
    });
  }

  function Description(props) {
    const {
      element,
      forId,
      value
    } = props;
    const contextDescription = useDescriptionContext(forId, element);
    const description = value || contextDescription;
    if (description) {
      return u("div", {
        class: "bio-properties-panel-description",
        children: description
      });
    }
  }

  const noop$6 = () => {};

  /**
   * Buffer `.focus()` calls while the editor is not initialized.
   * Set Focus inside when the editor is ready.
   */
  const useBufferedFocus$1 = function (editor, ref) {
    const [buffer, setBuffer] = d(undefined);
    ref.current = T$1(() => ({
      focus: offset => {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    }), [editor]);
    y(() => {
      if (typeof buffer !== 'undefined' && editor) {
        editor.focus(buffer);
        setBuffer(false);
      }
    }, [editor, buffer]);
  };
  const CodeEditor$1 = D((props, ref) => {
    const {
      onInput,
      disabled,
      tooltipContainer,
      enableGutters,
      value,
      onLint = noop$6,
      onPopupOpen = noop$6,
      popupOpen,
      contentAttributes = {},
      hostLanguage = null,
      singleLine = false
    } = props;
    const inputRef = A$1();
    const [editor, setEditor] = d();
    const [localValue, setLocalValue] = d(value || '');
    useBufferedFocus$1(editor, ref);
    const handleInput = useStaticCallback(newValue => {
      onInput(newValue);
      setLocalValue(newValue);
    });
    y(() => {
      let editor;
      editor = new FeelersEditor({
        container: inputRef.current,
        onChange: handleInput,
        value: localValue,
        onLint,
        contentAttributes,
        tooltipContainer,
        enableGutters,
        hostLanguage,
        singleLine
      });
      setEditor(editor);
      return () => {
        onLint([]);
        inputRef.current.innerHTML = '';
        setEditor(null);
      };
    }, []);
    y(() => {
      if (!editor) {
        return;
      }
      if (value === localValue) {
        return;
      }
      editor.setValue(value);
      setLocalValue(value);
    }, [value]);
    const handleClick = () => {
      ref.current.focus();
    };
    return u("div", {
      class: classnames('bio-properties-panel-feelers-editor-container', popupOpen ? 'popupOpen' : null),
      children: [u("div", {
        class: "bio-properties-panel-feelers-editor__open-popup-placeholder",
        children: "Opened in editor"
      }), u("div", {
        name: props.name,
        class: classnames('bio-properties-panel-feelers-editor bio-properties-panel-input', localValue ? 'edited' : null, disabled ? 'disabled' : null),
        ref: inputRef,
        onClick: handleClick
      }), u("button", {
        title: "Open pop-up editor",
        class: "bio-properties-panel-open-feel-popup",
        onClick: () => onPopupOpen('feelers'),
        children: u(ExternalLinkIcon, {})
      })]
    });
  });

  const noop$5 = () => {};

  /**
   * Buffer `.focus()` calls while the editor is not initialized.
   * Set Focus inside when the editor is ready.
   */
  const useBufferedFocus = function (editor, ref) {
    const [buffer, setBuffer] = d(undefined);
    ref.current = T$1(() => ({
      focus: offset => {
        if (editor) {
          editor.focus(offset);
        } else {
          if (typeof offset === 'undefined') {
            offset = Infinity;
          }
          setBuffer(offset);
        }
      }
    }), [editor]);
    y(() => {
      if (typeof buffer !== 'undefined' && editor) {
        editor.focus(buffer);
        setBuffer(false);
      }
    }, [editor, buffer]);
  };
  const CodeEditor = D((props, ref) => {
    const {
      enableGutters,
      value,
      onInput,
      onFeelToggle = noop$5,
      onLint = noop$5,
      onPopupOpen = noop$5,
      popupOpen,
      disabled,
      tooltipContainer,
      variables
    } = props;
    const inputRef = A$1();
    const [editor, setEditor] = d();
    const [localValue, setLocalValue] = d(value || '');
    useBufferedFocus(editor, ref);
    const handleInput = useStaticCallback(newValue => {
      onInput(newValue);
      setLocalValue(newValue);
    });
    y(() => {
      let editor;

      /* Trigger FEEL toggle when
       *
       * - `backspace` is pressed
       * - AND the cursor is at the beginning of the input
       */
      const onKeyDown = e => {
        if (e.key !== 'Backspace' || !editor) {
          return;
        }
        const selection = editor.getSelection();
        const range = selection.ranges[selection.mainIndex];
        if (range.from === 0 && range.to === 0) {
          onFeelToggle();
        }
      };
      editor = new FeelEditor({
        container: inputRef.current,
        onChange: handleInput,
        onKeyDown: onKeyDown,
        onLint: onLint,
        tooltipContainer: tooltipContainer,
        value: localValue,
        variables: variables,
        extensions: [...(enableGutters ? [lineNumbers()] : [])]
      });
      setEditor(editor);
      return () => {
        onLint([]);
        inputRef.current.innerHTML = '';
        setEditor(null);
      };
    }, []);
    y(() => {
      if (!editor) {
        return;
      }
      if (value === localValue) {
        return;
      }
      editor.setValue(value);
      setLocalValue(value);
    }, [value]);
    y(() => {
      if (!editor) {
        return;
      }
      editor.setVariables(variables);
    }, [variables]);
    const handleClick = () => {
      ref.current.focus();
    };
    return u("div", {
      class: classnames('bio-properties-panel-feel-editor-container', disabled ? 'disabled' : null, popupOpen ? 'popupOpen' : null),
      children: [u("div", {
        class: "bio-properties-panel-feel-editor__open-popup-placeholder",
        children: "Opened in editor"
      }), u("div", {
        name: props.name,
        class: classnames('bio-properties-panel-input', localValue ? 'edited' : null),
        ref: inputRef,
        onClick: handleClick
      }), u("button", {
        title: "Open pop-up editor",
        class: "bio-properties-panel-open-feel-popup",
        onClick: () => onPopupOpen(),
        children: u(ExternalLinkIcon, {})
      })]
    });
  });

  const FeelPopupContext = J$1({
    open: () => {},
    close: () => {},
    source: null
  });

  /**
   * Add a dragger that calls back the passed function with
   * { event, delta } on drag.
   *
   * @example
   *
   * function dragMove(event, delta) {
   *   // we are dragging (!!)
   * }
   *
   * domElement.addEventListener('dragstart', dragger(dragMove));
   *
   * @param {Function} fn
   * @param {Element} [dragPreview]
   *
   * @return {Function} drag start callback function
   */
  function createDragger(fn, dragPreview) {
    let self;
    let startX, startY;

    /** drag start */
    function onDragStart(event) {
      self = this;
      startX = event.clientX;
      startY = event.clientY;

      // (1) prevent preview image
      if (event.dataTransfer) {
        event.dataTransfer.setDragImage(dragPreview || emptyCanvas(), 0, 0);
      }

      // (2) setup drag listeners

      // attach drag + cleanup event
      // we need to do this to make sure we track cursor
      // movements before we reach other drag event handlers,
      // e.g. in child containers.
      document.addEventListener('dragover', onDrag, true);
      document.addEventListener('dragenter', preventDefault, true);
      document.addEventListener('dragend', onEnd);
      document.addEventListener('drop', preventDefault);
    }
    function onDrag(event) {
      const delta = {
        x: event.clientX - startX,
        y: event.clientY - startY
      };

      // call provided fn with event, delta
      return fn.call(self, event, delta);
    }
    function onEnd() {
      document.removeEventListener('dragover', onDrag, true);
      document.removeEventListener('dragenter', preventDefault, true);
      document.removeEventListener('dragend', onEnd);
      document.removeEventListener('drop', preventDefault);
    }
    return onDragStart;
  }
  function preventDefault(event) {
    event.preventDefault();
    event.stopPropagation();
  }
  function emptyCanvas() {
    return domify$1('<canvas width="0" height="0" />');
  }

  const noop$3 = () => {};

  /**
   * A generic popup component.
   *
   * @param {Object} props
   * @param {HTMLElement} [props.container]
   * @param {string} [props.className]
   * @param {boolean} [props.delayInitialFocus]
   * @param {{x: number, y: number}} [props.position]
   * @param {number} [props.width]
   * @param {number} [props.height]
   * @param {Function} props.onClose
   * @param {Function} [props.onPostActivate]
   * @param {Function} [props.onPostDeactivate]
   * @param {boolean} [props.returnFocus]
   * @param {boolean} [props.closeOnEscape]
   * @param {string} props.title
   * @param {Ref} [ref]
   */
  function PopupComponent(props, globalRef) {
    const {
      container,
      className,
      delayInitialFocus,
      position,
      width,
      height,
      onClose,
      onPostActivate = noop$3,
      onPostDeactivate = noop$3,
      returnFocus = true,
      closeOnEscape = true,
      title
    } = props;
    const focusTrapRef = A$1(null);
    const localRef = A$1(null);
    const popupRef = globalRef || localRef;
    const containerNode = T$1(() => getContainerNode(container), [container]);
    const handleKeydown = event => {
      // do not allow keyboard events to bubble
      event.stopPropagation();
      if (closeOnEscape && event.key === 'Escape') {
        onClose();
      }
    };

    // re-activate focus trap on focus
    const handleFocus = () => {
      if (focusTrapRef.current) {
        focusTrapRef.current.activate();
      }
    };
    let style = {};
    if (position) {
      style = {
        ...style,
        top: position.top + 'px',
        left: position.left + 'px'
      };
    }
    if (width) {
      style.width = width + 'px';
    }
    if (height) {
      style.height = height + 'px';
    }
    y(() => {
      if (popupRef.current) {
        popupRef.current.addEventListener('focusin', handleFocus);
      }
      return () => {
        popupRef.current.removeEventListener('focusin', handleFocus);
      };
    }, [popupRef]);
    y(() => {
      if (popupRef.current) {
        focusTrapRef.current = createFocusTrap(popupRef.current, {
          clickOutsideDeactivates: true,
          delayInitialFocus,
          fallbackFocus: popupRef.current,
          onPostActivate,
          onPostDeactivate,
          returnFocusOnDeactivate: returnFocus
        });
        focusTrapRef.current.activate();
      }
      return () => focusTrapRef.current && focusTrapRef.current.deactivate();
    }, [popupRef]);
    return $(u("div", {
      "aria-label": title,
      tabIndex: -1,
      ref: popupRef,
      onKeyDown: handleKeydown,
      role: "dialog",
      class: classnames('bio-properties-panel-popup', className),
      style: style,
      children: props.children
    }), containerNode || document.body);
  }
  const Popup = D(PopupComponent);
  Popup.Title = Title;
  Popup.Body = Body;
  Popup.Footer = Footer;
  function Title(props) {
    const {
      children,
      className,
      draggable,
      emit = () => {},
      title,
      ...rest
    } = props;

    // we can't use state as we need to
    // manipulate this inside dragging events
    const context = A$1({
      startPosition: null,
      newPosition: null
    });
    const dragPreviewRef = A$1();
    const titleRef = A$1();
    const onMove = (event, delta) => {
      cancel(event);
      const {
        x: dx,
        y: dy
      } = delta;
      const newPosition = {
        x: context.current.startPosition.x + dx,
        y: context.current.startPosition.y + dy
      };
      const popupParent = getPopupParent(titleRef.current);
      popupParent.style.top = newPosition.y + 'px';
      popupParent.style.left = newPosition.x + 'px';

      // notify interested parties
      emit('dragover', {
        newPosition,
        delta
      });
    };
    const onMoveStart = event => {
      // initialize drag handler
      const onDragStart = createDragger(onMove, dragPreviewRef.current);
      onDragStart(event);
      event.stopPropagation();
      const popupParent = getPopupParent(titleRef.current);
      const bounds = popupParent.getBoundingClientRect();
      context.current.startPosition = {
        x: bounds.left,
        y: bounds.top
      };

      // notify interested parties
      emit('dragstart');
    };
    const onMoveEnd = () => {
      context.current.newPosition = null;

      // notify interested parties
      emit('dragend');
    };
    return u("div", {
      class: classnames('bio-properties-panel-popup__header', draggable && 'draggable', className),
      ref: titleRef,
      draggable: draggable,
      onDragStart: onMoveStart,
      onDragEnd: onMoveEnd,
      ...rest,
      children: [draggable && u(k$1, {
        children: [u("div", {
          ref: dragPreviewRef,
          class: "bio-properties-panel-popup__drag-preview"
        }), u("div", {
          class: "bio-properties-panel-popup__drag-handle",
          children: u(DragIcon, {})
        })]
      }), u("div", {
        class: "bio-properties-panel-popup__title",
        children: title
      }), children]
    });
  }
  function Body(props) {
    const {
      children,
      className,
      ...rest
    } = props;
    return u("div", {
      class: classnames('bio-properties-panel-popup__body', className),
      ...rest,
      children: children
    });
  }
  function Footer(props) {
    const {
      children,
      className,
      ...rest
    } = props;
    return u("div", {
      class: classnames('bio-properties-panel-popup__footer', className),
      ...rest,
      children: props.children
    });
  }

  // helpers //////////////////////

  function getPopupParent(node) {
    return node.closest('.bio-properties-panel-popup');
  }
  function cancel(event) {
    event.preventDefault();
    event.stopPropagation();
  }
  function getContainerNode(node) {
    if (typeof node === 'string') {
      return query(node);
    }
    return node;
  }

  const FEEL_POPUP_WIDTH = 700;
  const FEEL_POPUP_HEIGHT = 250;

  /**
   * FEEL popup component, built as a singleton. Emits lifecycle events as follows:
   *  - `feelPopup.open` - fired before the popup is mounted
   *  - `feelPopup.opened` - fired after the popup is mounted. Event context contains the DOM node of the popup
   *  - `feelPopup.close` - fired before the popup is unmounted. Event context contains the DOM node of the popup
   *  - `feelPopup.closed` - fired after the popup is unmounted
   */
  function FEELPopupRoot(props) {
    const {
      element,
      eventBus = {
        fire() {},
        on() {},
        off() {}
      },
      popupContainer
    } = props;
    const prevElement = usePrevious(element);
    const [popupConfig, setPopupConfig] = d({});
    const [open, setOpen] = d(false);
    const [source, setSource] = d(null);
    const [sourceElement, setSourceElement] = d(null);
    const emit = (type, context) => {
      eventBus.fire('feelPopup.' + type, context);
    };
    const isOpen = q$1(() => {
      return !!open;
    }, [open]);
    useUpdateEffect(() => {
      if (!open) {
        emit('closed');
      }
    }, [open]);
    const handleOpen = (entryId, config, _sourceElement) => {
      setSource(entryId);
      setPopupConfig(config);
      setOpen(true);
      setSourceElement(_sourceElement);
      emit('open');
    };
    const handleClose = () => {
      setOpen(false);
      setSource(null);
    };
    const feelPopupContext = {
      open: handleOpen,
      close: handleClose,
      source
    };

    // close popup on element change, cf. https://github.com/bpmn-io/properties-panel/issues/270
    y(() => {
      if (element && prevElement && element !== prevElement) {
        handleClose();
      }
    }, [element]);

    // allow close and open via events
    y(() => {
      const handlePopupOpen = context => {
        const {
          entryId,
          popupConfig,
          sourceElement
        } = context;
        handleOpen(entryId, popupConfig, sourceElement);
      };
      const handleIsOpen = () => {
        return isOpen();
      };
      eventBus.on('feelPopup._close', handleClose);
      eventBus.on('feelPopup._open', handlePopupOpen);
      eventBus.on('feelPopup._isOpen', handleIsOpen);
      return () => {
        eventBus.off('feelPopup._close', handleClose);
        eventBus.off('feelPopup._open', handleOpen);
        eventBus.off('feelPopup._isOpen', handleIsOpen);
      };
    }, [eventBus, isOpen]);
    return u(FeelPopupContext.Provider, {
      value: feelPopupContext,
      children: [open && u(FeelPopupComponent, {
        onClose: handleClose,
        container: popupContainer,
        sourceElement: sourceElement,
        emit: emit,
        ...popupConfig
      }), props.children]
    });
  }
  function FeelPopupComponent(props) {
    const {
      container,
      id,
      hostLanguage,
      onInput,
      onClose,
      position,
      singleLine,
      sourceElement,
      title,
      tooltipContainer,
      type,
      value,
      variables,
      emit
    } = props;
    const editorRef = A$1();
    const popupRef = A$1();
    const isAutoCompletionOpen = A$1(false);
    const handleSetReturnFocus = () => {
      sourceElement && sourceElement.focus();
    };
    const onKeyDownCapture = event => {
      // we use capture here to make sure we handle the event before the editor does
      if (event.key === 'Escape') {
        isAutoCompletionOpen.current = autoCompletionOpen(event.target);
      }
    };
    const onKeyDown = event => {
      if (event.key === 'Escape') {
        // close popup only if auto completion is not open
        // we need to do check this because the editor is not
        // stop propagating the keydown event
        // cf. https://discuss.codemirror.net/t/how-can-i-replace-the-default-autocompletion-keymap-v6/3322/5
        if (!isAutoCompletionOpen.current) {
          onClose();
          isAutoCompletionOpen.current = false;
        }
      }
    };
    y(() => {
      emit('opened', {
        domNode: popupRef.current
      });
      return () => emit('close', {
        domNode: popupRef.current
      });
    }, []);
    return u(Popup, {
      container: container,
      className: "bio-properties-panel-feel-popup",
      emit: emit,
      position: position,
      title: title,
      onClose: onClose

      // handle focus manually on deactivate
      ,
      returnFocus: false,
      closeOnEscape: false,
      delayInitialFocus: false,
      onPostDeactivate: handleSetReturnFocus,
      height: FEEL_POPUP_HEIGHT,
      width: FEEL_POPUP_WIDTH,
      ref: popupRef,
      children: [u(Popup.Title, {
        title: title,
        emit: emit,
        draggable: true
      }), u(Popup.Body, {
        children: u("div", {
          onKeyDownCapture: onKeyDownCapture,
          onKeyDown: onKeyDown,
          class: "bio-properties-panel-feel-popup__body",
          children: [type === 'feel' && u(CodeEditor, {
            enableGutters: true,
            id: prefixId$8(id),
            name: id,
            onInput: onInput,
            value: value,
            variables: variables,
            ref: editorRef,
            tooltipContainer: tooltipContainer
          }), type === 'feelers' && u(CodeEditor$1, {
            id: prefixId$8(id),
            contentAttributes: {
              'aria-label': title
            },
            enableGutters: true,
            hostLanguage: hostLanguage,
            name: id,
            onInput: onInput,
            value: value,
            ref: editorRef,
            singleLine: singleLine,
            tooltipContainer: tooltipContainer
          })]
        })
      }), u(Popup.Footer, {
        children: u("button", {
          onClick: onClose,
          title: "Close pop-up editor",
          class: "bio-properties-panel-feel-popup__close-btn",
          children: "Close"
        })
      })]
    });
  }

  // helpers /////////////////

  function prefixId$8(id) {
    return `bio-properties-panel-${id}`;
  }
  function autoCompletionOpen(element) {
    return element.closest('.cm-editor').querySelector('.cm-tooltip-autocomplete');
  }

  /**
   * This hook behaves like useEffect, but does not trigger on the first render.
   *
   * @param {Function} effect
   * @param {Array} deps
   */
  function useUpdateEffect(effect, deps) {
    const isMounted = A$1(false);
    y(() => {
      if (isMounted.current) {
        return effect();
      } else {
        isMounted.current = true;
      }
    }, deps);
  }

  function ToggleSwitch(props) {
    const {
      id,
      label,
      onInput,
      value,
      switcherLabel,
      inline,
      onFocus,
      onBlur,
      inputRef,
      tooltip
    } = props;
    const [localValue, setLocalValue] = d(value);
    const handleInputCallback = async () => {
      onInput(!value);
    };
    const handleInput = e => {
      handleInputCallback();
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return u("div", {
      class: classnames('bio-properties-panel-toggle-switch', {
        inline
      }),
      children: [u("label", {
        class: "bio-properties-panel-label",
        for: prefixId$7(id),
        children: u(TooltipWrapper, {
          value: tooltip,
          forId: id,
          element: props.element,
          children: label
        })
      }), u("div", {
        class: "bio-properties-panel-field-wrapper",
        children: [u("label", {
          class: "bio-properties-panel-toggle-switch__switcher",
          children: [u("input", {
            ref: inputRef,
            id: prefixId$7(id),
            class: "bio-properties-panel-input",
            type: "checkbox",
            onFocus: onFocus,
            onBlur: onBlur,
            name: id,
            onInput: handleInput,
            checked: !!localValue
          }), u("span", {
            class: "bio-properties-panel-toggle-switch__slider"
          })]
        }), switcherLabel && u("p", {
          class: "bio-properties-panel-toggle-switch__label",
          children: switcherLabel
        })]
      })]
    });
  }

  // helpers /////////////////

  function prefixId$7(id) {
    return `bio-properties-panel-${id}`;
  }

  function NumberField(props) {
    const {
      debounce,
      disabled,
      displayLabel = true,
      id,
      inputRef,
      label,
      max,
      min,
      onInput,
      step,
      value = '',
      onFocus,
      onBlur
    } = props;
    const [localValue, setLocalValue] = d(value);
    const handleInputCallback = T$1(() => {
      return debounce(event => {
        const {
          validity,
          value
        } = event.target;
        if (validity.valid) {
          onInput(value ? parseFloat(value) : undefined);
        }
      });
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return u("div", {
      class: "bio-properties-panel-numberfield",
      children: [displayLabel && u("label", {
        for: prefixId$6(id),
        class: "bio-properties-panel-label",
        children: label
      }), u("input", {
        id: prefixId$6(id),
        ref: inputRef,
        type: "number",
        name: id,
        spellCheck: "false",
        autoComplete: "off",
        disabled: disabled,
        class: "bio-properties-panel-input",
        max: max,
        min: min,
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        step: step,
        value: localValue
      })]
    });
  }

  // helpers /////////////////

  function prefixId$6(id) {
    return `bio-properties-panel-${id}`;
  }
  D((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = A$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: position => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        if (typeof position === 'number') {
          if (position > value.length) {
            position = value.length;
          }
          input.setSelectionRange(position, position);
        }
      }
    };
    return u("input", {
      id: prefixId$5(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || ''
    });
  });
  D((props, ref) => {
    const {
      id,
      debounce,
      disabled,
      onInput,
      value,
      min,
      max,
      step,
      onFocus,
      onBlur
    } = props;
    const inputRef = A$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: position => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        if (typeof position === 'number' && position !== Infinity) {
          if (position > value.length) {
            position = value.length;
          }
          input.setSelectionRange(position, position);
        }
      }
    };
    return u(NumberField, {
      id: id,
      debounce: debounce,
      disabled: disabled,
      displayLabel: false,
      inputRef: inputRef,
      max: max,
      min: min,
      onInput: onInput,
      step: step,
      value: value,
      onFocus: onFocus,
      onBlur: onBlur
    });
  });
  D((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = A$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: () => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
        input.setSelectionRange(0, 0);
      }
    };
    return u("textarea", {
      id: prefixId$5(id),
      type: "text",
      ref: inputRef,
      name: id,
      spellCheck: "false",
      autoComplete: "off",
      disabled: disabled,
      class: "bio-properties-panel-input",
      onInput: e => onInput(e.target.value),
      onFocus: onFocus,
      onBlur: onBlur,
      value: value || '',
      "data-gramm": "false"
    });
  });
  D((props, ref) => {
    const {
      id,
      onInput,
      value,
      onFocus,
      onBlur,
      switcherLabel
    } = props;
    const inputRef = A$1();

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: () => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
      }
    };
    return u(ToggleSwitch, {
      id: id,
      value: value,
      inputRef: inputRef,
      onInput: onInput,
      onFocus: onFocus,
      onBlur: onBlur,
      switcherLabel: switcherLabel
    });
  });
  D((props, ref) => {
    const {
      id,
      disabled,
      onInput,
      value,
      onFocus,
      onBlur
    } = props;
    const inputRef = A$1();
    const handleChange = ({
      target
    }) => {
      onInput(target.checked);
    };

    // To be consistent with the FEEL editor, set focus at start of input
    // this ensures clean editing experience when switching with the keyboard
    ref.current = {
      focus: () => {
        const input = inputRef.current;
        if (!input) {
          return;
        }
        input.focus();
      }
    };
    return u("input", {
      ref: inputRef,
      id: prefixId$5(id),
      name: id,
      onFocus: onFocus,
      onBlur: onBlur,
      type: "checkbox",
      class: "bio-properties-panel-input",
      onChange: handleChange,
      checked: value,
      disabled: disabled
    });
  });

  // helpers /////////////////

  function prefixId$5(id) {
    return `bio-properties-panel-${id}`;
  }

  const DEFAULT_LAYOUT = {};
  const DEFAULT_DESCRIPTION = {};
  const DEFAULT_TOOLTIP = {};

  /**
   * @typedef { {
   *    component: import('preact').Component,
   *    id: String,
   *    isEdited?: Function
   * } } EntryDefinition
   *
   * @typedef { {
   *    autoFocusEntry: String,
   *    autoOpen?: Boolean,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    remove: (event: MouseEvent) => void
   * } } ListItemDefinition
   *
   * @typedef { {
   *    add: (event: MouseEvent) => void,
   *    component: import('preact').Component,
   *    element: Object,
   *    id: String,
   *    items: Array<ListItemDefinition>,
   *    label: String,
   *    shouldSort?: Boolean,
   *    shouldOpen?: Boolean
   * } } ListGroupDefinition
   *
   * @typedef { {
   *    component?: import('preact').Component,
   *    entries: Array<EntryDefinition>,
   *    id: String,
   *    label: String,
   *    shouldOpen?: Boolean
   * } } GroupDefinition
   *
   *  @typedef { {
   *    [id: String]: GetDescriptionFunction
   * } } DescriptionConfig
   *
   *  @typedef { {
   *    [id: String]: GetTooltipFunction
   * } } TooltipConfig
   *
   * @callback { {
   * @param {string} id
   * @param {Object} element
   * @returns {string}
   * } } GetDescriptionFunction
   *
   * @callback { {
   * @param {string} id
   * @param {Object} element
   * @returns {string}
   * } } GetTooltipFunction
   *
   * @typedef { {
   *  getEmpty: (element: object) => import('./components/Placeholder').PlaceholderDefinition,
   *  getMultiple: (element: Object) => import('./components/Placeholder').PlaceholderDefinition
   * } } PlaceholderProvider
   *
   */

  /**
   * A basic properties panel component. Describes *how* content will be rendered, accepts
   * data from implementor to describe *what* will be rendered.
   *
   * @param {Object} props
   * @param {Object|Array} props.element
   * @param {import('./components/Header').HeaderProvider} props.headerProvider
   * @param {PlaceholderProvider} [props.placeholderProvider]
   * @param {Array<GroupDefinition|ListGroupDefinition>} props.groups
   * @param {Object} [props.layoutConfig]
   * @param {Function} [props.layoutChanged]
   * @param {DescriptionConfig} [props.descriptionConfig]
   * @param {Function} [props.descriptionLoaded]
   * @param {TooltipConfig} [props.tooltipConfig]
   * @param {Function} [props.tooltipLoaded]
   * @param {HTMLElement} [props.feelPopupContainer]
   * @param {Object} [props.eventBus]
   */
  function PropertiesPanel(props) {
    const {
      element,
      headerProvider,
      placeholderProvider,
      groups,
      layoutConfig,
      layoutChanged,
      descriptionConfig,
      descriptionLoaded,
      tooltipConfig,
      tooltipLoaded,
      feelPopupContainer,
      eventBus
    } = props;

    // set-up layout context
    const [layout, setLayout] = d(createLayout(layoutConfig));

    // react to external changes in the layout config
    useUpdateLayoutEffect(() => {
      const newLayout = createLayout(layoutConfig);
      setLayout(newLayout);
    }, [layoutConfig]);
    y(() => {
      if (typeof layoutChanged === 'function') {
        layoutChanged(layout);
      }
    }, [layout, layoutChanged]);
    const getLayoutForKey = (key, defaultValue) => {
      return get$1(layout, key, defaultValue);
    };
    const setLayoutForKey = (key, config) => {
      const newLayout = assign$1({}, layout);
      set$1(newLayout, key, config);
      setLayout(newLayout);
    };
    const layoutContext = {
      layout,
      setLayout,
      getLayoutForKey,
      setLayoutForKey
    };

    // set-up description context
    const description = T$1(() => createDescriptionContext(descriptionConfig), [descriptionConfig]);
    y(() => {
      if (typeof descriptionLoaded === 'function') {
        descriptionLoaded(description);
      }
    }, [description, descriptionLoaded]);
    const getDescriptionForId = (id, element) => {
      return description[id] && description[id](element);
    };
    const descriptionContext = {
      description,
      getDescriptionForId
    };

    // set-up tooltip context
    const tooltip = T$1(() => createTooltipContext(tooltipConfig), [tooltipConfig]);
    y(() => {
      if (typeof tooltipLoaded === 'function') {
        tooltipLoaded(tooltip);
      }
    }, [tooltip, tooltipLoaded]);
    const getTooltipForId = (id, element) => {
      return tooltip[id] && tooltip[id](element);
    };
    const tooltipContext = {
      tooltip,
      getTooltipForId
    };
    const [errors, setErrors] = d({});
    const onSetErrors = ({
      errors
    }) => setErrors(errors);
    useEvent('propertiesPanel.setErrors', onSetErrors, eventBus);
    const errorsContext = {
      errors
    };
    const eventContext = {
      eventBus
    };
    const propertiesPanelContext = {
      element
    };

    // empty state
    if (placeholderProvider && !element) {
      return u(Placeholder, {
        ...placeholderProvider.getEmpty()
      });
    }

    // multiple state
    if (placeholderProvider && isArray$3(element)) {
      return u(Placeholder, {
        ...placeholderProvider.getMultiple()
      });
    }
    return u(LayoutContext.Provider, {
      value: propertiesPanelContext,
      children: u(ErrorsContext.Provider, {
        value: errorsContext,
        children: u(DescriptionContext.Provider, {
          value: descriptionContext,
          children: u(TooltipContext.Provider, {
            value: tooltipContext,
            children: u(LayoutContext.Provider, {
              value: layoutContext,
              children: u(EventContext.Provider, {
                value: eventContext,
                children: u(FEELPopupRoot, {
                  element: element,
                  eventBus: eventBus,
                  popupContainer: feelPopupContainer,
                  children: u("div", {
                    class: "bio-properties-panel",
                    children: [u(Header, {
                      element: element,
                      headerProvider: headerProvider
                    }), u("div", {
                      class: "bio-properties-panel-scroll-container",
                      children: groups.map(group => {
                        const {
                          component: Component = Group,
                          id
                        } = group;
                        return _$1(Component, {
                          ...group,
                          key: id,
                          element: element
                        });
                      })
                    })]
                  })
                })
              })
            })
          })
        })
      })
    });
  }

  // helpers //////////////////

  function createLayout(overrides = {}, defaults = DEFAULT_LAYOUT) {
    return {
      ...defaults,
      ...overrides
    };
  }
  function createDescriptionContext(overrides = {}) {
    return {
      ...DEFAULT_DESCRIPTION,
      ...overrides
    };
  }
  function createTooltipContext(overrides = {}) {
    return {
      ...DEFAULT_TOOLTIP,
      ...overrides
    };
  }

  // hooks //////////////////

  /**
   * This hook behaves like useLayoutEffect, but does not trigger on the first render.
   *
   * @param {Function} effect
   * @param {Array} deps
   */
  function useUpdateLayoutEffect(effect, deps) {
    const isMounted = A$1(false);
    _(() => {
      if (isMounted.current) {
        return effect();
      } else {
        isMounted.current = true;
      }
    }, deps);
  }

  function CollapsibleEntry(props) {
    const {
      element,
      entries = [],
      id,
      label,
      open: shouldOpen,
      remove
    } = props;
    const [open, setOpen] = d(shouldOpen);
    const toggleOpen = () => setOpen(!open);
    const {
      onShow
    } = x(LayoutContext);
    const propertiesPanelContext = {
      ...x(LayoutContext),
      onShow: q$1(() => {
        setOpen(true);
        if (isFunction(onShow)) {
          onShow();
        }
      }, [onShow, setOpen])
    };

    // todo(pinussilvestrus): translate once we have a translate mechanism for the core
    const placeholderLabel = '<empty>';
    return u("div", {
      "data-entry-id": id,
      class: classnames('bio-properties-panel-collapsible-entry', open ? 'open' : ''),
      children: [u("div", {
        class: "bio-properties-panel-collapsible-entry-header",
        onClick: toggleOpen,
        children: [u("div", {
          title: label || placeholderLabel,
          class: classnames('bio-properties-panel-collapsible-entry-header-title', !label && 'empty'),
          children: label || placeholderLabel
        }), u("button", {
          title: "Toggle list item",
          class: "bio-properties-panel-arrow  bio-properties-panel-collapsible-entry-arrow",
          children: u(ArrowIcon, {
            class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
          })
        }), remove ? u("button", {
          title: "Delete item",
          class: "bio-properties-panel-remove-entry",
          onClick: remove,
          children: u(DeleteIcon, {})
        }) : null]
      }), u("div", {
        class: classnames('bio-properties-panel-collapsible-entry-entries', open ? 'open' : ''),
        children: u(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: entries.map(entry => {
            const {
              component: Component,
              id
            } = entry;
            return _$1(Component, {
              ...entry,
              element: element,
              key: id
            });
          })
        })
      })]
    });
  }

  function ListItem(props) {
    const {
      autoFocusEntry,
      autoOpen
    } = props;

    // focus specified entry on auto open
    y(() => {
      if (autoOpen && autoFocusEntry) {
        const entry = query(`[data-entry-id="${autoFocusEntry}"]`);
        const focusableInput = query('.bio-properties-panel-input', entry);
        if (focusableInput) {
          if (isFunction(focusableInput.select)) {
            focusableInput.select();
          } else if (isFunction(focusableInput.focus)) {
            focusableInput.focus();
          }
        }
      }
    }, [autoOpen, autoFocusEntry]);
    return u("div", {
      class: "bio-properties-panel-list-item",
      children: u(CollapsibleEntry, {
        ...props,
        open: autoOpen
      })
    });
  }

  const noop$1 = () => {};

  /**
   * @param {import('../PropertiesPanel').ListGroupDefinition} props
   */
  function ListGroup(props) {
    const {
      add,
      element,
      id,
      items,
      label,
      shouldOpen = true,
      shouldSort = true
    } = props;
    const groupRef = A$1(null);
    const [open, setOpen] = useLayoutState(['groups', id, 'open'], false);
    const [sticky, setSticky] = d(false);
    const onShow = q$1(() => setOpen(true), [setOpen]);
    const [ordering, setOrdering] = d([]);
    const [newItemAdded, setNewItemAdded] = d(false);

    // Flag to mark that add button was clicked in the last render cycle
    const [addTriggered, setAddTriggered] = d(false);
    const prevItems = usePrevious(items);
    const prevElement = usePrevious(element);
    const elementChanged = element !== prevElement;
    const shouldHandleEffects = !elementChanged && (shouldSort || shouldOpen);

    // reset initial ordering when element changes (before first render)
    if (elementChanged) {
      setOrdering(createOrdering(shouldSort ? sortItems(items) : items));
    }

    // keep ordering in sync to items - and open changes

    // (0) set initial ordering from given items
    y(() => {
      if (!prevItems || !shouldSort) {
        setOrdering(createOrdering(items));
      }
    }, [items, element]);

    // (1) items were added
    y(() => {
      // reset addTriggered flag
      setAddTriggered(false);
      if (shouldHandleEffects && prevItems && items.length > prevItems.length) {
        let add = [];
        items.forEach(item => {
          if (!ordering.includes(item.id)) {
            add.push(item.id);
          }
        });
        let newOrdering = ordering;

        // open if not open, configured and triggered by add button
        //
        // TODO(marstamm): remove once we refactor layout handling for listGroups.
        // Ideally, opening should be handled as part of the `add` callback and
        // not be a concern for the ListGroup component.
        if (addTriggered && !open && shouldOpen) {
          toggleOpen();
        }

        // filter when not open and configured
        if (!open && shouldSort) {
          newOrdering = createOrdering(sortItems(items));
        }

        // add new items on top or bottom depending on sorting behavior
        newOrdering = newOrdering.filter(item => !add.includes(item));
        if (shouldSort) {
          newOrdering.unshift(...add);
        } else {
          newOrdering.push(...add);
        }
        setOrdering(newOrdering);
        setNewItemAdded(addTriggered);
      } else {
        setNewItemAdded(false);
      }
    }, [items, open, shouldHandleEffects, addTriggered]);

    // (2) sort items on open if shouldSort is set
    y(() => {
      if (shouldSort && open && !newItemAdded) {
        setOrdering(createOrdering(sortItems(items)));
      }
    }, [open, shouldSort]);

    // (3) items were deleted
    y(() => {
      if (shouldHandleEffects && prevItems && items.length < prevItems.length) {
        let keep = [];
        ordering.forEach(o => {
          if (getItem(items, o)) {
            keep.push(o);
          }
        });
        setOrdering(keep);
      }
    }, [items, shouldHandleEffects]);

    // set css class when group is sticky to top
    useStickyIntersectionObserver(groupRef, 'div.bio-properties-panel-scroll-container', setSticky);
    const toggleOpen = () => setOpen(!open);
    const hasItems = !!items.length;
    const propertiesPanelContext = {
      ...x(LayoutContext),
      onShow
    };
    const handleAddClick = e => {
      setAddTriggered(true);
      add(e);
    };
    const allErrors = useErrors();
    const hasError = items.some(item => {
      if (allErrors[item.id]) {
        return true;
      }
      if (!item.entries) {
        return;
      }

      // also check if the error is nested, e.g. for name-value entries
      return item.entries.some(entry => allErrors[entry.id]);
    });
    return u("div", {
      class: "bio-properties-panel-group",
      "data-group-id": 'group-' + id,
      ref: groupRef,
      children: [u("div", {
        class: classnames('bio-properties-panel-group-header', hasItems ? '' : 'empty', hasItems && open ? 'open' : '', sticky && open ? 'sticky' : ''),
        onClick: hasItems ? toggleOpen : noop$1,
        children: [u("div", {
          title: props.tooltip ? null : label,
          "data-title": label,
          class: "bio-properties-panel-group-header-title",
          children: u(TooltipWrapper, {
            value: props.tooltip,
            forId: 'group-' + id,
            element: element,
            parent: groupRef,
            children: label
          })
        }), u("div", {
          class: "bio-properties-panel-group-header-buttons",
          children: [add ? u("button", {
            title: "Create new list item",
            class: "bio-properties-panel-group-header-button bio-properties-panel-add-entry",
            onClick: handleAddClick,
            children: [u(CreateIcon, {}), !hasItems ? u("span", {
              class: "bio-properties-panel-add-entry-label",
              children: "Create"
            }) : null]
          }) : null, hasItems ? u("div", {
            title: `List contains ${items.length} item${items.length != 1 ? 's' : ''}`,
            class: classnames('bio-properties-panel-list-badge', hasError ? 'bio-properties-panel-list-badge--error' : ''),
            children: items.length
          }) : null, hasItems ? u("button", {
            title: "Toggle section",
            class: "bio-properties-panel-group-header-button bio-properties-panel-arrow",
            children: u(ArrowIcon, {
              class: open ? 'bio-properties-panel-arrow-down' : 'bio-properties-panel-arrow-right'
            })
          }) : null]
        })]
      }), u("div", {
        class: classnames('bio-properties-panel-list', open && hasItems ? 'open' : ''),
        children: u(LayoutContext.Provider, {
          value: propertiesPanelContext,
          children: ordering.map((o, index) => {
            const item = getItem(items, o);
            if (!item) {
              return;
            }
            const {
              id
            } = item;

            // if item was added, open it
            // Existing items will not be affected as autoOpen is only applied on first render
            const autoOpen = newItemAdded;
            return _$1(ListItem, {
              ...item,
              autoOpen: autoOpen,
              element: element,
              index: index,
              key: id
            });
          })
        })
      })]
    });
  }

  // helpers ////////////////////

  /**
   * Sorts given items alphanumeric by label
   */
  function sortItems(items) {
    return sortBy(items, i => i.label.toLowerCase());
  }
  function getItem(items, id) {
    return find$1(items, i => i.id === id);
  }
  function createOrdering(items) {
    return items.map(i => i.id);
  }

  function Checkbox(props) {
    const {
      id,
      label,
      onChange,
      disabled,
      value = false,
      onFocus,
      onBlur,
      tooltip
    } = props;
    const [localValue, setLocalValue] = d(value);
    const handleChangeCallback = ({
      target
    }) => {
      onChange(target.checked);
    };
    const handleChange = e => {
      handleChangeCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    const ref = useShowEntryEvent(id);
    return u("div", {
      class: "bio-properties-panel-checkbox",
      children: [u("input", {
        ref: ref,
        id: prefixId$4(id),
        name: id,
        onFocus: onFocus,
        onBlur: onBlur,
        type: "checkbox",
        class: "bio-properties-panel-input",
        onChange: handleChange,
        checked: localValue,
        disabled: disabled
      }), u("label", {
        for: prefixId$4(id),
        class: "bio-properties-panel-label",
        children: u(TooltipWrapper, {
          value: tooltip,
          forId: id,
          element: props.element,
          children: label
        })
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {string|import('preact').Component} props.tooltip
   * @param {boolean} [props.disabled]
   */
  function CheckboxEntry(props) {
    const {
      element,
      id,
      description,
      label,
      getValue,
      setValue,
      disabled,
      onFocus,
      onBlur,
      tooltip
    } = props;
    const value = getValue(element);
    const error = useError(id);
    return u("div", {
      class: "bio-properties-panel-entry bio-properties-panel-checkbox-entry",
      "data-entry-id": id,
      children: [u(Checkbox, {
        disabled: disabled,
        id: id,
        label: label,
        onChange: setValue,
        onFocus: onFocus,
        onBlur: onBlur,
        value: value,
        tooltip: tooltip,
        element: element
      }, element), error && u("div", {
        class: "bio-properties-panel-error",
        children: error
      }), u(Description, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$5(node) {
    return node && !!node.checked;
  }

  // helpers /////////////////

  function prefixId$4(id) {
    return `bio-properties-panel-${id}`;
  }

  function Select(props) {
    const {
      id,
      label,
      onChange,
      options = [],
      value = '',
      disabled,
      onFocus,
      onBlur,
      tooltip
    } = props;
    const ref = useShowEntryEvent(id);
    const [localValue, setLocalValue] = d(value);
    const handleChangeCallback = ({
      target
    }) => {
      onChange(target.value);
    };
    const handleChange = e => {
      handleChangeCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return u("div", {
      class: "bio-properties-panel-select",
      children: [u("label", {
        for: prefixId$3(id),
        class: "bio-properties-panel-label",
        children: u(TooltipWrapper, {
          value: tooltip,
          forId: id,
          element: props.element,
          children: label
        })
      }), u("select", {
        ref: ref,
        id: prefixId$3(id),
        name: id,
        class: "bio-properties-panel-input",
        onInput: handleChange,
        onFocus: onFocus,
        onBlur: onBlur,
        value: localValue,
        disabled: disabled,
        children: options.map((option, idx) => {
          if (option.children) {
            return u("optgroup", {
              label: option.label,
              children: option.children.map((child, idx) => u("option", {
                value: child.value,
                disabled: child.disabled,
                children: child.label
              }, idx))
            }, idx);
          }
          return u("option", {
            value: option.value,
            disabled: option.disabled,
            children: option.label
          }, idx);
        })
      })]
    });
  }

  /**
   * @param {object} props
   * @param {object} props.element
   * @param {string} props.id
   * @param {string} [props.description]
   * @param {string} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {Function} props.getOptions
   * @param {boolean} [props.disabled]
   * @param {Function} [props.validate]
   * @param {string|import('preact').Component} props.tooltip
   */
  function SelectEntry(props) {
    const {
      element,
      id,
      description,
      label,
      getValue,
      setValue,
      getOptions,
      disabled,
      onFocus,
      onBlur,
      validate,
      tooltip
    } = props;
    const options = getOptions(element);
    const globalError = useError(id);
    const [localError, setLocalError] = d(null);
    let value = getValue(element);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onChange = newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      setValue(newValue, newValidationError);
      setLocalError(newValidationError);
    };
    const error = globalError || localError;
    return u("div", {
      class: classnames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [u(Select, {
        id: id,
        label: label,
        value: value,
        onChange: onChange,
        onFocus: onFocus,
        onBlur: onBlur,
        options: options,
        disabled: disabled,
        tooltip: tooltip,
        element: element
      }, element), error && u("div", {
        class: "bio-properties-panel-error",
        children: error
      }), u(Description, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$3(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$3(id) {
    return `bio-properties-panel-${id}`;
  }

  function resizeToContents(element) {
    element.style.height = 'auto';

    // a 2px pixel offset is required to prevent scrollbar from
    // appearing on OS with a full length scroll bar (Windows/Linux)
    element.style.height = `${element.scrollHeight + 2}px`;
  }
  function TextArea(props) {
    const {
      id,
      label,
      debounce,
      onInput,
      value = '',
      disabled,
      monospace,
      onFocus,
      onBlur,
      autoResize,
      rows = autoResize ? 1 : 2,
      tooltip
    } = props;
    const [localValue, setLocalValue] = d(value);
    const ref = useShowEntryEvent(id);
    const handleInputCallback = T$1(() => {
      return debounce(({
        target
      }) => onInput(target.value.length ? target.value : undefined));
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      autoResize && resizeToContents(e.target);
      setLocalValue(e.target.value);
    };
    _(() => {
      autoResize && resizeToContents(ref.current);
    }, []);
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return u("div", {
      class: "bio-properties-panel-textarea",
      children: [u("label", {
        for: prefixId$1(id),
        class: "bio-properties-panel-label",
        children: u(TooltipWrapper, {
          value: tooltip,
          forId: id,
          element: props.element,
          children: label
        })
      }), u("textarea", {
        ref: ref,
        id: prefixId$1(id),
        name: id,
        spellCheck: "false",
        class: classnames('bio-properties-panel-input', monospace ? 'bio-properties-panel-input-monospace' : '', autoResize ? 'auto-resize' : ''),
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        rows: rows,
        value: localValue,
        disabled: disabled,
        "data-gramm": "false"
      })]
    });
  }

  /**
   * @param {object} props
   * @param {object} props.element
   * @param {string} props.id
   * @param {string} props.description
   * @param {boolean} props.debounce
   * @param {string} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {number} props.rows
   * @param {boolean} props.monospace
   * @param {Function} [props.validate]
   * @param {boolean} [props.disabled]
   */
  function TextAreaEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      label,
      getValue,
      setValue,
      rows,
      monospace,
      disabled,
      validate,
      onFocus,
      onBlur,
      autoResize,
      tooltip
    } = props;
    const globalError = useError(id);
    const [localError, setLocalError] = d(null);
    let value = getValue(element);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onInput = newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      setValue(newValue, newValidationError);
      setLocalError(newValidationError);
    };
    const error = globalError || localError;
    return u("div", {
      class: classnames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [u(TextArea, {
        id: id,
        label: label,
        value: value,
        onInput: onInput,
        onFocus: onFocus,
        onBlur: onBlur,
        rows: rows,
        debounce: debounce,
        monospace: monospace,
        disabled: disabled,
        autoResize: autoResize,
        tooltip: tooltip,
        element: element
      }, element), error && u("div", {
        class: "bio-properties-panel-error",
        children: error
      }), u(Description, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$1(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId$1(id) {
    return `bio-properties-panel-${id}`;
  }

  function Textfield(props) {
    const {
      debounce,
      disabled = false,
      id,
      label,
      onInput,
      onFocus,
      onBlur,
      value = '',
      tooltip
    } = props;
    const [localValue, setLocalValue] = d(value || '');
    const ref = useShowEntryEvent(id);
    const handleInputCallback = T$1(() => {
      return debounce(({
        target
      }) => onInput(target.value.length ? target.value : undefined));
    }, [onInput, debounce]);
    const handleInput = e => {
      handleInputCallback(e);
      setLocalValue(e.target.value);
    };
    y(() => {
      if (value === localValue) {
        return;
      }
      setLocalValue(value);
    }, [value]);
    return u("div", {
      class: "bio-properties-panel-textfield",
      children: [u("label", {
        for: prefixId(id),
        class: "bio-properties-panel-label",
        children: u(TooltipWrapper, {
          value: tooltip,
          forId: id,
          element: props.element,
          children: label
        })
      }), u("input", {
        ref: ref,
        id: prefixId(id),
        type: "text",
        name: id,
        spellCheck: "false",
        autoComplete: "off",
        disabled: disabled,
        class: "bio-properties-panel-input",
        onInput: handleInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: localValue
      })]
    });
  }

  /**
   * @param {Object} props
   * @param {Object} props.element
   * @param {String} props.id
   * @param {String} props.description
   * @param {Boolean} props.debounce
   * @param {Boolean} props.disabled
   * @param {String} props.label
   * @param {Function} props.getValue
   * @param {Function} props.setValue
   * @param {Function} props.onFocus
   * @param {Function} props.onBlur
   * @param {string|import('preact').Component} props.tooltip
   * @param {Function} props.validate
   */
  function TextfieldEntry(props) {
    const {
      element,
      id,
      description,
      debounce,
      disabled,
      label,
      getValue,
      setValue,
      validate,
      onFocus,
      onBlur,
      tooltip
    } = props;
    const globalError = useError(id);
    const [localError, setLocalError] = d(null);
    let value = getValue(element);
    y(() => {
      if (isFunction(validate)) {
        const newValidationError = validate(value) || null;
        setLocalError(newValidationError);
      }
    }, [value]);
    const onInput = newValue => {
      let newValidationError = null;
      if (isFunction(validate)) {
        newValidationError = validate(newValue) || null;
      }
      setValue(newValue, newValidationError);
      setLocalError(newValidationError);
    };
    const error = globalError || localError;
    return u("div", {
      class: classnames('bio-properties-panel-entry', error ? 'has-error' : ''),
      "data-entry-id": id,
      children: [u(Textfield, {
        debounce: debounce,
        disabled: disabled,
        id: id,
        label: label,
        onInput: onInput,
        onFocus: onFocus,
        onBlur: onBlur,
        value: value,
        tooltip: tooltip,
        element: element
      }, element), error && u("div", {
        class: "bio-properties-panel-error",
        children: error
      }), u(Description, {
        forId: id,
        element: element,
        value: description
      })]
    });
  }
  function isEdited$2(node) {
    return node && !!node.value;
  }

  // helpers /////////////////

  function prefixId(id) {
    return `bio-properties-panel-${id}`;
  }

  const DEFAULT_DEBOUNCE_TIME = 300;
  function debounceInput(debounceDelay) {
    return function _debounceInput(fn) {
      if (debounceDelay !== false) {
        var debounceTime = isNumber(debounceDelay) ? debounceDelay : DEFAULT_DEBOUNCE_TIME;
        return debounce(fn, debounceTime);
      } else {
        return fn;
      }
    };
  }
  debounceInput.$inject = ['config.debounceInput'];

  var index$1 = {
    debounceInput: ['factory', debounceInput]
  };

  class FeelPopupModule {
    constructor(eventBus) {
      this._eventBus = eventBus;
    }

    /**
     * Check if the FEEL popup is open.
     * @return {Boolean}
     */
    isOpen() {
      return this._eventBus.fire('feelPopup._isOpen');
    }

    /**
     * Open the FEEL popup.
     *
     * @param {String} entryId
     * @param {Object} popupConfig
     * @param {HTMLElement} sourceElement
     */
    open(entryId, popupConfig, sourceElement) {
      return this._eventBus.fire('feelPopup._open', {
        entryId,
        popupConfig,
        sourceElement
      });
    }

    /**
     * Close the FEEL popup.
     */
    close() {
      return this._eventBus.fire('feelPopup._close');
    }
  }
  FeelPopupModule.$inject = ['eventBus'];

  var index = {
    feelPopup: ['type', FeelPopupModule]
  };

  var zeebe = {};

  var dist$1 = {};

  var hasRequiredDist$1;

  function requireDist$1 () {
  	if (hasRequiredDist$1) return dist$1;
  	hasRequiredDist$1 = 1;

  	/**
  	 * Flatten array, one level deep.
  	 *
  	 * @template T
  	 *
  	 * @param {T[][] | T[] | null} [arr]
  	 *
  	 * @return {T[]}
  	 */
  	function flatten(arr) {
  	  return Array.prototype.concat.apply([], arr);
  	}

  	const nativeToString = Object.prototype.toString;
  	const nativeHasOwnProperty = Object.prototype.hasOwnProperty;

  	function isUndefined(obj) {
  	  return obj === undefined;
  	}

  	function isDefined(obj) {
  	  return obj !== undefined;
  	}

  	function isNil(obj) {
  	  return obj == null;
  	}

  	function isArray(obj) {
  	  return nativeToString.call(obj) === '[object Array]';
  	}

  	function isObject(obj) {
  	  return nativeToString.call(obj) === '[object Object]';
  	}

  	function isNumber(obj) {
  	  return nativeToString.call(obj) === '[object Number]';
  	}

  	/**
  	 * @param {any} obj
  	 *
  	 * @return {boolean}
  	 */
  	function isFunction(obj) {
  	  const tag = nativeToString.call(obj);

  	  return (
  	    tag === '[object Function]' ||
  	    tag === '[object AsyncFunction]' ||
  	    tag === '[object GeneratorFunction]' ||
  	    tag === '[object AsyncGeneratorFunction]' ||
  	    tag === '[object Proxy]'
  	  );
  	}

  	function isString(obj) {
  	  return nativeToString.call(obj) === '[object String]';
  	}


  	/**
  	 * Ensure collection is an array.
  	 *
  	 * @param {Object} obj
  	 */
  	function ensureArray(obj) {

  	  if (isArray(obj)) {
  	    return;
  	  }

  	  throw new Error('must supply array');
  	}

  	/**
  	 * Return true, if target owns a property with the given key.
  	 *
  	 * @param {Object} target
  	 * @param {String} key
  	 *
  	 * @return {Boolean}
  	 */
  	function has(target, key) {
  	  return !isNil(target) && nativeHasOwnProperty.call(target, key);
  	}

  	/**
  	 * @template T
  	 * @typedef { (
  	 *   ((e: T) => boolean) |
  	 *   ((e: T, idx: number) => boolean) |
  	 *   ((e: T, key: string) => boolean) |
  	 *   string |
  	 *   number
  	 * ) } Matcher
  	 */

  	/**
  	 * @template T
  	 * @template U
  	 *
  	 * @typedef { (
  	 *   ((e: T) => U) | string | number
  	 * ) } Extractor
  	 */


  	/**
  	 * @template T
  	 * @typedef { (val: T, key: any) => boolean } MatchFn
  	 */

  	/**
  	 * @template T
  	 * @typedef { T[] } ArrayCollection
  	 */

  	/**
  	 * @template T
  	 * @typedef { { [key: string]: T } } StringKeyValueCollection
  	 */

  	/**
  	 * @template T
  	 * @typedef { { [key: number]: T } } NumberKeyValueCollection
  	 */

  	/**
  	 * @template T
  	 * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection
  	 */

  	/**
  	 * @template T
  	 * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection
  	 */

  	/**
  	 * Find element in collection.
  	 *
  	 * @template T
  	 * @param {Collection<T>} collection
  	 * @param {Matcher<T>} matcher
  	 *
  	 * @return {Object}
  	 */
  	function find(collection, matcher) {

  	  const matchFn = toMatcher(matcher);

  	  let match;

  	  forEach(collection, function(val, key) {
  	    if (matchFn(val, key)) {
  	      match = val;

  	      return false;
  	    }
  	  });

  	  return match;

  	}


  	/**
  	 * Find element index in collection.
  	 *
  	 * @template T
  	 * @param {Collection<T>} collection
  	 * @param {Matcher<T>} matcher
  	 *
  	 * @return {number | string | undefined}
  	 */
  	function findIndex(collection, matcher) {

  	  const matchFn = toMatcher(matcher);

  	  let idx = isArray(collection) ? -1 : undefined;

  	  forEach(collection, function(val, key) {
  	    if (matchFn(val, key)) {
  	      idx = key;

  	      return false;
  	    }
  	  });

  	  return idx;
  	}


  	/**
  	 * Filter elements in collection.
  	 *
  	 * @template T
  	 * @param {Collection<T>} collection
  	 * @param {Matcher<T>} matcher
  	 *
  	 * @return {T[]} result
  	 */
  	function filter(collection, matcher) {

  	  const matchFn = toMatcher(matcher);

  	  let result = [];

  	  forEach(collection, function(val, key) {
  	    if (matchFn(val, key)) {
  	      result.push(val);
  	    }
  	  });

  	  return result;
  	}


  	/**
  	 * Iterate over collection; returning something
  	 * (non-undefined) will stop iteration.
  	 *
  	 * @template T
  	 * @param {Collection<T>} collection
  	 * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator
  	 *
  	 * @return {T} return result that stopped the iteration
  	 */
  	function forEach(collection, iterator) {

  	  let val,
  	      result;

  	  if (isUndefined(collection)) {
  	    return;
  	  }

  	  const convertKey = isArray(collection) ? toNum : identity;

  	  for (let key in collection) {

  	    if (has(collection, key)) {
  	      val = collection[key];

  	      result = iterator(val, convertKey(key));

  	      if (result === false) {
  	        return val;
  	      }
  	    }
  	  }
  	}

  	/**
  	 * Return collection without element.
  	 *
  	 * @template T
  	 * @param {ArrayCollection<T>} arr
  	 * @param {Matcher<T>} matcher
  	 *
  	 * @return {T[]}
  	 */
  	function without(arr, matcher) {

  	  if (isUndefined(arr)) {
  	    return [];
  	  }

  	  ensureArray(arr);

  	  const matchFn = toMatcher(matcher);

  	  return arr.filter(function(el, idx) {
  	    return !matchFn(el, idx);
  	  });

  	}


  	/**
  	 * Reduce collection, returning a single result.
  	 *
  	 * @template T
  	 * @template V
  	 *
  	 * @param {Collection<T>} collection
  	 * @param {(result: V, entry: T, index: any) => V} iterator
  	 * @param {V} result
  	 *
  	 * @return {V} result returned from last iterator
  	 */
  	function reduce(collection, iterator, result) {

  	  forEach(collection, function(value, idx) {
  	    result = iterator(result, value, idx);
  	  });

  	  return result;
  	}


  	/**
  	 * Return true if every element in the collection
  	 * matches the criteria.
  	 *
  	 * @param  {Object|Array} collection
  	 * @param  {Function} matcher
  	 *
  	 * @return {Boolean}
  	 */
  	function every(collection, matcher) {

  	  return !!reduce(collection, function(matches, val, key) {
  	    return matches && matcher(val, key);
  	  }, true);
  	}


  	/**
  	 * Return true if some elements in the collection
  	 * match the criteria.
  	 *
  	 * @param  {Object|Array} collection
  	 * @param  {Function} matcher
  	 *
  	 * @return {Boolean}
  	 */
  	function some(collection, matcher) {

  	  return !!find(collection, matcher);
  	}


  	/**
  	 * Transform a collection into another collection
  	 * by piping each member through the given fn.
  	 *
  	 * @param  {Object|Array}   collection
  	 * @param  {Function} fn
  	 *
  	 * @return {Array} transformed collection
  	 */
  	function map(collection, fn) {

  	  let result = [];

  	  forEach(collection, function(val, key) {
  	    result.push(fn(val, key));
  	  });

  	  return result;
  	}


  	/**
  	 * Get the collections keys.
  	 *
  	 * @param  {Object|Array} collection
  	 *
  	 * @return {Array}
  	 */
  	function keys(collection) {
  	  return collection && Object.keys(collection) || [];
  	}


  	/**
  	 * Shorthand for `keys(o).length`.
  	 *
  	 * @param  {Object|Array} collection
  	 *
  	 * @return {Number}
  	 */
  	function size(collection) {
  	  return keys(collection).length;
  	}


  	/**
  	 * Get the values in the collection.
  	 *
  	 * @param  {Object|Array} collection
  	 *
  	 * @return {Array}
  	 */
  	function values(collection) {
  	  return map(collection, (val) => val);
  	}


  	/**
  	 * Group collection members by attribute.
  	 *
  	 * @param {Object|Array} collection
  	 * @param {Extractor} extractor
  	 *
  	 * @return {Object} map with { attrValue => [ a, b, c ] }
  	 */
  	function groupBy(collection, extractor, grouped = {}) {

  	  extractor = toExtractor(extractor);

  	  forEach(collection, function(val) {
  	    let discriminator = extractor(val) || '_';

  	    let group = grouped[discriminator];

  	    if (!group) {
  	      group = grouped[discriminator] = [];
  	    }

  	    group.push(val);
  	  });

  	  return grouped;
  	}


  	function uniqueBy(extractor, ...collections) {

  	  extractor = toExtractor(extractor);

  	  let grouped = {};

  	  forEach(collections, (c) => groupBy(c, extractor, grouped));

  	  let result = map(grouped, function(val, key) {
  	    return val[0];
  	  });

  	  return result;
  	}


  	const unionBy = uniqueBy;



  	/**
  	 * Sort collection by criteria.
  	 *
  	 * @template T
  	 *
  	 * @param {Collection<T>} collection
  	 * @param {Extractor<T, number | string>} extractor
  	 *
  	 * @return {Array}
  	 */
  	function sortBy(collection, extractor) {

  	  extractor = toExtractor(extractor);

  	  let sorted = [];

  	  forEach(collection, function(value, key) {
  	    let disc = extractor(value, key);

  	    let entry = {
  	      d: disc,
  	      v: value
  	    };

  	    for (var idx = 0; idx < sorted.length; idx++) {
  	      let { d } = sorted[idx];

  	      if (disc < d) {
  	        sorted.splice(idx, 0, entry);
  	        return;
  	      }
  	    }

  	    // not inserted, append (!)
  	    sorted.push(entry);
  	  });

  	  return map(sorted, (e) => e.v);
  	}


  	/**
  	 * Create an object pattern matcher.
  	 *
  	 * @example
  	 *
  	 * ```javascript
  	 * const matcher = matchPattern({ id: 1 });
  	 *
  	 * let element = find(elements, matcher);
  	 * ```
  	 *
  	 * @template T
  	 *
  	 * @param {T} pattern
  	 *
  	 * @return { (el: any) =>  boolean } matcherFn
  	 */
  	function matchPattern(pattern) {

  	  return function(el) {

  	    return every(pattern, function(val, key) {
  	      return el[key] === val;
  	    });

  	  };
  	}


  	/**
  	 * @param {string | ((e: any) => any) } extractor
  	 *
  	 * @return { (e: any) => any }
  	 */
  	function toExtractor(extractor) {

  	  /**
  	   * @satisfies { (e: any) => any }
  	   */
  	  return isFunction(extractor) ? extractor : (e) => {

  	    // @ts-ignore: just works
  	    return e[extractor];
  	  };
  	}


  	/**
  	 * @template T
  	 * @param {Matcher<T>} matcher
  	 *
  	 * @return {MatchFn<T>}
  	 */
  	function toMatcher(matcher) {
  	  return isFunction(matcher) ? matcher : (e) => {
  	    return e === matcher;
  	  };
  	}


  	function identity(arg) {
  	  return arg;
  	}

  	function toNum(arg) {
  	  return Number(arg);
  	}

  	/* global setTimeout clearTimeout */

  	/**
  	 * @typedef { {
  	 *   (...args: any[]): any;
  	 *   flush: () => void;
  	 *   cancel: () => void;
  	 * } } DebouncedFunction
  	 */

  	/**
  	 * Debounce fn, calling it only once if the given time
  	 * elapsed between calls.
  	 *
  	 * Lodash-style the function exposes methods to `#clear`
  	 * and `#flush` to control internal behavior.
  	 *
  	 * @param  {Function} fn
  	 * @param  {Number} timeout
  	 *
  	 * @return {DebouncedFunction} debounced function
  	 */
  	function debounce(fn, timeout) {

  	  let timer;

  	  let lastArgs;
  	  let lastThis;

  	  let lastNow;

  	  function fire(force) {

  	    let now = Date.now();

  	    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;

  	    if (scheduledDiff > 0) {
  	      return schedule(scheduledDiff);
  	    }

  	    fn.apply(lastThis, lastArgs);

  	    clear();
  	  }

  	  function schedule(timeout) {
  	    timer = setTimeout(fire, timeout);
  	  }

  	  function clear() {
  	    if (timer) {
  	      clearTimeout(timer);
  	    }

  	    timer = lastNow = lastArgs = lastThis = undefined;
  	  }

  	  function flush() {
  	    if (timer) {
  	      fire(true);
  	    }

  	    clear();
  	  }

  	  /**
  	   * @type { DebouncedFunction }
  	   */
  	  function callback(...args) {
  	    lastNow = Date.now();

  	    lastArgs = args;
  	    lastThis = this;

  	    // ensure an execution is scheduled
  	    if (!timer) {
  	      schedule(timeout);
  	    }
  	  }

  	  callback.flush = flush;
  	  callback.cancel = clear;

  	  return callback;
  	}

  	/**
  	 * Throttle fn, calling at most once
  	 * in the given interval.
  	 *
  	 * @param  {Function} fn
  	 * @param  {Number} interval
  	 *
  	 * @return {Function} throttled function
  	 */
  	function throttle(fn, interval) {
  	  let throttling = false;

  	  return function(...args) {

  	    if (throttling) {
  	      return;
  	    }

  	    fn(...args);
  	    throttling = true;

  	    setTimeout(() => {
  	      throttling = false;
  	    }, interval);
  	  };
  	}

  	/**
  	 * Bind function against target <this>.
  	 *
  	 * @param  {Function} fn
  	 * @param  {Object}   target
  	 *
  	 * @return {Function} bound function
  	 */
  	function bind(fn, target) {
  	  return fn.bind(target);
  	}

  	/**
  	 * Convenience wrapper for `Object.assign`.
  	 *
  	 * @param {Object} target
  	 * @param {...Object} others
  	 *
  	 * @return {Object} the target
  	 */
  	function assign(target, ...others) {
  	  return Object.assign(target, ...others);
  	}

  	/**
  	 * Sets a nested property of a given object to the specified value.
  	 *
  	 * This mutates the object and returns it.
  	 *
  	 * @template T
  	 *
  	 * @param {T} target The target of the set operation.
  	 * @param {(string|number)[]} path The path to the nested value.
  	 * @param {any} value The value to set.
  	 *
  	 * @return {T}
  	 */
  	function set(target, path, value) {

  	  let currentTarget = target;

  	  forEach(path, function(key, idx) {

  	    if (typeof key !== 'number' && typeof key !== 'string') {
  	      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
  	    }

  	    if (key === 'constructor') {
  	      throw new Error('illegal key: constructor');
  	    }

  	    if (key === '__proto__') {
  	      throw new Error('illegal key: __proto__');
  	    }

  	    let nextKey = path[idx + 1];
  	    let nextTarget = currentTarget[key];

  	    if (isDefined(nextKey) && isNil(nextTarget)) {
  	      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
  	    }

  	    if (isUndefined(nextKey)) {
  	      if (isUndefined(value)) {
  	        delete currentTarget[key];
  	      } else {
  	        currentTarget[key] = value;
  	      }
  	    } else {
  	      currentTarget = nextTarget;
  	    }
  	  });

  	  return target;
  	}


  	/**
  	 * Gets a nested property of a given object.
  	 *
  	 * @param {Object} target The target of the get operation.
  	 * @param {(string|number)[]} path The path to the nested value.
  	 * @param {any} [defaultValue] The value to return if no value exists.
  	 *
  	 * @return {any}
  	 */
  	function get(target, path, defaultValue) {

  	  let currentTarget = target;

  	  forEach(path, function(key) {

  	    // accessing nil property yields <undefined>
  	    if (isNil(currentTarget)) {
  	      currentTarget = undefined;

  	      return false;
  	    }

  	    currentTarget = currentTarget[key];
  	  });

  	  return isUndefined(currentTarget) ? defaultValue : currentTarget;
  	}

  	/**
  	 * Pick properties from the given target.
  	 *
  	 * @template T
  	 * @template {any[]} V
  	 *
  	 * @param {T} target
  	 * @param {V} properties
  	 *
  	 * @return Pick<T, V>
  	 */
  	function pick(target, properties) {

  	  let result = {};

  	  let obj = Object(target);

  	  forEach(properties, function(prop) {

  	    if (prop in obj) {
  	      result[prop] = target[prop];
  	    }
  	  });

  	  return result;
  	}

  	/**
  	 * Pick all target properties, excluding the given ones.
  	 *
  	 * @template T
  	 * @template {any[]} V
  	 *
  	 * @param {T} target
  	 * @param {V} properties
  	 *
  	 * @return {Omit<T, V>} target
  	 */
  	function omit(target, properties) {

  	  let result = {};

  	  let obj = Object(target);

  	  forEach(obj, function(prop, key) {

  	    if (properties.indexOf(key) === -1) {
  	      result[key] = prop;
  	    }
  	  });

  	  return result;
  	}

  	/**
  	 * Recursively merge `...sources` into given target.
  	 *
  	 * Does support merging objects; does not support merging arrays.
  	 *
  	 * @param {Object} target
  	 * @param {...Object} sources
  	 *
  	 * @return {Object} the target
  	 */
  	function merge(target, ...sources) {

  	  if (!sources.length) {
  	    return target;
  	  }

  	  forEach(sources, function(source) {

  	    // skip non-obj sources, i.e. null
  	    if (!source || !isObject(source)) {
  	      return;
  	    }

  	    forEach(source, function(sourceVal, key) {

  	      if (key === '__proto__') {
  	        return;
  	      }

  	      let targetVal = target[key];

  	      if (isObject(sourceVal)) {

  	        if (!isObject(targetVal)) {

  	          // override target[key] with object
  	          targetVal = {};
  	        }

  	        target[key] = merge(targetVal, sourceVal);
  	      } else {
  	        target[key] = sourceVal;
  	      }

  	    });
  	  });

  	  return target;
  	}

  	dist$1.assign = assign;
  	dist$1.bind = bind;
  	dist$1.debounce = debounce;
  	dist$1.ensureArray = ensureArray;
  	dist$1.every = every;
  	dist$1.filter = filter;
  	dist$1.find = find;
  	dist$1.findIndex = findIndex;
  	dist$1.flatten = flatten;
  	dist$1.forEach = forEach;
  	dist$1.get = get;
  	dist$1.groupBy = groupBy;
  	dist$1.has = has;
  	dist$1.isArray = isArray;
  	dist$1.isDefined = isDefined;
  	dist$1.isFunction = isFunction;
  	dist$1.isNil = isNil;
  	dist$1.isNumber = isNumber;
  	dist$1.isObject = isObject;
  	dist$1.isString = isString;
  	dist$1.isUndefined = isUndefined;
  	dist$1.keys = keys;
  	dist$1.map = map;
  	dist$1.matchPattern = matchPattern;
  	dist$1.merge = merge;
  	dist$1.omit = omit;
  	dist$1.pick = pick;
  	dist$1.reduce = reduce;
  	dist$1.set = set;
  	dist$1.size = size;
  	dist$1.some = some;
  	dist$1.sortBy = sortBy;
  	dist$1.throttle = throttle;
  	dist$1.unionBy = unionBy;
  	dist$1.uniqueBy = uniqueBy;
  	dist$1.values = values;
  	dist$1.without = without;
  	return dist$1;
  }

  var hasRequiredZeebe;

  function requireZeebe () {
  	if (hasRequiredZeebe) return zeebe;
  	hasRequiredZeebe = 1;

  	Object.defineProperty(zeebe, '__esModule', { value: true });

  	var minDash = /*@__PURE__*/ requireDist$1();

  	/**
  	 * Get a inputOutput from the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {ModdleElement} the inputOutput object
  	 */
  	function getInputOutput(element) {
  	  return (getElements(element, 'zeebe:IoMapping') || [])[0];
  	}

  	/**
  	 * Return all input parameters existing in the business object, and
  	 * an empty array if none exist.
  	 *
  	 * @param  {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>} a list of input parameter objects
  	 */
  	function getInputParameters(element) {
  	  return getParameters(element, 'inputParameters');
  	}

  	/**
  	 * Return out mappings existing in the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>}
  	 */
  	function getOutMappings(element) {
  	  return (getInputOutput(element) || {}).outputParameters;
  	}

  	/**
  	 * Return out mappings existing in the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>}
  	 */
  	function getInMappings(element) {
  	  return (getInputOutput(element) || {}).inputParameters;
  	}

  	/**
  	 * Get the inputElement name from a loopCharacteristics
  	 *
  	 * @param {MoodleElement} loopCharacteristics
  	 * @returns {String} outputCollection
  	 */
  	function getInputElement(loopCharacteristics) {
  	  const extensionElement = getElements(loopCharacteristics, 'zeebe:LoopCharacteristics')[0];
  	  return extensionElement && extensionElement.inputElement;
  	}

  	/**
  	 * Get the outputCollection name from a loopCharacteristics
  	 *
  	 * @param {MoodleElement} loopCharacteristics
  	 * @returns {String} outputCollection
  	 */
  	function getOutputCollection(loopCharacteristics) {
  	  const extensionElement = getElements(loopCharacteristics, 'zeebe:LoopCharacteristics')[0];
  	  return extensionElement && extensionElement.outputCollection;

  	}

  	/**
  	 * Get a calledDecision from the business object
  	 *
  	 * @param {MoodleElement} element
  	 * @returns {MoodleElement} the calledDecision object
  	 */
  	function getCalledDecision(element) {
  	  return (getElements(element, 'zeebe:CalledDecision') || [])[0];
  	}


  	/**
  	 * Get a script from the business object
  	 *
  	 * @param {MoodleElement} element
  	 * @returns {MoodleElement} the script object
  	 */
  	function getScript(element) {
  	  return (getElements(element, 'zeebe:Script') || [])[0];
  	}

  	// helpers //////////

  	function getElements(element, type, property) {
  	  var elements = getExtensionElements(element, type);

  	  return elements ;
  	}

  	function getParameters(element, property) {
  	  var inputOutput = getInputOutput(element);

  	  return (inputOutput && inputOutput.get(property)) || [];
  	}

  	function getExtensionElements(element, type) {
  	  var elements = [];
  	  var extensionElements = element.get('extensionElements');

  	  if (typeof extensionElements !== 'undefined') {
  	    var extensionValues = extensionElements.get('values');

  	    if (typeof extensionValues !== 'undefined') {
  	      elements = minDash.filter(extensionValues, function(value) {
  	        return is$2(value, type);
  	      });
  	    }
  	  }

  	  return elements;
  	}

  	function is$2(element, type) {
  	  return (
  	    element &&
  	    typeof element.$instanceOf === 'function' &&
  	    element.$instanceOf(type)
  	  );
  	}

  	/**
  	 * Get all parent elements for a given element.
  	 *
  	 * @param {ModdleElement|string} element
  	 *
  	 * @returns {Array<ModdleElement>}
  	 */
  	function getParents(element) {
  	  var parents = [];
  	  var current = element;

  	  while (current.$parent) {
  	    parents.push(current.$parent);
  	    current = current.$parent;
  	  }

  	  return parents;
  	}

  	/**
  	 * Iterate over each element in a collection, calling the iterator function `fn`
  	 * with (element, index, recursionDepth).
  	 *
  	 * Recurse into all elements that are returned by `fn`.
  	 *
  	 * @param  {Object|Array<Object>} elements
  	 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
  	 * @param  {number} [depth] maximum recursion depth
  	 */
  	function eachElement(elements, fn, depth) {
  	  depth = depth || 0;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(s, i) {
  	    var filter = fn(s, i, depth);

  	    if (minDash.isArray(filter) && filter.length) {
  	      eachElement(filter, fn, depth + 1);
  	    }
  	  });
  	}

  	/**
  	 * Adds an element to a collection and returns true if the
  	 * element was added.
  	 *
  	 * @param {Array<Object>} elements
  	 * @param {Object} e
  	 * @param {boolean} unique
  	 */
  	function add(elements, e, unique) {
  	  var canAdd = !unique || elements.indexOf(e) === -1;

  	  if (canAdd) {
  	    elements.push(e);
  	  }

  	  return canAdd;
  	}

  	/**
  	 * Collects self + flow elements up to a given depth from a list of elements.
  	 *
  	 * @param  {ModdleElement|Array<ModdleElement>} elements the elements to select the flowElements from
  	 * @param  {boolean} unique whether to return a unique result set (no duplicates)
  	 * @param  {number} maxDepth the depth to search through or -1 for infinite
  	 *
  	 * @return {Array<ModdleElement>} found elements
  	 */
  	function selfAndFlowElements(elements, unique, maxDepth) {
  	  var result = [],
  	      processedFlowElements = [];

  	  eachElement(elements, function(element, i, depth) {
  	    add(result, element, unique);

  	    var flowElements = element.flowElements;

  	    // max traversal depth not reached yet
  	    {

  	      // flowElements exist && flowElements not yet processed
  	      if (flowElements && add(processedFlowElements, flowElements, unique)) {
  	        return flowElements;
  	      }
  	    }
  	  });

  	  return result;
  	}

  	/**
  	 * Return self + ALL flowElements for a number of elements
  	 *
  	 * @param  {Array<ModdleElement>} elements to query
  	 * @param  {boolean} allowDuplicates to allow duplicates in the result set
  	 *
  	 * @return {Array<ModdleElement>} the collected elements
  	 */
  	function selfAndAllFlowElements(elements, allowDuplicates) {
  	  return selfAndFlowElements(elements, !allowDuplicates);
  	}

  	/**
  	 * Return full moddle element for given element id
  	 *
  	 * @param {string} elementId
  	 * @param {ModdleElement} rootElement
  	 *
  	 * @returns {ModdleElement}
  	 */
  	function getElement(elementId, rootElement) {
  	  var allElements = selfAndAllFlowElements(rootElement);

  	  return minDash.find(allElements, function(element) {
  	    return element.id === elementId;
  	  });
  	}

  	function addVariableToList(variablesList, newVariable) {
  	  var foundIdx = minDash.findIndex(variablesList, function(variable) {
  	    return (
  	      variable.name === newVariable.name && variable.scope === newVariable.scope
  	    );
  	  });

  	  if (foundIdx >= 0) {
  	    variablesList[foundIdx].origin = combineArrays$1(
  	      variablesList[foundIdx].origin,
  	      newVariable.origin
  	    );
  	  } else {
  	    variablesList.push(newVariable);
  	  }
  	}

  	/**
  	 * Creates new process variable definition object
  	 * Identifies correct (highest) scope, in which variable is available
  	 *
  	 * @param {ModdleElement} flowElement
  	 * @param {String} name
  	 * @param {ModdleElement} defaultScope
  	 *
  	 * @returns {ProcessVariable}
  	 */
  	function createProcessVariable(flowElement, name, defaultScope) {
  	  var scope = getScope$1(flowElement, defaultScope, name);

  	  return {
  	    name: name,
  	    origin: [ flowElement ],
  	    scope: scope
  	  };
  	}


  	// helpers ////////////////////

  	/**
  	 * Set parent container if it defines it's own scope for the variable, so
  	 * when it defines an input mapping for it. Otherwise returns the default global scope
  	 */
  	function getScope$1(element, globalScope, variableName) {
  	  var parents = getParents(element);

  	  var scopedParent = minDash.find(parents, function(parent) {
  	    return (
  	      is$1(parent, 'bpmn:SubProcess') && hasInputParameter(parent, variableName)
  	    );
  	  });

  	  return scopedParent ? scopedParent : globalScope;
  	}

  	function is$1(element, type) {
  	  return (
  	    element &&
  	      typeof element.$instanceOf === 'function' &&
  	      element.$instanceOf(type)
  	  );
  	}

  	function hasInputParameter(element, name) {
  	  return minDash.find(getInputParameters(element), function(input) {
  	    return input.target === name;
  	  });
  	}

  	function combineArrays$1(a, b) {
  	  return a.concat(b);
  	}

  	/**
  	 * Retrieves process variables defined in output mappings, e.g.
  	 *
  	 * <bpmn:serviceTask id="ServiceTask">
  	 *   <bpmn:extensionElements>
  	 *     <zeebe:ioMapping>
  	 *       <zeebe:input source="= source" target="variable1" />
  	 *     </zeebe:ioMapping>
  	 *   </bpmn:extensionElements>
  	 * </bpmn:serviceTask>
  	 *
  	 * => Adds one variable "variable1" to the list.
  	 *
  	 */
  	function extractInMappings(options) {
  	  var elements = options.elements,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var inMappings = getInMappings(element);

  	    // extract all variables with correct scope
  	    minDash.forEach(inMappings, function(mapping) {

  	      var newVariable = createProcessVariable(
  	        element,
  	        mapping.target,
  	        element
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    });
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in result variables, e.g.
  	 *
  	 * <bpmn:serviceTask id="ServiceTask">
  	 *   <bpmn:multiInstanceLoopCharacteristics>
  	 *     <bpmn:extensionElements>
  	 *       <zeebe:loopCharacteristics inputElement="inputElement" outputCollection="outputCollection" />
  	 *     </bpmn:extensionElements>
  	 *   </bpmn:multiInstanceLoopCharacteristics>
  	 * </bpmn:serviceTask>
  	 *
  	 * => Adds one variable "inputElement"to the list.
  	 *
  	 */
  	function extractInputElement(options) {
  	  var elements = options.elements,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var loopCharacteristics = element.loopCharacteristics;

  	    var inputElement = loopCharacteristics && getInputElement(loopCharacteristics);

  	    if (inputElement) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        inputElement,
  	        element
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    }
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in output mappings, e.g.
  	 *
  	 * <bpmn:serviceTask id="ServiceTask">
  	 *   <bpmn:extensionElements>
  	 *     <zeebe:ioMapping>
  	 *       <zeebe:output source="= source" target="variable1" />
  	 *     </zeebe:ioMapping>
  	 *   </bpmn:extensionElements>
  	 * </bpmn:serviceTask>
  	 *
  	 * => Adds one variable "variable1" to the list.
  	 *
  	 */
  	function extractOutMappings(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var outMappings = getOutMappings(element);

  	    // extract all variables with correct scope
  	    minDash.forEach(outMappings, function(mapping) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        mapping.target,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    });
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in output collection, e.g.
  	 *
  	 * <bpmn:serviceTask id="ServiceTask">
  	 *   <bpmn:multiInstanceLoopCharacteristics>
  	 *     <bpmn:extensionElements>
  	 *       <zeebe:loopCharacteristics inputElement="inputElement" outputCollection="outputCollection" />
  	 *     </bpmn:extensionElements>
  	 *   </bpmn:multiInstanceLoopCharacteristics>
  	 * </bpmn:serviceTask>
  	 *
  	 * => Adds one variable "outputCollection"to the list.
  	 *
  	 */
  	function extractOutputCollections(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var loopCharacteristics = element.loopCharacteristics;

  	    var outputCollection = loopCharacteristics && getOutputCollection(loopCharacteristics);

  	    if (outputCollection) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        outputCollection,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    }
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in result variables, e.g.
  	 *
  	 *   <bpmn:businessRuleTask id="Activity_1">
  	 *     <bpmn:extensionElements>
  	 *       <zeebe:calledDecision resultVariable="variable1" />
  	 *     </bpmn:extensionElements>
  	 *   </bpmn:businessRuleTask>
  	 *
  	 *
  	 * => Adds one variable "variable1"to the list.
  	 *
  	 */
  	function extractResultVariables(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var baseElement = getCalledDecision(element) ||
  	                      getScript(element);

  	    if (!baseElement) {
  	      return;
  	    }

  	    var resultVariable = baseElement.resultVariable;

  	    if (resultVariable) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        resultVariable,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    }
  	  });

  	  return processVariables;
  	}

  	var extractors = [
  	  extractInMappings,
  	  extractInputElement,
  	  extractOutMappings,
  	  extractOutputCollections,
  	  extractResultVariables
  	];

  	/**
  	 * @typedef {Object} ProcessVariable
  	 * @property {string} name
  	 * @property {Array<ModdleElement>} origin
  	 * @property {ModdleElement} scope
  	 */

  	// api /////////////////////////

  	/**
  	 * Extractors add ProcessVariables to the `options.processVariables` parameter.
  	 * @callback extractor
  	 * @param {Object} options
  	 * @param {Array<ModdleElement>} options.elements
  	 * @param {ModdleElement} options.containerElement
  	 * @param {Array<ProcessVariable>} options.processVariables
  	 */

  	/**
  	 * Retrieves all process variables for a given container element.
  	 * @param {ModdleElement} containerElement
  	 * @param {Array<extractor>} [additionalExtractors]
  	 *
  	 * @returns {Promise<Array<ProcessVariable>>}
  	 */
  	function getProcessVariables(containerElement, additionalExtractors = []) {
  	  var processVariables = [];

  	  // (1) extract all flow elements inside the container
  	  var elements = selfAndAllFlowElements([ containerElement ], false);

  	  const allPromises = [];

  	  // (2) extract all variables from the extractors
  	  minDash.forEach([ ...extractors, ...additionalExtractors ], function(extractor) {
  	    allPromises.push(extractor({
  	      elements: elements,
  	      containerElement: containerElement,
  	      processVariables: processVariables
  	    }));
  	  });

  	  return Promise.all(allPromises)
  	    .then(() => processVariables);
  	}

  	/**
  	 * Retrieves all variables which are available in the given scope
  	 *
  	 * * Exclude variables which are only available in other scopes
  	 * * Exclude variables which are produced by the given element
  	 * * Include variables which are available in parent scopes
  	 *
  	 * @param {string} scope
  	 * @param {ModdleElement} rootElement element from where to extract all variables
  	 * @param {Array<extractor>} [additionalExtractors]
  	 *
  	 * @returns {Promise<Array<ProcessVariable>>}
  	 */
  	async function getVariablesForScope(scope, rootElement, additionalExtractors = []) {

  	  var allVariables = await getProcessVariables(rootElement, additionalExtractors);

  	  var scopeElement = getElement(scope, rootElement);

  	  // (1) get variables for given scope
  	  var scopeVariables = minDash.filter(allVariables, function(variable) {
  	    return variable.scope.id === scopeElement.id;
  	  });

  	  // (2) get variables for parent scopes
  	  var parents = getParents(scopeElement);

  	  var parentsScopeVariables = minDash.filter(allVariables, function(variable) {
  	    return minDash.find(parents, function(parent) {
  	      return parent.id === variable.scope.id;
  	    });
  	  });

  	  return combineArrays(scopeVariables, parentsScopeVariables);
  	}


  	function getVariablesForElement(element, additionalExtractors = []) {
  	  return getVariablesForScope(getScope(element), getRootElement(element), additionalExtractors);
  	}

  	function getScope(element) {
  	  const bo = getBusinessObject(element);

  	  if (is(element, 'bpmn:Participant')) {
  	    return bo.processRef.id;
  	  }

  	  return bo.id;
  	}

  	function getRootElement(element) {
  	  const businessObject = getBusinessObject(element);

  	  if (is(businessObject, 'bpmn:Participant')) {
  	    return businessObject.processRef;
  	  }

  	  if (is(businessObject, 'bpmn:Process')) {
  	    return businessObject;
  	  }

  	  let parent = businessObject;

  	  while (parent.$parent && !is(parent, 'bpmn:Process')) {
  	    parent = parent.$parent;
  	  }

  	  return parent;
  	}


  	// helpers ////////////////////

  	function combineArrays(a, b) {
  	  return a.concat(b);
  	}


  	function getBusinessObject(element) {
  	  return (element && element.businessObject) || element;
  	}


  	function is(element, type) {
  	  var bo = getBusinessObject(element);

  	  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);
  	}

  	zeebe.getProcessVariables = getProcessVariables;
  	zeebe.getVariablesForElement = getVariablesForElement;
  	zeebe.getVariablesForScope = getVariablesForScope;
  	return zeebe;
  }

  requireZeebe();

  var arrayMove = {exports: {}};

  var hasRequiredArrayMove;

  function requireArrayMove () {
  	if (hasRequiredArrayMove) return arrayMove.exports;
  	hasRequiredArrayMove = 1;

  	const arrayMoveMutate = (array, from, to) => {
  		const startIndex = from < 0 ? array.length + from : from;

  		if (startIndex >= 0 && startIndex < array.length) {
  			const endIndex = to < 0 ? array.length + to : to;

  			const [item] = array.splice(from, 1);
  			array.splice(endIndex, 0, item);
  		}
  	};

  	const arrayMove$1 = (array, from, to) => {
  		array = [...array];
  		arrayMoveMutate(array, from, to);
  		return array;
  	};

  	arrayMove.exports = arrayMove$1;
  	arrayMove.exports.mutate = arrayMoveMutate;
  	return arrayMove.exports;
  }

  requireArrayMove();

  var dist = {};

  var hasRequiredDist;

  function requireDist () {
  	if (hasRequiredDist) return dist;
  	hasRequiredDist = 1;

  	Object.defineProperty(dist, '__esModule', { value: true });

  	var minDash = /*@__PURE__*/ requireDist$1();

  	/**
  	 * Get a inputOutput from the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {ModdleElement} the inputOutput object
  	 */
  	function getInputOutput(element) {
  	  return (getElements(element, 'camunda:InputOutput') || [])[0];
  	}

  	/**
  	 * Return all input parameters existing in the business object, and
  	 * an empty array if none exist.
  	 *
  	 * @param  {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>} a list of input parameter objects
  	 */
  	function getInputParameters(element) {
  	  return getParameters(element, 'inputParameters');
  	}

  	/**
  	 * Return all output parameters existing in the business object, and
  	 * an empty array if none exist.
  	 *
  	 * @param  {ModdleElement} element
  	 * @param  {boolean} insideConnector
  	 *
  	 * @return {Array<ModdleElement>} a list of output parameter objects
  	 */
  	function getOutputParameters(element) {
  	  return getParameters(element, 'outputParameters');
  	}

  	/**
  	 * Return all form fields existing in the business object, and
  	 * an empty array if none exist.
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>} a list of form fields
  	 */
  	function getFormFields(element) {
  	  var formData = getFormData(element);
  	  return (formData && formData.get('fields')) || [];
  	}

  	/**
  	 * Return form data existing in the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {ModdleElement}
  	 */
  	function getFormData(element) {
  	  return getElements(element, 'camunda:FormData')[0];
  	}

  	/**
  	 * Return out mappings existing in the business object
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>}
  	 */
  	function getOutMappings(element) {
  	  return getElements(element, 'camunda:Out');
  	}


  	// helpers //////////

  	function getElements(element, type, property) {
  	  var elements = getExtensionElements(element, type);

  	  return elements ;
  	}

  	function getParameters(element, property) {
  	  var inputOutput = getInputOutput(element);

  	  return (inputOutput && inputOutput.get(property)) || [];
  	}

  	function getExtensionElements(element, type) {
  	  var elements = [];
  	  var extensionElements = element.get('extensionElements');

  	  if (typeof extensionElements !== 'undefined') {
  	    var extensionValues = extensionElements.get('values');

  	    if (typeof extensionValues !== 'undefined') {
  	      elements = minDash.filter(extensionValues, function(value) {
  	        return is$2(value, type);
  	      });
  	    }
  	  }

  	  return elements;
  	}

  	function is$2(element, type) {
  	  return (
  	    element &&
  	    typeof element.$instanceOf === 'function' &&
  	    element.$instanceOf(type)
  	  );
  	}

  	/**
  	 * Get all parent elements for a given element.
  	 *
  	 * @param {ModdleElement|string} element
  	 *
  	 * @returns {Array<ModdleElement>}
  	 */
  	function getParents(element) {
  	  var parents = [];
  	  var current = element;

  	  while (current.$parent) {
  	    parents.push(current.$parent);
  	    current = current.$parent;
  	  }

  	  return parents;
  	}

  	/**
  	 * Iterate over each element in a collection, calling the iterator function `fn`
  	 * with (element, index, recursionDepth).
  	 *
  	 * Recurse into all elements that are returned by `fn`.
  	 *
  	 * @param  {Object|Array<Object>} elements
  	 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
  	 * @param  {number} [depth] maximum recursion depth
  	 */
  	function eachElement(elements, fn, depth) {
  	  depth = depth || 0;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(s, i) {
  	    var filter = fn(s, i, depth);

  	    if (minDash.isArray(filter) && filter.length) {
  	      eachElement(filter, fn, depth + 1);
  	    }
  	  });
  	}

  	/**
  	 * Adds an element to a collection and returns true if the
  	 * element was added.
  	 *
  	 * @param {Array<Object>} elements
  	 * @param {Object} e
  	 * @param {boolean} unique
  	 */
  	function add(elements, e, unique) {
  	  var canAdd = !unique || elements.indexOf(e) === -1;

  	  if (canAdd) {
  	    elements.push(e);
  	  }

  	  return canAdd;
  	}

  	/**
  	 * Collects self + flow elements up to a given depth from a list of elements.
  	 *
  	 * @param  {ModdleElement|Array<ModdleElement>} elements the elements to select the flowElements from
  	 * @param  {boolean} unique whether to return a unique result set (no duplicates)
  	 * @param  {number} maxDepth the depth to search through or -1 for infinite
  	 *
  	 * @return {Array<ModdleElement>} found elements
  	 */
  	function selfAndFlowElements(elements, unique, maxDepth) {
  	  var result = [],
  	      processedFlowElements = [];

  	  eachElement(elements, function(element, i, depth) {
  	    add(result, element, unique);

  	    var flowElements = element.flowElements;

  	    // max traversal depth not reached yet
  	    {

  	      // flowElements exist && flowElements not yet processed
  	      if (flowElements && add(processedFlowElements, flowElements, unique)) {
  	        return flowElements;
  	      }
  	    }
  	  });

  	  return result;
  	}

  	/**
  	 * Return self + ALL flowElements for a number of elements
  	 *
  	 * @param  {Array<ModdleElement>} elements to query
  	 * @param  {boolean} allowDuplicates to allow duplicates in the result set
  	 *
  	 * @return {Array<ModdleElement>} the collected elements
  	 */
  	function selfAndAllFlowElements(elements, allowDuplicates) {
  	  return selfAndFlowElements(elements, !allowDuplicates);
  	}

  	/**
  	 * Return full moddle element for given element id
  	 *
  	 * @param {string} elementId
  	 * @param {ModdleElement} rootElement
  	 *
  	 * @returns {ModdleElement}
  	 */
  	function getElement(elementId, rootElement) {
  	  var allElements = selfAndAllFlowElements(rootElement);

  	  return minDash.find(allElements, function(element) {
  	    return element.id === elementId;
  	  });
  	}

  	function addVariableToList(variablesList, newVariable) {
  	  var foundIdx = minDash.findIndex(variablesList, function(variable) {
  	    return (
  	      variable.name === newVariable.name && variable.scope === newVariable.scope
  	    );
  	  });

  	  if (foundIdx >= 0) {
  	    variablesList[foundIdx].origin = combineArrays$1(
  	      variablesList[foundIdx].origin,
  	      newVariable.origin
  	    );
  	  } else {
  	    variablesList.push(newVariable);
  	  }
  	}

  	/**
  	 * Creates new process variable definition object
  	 * Identifies correct (highest) scope, in which variable is available
  	 *
  	 * @param {ModdleElement} flowElement
  	 * @param {String} name
  	 * @param {ModdleElement} defaultScope
  	 *
  	 * @returns {ProcessVariable}
  	 */
  	function createProcessVariable(flowElement, name, defaultScope) {
  	  var scope = getScope(flowElement, defaultScope, name);

  	  return {
  	    name: name,
  	    origin: [ flowElement ],
  	    scope: scope,
  	  };
  	}


  	// helpers ////////////////////

  	/**
  	 * Set parent container if it defines it's own scope for the variable, so
  	 * when it defines an input mapping for it. Otherwise returns the default global scope
  	 */
  	function getScope(element, globalScope, variableName) {
  	  var parents = getParents(element);

  	  var scopedParent = minDash.find(parents, function(parent) {
  	    return (
  	      is$1(parent, 'bpmn:SubProcess') && hasInputParameter(parent, variableName)
  	    );
  	  });

  	  return scopedParent ? scopedParent : globalScope;
  	}

  	function is$1(element, type) {
  	  return (
  	    element &&
  	      typeof element.$instanceOf === 'function' &&
  	      element.$instanceOf(type)
  	  );
  	}

  	function hasInputParameter(element, name) {
  	  return minDash.find(getInputParameters(element), function(input) {
  	    return input.name === name;
  	  });
  	}

  	function combineArrays$1(a, b) {
  	  return a.concat(b);
  	}

  	/**
  	 * Retrieves process variables defined in output parameters, e.g.
  	 *
  	 * <camunda:inputOutput>
  	 *   <camunda:outputParameter name="variable1">200</camunda:outputParameter>
  	 *   <camunda:outputParameter name="variable2">${myLocalVar + 20}</camunda:outputParameter>
  	 * </camunda:inputOutput>
  	 *
  	 * => Adds two variables "variable1" & "variable2" to the list.
  	 *
  	 */
  	function extractOutputParameters(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    // variables are created by output parameters
  	    var outputParameters = getOutputParameters(element);

  	    // extract all variables with correct scope
  	    minDash.forEach(outputParameters, function(parameter) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        parameter.name,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    });
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in result variables, e.g.
  	 *
  	 * <bpmn:sendTask
  	 *   id="SendTask_1"
  	 *   camunda:expression="${myBean.ready}"
  	 *   camunda:resultVariable="variable1"
  	 * />
  	 *
  	 * => Adds one variable "variable1"to the list.
  	 *
  	 */
  	function extractResultVariables(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var resultVariable = getResultVariable(element);

  	    if (resultVariable) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        resultVariable,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    }
  	  });

  	  return processVariables;
  	}


  	// helpers ///////////////////////

  	function getResultVariable(element) {
  	  return element.get('camunda:resultVariable');
  	}

  	/**
  	 * Retrieves process variables defined in form fields, e.g.
  	 *
  	 * <camunda:formData>
  	 *   <camunda:formField id="variable1" />
  	 *   <camunda:formField id="variable2" />
  	 * </camunda:formData>
  	 *
  	 * => Adds two variables "variable1" & "variable2" to the list.
  	 *
  	 */
  	function extractFormFields(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var formFields = getFormFields(element);

  	    // extract all variables with correct scope
  	    minDash.forEach(formFields, function(field) {
  	      var newVariable = createProcessVariable(
  	        element,
  	        field.id,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    });
  	  });

  	  return processVariables;
  	}

  	/**
  	 * Retrieves process variables defined in output mappings and
  	 * ignores local variables, e.g.
  	 *
  	 * <bpmn:extensionElements>
  	 *   <camunda:out sourceExpression="${myBean.ready}" target="variable1" />
  	 *   <camunda:out source="foo" target="variableLocal" local="true" />
  	 * </bpmn:extensionElements>
  	 *
  	 * => Adds one variable "variable1" to the list.
  	 *
  	 */
  	function extractOutMappings(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    var outMappings = getOutMappings(element);

  	    // extract all variables with correct scope
  	    minDash.forEach(outMappings, function(mapping) {

  	      // do not use variables marked as <local>
  	      if (mapping.local) {
  	        return;
  	      }

  	      var newVariable = createProcessVariable(
  	        element,
  	        mapping.target,
  	        containerElement
  	      );

  	      addVariableToList(processVariables, newVariable);
  	    });
  	  });

  	  return processVariables;
  	}

  	/**
  	 *
  	 * @param {ModdleElement} element
  	 * @param {string} [type] - optional
  	 *
  	 * @return {Array<ModdleElement>|undefined} collection of event definitions or none
  	 */
  	function getEventDefinitions(element, type) {
  	  var eventDefinitions = element.eventDefinitions;

  	  if (!eventDefinitions || !type) {
  	    return eventDefinitions;
  	  }

  	  return minDash.filter(eventDefinitions, function(definition) {
  	    return is(definition, type);
  	  });
  	}

  	/**
  	 * Returns error event definitions for a given element.
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>} collection of error event definitions
  	 */
  	function getErrorEventDefinitions(element) {
  	  return getEventDefinitions(element, 'bpmn:ErrorEventDefinition');
  	}

  	/**
  	 * Returns escalation event definitions for a given element.
  	 *
  	 * @param {ModdleElement} element
  	 *
  	 * @return {Array<ModdleElement>} collection of escalation event definitions
  	 */
  	function getEscalationEventDefinitions(element) {
  	  return getEventDefinitions(element, 'bpmn:EscalationEventDefinition');
  	}


  	// helper ////////////////

  	function is(element, type) {
  	  return (
  	    element &&
  	    typeof element.$instanceOf === 'function' &&
  	    element.$instanceOf(type)
  	  );
  	}

  	/**
  	 * Retrieves process variables defined in event definitions, e.g.
  	 *
  	 * <bpmn:escalationEventDefinition
  	 *   id="EscalationEventDefinition_1"
  	 *   escalationRef="Escalation_1"
  	 *   camunda:escalationCodeVariable="variable1"
  	 * />
  	 *
  	 * => Adds one variable "variable1" to the list.
  	 *
  	 * <bpmn:errorEventDefinition
  	 *   id="ErrorEventDefinition_1"
  	 *   errorRef="Error_1"
  	 *   camunda:errorCodeVariable="variable2"
  	 *   camunda:errorMessageVariable="variable3"
  	 * />
  	 *
  	 * => Adds two variables "variable2" & "variable3" to the list.
  	 *
  	 */
  	function extractEventDefinitionVariables(options) {
  	  var elements = options.elements,
  	      containerElement = options.containerElement,
  	      processVariables = options.processVariables;

  	  var addVariable = function(element, name) {
  	    var newVariable = createProcessVariable(
  	      element,
  	      name,
  	      containerElement
  	    );

  	    addVariableToList(processVariables, newVariable);
  	  };

  	  if (!minDash.isArray(elements)) {
  	    elements = [ elements ];
  	  }

  	  minDash.forEach(elements, function(element) {

  	    // (1) error event code + message variable
  	    var errorEventDefinitions = getErrorEventDefinitions(element);

  	    minDash.forEach(errorEventDefinitions, function(definition) {

  	      var errorCodeVariable = definition.get('errorCodeVariable'),
  	          errorMessageVariable = definition.get('errorMessageVariable');

  	      if (errorCodeVariable) {
  	        addVariable(element, errorCodeVariable);
  	      }

  	      if (errorMessageVariable) {
  	        addVariable(element, errorMessageVariable);
  	      }
  	    });

  	    // (2) escalation code variable
  	    var escalationEventDefinitions = getEscalationEventDefinitions(element);

  	    minDash.forEach(escalationEventDefinitions, function(definition) {

  	      var escalationCodeVariable = definition.get('escalationCodeVariable');

  	      if (escalationCodeVariable) {
  	        addVariable(element, escalationCodeVariable);
  	      }
  	    });

  	  });

  	  return processVariables;
  	}

  	var extractors = [
  	  extractOutputParameters,
  	  extractResultVariables,
  	  extractFormFields,
  	  extractOutMappings,
  	  extractEventDefinitionVariables
  	];

  	/**
  	 * @typedef {Object} ProcessVariable
  	 * @property {string} name
  	 * @property {Array<ModdleElement>} origin
  	 * @property {ModdleElement} scope
  	 */


  	/**
  	 * Extractors add ProcessVariables to the `options.processVariables` parameter.
  	 * @callback extractor
  	 * @param {Object} options
  	 * @param {Array<ModdleElement>} options.elements
  	 * @param {ModdleElement} options.containerElement
  	 * @param {Array<ProcessVariable>} options.processVariables
  	 */

  	// api /////////////////////////

  	/**
  	 * Retrieves all process variables for a given container element.
  	 * @param {ModdleElement} containerElement
  	 * @param {Array<extractor>} additionalExtractors
  	 *
  	 * @returns {Promise<Array<ProcessVariable>>}
  	 */
  	function getProcessVariables(containerElement, additionalExtractors = []) {
  	  const allPromises = [];

  	  var processVariables = [];

  	  // (1) extract all flow elements inside the container
  	  var elements = selfAndAllFlowElements([ containerElement ], false);

  	  // (2) extract all variables from the extractors
  	  minDash.forEach([ ...extractors, ...additionalExtractors ], function(extractor) {
  	    allPromises.push(
  	      extractor({
  	        elements: elements,
  	        containerElement: containerElement,
  	        processVariables: processVariables
  	      })
  	    );
  	  });

  	  return Promise.all(allPromises)
  	    .then(() => processVariables);
  	}

  	/**
  	 * Retrieves all variables which are available in the given scope
  	 *
  	 * * Exclude variables which are only available in other scopes
  	 * * Exclude variables which are produced by the given element
  	 * * Include variables which are available in parent scopes
  	 *
  	 * @param {string} scope
  	 * @param {ModdleElement} rootElement element from where to extract all variables
  	 * @param {Array<extractor>} additionalExtractors
  	 *
  	 * @returns {Promise<Array<ProcessVariable>>}
  	 */
  	async function getVariablesForScope(scope, rootElement, additionalExtractors = []) {

  	  var allVariables = await getProcessVariables(rootElement, additionalExtractors);

  	  var scopeElement = getElement(scope, rootElement);

  	  // (1) get variables for given scope
  	  var scopeVariables = minDash.filter(allVariables, function(variable) {
  	    return variable.scope.id === scopeElement.id;
  	  });

  	  // (2) get variables for parent scopes
  	  var parents = getParents(scopeElement);

  	  var parentsScopeVariables = minDash.filter(allVariables, function(variable) {
  	    return minDash.find(parents, function(parent) {
  	      return parent.id === variable.scope.id;
  	    });
  	  });

  	  return combineArrays(scopeVariables, parentsScopeVariables);
  	}

  	// helpers ////////////////////

  	function combineArrays(a, b) {
  	  return a.concat(b);
  	}

  	dist.getProcessVariables = getProcessVariables;
  	dist.getVariablesForScope = getVariablesForScope;
  	return dist;
  }

  requireDist();

  const BpmnPropertiesPanelContext = J$1({
    selectedElement: null,
    injector: null,
    getService() {
      return null;
    }
  });

  function useService(type, strict) {
    const {
      getService
    } = x(BpmnPropertiesPanelContext);
    return getService(type, strict);
  }

  var AssociationIcon = function AssociationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        stroke: "#000",
        strokeWidth: "2",
        fill: "none",
        strokeDasharray: "3.3,6",
        strokeLinecap: "square",
        d: "m1.5 30.5 29-29"
      })
    });
  };
  AssociationIcon.defaultProps = {
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  };
  var BusinessRuleTaskIcon = function BusinessRuleTaskIcon(props) {
    return u("svg", {
      ...props,
      children: [u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5ZM5.296 7.398v12.665h16.87V7.398H5.296Zm.718 4.386h15.433v3.44H9.985v-3.432h-.719v3.431H6.014v-3.44Zm0 4.158h3.252v3.403H6.014v-3.403Zm3.97 0h11.463v3.403H9.985v-3.403Z"
      }), u("path", {
        d: "M6.079 8.209v3.587H21.44V8.209z"
      })]
    });
  };
  BusinessRuleTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var CallActivityIcon = function CallActivityIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M24.978 3c3.761 0 6.89 2.979 7.018 6.695l.004.238V22.4c0 3.747-3.05 6.804-6.783 6.93l-.24.003H7.023c-3.761 0-6.89-2.978-7.018-6.695L0 22.4V9.933C0 6.187 3.05 3.13 6.783 3.004L7.023 3h17.955Zm0 3.667H7.022c-1.842 0-3.255 1.344-3.35 3.079l-.005.187V22.4c0 1.761 1.35 3.167 3.16 3.262l.195.005L10 25.666V15h12v10.666h2.978c1.842 0 3.255-1.344 3.35-3.079l.005-.187V9.933c0-1.761-1.35-3.166-3.16-3.261l-.195-.005Zm-3.732 9.087H10.754v9.912h10.491v-9.912Zm-4.475 1.817v2.658h2.658v1.542H16.77v2.658H15.23V21.77H12.57V20.23h2.658V17.57h1.542Z"
      })
    });
  };
  CallActivityIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var CollaborationIcon = function CollaborationIcon(props) {
    return u("svg", {
      ...props,
      children: u("g", {
        fillRule: "evenodd",
        children: [u("path", {
          fillRule: "nonzero",
          d: "M0 0v8.62h32V0H0zm1.655 7.054v-5.37h28.62v5.37H1.656zM0 23.38V32h32v-8.62H0zm1.655 7.054v-5.37h28.62v5.37H1.656z"
        }), u("path", {
          d: "m24 8 4 7h-8l4-7Zm0 2-2.28 4h4.56L24 10ZM23.5 21h1v3h-1zM23.5 15h1v3h-1zM8 24l-4-7h8l-4 7Zm0-2 2.28-4H5.72L8 22ZM7.5 8h1v3h-1zM7.5 14h1v3h-1z"
        })]
      })
    });
  };
  CollaborationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ConditionalFlowIcon = function ConditionalFlowIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M32 .041S20.42 5.95 14.537 8.713c1.26 1.15 2.432 2.392 3.648 3.588-5.703 5.78-3.15 3.303-8.087 8.316l-8.472 1.377L0 32l10.006-1.626.098-.598 1.279-7.873c4.975-5.052 2.403-2.555 8.118-8.346 1.218 1.214 2.43 2.435 3.648 3.648C26.29 11.018 32 .041 32 .041ZM9.603 22.397 8.54 28.91 2.03 29.97l1.061-6.515 6.512-1.058Z"
      })
    });
  };
  ConditionalFlowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ConnectionIcon = function ConnectionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M32 .06S20.33 6.014 14.403 8.798c1.27 1.16 2.451 2.41 3.676 3.616L0 30.734 1.325 32l18.08-18.32c1.227 1.223 2.448 2.453 3.676 3.676C26.247 11.12 32 .06 32 .06Z"
      })
    });
  };
  ConnectionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var DataInputOutputAssociationIcon = function DataInputOutputAssociationIcon(props) {
    return u("svg", {
      ...props,
      children: [u("path", {
        stroke: "#000",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeDasharray: "1.1,4.3",
        d: "M1.5 30.5 27 5"
      }), u("path", {
        d: "M31.803.197 26.5 16.107l-1.52-1.52 3.783-11.35-11.35 3.783-1.52-1.52z"
      })]
    });
  };
  DataInputOutputAssociationIcon.defaultProps = {
    width: "32",
    height: "32",
    xmlns: "http://www.w3.org/2000/svg"
  };
  var DataInputIcon = function DataInputIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M20.833 0H3.488v32H28V7.36L20.833 0Zm-2.105 1.818v7.507h7.454v20.857H5.306V1.818h13.422Zm1.818.493 5.06 5.196h-5.06V2.311Zm-9.182.86v3.744H7.081v3.222h4.283v3.743l5.7-5.354-5.7-5.354Zm.808 1.868 3.711 3.487-3.71 3.487V9.329H7.888V7.723h4.283V5.039Z"
      })
    });
  };
  DataInputIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var DataObjectIcon = function DataObjectIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M21.345 0H4v32h24.512V7.36L21.345 0ZM19.24 1.818v7.507h7.454v20.857H5.818V1.818H19.24Zm1.818.493 5.06 5.196h-5.06V2.311Z"
      })
    });
  };
  DataObjectIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var DataOutputIcon = function DataOutputIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M20.833 0H3.488v32H28V7.36L20.833 0Zm-2.105 1.818v7.507h7.454v20.857H5.306V1.818h13.422Zm1.818.493 5.06 5.196h-5.06V2.311Zm-9.182.86v3.744H7.081v3.222h4.283v3.743l5.7-5.354-5.7-5.354Z"
      })
    });
  };
  DataOutputIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var DataStoreIcon = function DataStoreIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.008 1c-3.712 0-7.417.306-10.319.939-1.45.316-2.7.71-3.68 1.226C1.065 3.662.297 4.304.061 5.23a.823.823 0 0 0-.035.15L0 5.502l.017.084c-.012 7.41 0 14.46 0 22.08l.017.082c.203.985.995 1.656 1.975 2.172.98.517 2.23.91 3.68 1.226 2.902.633 6.607.94 10.319.94 3.711 0 7.416-.307 10.318-.94 1.451-.316 2.701-.71 3.68-1.226.98-.516 1.772-1.187 1.975-2.172l.017-.082V5.541a.825.825 0 0 0 0-.106v-.016l-.002-.013a.823.823 0 0 0-.046-.197c-.244-.916-1.007-1.55-1.943-2.044-.98-.516-2.23-.91-3.68-1.226C23.423 1.306 19.718 1 16.006 1Zm0 1.646c3.62 0 7.245.308 9.968.901 1.36.297 2.497.67 3.263 1.074.612.323.932.643 1.063.882-.131.24-.451.56-1.063.882-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.901-1.361-.297-2.497-.67-3.264-1.074-.611-.322-.931-.642-1.062-.882.13-.24.451-.56 1.062-.882.767-.403 1.903-.777 3.264-1.074 2.723-.593 6.348-.9 9.968-.9ZM1.664 7.647c.112.067.227.132.345.194.98.517 2.23.91 3.68 1.226 2.902.633 6.607.94 10.319.94 3.711 0 7.416-.307 10.318-.94 1.451-.316 2.701-.71 3.68-1.226.119-.062.234-.127.346-.194v1.93c-.08.245-.398.619-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.9-1.361-.298-2.497-.671-3.264-1.075-.714-.376-1.032-.75-1.112-.995v-1.93Zm0 4.187c.112.067.227.132.345.195.98.516 2.23.91 3.68 1.226 2.902.632 6.607.938 10.319.938 3.711 0 7.416-.306 10.318-.938 1.451-.317 2.701-.71 3.68-1.226.119-.063.234-.128.346-.195v1.93c-.08.245-.398.619-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.901-9.968.901-3.62 0-7.245-.307-9.968-.9-1.361-.298-2.497-.67-3.264-1.075-.714-.376-1.032-.75-1.112-.995v-1.93Zm0 4.188c.112.067.227.131.345.194.98.516 2.23.91 3.68 1.226 2.902.633 6.607.939 10.319.939 3.711 0 7.416-.306 10.318-.94 1.451-.316 2.701-.709 3.68-1.225.119-.063.234-.127.346-.194V27.47c-.08.245-.398.618-1.113.995-.766.404-1.902.777-3.263 1.074-2.723.594-6.349.9-9.968.9-3.62 0-7.245-.306-9.968-.9-1.361-.297-2.497-.67-3.264-1.074-.714-.377-1.032-.75-1.112-.995V16.022Z"
      })
    });
  };
  DataStoreIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var DefaultFlowIcon = function DefaultFlowIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M32 .06S20.33 6.014 14.403 8.798c1.27 1.16 2.451 2.41 3.676 3.616L6.84 23.804H.046v1.755h5.063L0 30.735 1.325 32l6.357-6.441h7.145v-1.756H9.414l9.99-10.123c1.228 1.223 2.45 2.453 3.677 3.676C26.247 11.12 32 .06 32 .06Z"
      })
    });
  };
  DefaultFlowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventCancelIcon = function EndEventCancelIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm-3.955 3.918L8.94 12.072l3.985 3.985-3.913 3.913 3.048 3.047 3.913-3.913 3.987 3.987 3.096-3.096-3.987-3.987 3.913-3.913-3.047-3.048-3.913 3.913-3.985-3.985Z"
      })
    });
  };
  EndEventCancelIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventCompensationIcon = function EndEventCompensationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm-.56 5.744-7.407 5.23 7.408 5.234v-5.057c2.384 1.687 4.771 3.371 7.157 5.057V10.801l-7.157 5.054v-5.054Z"
      })
    });
  };
  EndEventCompensationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventErrorIcon = function EndEventErrorIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm6.132 4.166-3.633 7.363-4.516-5.874-4.102 12.131 4.599-5.91 4.743 5.427 2.909-13.137Z"
      })
    });
  };
  EndEventErrorIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventEscalationIcon = function EndEventEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm.006 3.9c-1.672 4.653-2.733 9.5-4.406 14.153 1.535-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.497-4.71-2.91-9.445-4.406-14.155Z"
      })
    });
  };
  EndEventEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventLinkIcon = function EndEventLinkIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.532 18.532 0 0 0 15.676 0Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm1.78 4.065v3.555H9.779v6.713h7.994v3.554l5.828-6.91-5.828-6.912Z"
      })
    });
  };
  EndEventLinkIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventMessageIcon = function EndEventMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.532 18.532 0 0 0 15.676 0Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm-5.91 5.448 6.041 4.9 6.04-4.9H10.084Zm-1.34 1.137v9.92h14.513v-9.718l-7.132 5.786-7.381-5.988Z"
      })
    });
  };
  EndEventMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventMultipleIcon = function EndEventMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676 0C7.943.007.834 6.45.104 14.16c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 4.958 23.394.313 16.978.032A18.529 18.529 0 0 0 15.676 0Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm.011 3.039-7.619 5.53 2.91 8.95h9.418l2.91-8.95-7.619-5.53Z"
      })
    });
  };
  EndEventMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventNoneIcon = function EndEventNoneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.84.042C8.654-.01 1.913 5.437.4 12.454-1.057 18.62 1.554 25.495 6.784 29.09c5.076 3.636 12.31 3.92 17.59.544 5.309-3.251 8.435-9.744 7.445-15.921C30.91 7.307 25.795 1.738 19.442.422a16.064 16.064 0 0 0-3.602-.38Zm.382 5.01c5.28-.017 10.13 4.353 10.669 9.61.687 5.025-2.552 10.281-7.423 11.792-4.754 1.617-10.486-.447-12.962-4.856-2.74-4.575-1.574-11.094 2.768-14.27a11.05 11.05 0 0 1 6.948-2.276Z"
      })
    });
  };
  EndEventNoneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventSignalIcon = function EndEventSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm.006 3.492c-2.261 4.07-4.532 8.136-6.797 12.204h13.595L15.999 8.55Z"
      })
    });
  };
  EndEventSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EndEventTerminateIcon = function EndEventTerminateIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.676.051C7.943.058.834 6.501.104 14.21c-.783 6.565 2.912 13.427 8.942 16.216 5.6 2.737 12.789 1.87 17.434-2.344 4.725-4.09 6.79-11.06 4.714-17.006C29.22 5.009 23.394.364 16.978.083A18.532 18.532 0 0 0 15.676.05Zm.317 5.006c5.695-.165 10.916 4.858 10.983 10.555.246 5.212-3.67 10.33-8.864 11.204-5.026 1.007-10.6-1.898-12.36-6.777-1.894-4.826.039-10.928 4.649-13.46a11.082 11.082 0 0 1 5.592-1.522Zm.006 2.859c-5.264-.2-9.495 5.551-7.755 10.516 1.366 5.085 8.108 7.436 12.339 4.301 4.455-2.807 4.708-9.943.462-13.058A8.128 8.128 0 0 0 16 7.915Z"
      })
    });
  };
  EndEventTerminateIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var EventSubProcessExpandedIcon = function EventSubProcessExpandedIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M7.295 4.78h1.779V3.003h-1.78V4.78Zm3.558 0h1.779V3.003h-1.78V4.78Zm3.557 0h1.78V3.003h-1.78V4.78Zm3.558 0h1.78V3.003h-1.78V4.78Zm3.558 0h1.779V3.003h-1.779V4.78Zm3.558 0c.55.014 1.106-.034 1.654.045l.245-1.762c-.629-.096-1.266-.05-1.9-.061V4.78ZM5.732 3.004a5.933 5.933 0 0 0-.915.093c.111.582.226 1.164.315 1.75.358-.101.947.098.746-.483-.096-.382.164-1.208-.146-1.36Zm22.372 2.281c.427.234.812.547 1.13.915.42-.4 1.002-.777 1.33-1.18a5.863 5.863 0 0 0-1.593-1.289l-.867 1.554Zm-25.27-1.44c-.587.354-1.11.811-1.539 1.345.47.333.96.86 1.417 1.077.299-.362.66-.673 1.065-.913-.328-.493-.55-1.055-.944-1.509ZM30.515 7.26c-.563.046-.557.342-.378.784.154.25-.097.862.25.85.525-.023 1.14.043 1.612-.032a5.891 5.891 0 0 0-.362-2.027l-1.122.425ZM.268 7.114A6.042 6.042 0 0 0 0 9.052h1.78c-.013-.5.047-1.003.208-1.478L.296 7.027l-.026.079-.002.008ZM30.22 12.45H32v-1.779h-1.779v1.779Zm-30.22.16h1.78v-1.779H0v1.78Zm30.22 3.398H32v-1.78h-1.779v1.78Zm-30.22.16h1.78v-1.779H0v1.779Zm30.22 3.398H32v-1.78h-1.779v1.78Zm-30.22.16h1.78v-1.78H0v1.78Zm30.22 3.397H32v-1.779h-1.779v1.78Zm-30.22.16h1.78v-1.778H0v1.778Zm30.137 1.47a4.059 4.059 0 0 1-.522 1.32c.506.283 1.046.715 1.53.908a5.836 5.836 0 0 0 .744-1.918c-.576-.094-1.209-.264-1.752-.31Zm-29.984.51c.157.676.435 1.325.82 1.904l1.486-.977a4.065 4.065 0 0 1-.577-1.347l-1.73.42Zm28.427 1.943c-.371.277-.79.49-1.234.627l.548 1.693a5.84 5.84 0 0 0 1.835-.96l-1.082-1.412-.066.05-.001.002Zm-26.164 1.47c.567.413 1.21.722 1.886.907.14-.569.343-1.175.444-1.722a4.062 4.062 0 0 1-1.283-.624l-1.047 1.438Zm3.88 1.119h1.779v-1.78h-1.78v1.78Zm3.55 0h1.787v-1.78H9.846v1.78Zm3.565 0h1.78v-1.78h-1.78v1.78Zm3.558 0h1.78v-1.78h-1.78v1.78Zm3.451 0h1.743v-1.78h-1.743v1.78Zm3.665 0h1.779v-1.78h-1.78v1.78Zm-1.922-.545V16.776H9.846V29.25h12.318ZM10.967 17.905h10.068V27.97H10.967V17.905Zm1.336 3.998v1.711h7.396v-1.711h-7.396Z",
        opacity: ".97"
      })
    });
  };
  EventSubProcessExpandedIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayComplexIcon = function GatewayComplexIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.001 0a1.29 1.29 0 0 0-.917.373L.373 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.917.372A1.294 1.294 0 0 0 16.002 0ZM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18Zm-.327 6.79v.007l-.145.027-.118.08-.083.123-.028.145v4.954L11.793 10.8l-.125-.08-.14-.029-.144.027-.122.082-.46.46-.085.125-.026.142.028.14.08.125 3.505 3.505H9.347l-.001-.002-.145.032-.118.08-.083.122-.028.146v.652l.029.147.082.119.12.08.144.032h4.956L10.8 20.207v-.001l-.084.124-.026.142.028.14.08.124.46.461.126.082.14.029.143-.027.124-.084L15.3 17.69v4.964-.001l.028.147.082.12.12.08.144.031h.652l.148-.03.118-.08.083-.12.028-.146v-4.962l3.505 3.505.126.082.14.027.142-.027.124-.084.461-.46.083-.123s.028-.144.027-.146l-.028-.14-.082-.126-3.496-3.496h4.948l.148-.03.119-.08.082-.12.028-.147v-.652l-.028-.145-.083-.122-.119-.08s-.147-.033-.147-.031h-4.964l3.512-3.512.082-.122.029-.144-.028-.14-.084-.124-.46-.461-.123-.082-.14-.027-.145.027-.122.082-3.507 3.507V9.348l-.028-.146-.082-.122-.12-.08-.147-.029h-.652Z"
      })
    });
  };
  GatewayComplexIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayEventBasedIcon = function GatewayEventBasedIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16 0a1.29 1.29 0 0 0-.918.373L.371 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.915.372A1.294 1.294 0 0 0 16 0Zm-.002 2.181 13.821 13.821-13.821 13.821-13.821-13.82L15.998 2.18Zm0 5.876-.254.185-7.377 5.355 2.915 8.964h9.433l2.915-8.964-7.631-5.54Zm0 1.07 6.614 4.8-2.526 7.769h-8.175l-2.526-7.768 6.614-4.802Z"
      })
    });
  };
  GatewayEventBasedIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayNoneIcon = function GatewayNoneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M.373 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.917.373a1.313 1.313 0 0 0-1.833 0L.373 15.084Zm1.806.918L16 2.182l13.821 13.82L16 29.823 2.179 16.003Z"
      })
    });
  };
  GatewayNoneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayOrIcon = function GatewayOrIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.001 0a1.29 1.29 0 0 0-.917.373L.373 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.917.372A1.294 1.294 0 0 0 16.002 0ZM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18Zm0 6.379a7.447 7.447 0 0 0-7.44 7.441A7.447 7.447 0 0 0 16 23.443 7.447 7.447 0 0 0 23.443 16a7.447 7.447 0 0 0-7.441-7.441Zm0 .825a6.61 6.61 0 0 1 6.617 6.616A6.61 6.61 0 0 1 16 22.618 6.61 6.61 0 0 1 9.385 16 6.61 6.61 0 0 1 16 9.385Z"
      })
    });
  };
  GatewayOrIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayParallelIcon = function GatewayParallelIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.001 0a1.29 1.29 0 0 0-.917.373L.373 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.917.372A1.294 1.294 0 0 0 16.002 0ZM16 2.181l13.821 13.821L16 29.823 2.179 16.003 16 2.18Zm-.377 5.708-.168.032-.136.092-.096.14-.032.168v6.868h-6.87l-.002-.002-.166.037-.137.092v-.002l-.095.141-.033.167v.753s.032.169.034.17l.094.138.138.092.167.036h6.87v6.867l-.001-.001.033.17.095.138.138.092s.166.035.167.037h.752l.17-.036.137-.092.095-.137.033-.17v-6.867h6.868l.17-.035.137-.092.095-.137.033-.17v-.753s-.033-.165-.032-.167l-.096-.14-.138-.093s-.17-.037-.17-.035H16.81V8.323l-.033-.168-.094-.14-.138-.092-.17-.034h-.752Z"
      })
    });
  };
  GatewayParallelIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GatewayXorIcon = function GatewayXorIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16 0a1.29 1.29 0 0 0-.918.373L.371 15.084a1.316 1.316 0 0 0 .002 1.834l14.71 14.709a1.313 1.313 0 0 0 1.833 0l14.711-14.711a1.316 1.316 0 0 0-.002-1.834L16.915.372A1.294 1.294 0 0 0 16 0Zm-.002 2.181 13.821 13.821-13.821 13.821-13.821-13.82L15.998 2.18Zm-5.162 7.69-.166.032-.141.096-.532.532s-.097.142-.097.144l-.03.164.032.162.093.144 4.857 4.858-4.855 4.855v-.001L9.9 21l-.03.164.032.162s.093.142.093.144l.531.532.146.095.162.032.164-.03.144-.097 4.855-4.856 4.857 4.857.145.095.162.032.164-.03.144-.097.531-.532.095-.14.033-.168-.033-.162-.095-.146L17.144 16 22 11.144l.095-.14.033-.166-.033-.163-.097-.144-.532-.532-.14-.095-.163-.032-.166.032-.141.095L16 14.855l-4.858-4.858v-.002l-.144-.092-.162-.032Z"
      })
    });
  };
  GatewayXorIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var GroupIcon = function GroupIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.34.016c-2.333.025-4.684 1.77-5.29 4.17C.608 5.848.88 7.608.804 9.314v2.922h2.041c.038-2.332-.076-4.673.062-7C3.14 3.355 4.869 1.938 6.643 2.04h8.956V.009c-3.086 0-6.173-.02-9.258 0v.007Zm13.094 2.023h1.92V.009h-1.92v2.03Zm5.756 0c1.265-.069 2.66.045 3.602 1.055 1.036.983 1.201 2.523 1.122 3.91v6.313h2.078c-.03-2.677.062-5.36-.047-8.032-.17-2.743-2.62-5.111-5.215-5.236-.511-.064-1.027-.02-1.54-.033v2.023ZM.803 18.319h2.041v-2.026H.804v2.026Zm29.11 1.084h2.08v-2.03h-2.08v2.03ZM.804 26.148c.004 2.218 1.393 4.366 3.313 5.28 1.728.853 3.681.448 5.521.544.43-.112 1.29.231 1.435-.183v-1.847c-1.788-.043-3.584.094-5.365-.082-1.67-.354-2.919-2.048-2.863-3.844v-3.644H.804v3.777Zm29.11-.068c.04 1.961-1.508 3.787-3.381 3.842-1.954.06-3.914.02-5.87.026v2.03c2.118-.042 4.242.08 6.355-.063 2.524-.264 4.818-2.644 4.94-5.323.08-1.039.014-2.085.035-3.126h-2.078v2.613Zm-15.006 5.898h1.92v-2.03h-1.92v2.03Z"
      })
    });
  };
  GroupIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchCancelIcon = function IntermediateEventCatchCancelIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.111.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.454 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.215-2.282-2.022-5.3-3.217-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.082 11.082 0 0 1 16 5.021Zm-3.956 3.946-3.096 3.097 3.985 3.985-3.913 3.913 3.047 3.048 3.913-3.913 3.988 3.987 3.097-3.096L19.076 16l3.914-3.913-3.048-3.048-3.913 3.913-3.986-3.985Zm-.002 1.222 3.988 3.987 3.913-3.913 1.826 1.826-3.913 3.913 3.985 3.986-1.873 1.873-3.985-3.985-3.913 3.913-1.827-1.827 3.914-3.913-3.988-3.987 1.873-1.873Z"
      })
    });
  };
  IntermediateEventCatchCancelIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchCompensationIcon = function IntermediateEventCatchCompensationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm-.56 5.772-7.408 5.231 7.409 5.234v-5.057c2.385 1.687 4.771 3.371 7.157 5.057V10.793l-7.157 5.055v-5.055Zm-.865 1.665v7.125l-5.048-3.562 5.048-3.563Zm7.161 0v7.132l-5.048-3.566 5.048-3.566Z"
      })
    });
  };
  IntermediateEventCatchCompensationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchConditionIcon = function IntermediateEventCatchConditionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.97.04h-.127C8.713-.018 2.003 5.334.437 12.286c-1.51 6.123.98 13.005 6.136 16.665 5.125 3.788 12.546 4.105 17.912.623 5.272-3.276 8.33-9.766 7.325-15.916-.904-6.241-5.79-11.7-11.95-13.143A16.082 16.082 0 0 0 15.97.04Zm-.181 1.724c.115 0 .23 0 .347.003 6.625-.066 12.823 5.149 13.89 11.69 1.13 5.91-1.908 12.349-7.262 15.138-5.473 3.013-12.866 1.884-17.116-2.726C1.291 21.372.444 13.914 3.802 8.602c2.493-4.112 7.169-6.819 11.987-6.838Zm.283 1.554c-.117 0-.234.002-.351.005-6.1 0-11.691 5.049-12.346 11.114-.78 5.684 2.795 11.612 8.218 13.52 5.139 1.943 11.416.101 14.624-4.38 3.461-4.583 3.262-11.538-.596-15.831-2.36-2.747-5.924-4.423-9.549-4.428Zm-.078 1.695c.078 0 .156 0 .234.003 5.4 0 10.321 4.556 10.734 9.942.563 5.13-2.958 10.364-7.971 11.678-4.832 1.41-10.457-.935-12.746-5.446-2.463-4.559-1.2-10.795 3.014-13.883a11.072 11.072 0 0 1 6.735-2.294Zm-5.352 4.266V22.761h10.716V9.279H10.642Zm.863.866h8.987v11.75h-8.987v-11.75Zm.927 1.323v.862h7.133v-.862h-7.133Zm0 2.602v.866h7.133v-.866h-7.133Zm0 3.008v.862h7.133v-.862h-7.133Zm0 2.717v.863h7.133v-.863h-7.133Z"
      })
    });
  };
  IntermediateEventCatchConditionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchErrorIcon = function IntermediateEventCatchErrorIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm6.132 4.194c-1.21 2.455-2.422 4.91-3.633 7.364l-4.516-5.875-4.103 12.133 4.6-5.912c1.58 1.81 3.162 3.619 4.744 5.429L22.13 9.215ZM14.383 13.1l4.295 5.445 1.073-2.387-1.027 4.131-4.384-5.157-1.778 2.75 1.821-4.782Z"
      })
    });
  };
  IntermediateEventCatchErrorIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchEscalationIcon = function IntermediateEventCatchEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm.006 3.927c-1.672 4.654-2.734 9.502-4.406 14.155 1.534-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.496-4.71-2.91-9.446-4.406-14.156Zm.032 2.929c.822 2.586 1.598 5.186 2.42 7.771l-2.42-2.612c-.682.597-2.452 2.884-2.338 2.388.87-2.487 1.447-5.067 2.338-7.547Z"
      })
    });
  };
  IntermediateEventCatchEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchLinkIcon = function IntermediateEventCatchLinkIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm1.78 4.093v3.555H9.785v6.714h7.994v3.554l5.829-6.911-5.83-6.912Zm.974 2.584 3.61 4.295-3.61 4.294v-1.933h-7.88v-4.688h7.88v-1.968Z"
      })
    });
  };
  IntermediateEventCatchLinkIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchMessageIcon = function IntermediateEventCatchMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm-7.245 5.475v11.06h14.502v-11.06H8.754Zm3.222 1.728h8.057c-1.427.878-2.854 2.806-4.281 3.016l-3.776-3.016Zm9.554 1.017v6.587H10.48V13.24l5.524 4.414 5.526-4.414Z"
      })
    });
  };
  IntermediateEventCatchMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchMultipleIcon = function IntermediateEventCatchMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 4.975Zm.006 3.073-7.62 5.531 2.91 8.95h9.42l2.91-8.95-7.62-5.53Zm0 1.067 6.604 4.794-2.523 7.757h-8.162l-2.522-7.757 6.603-4.794Z"
      })
    });
  };
  IntermediateEventCatchMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingConditionIcon = function IntermediateEventCatchNonInterruptingConditionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M10.638 9.563V23.056h10.724V9.563H10.638Zm.863.866h8.995v11.76H11.5V10.43Zm.928 1.324v.862h7.139v-.862h-7.14Zm0 2.605v.866h7.139v-.866h-7.14Zm0 3.01v.863h7.139v-.863h-7.14Zm0 2.72v.863h7.139v-.864h-7.14ZM15.999.308h-.004l-.188.001h-.011l-.188.004h-.011L15.41.32h-.011l-.187.008h-.005L15.2.33l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.37h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003.178-.001h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 1.023l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.62h-.005l-.005-.002-.182-.035h-.006L18.938.58l-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.43 17.783.41l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.37h-.005L17.38.368l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.328h-.011L16.6.32h-.011l-.187-.006h-.011L16.204.31h-.011L16.005.31H16Zm9.016 2.935-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027Zm-18.381.344-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003L4.682 5l-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023ZM16 3.595h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01L16.32 3.6h-.011l-.147-.003h-.011l-.147-.001H16Zm-5.482 1.366-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022Zm13.91 2.116-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023ZM4.45 13.135l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029Zm26.698 1.601-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187V16.7l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02Zm-30.21.572-.161.001-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158-.074-.155-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178-.001-.177v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057-.159-.028Zm26.798 2.024-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14v-.005l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022ZM6.841 23.019l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006Zm15.063 2.701-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016ZM6.33 27.127l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006Zm19.215.087-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingConditionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingEscalationIcon = function IntermediateEventCatchNonInterruptingEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.012 9.222c-1.673 4.657-2.735 9.508-4.409 14.164 1.536-1.526 2.874-3.236 4.41-4.762l4.408 4.762c-1.497-4.712-2.911-9.451-4.409-14.164Zm.032 2.93c.823 2.588 1.599 5.19 2.421 7.777l-2.42-2.614c-.683.598-2.454 2.886-2.34 2.39.871-2.489 1.448-5.07 2.34-7.552ZM16.012.312c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311Zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 0 0-5.06-6.006c-.1-.044-.203-.07-.31-.082ZM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 0 1 4.327-5.56c.476-.515.09-1.419-.612-1.431Zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094Zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478Zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 0 0-.453-.153ZM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 0 1-.334-5.808.874.874 0 0 0-.794-.865Zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 0 0 1.821-8.372.876.876 0 0 0-.812-.667Zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 0 1-1.603-6.861.876.876 0 0 0-.778-.707Zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 0 0-.825-.835ZM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 0 1-4.723-3.396.899.899 0 0 0-.599-.197Zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521ZM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 0 1-6.345-3.066.929.929 0 0 0-.466-.107Zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingMessageIcon = function IntermediateEventCatchNonInterruptingMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M8.742 10.464v11.072h14.516V10.464H8.742Zm3.224 1.73h8.066a69569 69569 0 0 0-4.034 3.22l-4.032-3.22Zm9.565 1.018v6.594H10.469v-6.593L16 17.63l5.532-4.419ZM16 0h-.005l-.188.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06h-.005L17.38.06l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0H16Zm9.015 2.935-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027ZM6.634 3.28l-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023ZM16 3.286h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.011l-.147-.001H16Zm-5.482 1.366-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022Zm13.91 2.116-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023ZM4.45 12.826l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029Zm26.698 1.601-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02ZM.938 15 .777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15Zm26.798 2.024-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022ZM6.841 22.71l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006Zm15.063 2.701-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016ZM6.33 26.818l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006Zm19.215.087-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingMultipleIcon = function IntermediateEventCatchNonInterruptingMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "m23.637 13.902-7.625-5.535-7.624 5.535 2.912 8.956h9.425l2.912-8.956Zm-1.017.33-2.524 7.762H11.93l-2.524-7.762 6.607-4.796 6.608 4.796ZM16.012.311c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311Zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 0 0-5.06-6.006c-.1-.044-.203-.07-.31-.082ZM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 0 1 4.327-5.56c.476-.515.09-1.419-.612-1.431Zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094Zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478Zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 0 0-.453-.153ZM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 0 1-.334-5.808.874.874 0 0 0-.794-.865Zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 0 0 1.821-8.372.876.876 0 0 0-.812-.667Zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 0 1-1.603-6.861.876.876 0 0 0-.778-.707Zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 0 0-.825-.835ZM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 0 1-4.723-3.396.899.899 0 0 0-.599-.197Zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521ZM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 0 1-6.345-3.066.929.929 0 0 0-.466-.107Zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingParallelIcon = function IntermediateEventCatchNonInterruptingParallelIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M13.51 9.081v4.428H9.08v4.982h4.428v4.428h4.982V18.49h4.428v-4.982H18.49V9.081h-4.982Zm.83.83h3.32v4.428h4.429v3.322H17.66v4.428h-3.32v-4.454H9.91v-3.296h4.428V9.911ZM16 0h-.005l-.188.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.011L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.185.027h-.005l-.005.001-.184.029h-.005l-.005.001-.183.031-.006.001-.005.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.176.027.17.03.174.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.087-.135.061-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.145-.073-.128-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.006-.001-.183-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06h-.005L17.38.06l-.187-.015h-.005l-.005-.001-.187-.013h-.011L16.8.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0H16Zm9.015 2.935-.16.004-.158.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.126.125.124.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.084.152.084.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.16-.016.155-.046.144-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.003-.005-.002-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.003-.005-.101-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.005-.003-.004-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.004-.004-.003-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.004-.004-.132-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027ZM6.634 3.28l-.161.008-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.004-.003.005-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.004-.003.005-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023ZM16 3.286h-.005l-.148.001h-.01l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.047.12.048.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.139-.107-.12-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.006-.002-.005-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.142-.031-.005-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.002-.143-.025-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.011l-.147-.001H16Zm-5.482 1.366-.16.008-.157.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.005.003-.004.004-.11.096-.004.004-.004.003-.11.098-.003.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.004.004-.003.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.004-.086.118-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.03.15-.057.138-.085.119-.109.082-.105.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022Zm13.91 2.116-.162.008-.157.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.025.159.055.152.082.138.086.103.09.09.094.098.092.099.093.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.114.068.118.067.115.065.118.064.117.062.117.061.121.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.048.127.047.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.085.137.11.119.129.096.145.07.155.043.16.013.161-.017.154-.046.144-.075.126-.1.106-.12.082-.14.055-.151.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.06-.132-.001-.005-.002-.004-.061-.132-.003-.004-.002-.005-.063-.13-.002-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.074-.125-.002-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.081-.12-.003-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.118-.003-.004-.004-.004-.087-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.094-.113-.003-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.11-.004-.003-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023ZM4.45 12.826l-.161.002-.158.032-.15.06-.135.088-.118.11-.094.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.005-.019.145v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.005l-.001.006-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.005.033.142v.005l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.104.102-.125.076-.142.049-.153.02-.16-.011-.161-.031-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.133-.024-.133-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.133.01-.138.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029Zm26.698 1.601-.161.01-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.025.175-.026.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.16-.062.165-.062.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.079.158-.08.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.119.13.097.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.005.002-.004.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.171.001-.005.002-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.181.001-.005.001-.005.037-.182.002-.005v-.005l.036-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02ZM.938 15 .777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.004.074.17.002.005.002.004.076.169.002.004.002.005.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.157-.07-.16-.068-.16-.067-.165-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15Zm26.798 2.024-.16.007-.157.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.133-.026.133-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.063.119-.062.116-.067.119-.066.116-.069.115-.069.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.107-.085.11-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.081-.12.003-.005.003-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.005.003-.004.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.002-.005.003-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.001-.006.042-.138.001-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.142.001-.005.001-.005.031-.141.001-.006.002-.005.029-.142v-.005l.002-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022ZM6.841 22.71l-.16.024-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.109.04.048.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.105.004.004.004.004.103.105.004.004.004.003.105.104.003.004.004.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.004.003.005.004.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.002.126.073.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.067.005.003.004.002.13.066.004.002.005.003.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.002.133.057.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.16-.015.156-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.159-.061-.149-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.08-.11-.08-.109-.081-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006Zm15.063 2.701-.16.014-.156.044-.12.057-.06.034-.12.066-.117.064-.118.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.035-.13.036-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021.005-.001h.006l.143-.023.006-.001h.005l.143-.025h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.037h.005l.005-.002.14-.038.005-.002h.005l.14-.04.005-.002.005-.001.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.057.005-.002.005-.002.132-.057.005-.003.005-.002.132-.06.005-.001.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.003.005-.002.128-.066.005-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.003.065-.037.132-.093.112-.115.089-.135.062-.149.034-.157.003-.161-.026-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.046-.16-.016ZM6.33 26.818l-.16.023-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.004.003.005.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.002.162.088.005.003.004.002.164.086.005.003.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.168.076.005.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.06.005.003.005.001.175.06.005.001.005.002.176.057.005.001.005.002.176.055.006.001.005.002.177.052.005.002.005.001.178.05.005.002.005.002.178.048.006.001.005.002.179.046.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.17-.044-.168-.046-.167-.047-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006Zm19.215.087-.16.01-.157.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.158.073-.157.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.047-.17.046-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.007.133-.016.115-.024.005-.001.005-.001.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002.005-.001.18-.046.004-.002h.005l.179-.05h.005l.005-.002.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.004-.002.005-.002.172-.068.005-.002.005-.002.171-.07.005-.001.005-.002.17-.072.005-.002.004-.002.17-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.003.167-.08.004-.002.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.003.163-.086.005-.002.005-.003.162-.088.005-.002.005-.003.161-.09.005-.002.004-.003.16-.092.005-.003.005-.002.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.003.155-.101.005-.003.004-.003.154-.104.004-.003.004-.003.153-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.112.004-.003.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02Z",
        opacity: ".98"
      })
    });
  };
  IntermediateEventCatchNonInterruptingParallelIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingSignalIcon = function IntermediateEventCatchNonInterruptingSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.012 8.816 9.21 21.026h13.606l-6.803-12.21Zm0 1.776 5.332 9.57H10.681l5.331-9.57Zm0-10.281c-1.448.02-2.93.157-4.302.628-.852.447-.255 1.863.66 1.574 2.255-.608 4.648-.607 6.922-.108.934.075 1.228-1.376.338-1.67C18.451.44 17.227.317 16.012.311Zm9.012 2.934c-.913-.104-1.272 1.258-.454 1.648 1.834 1.36 3.293 3.185 4.31 5.22.526.776 1.842.098 1.515-.78a15.522 15.522 0 0 0-5.06-6.006c-.1-.044-.203-.07-.31-.082ZM6.65 3.59c-.762.089-1.24.809-1.805 1.267C3.38 6.295 2.163 8.007 1.37 9.905c-.266.898 1.094 1.484 1.564.675a14.825 14.825 0 0 1 4.327-5.56c.476-.515.09-1.419-.612-1.431Zm9.362.007c-.698.066-1.689-.16-2.033.635-.282.733.535 1.358 1.217 1.125 1.806-.147 3.63.203 5.293.907.902.255 1.472-1.112.656-1.573-1.6-.735-3.374-1.089-5.133-1.094Zm-5.479 1.365c-.835.15-1.517.76-2.21 1.226-1.203.94-2.318 2.061-3.057 3.402-.33.904 1.063 1.552 1.547.723 1.045-1.656 2.596-2.925 4.285-3.873.545-.499.171-1.463-.565-1.478Zm13.903 2.115c-.875-.07-1.22 1.173-.501 1.627 1.325 1.34 2.188 3.062 2.748 4.84.468.84 1.869.21 1.557-.699-.604-2.118-1.751-4.097-3.351-5.615a.93.93 0 0 0-.453-.153ZM4.467 13.132c-.822-.07-.996.826-1.046 1.455-.256 1.93-.094 3.933.562 5.769.406.844 1.807.365 1.612-.551a11.498 11.498 0 0 1-.334-5.808.874.874 0 0 0-.794-.865Zm26.687 1.6c-.746-.037-1.014.785-.879 1.395.043 2.393-.57 4.771-1.66 6.894-.31.884 1.02 1.536 1.53.75a15.632 15.632 0 0 0 1.821-8.372.876.876 0 0 0-.812-.667Zm-30.197.571c-.782-.073-1.044.775-.933 1.404.068 2.414.661 4.833 1.809 6.962.534.77 1.842.076 1.505-.798a14.833 14.833 0 0 1-1.603-6.861.876.876 0 0 0-.778-.707Zm26.787 2.024c-.777-.048-.952.797-1.021 1.392-.354 1.692-1.202 3.231-2.216 4.608-.407.872.925 1.638 1.48.852 1.361-1.733 2.296-3.827 2.582-6.017a.874.874 0 0 0-.825-.835ZM6.857 23.012c-.808.018-1.082 1.122-.47 1.59 1.393 1.607 3.187 2.886 5.194 3.599.91.222 1.43-1.165.598-1.596a11.495 11.495 0 0 1-4.723-3.396.899.899 0 0 0-.599-.197Zm15.057 2.7c-.81.194-1.504.76-2.325.972-1.203.458-2.5.536-3.758.664-.869.307-.573 1.728.346 1.663 2.201-.034 4.412-.626 6.293-1.778.604-.495.227-1.532-.556-1.521ZM6.346 27.118c-.833.008-1.11 1.218-.395 1.617 1.986 1.602 4.358 2.749 6.868 3.226.933.076 1.227-1.376.338-1.67a14.838 14.838 0 0 1-6.345-3.066.929.929 0 0 0-.466-.107Zm19.208.087c-.766.09-1.241.841-1.922 1.158-1.516.991-3.251 1.58-4.996 2.005-.872.405-.346 1.849.584 1.604 2.543-.526 4.98-1.66 6.963-3.344.47-.52.072-1.42-.63-1.423Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchNonInterruptingTimerIcon = function IntermediateEventCatchNonInterruptingTimerIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.998 8.406c-3.018-.041-5.92 1.926-7.031 4.727-1.138 2.695-.51 6.012 1.537 8.103 1.99 2.141 5.268 2.93 8.014 1.927 2.878-.98 4.992-3.827 5.068-6.87.153-2.957-1.624-5.88-4.3-7.137a7.552 7.552 0 0 0-3.288-.75Zm0 1.384c2.759-.052 5.373 1.973 6.015 4.655.704 2.578-.482 5.517-2.791 6.867-2.358 1.48-5.682 1.086-7.618-.918-2.043-1.971-2.407-5.381-.84-7.745 1.11-1.763 3.15-2.88 5.234-2.86Zm1.962 1.765-2.074 3.762c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.182l1.993-3.615c-.252-.14-.505-.278-.757-.417Zm-1.965-8.268h-.158l-.147.003h-.011l-.147.005h-.011l-.146.007h-.011l-.146.009h-.011l-.146.01h-.005l-.005.001-.146.012h-.011l-.145.014h-.006l-.005.001-.05.006-.158.031-.15.06-.135.088-.117.111-.094.13-.069.147-.04.156-.01.16.019.16.049.154.076.142.102.125.123.105.14.08.152.051.16.023.134-.003.045-.005.135-.013.133-.01.136-.01.135-.007.137-.006.136-.004.136-.003h.274l.136.003.136.004.136.006.136.007.136.01.133.01.135.013.135.014.135.016.134.018.132.018.134.021.133.023.133.024.133.025.13.027.132.03.132.03.129.031.13.034.129.035.129.036.13.04.126.038.128.042.126.042.128.045.127.047.126.048.12.047.127.051.123.052.006.002.147.048.16.021.16-.009.157-.038.147-.067.131-.093.112-.116.089-.135.062-.149.033-.158.004-.16-.027-.16-.055-.151-.083-.138-.107-.121-.127-.099-.118-.063-.004-.001-.005-.003-.005-.002-.133-.056-.005-.002-.005-.002-.134-.054-.004-.002-.005-.002-.135-.053-.005-.002-.005-.002-.135-.051-.005-.002-.005-.002-.135-.05-.005-.001-.005-.002-.137-.048-.005-.001-.005-.002-.137-.046-.005-.002-.005-.002-.137-.044-.005-.002-.005-.001-.138-.043-.005-.002-.006-.001-.138-.042-.005-.001-.005-.002-.14-.04H19.4l-.005-.002-.14-.038-.005-.001-.005-.002-.14-.036-.005-.001-.005-.001-.141-.035-.005-.001-.005-.001-.142-.033-.005-.001-.005-.001-.141-.031-.006-.002h-.005l-.142-.03-.005-.001-.005-.001-.143-.028h-.005l-.005-.001-.143-.026-.006-.001-.005-.001-.143-.024-.005-.001-.006-.001-.143-.022-.006-.001h-.005l-.144-.022h-.005l-.006-.001-.144-.019h-.005l-.006-.001-.144-.017h-.006l-.005-.001-.145-.016h-.011l-.145-.014H17.1l-.005-.001-.146-.012h-.01l-.146-.01-.006-.001h-.005l-.146-.009h-.011l-.147-.006h-.01l-.147-.005h-.011l-.147-.003h-.01l-.148-.001h-.01ZM10.357 4.66l-.156.037-.123.053-.06.032-.005.002-.004.003-.128.069-.004.002-.005.003-.126.07-.005.003-.004.002-.126.072-.005.003-.004.003-.125.073-.004.003-.005.003-.124.075-.004.003-.005.002-.123.077-.004.003-.005.003-.122.078-.004.003-.005.003-.121.08-.004.002-.005.003-.12.082-.005.003-.004.003-.12.083-.004.003-.004.003-.118.084-.005.003-.004.003-.118.086-.004.003-.004.003-.117.088-.004.003-.004.003-.116.089-.004.003-.004.004-.114.09-.005.003-.004.003-.113.092-.004.004-.004.003-.113.093-.004.004-.004.003-.111.095-.004.003-.005.004-.11.096-.004.004-.004.003-.109.098-.004.003-.004.004-.108.1-.004.003-.004.003-.107.101-.004.004-.004.003-.106.102-.003.004-.004.004-.105.103-.004.004-.004.004-.103.105-.004.004-.004.003-.102.106-.003.004-.004.004-.1.107-.004.004-.004.004-.099.108-.004.004-.003.004-.098.11-.003.003-.004.004-.096.11-.004.005-.003.004-.095.111-.003.004-.004.004-.093.113-.003.004-.004.004-.092.113-.003.004-.003.005-.09.114-.004.004-.003.004-.089.116-.003.004-.003.004-.088.117-.003.004-.003.005-.086.117-.003.004-.003.005-.084.118-.003.004-.003.005-.083.12-.003.003-.003.005-.082.12-.003.005-.002.004-.068.103-.076.142-.048.154-.018.16.011.161.041.156.07.146.095.13.117.11.136.086.15.06.158.03.162.002.158-.029.15-.058.138-.085.119-.108.082-.106.065-.099.075-.11.077-.113.077-.107.08-.11.08-.108.084-.108.083-.105.086-.106.086-.104.088-.104.089-.101.09-.102.093-.101.093-.099.094-.097.095-.096.098-.097.098-.095.099-.093.1-.092.103-.091.101-.089.104-.088.104-.086.106-.086.106-.083.106-.082.109-.082.108-.079.11-.078.11-.076.112-.076.112-.074.113-.072.113-.071.115-.07.115-.068.118-.067.117-.065.12-.065.054-.029.135-.088.116-.111.094-.132.068-.146.04-.156.009-.161-.02-.16-.05-.153-.078-.142-.102-.125-.123-.103-.141-.079-.153-.051-.16-.022-.16.008Zm13.91 2.116-.158.037-.147.066-.132.092-.113.116-.09.134-.063.148-.034.157-.005.162.026.159.054.152.082.139.086.102.09.09.094.098.093.099.092.1.091.103.089.101.088.104.086.104.086.106.083.105.083.108.08.108.081.11.077.107.077.112.075.111.075.114.072.113.071.113.07.115.068.117.067.115.065.118.064.117.062.118.061.12.059.119.059.122.056.121.054.12.055.125.051.123.051.125.048.123.049.127.046.126.044.125.043.128.042.129.039.126.038.13.022.076.058.15.086.137.109.119.129.096.145.07.155.043.16.013.161-.017.155-.046.143-.074.126-.1.106-.122.082-.138.055-.152.025-.16-.005-.16-.026-.132-.023-.082-.002-.005-.001-.005-.042-.139-.001-.005-.002-.005-.043-.138-.001-.005-.002-.005-.044-.137-.002-.005-.002-.005-.046-.137-.002-.005-.001-.005-.048-.137-.002-.005-.002-.005-.05-.135-.001-.005-.002-.005-.051-.135-.002-.005-.002-.005-.053-.135-.002-.005-.002-.005-.054-.133-.002-.005-.002-.005-.057-.133-.002-.005-.002-.005-.057-.132-.003-.005-.002-.005-.059-.132-.002-.005-.002-.004-.061-.132-.003-.004-.002-.005-.062-.13-.003-.005-.002-.005-.064-.13-.003-.004-.002-.005-.066-.129-.002-.004-.003-.005-.067-.128-.002-.005-.003-.004-.069-.128-.002-.004-.003-.005-.07-.126-.003-.005-.003-.004-.072-.126-.002-.005-.003-.004-.073-.125-.003-.004-.003-.005-.075-.124-.003-.004-.003-.005-.076-.123-.003-.004-.003-.005-.078-.122-.003-.004-.003-.005-.08-.121-.003-.004-.003-.005-.08-.12-.004-.005-.003-.004-.083-.12-.003-.004-.003-.004-.084-.118-.003-.005-.003-.004-.086-.117-.003-.005-.003-.004-.088-.117-.003-.004-.003-.004-.09-.116-.002-.004-.004-.004-.09-.114-.003-.005-.004-.004-.091-.113-.004-.004-.003-.004-.093-.113-.004-.004-.003-.004-.095-.111-.004-.004-.003-.004-.096-.11-.004-.005-.003-.004-.098-.109-.004-.004-.003-.004-.1-.108-.003-.004-.004-.004-.1-.107-.004-.004-.004-.004-.102-.106-.003-.003-.004-.004-.093-.095-.124-.103-.14-.08-.153-.05-.16-.023-.16.008ZM4.288 12.828l-.158.032-.15.06-.135.088-.117.11-.095.131-.069.146-.035.129-.026.132v.005l-.002.005-.025.143-.001.005-.001.006-.024.143-.001.005-.001.006-.022.143-.001.006-.001.005-.02.144-.001.005-.001.006-.019.144v.005l-.001.006-.017.144v.006l-.001.005-.016.145v.011l-.014.145v.006l-.001.005-.012.146v.01l-.01.146-.001.006v.005l-.009.146v.011l-.007.146v.011l-.004.147v.011l-.003.147v.01l-.002.148v.01l.001.148v.01l.003.147v.011l.005.147v.01l.007.147v.011l.009.146v.011l.01.146v.01l.013.146v.011l.014.145v.005l.001.006.016.145v.011l.018.144v.006l.001.005.019.144v.006l.001.005.021.144v.005l.002.006.022.143v.006l.002.005.024.143v.005l.002.006.025.143.001.005.001.005.028.143.001.005.001.005.03.142v.005l.002.006.03.141.002.005.001.006.033.14v.006l.002.005.035.14v.006l.002.005.036.14.002.005.001.005.038.14.001.005.002.005.04.14v.005l.002.005.042.138.001.006.002.005.042.138.002.005.002.005.017.054.064.148.09.134.114.114.132.092.148.065.157.037.16.007.16-.023.153-.052.14-.08.123-.103.102-.126.076-.142.049-.153.02-.16-.01-.161-.032-.13-.017-.051-.039-.126-.038-.13-.037-.128-.035-.13-.033-.128-.033-.134-.03-.13-.029-.131-.026-.13-.026-.132-.024-.134-.023-.133-.02-.132-.02-.136-.017-.132-.016-.135-.014-.135-.012-.133-.012-.138-.009-.133-.007-.136-.006-.138-.004-.134-.003-.136v-.274l.003-.136.004-.134.006-.139.007-.136.01-.132.01-.139.013-.132.014-.135.016-.135.017-.132.02-.137.02-.13.023-.134.024-.133.024-.126.016-.16-.014-.161-.044-.155-.072-.145-.098-.128-.12-.108-.137-.084-.15-.057-.16-.029-.16.002Zm23.286 4.202-.156.038-.148.066-.132.092-.113.115-.09.134-.062.148-.03.127-.001.004-.023.134-.024.134-.026.132-.026.13-.03.132-.03.129-.032.134-.033.128-.035.13-.037.128-.038.13-.04.126-.04.128-.044.128-.044.126-.046.126-.048.126-.05.125-.05.125-.051.122-.054.123-.055.122-.056.12-.058.122-.06.12-.061.12-.062.119-.063.116-.067.119-.066.116-.068.115-.07.115-.07.113-.073.113-.074.112-.076.113-.077.112-.077.107-.08.11-.08.108-.085.109-.044.056-.088.135-.06.15-.033.158-.002.16.027.16.057.15.083.138.108.12.128.098.144.072.155.045.16.015.161-.016.155-.044.144-.073.128-.098.09-.099.05-.061.003-.004.003-.005.089-.115.003-.004.003-.005.088-.116.003-.004.003-.005.086-.117.003-.004.003-.005.084-.118.003-.004.003-.005.083-.12.003-.004.003-.004.082-.12.003-.005.002-.004.08-.121.003-.005.003-.004.078-.122.003-.005.003-.004.077-.123.002-.005.003-.004.075-.124.003-.005.003-.004.073-.125.003-.004.003-.005.072-.126.002-.004.003-.005.07-.126.003-.005.002-.005.07-.127.002-.004.002-.005.068-.128.002-.005.002-.004.066-.13.003-.004.002-.005.064-.13.002-.004.003-.005.062-.13.003-.005.002-.005.06-.13.003-.005.002-.005.06-.132.002-.005.002-.005.057-.132.003-.005.002-.005.056-.133.002-.005.002-.005.054-.134.002-.004.002-.005.053-.135.002-.005.002-.005.051-.135.002-.005.002-.005.05-.135.001-.005.002-.005.048-.137.001-.005.002-.005.046-.137.002-.005.002-.005.044-.137.002-.005.002-.005.042-.138.002-.005.002-.006.04-.138.002-.005.002-.005.04-.14V19.4l.002-.005.038-.14.001-.005.002-.005.036-.14.001-.005.001-.005.035-.141.001-.005.001-.005.033-.141.001-.006.001-.005.031-.141.002-.006v-.005l.03-.142.001-.005.001-.005.028-.143v-.005l.002-.005.025-.143.001-.006.001-.005.024-.143.001-.005.001-.006.001-.006.01-.161-.02-.16-.05-.154-.077-.141-.102-.125-.123-.104-.141-.079-.153-.051-.16-.022-.16.007ZM6.681 22.734l-.152.053-.14.08-.122.105-.101.126-.076.142-.048.154-.018.16.011.161.041.156.07.146.077.11.04.047.003.004.003.004.095.111.003.004.004.004.096.11.004.005.003.004.098.109.003.004.004.004.1.108.003.004.003.004.101.107.004.004.003.004.102.106.004.003.004.004.103.105.004.004.004.004.105.103.004.004.003.003.106.102.004.004.004.004.107.1.004.004.004.004.108.099.004.003.004.004.11.098.003.003.004.004.11.096.005.004.004.003.11.095.005.003.004.004.113.093.004.003.004.004.113.091.004.004.005.003.114.09.004.004.004.003.116.089.004.003.004.003.117.088.004.003.004.003.118.086.004.003.005.003.118.084.004.003.005.003.119.083.004.003.005.003.12.081.005.003.004.003.121.08.005.003.004.003.122.078.005.003.004.003.123.076.005.003.004.003.124.075.005.003.004.003.125.073.004.003.005.003.126.072.004.002.005.003.126.07.005.003.004.002.128.07.004.002.005.002.128.068.005.002.004.002.13.066.004.003.005.002.13.064.004.002.005.003.13.062.005.002.004.003.132.06.004.003.005.002.132.06.005.002.005.002.132.057.005.002.005.003.133.056.005.002.005.002.133.054.005.002.005.002.13.05.154.045.16.016.161-.015.155-.045.144-.072.128-.098.108-.12.083-.138.057-.15.028-.16-.003-.16-.032-.158-.061-.15-.088-.135-.11-.117-.132-.094-.12-.058-.124-.049-.126-.051-.122-.051-.122-.054-.12-.054-.126-.058-.119-.057-.12-.06-.12-.06-.118-.063-.117-.064-.119-.066-.116-.066-.115-.068-.115-.07-.113-.07-.115-.074-.112-.074-.11-.075-.11-.076-.112-.079-.11-.08-.109-.082-.106-.082-.104-.082-.106-.086-.105-.087-.101-.086-.105-.091-.1-.09-.1-.091-.1-.094-.097-.094-.1-.098-.093-.095-.096-.1-.093-.098-.092-.101-.089-.1-.09-.102-.088-.104-.036-.043-.114-.114-.133-.091-.148-.065-.157-.036-.161-.006-.16.024Zm15.063 2.691-.156.044-.12.057-.06.034-.12.066-.116.064-.119.062-.12.061-.12.06-.118.057-.126.058-.12.054-.122.054-.122.05-.126.052-.125.05-.124.046-.127.047-.125.044-.129.043-.126.04-.13.042-.128.038-.127.036-.13.035-.131.034-.129.031-.132.03-.13.03-.135.027-.133.026-.13.023-.13.022-.137.021-.132.02-.134.017-.132.015-.138.015-.135.013-.133.01-.138.01-.136.007-.134.006-.136.004-.14.003-.16.018-.155.047-.142.076-.127.1-.105.122-.08.14-.054.151-.025.16.006.16.035.158.064.148.09.134.114.114.133.092.147.065.157.036.134.008.145-.002h.011l.147-.005h.01l.147-.007h.011l.146-.009h.011l.146-.01h.005l.005-.001.146-.012h.011l.145-.014h.005l.006-.001.145-.016h.011l.144-.018h.006l.005-.001.144-.02h.011l.144-.021h.005l.006-.002.143-.022h.006l.005-.002.143-.024h.005l.006-.002.143-.026h.005l.005-.002.143-.027.005-.001.005-.001.142-.03h.005l.005-.002.142-.03.005-.002.005-.001.142-.033.005-.001.005-.001.14-.035.006-.001.005-.001.14-.036.005-.002.005-.001.14-.038.005-.001.005-.002.14-.04h.005l.005-.002.138-.042.005-.001.006-.002.138-.043.005-.001.005-.002.137-.044.005-.002.005-.002.137-.046.005-.002.005-.001.137-.048.005-.002.005-.002.135-.05.005-.001.005-.002.135-.051.005-.002.005-.002.135-.053.005-.002.004-.002.134-.054.005-.002.005-.002.133-.056.005-.003.005-.002.132-.057.005-.002.005-.003.132-.059.005-.002.004-.002.131-.061.005-.003.005-.002.13-.062.005-.003.005-.002.13-.064.004-.002.005-.003.129-.066.004-.002.005-.003.128-.067.005-.002.004-.003.127-.069.005-.002.005-.003.126-.07.005-.003.004-.002.065-.038.132-.093.112-.115.089-.135.062-.149.034-.157.004-.161-.027-.16-.055-.15-.082-.14-.107-.12-.127-.1-.144-.073-.154-.045-.16-.017-.161.014ZM15.994 0l-.187.001h-.011l-.188.004h-.011l-.187.006h-.011l-.187.008h-.005L15.2.02l-.187.01h-.005l-.005.001-.187.013h-.01L14.62.06h-.01l-.186.018h-.011l-.185.02-.005.001h-.006l-.185.022-.005.001h-.005l-.185.025h-.005l-.005.001-.184.027h-.006l-.005.001-.184.029h-.005l-.005.001-.183.031-.005.001-.006.001-.182.033-.006.001-.005.001-.182.035-.005.001-.005.001-.182.038h-.005l-.005.002-.181.04h-.005l-.005.002-.18.042-.006.001-.005.001-.18.044-.005.002h-.005l-.17.045-.152.054-.139.082-.121.106-.1.127-.074.143-.046.155-.017.16.013.16.043.156.07.145.097.13.119.108.137.085.15.058.159.03.16-.001.133-.023.165-.043.168-.041.171-.04.171-.037.172-.036.17-.033.173-.03.17-.03.177-.027.171-.025.175-.022.175-.02.175-.02.176-.016.175-.014.177-.012.176-.01.177-.007.174-.006.177-.003L16 1.73h.177l.178.004.174.006.177.007.176.01.177.012.175.014.176.017.175.018.175.02.175.023.171.025.177.027.17.03.173.03.17.033.171.036.154.033.16.02.161-.01.156-.04.146-.069.131-.094.111-.117.088-.135.06-.15.032-.158.002-.16-.027-.16-.057-.15L20 .714l-.108-.12-.128-.097-.144-.073-.129-.038-.158-.035-.005-.001-.005-.001L19.14.31h-.005l-.005-.002-.182-.035h-.006l-.005-.002-.182-.033h-.006l-.005-.002-.183-.03-.005-.001-.005-.001-.184-.029h-.005l-.006-.001-.184-.027h-.005l-.005-.001-.185-.024h-.005L17.968.12 17.783.1l-.006-.001h-.005l-.185-.02h-.006l-.005-.001L17.39.06 17.385.06h-.005l-.187-.015h-.005l-.005-.001-.187-.013h-.01L16.799.02h-.011L16.6.01h-.011l-.187-.006h-.011L16.204 0h-.011L16.005 0h-.01Zm8.86 2.939-.157.033-.15.062-.134.09-.116.111-.093.132-.067.147-.038.156-.01.161.022.16.05.153.078.141.103.124.102.087.045.034.142.106.137.105.14.11.136.11.135.112.134.115.134.117.13.115.132.122.128.12.127.122.127.125.123.126.124.128.121.13.118.128.118.132.117.133.113.134.113.136.11.136.109.137.109.142.104.14.103.14.101.142.1.144.099.146.095.145.094.147.093.15.092.15.087.149.087.15.085.152.083.155.08.152.08.155.04.081.084.138.11.119.128.096.145.072.155.043.16.013.161-.016.155-.046.143-.074.127-.099.106-.12.083-.14.055-.151.026-.16-.004-.16-.034-.158-.05-.124-.042-.085-.002-.004-.003-.005-.084-.165-.002-.004-.003-.005-.086-.164-.002-.004-.003-.005-.088-.162-.002-.005-.003-.005-.09-.161-.002-.005-.003-.004-.092-.16-.002-.005-.003-.005-.094-.16-.003-.004-.003-.004-.096-.159-.002-.004-.003-.005-.098-.157-.003-.004-.003-.005-.1-.156-.003-.004-.002-.005-.102-.154-.003-.005-.003-.004-.104-.154-.003-.004-.003-.005-.106-.152-.003-.004-.003-.005-.108-.151-.003-.004-.003-.005-.11-.15-.003-.004-.003-.004-.111-.15-.004-.003-.003-.005-.113-.147-.004-.004-.003-.005-.115-.146-.004-.004-.003-.004-.117-.145-.004-.004-.003-.004-.12-.144-.003-.004-.003-.004-.121-.142-.003-.004-.004-.004-.123-.141-.003-.004-.004-.004-.125-.14-.003-.004-.004-.004-.127-.138-.003-.004-.004-.004-.128-.136-.004-.004-.004-.004-.13-.135-.004-.004-.003-.004-.133-.134-.003-.004-.004-.003-.134-.133-.004-.003-.004-.004-.135-.13-.004-.004-.004-.004-.136-.128-.004-.004-.004-.004-.138-.126-.004-.004-.004-.003-.14-.125-.004-.004-.004-.003-.14-.123-.005-.004-.004-.003-.142-.121-.004-.004-.004-.003-.144-.12-.004-.003-.004-.003-.145-.117-.004-.004-.004-.003-.147-.115-.004-.004-.004-.003-.148-.113-.004-.003-.004-.004-.149-.111-.004-.003-.004-.004-.05-.036-.14-.083-.15-.055-.16-.027-.16.004Zm-18.381.348-.157.037-.147.066-.111.074-.04.032-.005.003-.004.004-.145.117-.004.003-.004.004-.144.119-.004.003-.004.004-.142.12-.004.004-.004.004-.141.123-.004.003-.004.004-.14.125-.004.003-.004.004-.138.126-.004.004-.004.004-.136.128-.004.004-.004.004-.135.13-.004.004-.004.003-.134.133-.004.003-.004.004-.132.134-.003.004-.004.004-.13.135-.004.004-.004.004-.128.136-.004.004-.004.004-.126.138-.004.004-.003.004-.125.14-.004.004-.003.004-.123.14-.004.005-.003.004-.121.142-.004.004-.003.004-.12.144-.003.004-.003.004-.117.145-.004.004-.003.004-.115.146-.004.005-.003.004-.113.147-.003.005-.004.004-.111.149-.003.004-.004.004-.11.15-.002.005-.003.004-.108.151-.003.005-.003.004-.106.152-.003.005-.003.004-.104.154-.003.004-.003.005-.102.154-.003.005-.002.004-.1.156-.003.005-.003.004-.098.157-.003.005-.003.004-.096.159-.002.004-.003.005-.094.16-.003.004-.002.004-.092.16-.003.005-.003.005-.09.161-.002.005-.003.005-.088.162-.002.005-.003.004-.086.164-.002.005-.002.004-.084.165-.003.005-.002.004-.082.166-.002.005-.003.004-.08.167-.002.004-.002.005-.078.168-.002.004-.002.005-.045.1-.053.153-.023.16.007.16.037.157.065.148.092.132.114.114.134.09.148.064.157.035.161.006.16-.025.152-.054.14-.08.121-.106.1-.126.065-.118.043-.095.074-.16.075-.155.077-.157.08-.155.08-.152.083-.155.085-.152.086-.15.088-.149.091-.15.094-.15.094-.147.095-.145.099-.146.1-.144.1-.142.104-.14.104-.14.11-.142.107-.137.11-.136.114-.136.113-.134.117-.133.118-.132.117-.129.122-.13.124-.127.123-.126.127-.125.127-.122.128-.12.132-.122.13-.115.133-.117.135-.115.135-.111.136-.11.037-.03.117-.11.094-.132.068-.146.04-.156.01-.161-.02-.16-.05-.154-.076-.141-.102-.125-.123-.104-.14-.08-.153-.051-.16-.023-.161.008Zm24.514 11.15-.157.04-.146.067-.131.093-.112.117-.088.135-.061.149-.033.157-.005.134.006.14.006.176.003.177.001.178-.001.177-.003.178-.006.177-.007.176-.01.177-.012.176-.015.176-.016.173-.018.175-.02.175-.024.174-.024.175-.027.17-.03.174-.03.173-.033.17-.036.172-.037.17-.04.17-.042.172-.043.168-.045.166-.048.169-.05.167-.052.168-.053.164-.056.166-.058.166-.06.161-.061.164-.063.158-.066.165-.068.16-.07.16-.07.158-.075.159-.074.155-.078.158-.081.158-.06.15-.03.158-.001.161.029.159.058.15.085.137.108.12.13.096.144.07.156.044.16.013.16-.017.155-.046.143-.074.127-.1.107-.12.07-.115.083-.164.003-.005.002-.004.082-.166.002-.005.003-.004.08-.167.002-.005.002-.004.078-.168.002-.004.002-.005.076-.169.002-.004.002-.005.074-.17.002-.004.002-.005.072-.17.002-.005.002-.005.07-.17.002-.006.001-.005.068-.172.002-.004.002-.005.065-.173.002-.005.002-.005.063-.173.002-.005.002-.005.06-.174.003-.005.001-.005.06-.175.001-.005.002-.005.057-.176.001-.005.002-.005.055-.177.001-.005.002-.005.052-.177.002-.005.001-.005.051-.178.001-.005.002-.005.048-.179.002-.005v-.005l.047-.179.001-.005.002-.005.044-.18v-.005l.002-.005.042-.18.001-.006.001-.005.04-.18.001-.006.001-.005.038-.182v-.005l.002-.005.035-.182v-.006l.002-.005.033-.182v-.006l.002-.005.03-.183.001-.005.001-.005.029-.184v-.005l.001-.006.027-.184v-.005l.001-.005.024-.185v-.005l.001-.005.022-.185v-.006l.001-.005.02-.185v-.006l.001-.005.017-.186v-.005l.001-.005.015-.187v-.005l.001-.005.013-.187v-.01l.01-.187.001-.006v-.005l.009-.187v-.011l.006-.187v-.011l.004-.188v-.011l.001-.188v-.01l-.001-.188v-.011l-.004-.188v-.011l-.006-.187v-.011l-.007-.145-.022-.16-.05-.152-.08-.141-.103-.124-.125-.102-.141-.077-.153-.05-.16-.02-.161.009ZM.777 15l-.158.032-.15.06-.136.087-.117.11-.095.131-.068.146-.04.156-.012.133-.001.14v.01l.001.188v.011l.004.188v.011l.006.187v.011l.008.187v.011l.011.187v.005l.001.005.013.187v.01l.016.187v.01l.018.186v.011l.02.185.001.005v.006l.022.185.001.005v.005l.025.185v.005l.001.005.027.184v.006l.001.005.029.184v.005l.001.005.031.183.001.005.001.006.033.182.001.005.001.006.035.182.001.005.001.005.038.182v.005l.002.005.04.181v.005l.002.005.042.18.001.006.001.005.044.18.002.005v.005l.047.18.001.004.002.005.048.179.002.005.001.005.05.178.002.005.001.005.053.177.002.005.001.005.055.177.002.005.001.005.057.176.002.005.001.005.06.175.001.005.002.005.061.174.002.005.002.005.063.173.002.005.002.005.065.173.002.005.002.004.067.172.002.005.002.005.07.171.002.005.002.005.072.17.002.005.002.005.074.169.002.005.002.004.076.169.002.005.002.004.078.168.002.004.002.005.08.167.003.004.002.005.082.166.002.004.003.005.02.04.086.136.11.118.13.095.146.07.156.041.16.012.16-.019.155-.048.142-.075.126-.1.105-.123.08-.14.054-.152.024-.16-.006-.16-.036-.158-.051-.123-.018-.034-.078-.158L3.1 22.1l-.074-.16-.071-.156-.07-.162-.068-.16-.067-.164-.062-.158-.062-.164-.059-.161-.058-.166-.056-.166-.053-.164-.052-.168-.05-.167-.048-.17-.045-.165-.043-.168-.043-.172-.039-.17-.037-.17-.036-.172-.033-.17-.03-.173-.03-.174-.027-.17-.025-.175-.022-.174-.021-.175-.018-.175-.017-.173-.014-.176-.012-.176-.01-.177-.007-.176-.006-.177-.003-.178L1.73 16v-.134l-.013-.16-.044-.156-.072-.144-.097-.129-.12-.108-.137-.085-.15-.057L.938 15 .777 15ZM6.17 26.842l-.152.052-.14.08-.122.105-.101.126-.076.142-.048.154-.02.16.012.161.041.156.07.146.094.13.096.093.032.026.004.003.004.004.145.117.004.003.004.004.146.115.005.003.004.004.147.113.005.003.004.004.149.111.004.003.004.003.15.11.005.003.004.003.151.108.005.003.004.003.152.106.005.003.004.003.154.104.004.003.005.003.154.102.005.002.004.003.156.1.005.003.004.003.157.098.005.003.004.002.159.096.004.003.005.003.16.094.004.003.004.002.16.092.005.003.005.002.161.09.005.003.005.003.162.088.005.002.004.002.164.087.005.002.004.002.165.084.005.003.004.002.166.082.004.002.005.003.167.08.004.002.005.002.168.078.004.002.005.002.169.076.004.002.005.002.17.074.004.002.005.002.17.072.005.002.005.002.17.07.006.002.005.001.171.068.005.002.005.002.173.065.005.002.005.002.173.063.005.002.005.002.174.061.005.002.005.001.175.06.005.001.005.002.176.057.005.001.005.002.177.055.005.001.005.002.177.052.005.002.005.001.178.051.005.001.005.002.178.048.006.002h.005l.179.047.005.001.005.002.18.044h.005l.005.002.18.042.006.001.005.001.159.035.16.02.16-.01.157-.04.146-.069.13-.094.112-.117.087-.136.06-.149.033-.158.002-.161-.028-.159-.057-.15-.084-.138-.108-.12-.128-.098-.144-.072-.128-.039-.154-.033-.168-.04-.171-.041-.169-.044-.17-.045-.166-.048-.168-.05-.165-.051-.166-.054-.166-.056-.163-.057-.165-.06-.161-.062-.164-.064-.16-.065-.16-.068-.162-.07-.157-.07-.157-.074-.157-.075-.156-.077-.153-.079-.156-.082-.153-.082-.154-.086-.15-.086-.152-.09-.148-.09-.147-.092-.149-.095-.145-.095-.144-.098-.145-.1-.143-.102-.14-.103-.14-.104-.14-.108-.139-.11-.136-.11-.027-.022-.133-.091-.148-.065-.157-.036-.161-.006-.16.024Zm19.214.073-.156.039-.146.067-.11.076-.064.051-.139.11-.14.108-.14.104-.14.103-.143.101-.145.101-.144.098-.145.095-.149.095-.148.093-.147.089-.152.09-.15.086-.154.086-.153.082-.156.082-.153.079-.156.077-.157.075-.157.073-.158.071-.16.07-.16.068-.161.065-.164.064-.161.061-.165.06-.163.058-.166.056-.166.054-.166.051-.167.05-.167.048-.17.045-.168.044-.171.042-.168.039-.17.037-.11.023-.154.047-.143.075-.126.1-.106.122-.081.139-.054.152-.025.16.006.16.035.158.063.148.09.133.114.115.132.092.148.065.157.037.16.008.133-.017.115-.024h.005l.005-.002.181-.04h.005l.005-.002.18-.042.006-.001.005-.001.18-.044.005-.002h.005l.18-.047.004-.001.005-.002.179-.048.005-.002.005-.001.178-.05.005-.002.005-.002.177-.052.005-.002.005-.001.177-.055.005-.002.005-.001.176-.057.005-.002.005-.002.175-.059.005-.001.005-.002.174-.061.005-.002.005-.002.173-.063.005-.002.005-.002.173-.065.005-.002.004-.002.172-.068.005-.001.005-.002.171-.07.005-.002.005-.002.17-.072.005-.002.005-.002.169-.074.005-.002.004-.002.169-.076.004-.002.005-.002.168-.078.004-.002.005-.002.167-.08.004-.003.005-.002.166-.082.004-.002.005-.003.165-.084.004-.002.005-.002.163-.087.005-.002.005-.002.162-.088.005-.003.005-.003.161-.09.005-.002.004-.003.16-.092.005-.002.005-.003.16-.094.004-.003.004-.003.158-.096.005-.002.004-.003.158-.098.004-.003.005-.003.156-.1.004-.003.004-.002.155-.102.005-.003.004-.003.154-.104.004-.003.005-.003.152-.106.004-.003.005-.003.151-.108.004-.003.005-.003.15-.11.004-.003.004-.003.149-.111.004-.004.004-.003.148-.113.004-.004.004-.003.147-.115.004-.004.004-.003.068-.055.116-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.05-.153-.08-.14-.103-.125-.124-.102-.142-.077-.153-.05-.16-.02-.16.009Z"
      })
    });
  };
  IntermediateEventCatchNonInterruptingTimerIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchParallelMultipleIcon = function IntermediateEventCatchParallelMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.157.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.408 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.215-2.282-2.022-5.3-3.217-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.082 11.082 0 0 1 16 4.975Zm-2.15 3.281v5.534H8.213v4.38h5.636v5.534h4.31V18.17h5.639v-4.38h-5.64V8.256h-4.31Zm.865.865h2.583v5.534h5.635v2.65h-5.635v5.533h-2.583v-5.534h-5.64v-2.649h5.64V9.121Z"
      })
    });
  };
  IntermediateEventCatchParallelMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchSignalIcon = function IntermediateEventCatchSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm.006 3.521L9.206 20.745h13.598L16.005 8.542Zm0 1.775 5.329 9.564H10.677l5.328-9.564Z"
      })
    });
  };
  IntermediateEventCatchSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventCatchTimerIcon = function IntermediateEventCatchTimerIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.97.04h-.127C8.713-.018 2.003 5.334.437 12.286c-1.51 6.123.98 13.005 6.136 16.665 5.125 3.788 12.546 4.105 17.912.623 5.272-3.276 8.33-9.766 7.325-15.916-.904-6.241-5.79-11.7-11.95-13.143A16.082 16.082 0 0 0 15.97.04Zm-.181 1.724c.115 0 .23 0 .347.003 6.625-.066 12.823 5.149 13.89 11.69 1.13 5.91-1.908 12.349-7.262 15.138-5.473 3.013-12.866 1.884-17.116-2.726C1.291 21.372.444 13.914 3.802 8.602c2.493-4.112 7.169-6.819 11.987-6.838Zm.283 1.554c-.117 0-.234.002-.351.005-6.1 0-11.691 5.049-12.346 11.114-.78 5.684 2.795 11.612 8.218 13.52 5.139 1.943 11.416.101 14.624-4.38 3.461-4.583 3.262-11.538-.596-15.831-2.36-2.747-5.924-4.423-9.549-4.428Zm-.078 1.695c.078 0 .156 0 .234.003 5.4 0 10.321 4.556 10.734 9.942.563 5.13-2.958 10.364-7.971 11.678-4.832 1.41-10.457-.935-12.746-5.446-2.463-4.559-1.2-10.795 3.014-13.883a11.072 11.072 0 0 1 6.735-2.294Zm-.137 3.42c-2.965.02-5.792 1.968-6.884 4.722-1.137 2.693-.509 6.007 1.536 8.096 1.988 2.14 5.263 2.929 8.007 1.926 2.875-.98 4.987-3.824 5.063-6.865.154-2.954-1.622-5.875-4.295-7.13a7.545 7.545 0 0 0-3.427-.75Zm.27 1.381c2.708.013 5.249 2.014 5.88 4.652.704 2.576-.481 5.512-2.788 6.862-2.356 1.478-5.677 1.084-7.611-.918-2.042-1.97-2.405-5.376-.839-7.738 1.11-1.762 3.146-2.877 5.229-2.857h.13Zm1.831 1.764-2.072 3.76c-.64.068-.792 1.039-.202 1.298.39.27.696-.18 1.051-.164h3.168v-.864h-3.18l1.992-3.612-.757-.418Z"
      })
    });
  };
  IntermediateEventCatchTimerIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventNoneIcon = function IntermediateEventNoneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.848.001C8.113-.093.931 6.281.125 13.983c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.207C29.105 4.938 23.55.48 17.367.06A16.448 16.448 0 0 0 15.848 0v.001Zm.293 1.727c7.113-.099 13.662 5.97 14.077 13.08.56 6.299-3.516 12.735-9.582 14.679-5.798 2.004-12.806-.12-16.283-5.237C.717 19.159.874 11.638 5.016 6.876 7.722 3.638 11.902 1.63 16.14 1.728Zm-.415 1.555C9.157 3.258 3.256 9.156 3.278 15.729c-.16 5.965 4.365 11.725 10.293 12.737 5.409 1.065 11.37-1.744 13.775-6.753 2.534-4.986 1.386-11.627-2.953-15.251-2.364-2.077-5.512-3.27-8.667-3.18Zm.507 1.692c5.82-.026 11.013 5.318 10.79 11.143-.024 5.3-4.313 10.267-9.636 10.803-5.075.667-10.426-2.588-11.885-7.553-1.535-4.744.494-10.46 4.925-12.885a11.072 11.072 0 0 1 5.806-1.508Z"
      })
    });
  };
  IntermediateEventNoneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowCompensationIcon = function IntermediateEventThrowCompensationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 4.975Zm-.56 5.772-7.408 5.231 7.409 5.234v-5.057c2.385 1.687 4.771 3.371 7.157 5.057V10.747l-7.157 5.055v-5.055Z"
      })
    });
  };
  IntermediateEventThrowCompensationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowEscalationIcon = function IntermediateEventThrowEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm.006 3.927c-1.672 4.654-2.734 9.502-4.406 14.155 1.534-1.525 2.872-3.234 4.406-4.759l4.406 4.76c-1.496-4.71-2.91-9.446-4.406-14.156Z"
      })
    });
  };
  IntermediateEventThrowEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowLinkIcon = function IntermediateEventThrowLinkIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.049C8.195-.11.935 6.286.125 14.03c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.93 23.445.453 17.201.095c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.22.872 11.725 4.985 6.962c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 5.021c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 5.021Zm1.78 4.093v3.555H9.785v6.714h7.994v3.554l5.829-6.911-5.83-6.912Z"
      })
    });
  };
  IntermediateEventThrowLinkIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowMessageIcon = function IntermediateEventThrowMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 4.975Zm-5.91 5.475 6.04 4.901 6.042-4.9H10.088Zm-1.341 1.138v9.921h14.514V11.79l-7.132 5.787-7.382-5.99Z"
      })
    });
  };
  IntermediateEventThrowMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowMultipleIcon = function IntermediateEventThrowMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 4.975Zm.006 3.073-7.62 5.532 2.91 8.95h9.42l2.91-8.95-7.62-5.532Z"
      })
    });
  };
  IntermediateEventThrowMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var IntermediateEventThrowSignalIcon = function IntermediateEventThrowSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.975.003C8.195-.156.935 6.24.125 13.985c-.855 6.55 2.741 13.46 8.74 16.314 5.666 2.847 13.012 1.99 17.71-2.33 4.745-4.162 6.727-11.243 4.532-17.206C29.09 4.884 23.445.407 17.201.049c-.408-.03-.817-.046-1.226-.046Zm-.181 1.724c7.134-.269 13.84 5.68 14.399 12.804.686 6.283-3.267 12.792-9.283 14.862-5.847 2.162-13.025.06-16.557-5.141C.728 19.174.872 11.679 4.985 6.916c2.632-3.171 6.671-5.174 10.809-5.19Zm.283 1.553c-6.6-.21-12.671 5.585-12.79 12.185-.292 5.964 4.129 11.817 10.034 12.953 5.47 1.198 11.584-1.613 14.025-6.702 2.525-4.97 1.396-11.585-2.912-15.216-2.282-2.021-5.3-3.216-8.357-3.22ZM16 4.975c5.818-.154 11.117 5.082 11.024 10.905.103 5.384-4.23 10.5-9.636 11.043-5.075.667-10.426-2.587-11.885-7.552-1.53-4.73.48-10.428 4.888-12.864A11.083 11.083 0 0 1 16 4.975Zm.006 3.52c-2.261 4.07-4.533 8.136-6.798 12.205h13.596L16.005 8.495Z"
      })
    });
  };
  IntermediateEventThrowSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var LaneIcon = function LaneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M0 7v18.62h32V7H0Zm1.655 17.056V8.684h28.62v15.372H1.656Z"
      })
    });
  };
  LaneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ManualTaskIcon = function ManualTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5Zm4.43 1.328c-.222.005-.43.09-.606.203-.985.638-4.356 2.977-5.096 3.486-.67.46-1.12 1.153-1.38 1.974-.27.858-.235 1.793-.232 2.576.002.59.016 1.104.17 1.727.22.908.634 1.63 1.23 2.118.597.49 1.363.732 2.23.734 3.038.012 6.078.016 9.119 0 .327-.002.645-.127.848-.37.204-.241.287-.56.291-.914a1.732 1.732 0 0 0-.097-.625h.327c.335 0 .641-.11.852-.316.21-.206.317-.475.374-.754a1.783 1.783 0 0 0-.126-1.143 1.18 1.18 0 0 0 .877-.521c.196-.306.257-.666.258-1.025.001-.375-.088-.738-.293-1.033a1.179 1.179 0 0 0-.958-.512h-.478c.108-.237.156-.505.155-.782-.003-.373-.098-.721-.316-.99a1.21 1.21 0 0 0-.943-.43c-2.273-.004-4.236.018-6.412.012l-.19-.001c.102-.104.202-.205.312-.314.337-.336.662-.652.83-.869.4-.516.46-1.215.123-1.729-.178-.272-.439-.456-.72-.494a.93.93 0 0 0-.148-.008Zm.029.728.022.001c.055.008.115.027.209.172.132.201.126.606-.09.884-.079.102-.431.465-.767.8-.337.334-.657.643-.815.836-.153.186-.096.338-.056.435.04.096.085.212.298.263.063.014.066.01.086.012l.066.003c2.429.027 4.986-.004 7.223-.003.194 0 .293.056.379.162.086.105.151.286.153.533 0 .257-.065.467-.155.59-.09.124-.183.182-.37.183-1.706-.001-3.411-.005-5.117-.009v.731c2.23.004 4.461.01 6.692.012.17 0 .265.06.361.2.096.138.164.364.163.615 0 .268-.058.501-.143.634-.085.132-.162.193-.385.195-2.32-.001-4.554-.006-6.688-.003v.73c1.905 0 3.809.003 5.713.001.194.005.316.09.416.26.102.173.151.442.093.728-.04.193-.102.313-.17.38-.067.065-.148.108-.343.108h-5.71l.002.734c1.445 0 2.89-.01 4.334-.001.162 0 .232.041.297.123.064.081.123.238.12.488-.003.244-.061.385-.12.455-.06.07-.127.11-.296.11-3.037.016-6.076.012-9.113 0-.735-.002-1.316-.196-1.77-.568-.454-.372-.793-.935-.986-1.728-.134-.546-.146-.978-.148-1.558-.003-.796-.018-1.664.199-2.354.222-.705.582-1.24 1.096-1.593.75-.515 4.14-2.866 5.079-3.474a.504.504 0 0 1 .241-.087Z"
      })
    });
  };
  ManualTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var MessageFlowIcon = function MessageFlowIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "m4.073 26.607 1.295 1.296L1.325 32l-.662-.633L0 30.735l4.073-4.128Zm6.953-7.046 1.296 1.296L1.325 32l7.555-7.656-1.295-1.296 1.455-1.474 1.986-2.013ZM32 .06s-2.699 5.189-5.417 10.462l-.326.633c-1.14 2.214-2.265 4.407-3.176 6.2-1.228-1.222-2.449-2.452-3.676-3.675l-3.57 3.618-1.297-1.296 3.541-3.588c-.98-.964-1.932-1.958-2.923-2.91l-.753-.706c2.68-1.258 6.533-3.165 9.95-4.876l.617-.309C28.838 1.673 32 .06 32 .06Zm-4.126 4.06-.015.007-.115.057-.048.024-.115.057L17.7 9.172l5.017 4.948 5.157-10Z"
      })
    });
  };
  MessageFlowIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ParticipantIcon = function ParticipantIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M0 5v22.069h32V5H0Zm30.276 1.684v18.82H6.62V6.684h23.655Zm-28.62 0h3.31v18.82h-3.31V6.684Z"
      })
    });
  };
  ParticipantIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ProcessIcon = function ProcessIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        d: "m16.177 0 .137.002c.452.009.9.037 1.342.082.346.036.62.303.68.646l.437 2.536c.055.319.296.57.608.655.986.269 1.923.653 2.796 1.14.28.155.624.145.885-.039l2.083-1.47a.775.775 0 0 1 .937.022c.86.699 1.645 1.484 2.343 2.343.22.27.223.653.023.937l-1.439 2.038a.833.833 0 0 0-.031.896c.512.889.92 1.846 1.204 2.855a.833.833 0 0 0 .653.601l2.435.42c.342.059.61.333.645.679a15.928 15.928 0 0 1 .08 2.064l-.003.114c-.012.382-.038.76-.077 1.134a.775.775 0 0 1-.645.68l-2.396.412a.835.835 0 0 0-.656.61 12.511 12.511 0 0 1-1.2 2.917.832.832 0 0 0 .034.892l1.396 1.978c.2.284.196.667-.023.936a16.104 16.104 0 0 1-2.343 2.343.775.775 0 0 1-.937.023l-1.99-1.404a.833.833 0 0 0-.88-.026c-.907.516-1.886.922-2.916 1.2a.833.833 0 0 0-.61.656l-.414 2.396a.775.775 0 0 1-.679.646 16.096 16.096 0 0 1-3.312 0 .775.775 0 0 1-.679-.646l-.423-2.452a.834.834 0 0 0-.598-.636 12.474 12.474 0 0 1-1.468-.514 12.49 12.49 0 0 1-1.417-.68.833.833 0 0 0-.878.03l-2.026 1.43a.775.775 0 0 1-.937-.023 16.069 16.069 0 0 1-2.342-2.342.774.774 0 0 1-.024-.936l1.402-1.986a.833.833 0 0 0 .032-.896 12.507 12.507 0 0 1-1.214-2.911.833.833 0 0 0-.655-.606l-2.386-.412a.775.775 0 0 1-.646-.678 16.097 16.097 0 0 1 0-3.314.775.775 0 0 1 .646-.678l2.386-.412a.833.833 0 0 0 .655-.606 12.507 12.507 0 0 1 1.214-2.911.833.833 0 0 0-.032-.896L3.552 6.853a.774.774 0 0 1 .023-.936 16.091 16.091 0 0 1 2.343-2.343.775.775 0 0 1 .937-.023l2.03 1.433c.26.177.6.182.874.028.915-.512 1.88-.9 2.87-1.167a.833.833 0 0 0 .612-.656l.424-2.46a.775.775 0 0 1 .679-.645C14.845.032 15.348.004 15.85 0h.326ZM16 6.4c-5.302 0-9.6 4.297-9.6 9.599 0 5.302 4.298 9.6 9.6 9.6s9.6-4.298 9.6-9.6-4.298-9.6-9.6-9.6Zm-3 4.283c0-1.425 1.637-2.203 2.715-1.29l5.69 4.815c.794.672.794 1.91 0 2.583l-5.69 4.815c-1.078.913-2.715.134-2.715-1.29Z"
      })
    });
  };
  ProcessIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ReceiveTaskIcon = function ReceiveTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5ZM5.23 7.764v11.577h17.55V7.764H5.23Zm1.816.758h13.917l-6.959 4.577-6.958-4.577Zm-1.06.21 8.018 5.274 8.018-5.275v9.853H5.987V8.73Z"
      })
    });
  };
  ReceiveTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ScriptTaskIcon = function ScriptTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5Zm2.99 3.077-.077.045-.026.015c-1.09.646-1.84 1.239-2.336 1.818-.496.579-.735 1.162-.742 1.725-.014 1.119.812 1.958 1.544 2.708.732.75 1.385 1.456 1.446 2.041.032.298-.039.598-.364 1.008-.324.408-.911.897-1.85 1.445l-1.388.808h8.56l.101-.059c.996-.58 1.667-1.116 2.094-1.655.429-.54.603-1.107.547-1.638-.11-1.052-.967-1.818-1.688-2.556-.721-.739-1.306-1.436-1.298-2.092.004-.331.132-.7.535-1.171.402-.47 1.08-1.02 2.119-1.636l1.362-.806h-8.54Zm.241.867h5.271a6.83 6.83 0 0 0-1.113 1.01c-.496.58-.736 1.163-.743 1.726-.014 1.119.812 1.958 1.544 2.708.732.75 1.385 1.456 1.446 2.041.032.298-.039.598-.364 1.008-.312.393-.872.862-1.753 1.386H8.728c.367-.286.658-.566.88-.847.43-.54.604-1.107.548-1.638-.11-1.052-.968-1.818-1.688-2.556-.721-.739-1.306-1.435-1.298-2.092.004-.331.132-.7.534-1.171.389-.454 1.04-.984 2.021-1.575Zm-1.233 1.48v.4h4.12v-.4h-4.12Zm-.154 2.158v.4H12.6v-.4H8.34Zm1.931 2.158v.4h4.126v-.4H10.27Zm.59 2.158v.4h4.276v-.4h-4.276Z"
      })
    });
  };
  ScriptTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var SendTaskIcon = function SendTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5Zm-1.38 3.16 8.332 4.717L21.78 8.16H5.114Zm.021 1.745v9.309H21.8V9.905l-8.353 4.655-8.31-4.655Z"
      })
    });
  };
  SendTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var ServiceTaskIcon = function ServiceTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 3C2.916 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.012C28.015 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5Zm1.22 1.681V7.84c-.329.093-.63.223-.914.382l-.83-.82-1.554 1.561.83.82c-.16.288-.285.594-.372.911l-1.177.002v2.2l1.189-.004c.109.431.345.819.58 1.165v-1.898l-1.038.004v-.737l1.034-.002.058-.294c.084-.429.252-.838.493-1.203l.165-.25-.727-.718.523-.526.728.719.247-.165c.379-.25.793-.417 1.206-.505l.291-.06-.002-1.01h.75L9.19 8.417H11.16c-.185-.221-.951-.508-1.237-.588L9.93 6.68H7.713Zm2.078 2.105.003 1.158a4.19 4.19 0 0 0-.915.383l-.83-.821-1.553 1.562.83.82c-.16.288-.286.593-.373.91l-1.176.003v2.2l1.188-.004c.094.326.224.624.383.905l-.85.847 1.57 1.543.847-.843c.29.161.599.286.919.373v1.198c.756.006 1.56.003 2.206.003V17.81a4.19 4.19 0 0 0 .915-.383l.847.835 1.554-1.56-.848-.836c.16-.288.286-.594.373-.912l1.152-.007V12.75l-1.165.007a4.09 4.09 0 0 0-.382-.905l.805-.807-1.57-1.546-.804.806a4.16 4.16 0 0 0-.915-.372l.007-1.147H9.792Zm.732.73h.751l-.006 1.005.297.058c.43.085.844.252 1.21.492l.25.162.701-.704.528.52-.702.704.169.25c.248.374.412.779.505 1.196l.061.292 1.016-.006v.737l-1.01.006-.058.292c-.085.43-.252.838-.494 1.205l-.165.25.744.733-.523.525-.743-.734-.248.165c-.378.247-.789.418-1.203.503l-.294.058v1.067h-.745v-1.059l-.295-.057a3.395 3.395 0 0 1-1.21-.492l-.248-.162-.747.743-.528-.52.747-.744-.17-.25a3.546 3.546 0 0 1-.506-1.196l-.06-.291-1.04.004v-.738l1.034-.002.058-.294c.085-.428.252-.837.493-1.203l.165-.25-.726-.718.522-.526.728.72.248-.166a3.546 3.546 0 0 1 1.205-.504l.292-.06-.003-1.01Zm.388 2.685a1.65 1.65 0 0 0-1.645 1.645c0 .904.74 1.645 1.645 1.645a1.65 1.65 0 0 0 1.645-1.645 1.65 1.65 0 0 0-1.645-1.645Zm0 .73a.91.91 0 0 1 .915.915.91.91 0 0 1-.915.914.91.91 0 0 1-.915-.914.91.91 0 0 1 .915-.915Z"
      })
    });
  };
  ServiceTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventCompensationIcon = function StartEventCompensationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994 0Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708Zm-.566 9.03-7.415 5.235 7.415 5.238v-5.062c2.386 1.689 4.775 3.375 7.163 5.062V10.761l-7.163 5.058v-5.058Zm-.866 1.666v7.13L9.51 15.993l5.052-3.565Zm7.166 0v7.137l-5.052-3.568 5.052-3.569Z"
      })
    });
  };
  StartEventCompensationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventConditionIcon = function StartEventConditionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16 0C7.174 0 0 7.174 0 16s7.174 16 16 16 16-7.174 16-16S24.826 0 16 0Zm0 1.73c7.892 0 14.27 6.378 14.27 14.27 0 7.891-6.379 14.27-14.27 14.27S1.73 23.891 1.73 16C1.73 8.108 8.108 1.73 16 1.73Zm-5.362 7.523v13.493h10.724V9.253H10.638Zm.863.866h8.995V21.88H11.501V10.12Zm.928 1.324v.863h7.139v-.863h-7.139Zm0 2.605v.867h7.139v-.867h-7.139Zm0 3.01v.864h7.139v-.863h-7.139Zm0 2.72v.863h7.139v-.863h-7.139Z"
      })
    });
  };
  StartEventConditionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventErrorIcon = function StartEventErrorIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.005C9.705-.08 3.643 3.968 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994.005Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626-4.814-3.838-6.538-10.939-4.067-16.57 2.14-5.205 7.515-8.774 13.147-8.708Zm6.13 7.45-3.635 7.37-4.52-5.88c-1.37 4.048-2.738 8.095-4.106 12.143l4.603-5.917 4.748 5.433 2.91-13.149Zm-7.754 3.889 4.299 5.449 1.073-2.39-1.028 4.135-4.387-5.16-1.78 2.75 1.823-4.784Z"
      })
    });
  };
  StartEventErrorIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventEscalationIcon = function StartEventEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994 0Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708Zm0 7.183c-1.674 4.658-2.736 9.509-4.41 14.166 1.535-1.526 2.874-3.236 4.41-4.763l4.41 4.763c-1.499-4.713-2.913-9.453-4.41-14.166Zm.032 2.931c.822 2.588 1.598 5.19 2.42 7.778l-2.42-2.615c-.683.598-2.455 2.887-2.34 2.39.871-2.489 1.448-5.07 2.34-7.553Z"
      })
    });
  };
  StartEventEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventMessageIcon = function StartEventMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994 0Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708Zm-7.257 8.732v11.069h14.513v-11.07H8.738Zm3.224 1.73h8.064c-1.428.878-2.857 2.807-4.285 3.018l-3.779-3.019Zm9.562 1.017v6.593H10.465V13.21l5.528 4.417 5.53-4.418Z"
      })
    });
  };
  StartEventMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventMultipleIcon = function StartEventMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.001C9.705-.084 3.643 3.964 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994 0Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626C2.101 23.171.377 16.07 2.848 10.44c2.14-5.205 7.515-8.774 13.147-8.708Zm0 6.328-7.626 5.536c.97 2.986 1.942 5.971 2.913 8.957h9.426l2.912-8.957-7.625-5.536Zm0 1.068 6.609 4.798-2.525 7.763H11.91l-2.524-7.763 6.609-4.798Z"
      })
    });
  };
  StartEventMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingConditionIcon = function StartEventNonInterruptingConditionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M10.632 9.189V22.68h10.723V9.189H10.632Zm.862.865h8.994v11.76H11.494v-11.76Zm.928 1.324v.863h7.138v-.863h-7.138Zm0 2.605v.866h7.138v-.866h-7.138Zm0 3.01v.863h7.138v-.863h-7.138Zm0 2.72v.862h7.138v-.863h-7.138ZM16.12 0h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136-.109-.118-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006l-.216-.042-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006l-.006-.001-.22-.017-.005-.001h-.006L17.06.03h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012L16.132 0h-.012Zm8.715 2.783-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.091-.002-.004-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004ZM6.377 3.21l-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1v.003l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007Zm24.596 11.088-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114v-.008l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01Zm-30.213.66-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V15.95l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004Zm24.585 11.83-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01Zm-19.17.054-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022Z"
      })
    });
  };
  StartEventNonInterruptingConditionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingEscalationIcon = function StartEventNonInterruptingEscalationIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16 9.209c-1.674 4.655-2.735 9.504-4.408 14.16 1.534-1.526 2.873-3.235 4.407-4.761l4.408 4.76c-1.497-4.71-2.91-9.448-4.408-14.16Zm.031 2.93c.822 2.586 1.598 5.187 2.42 7.774l-2.42-2.614c-.682.598-2.453 2.886-2.34 2.389.873-2.488 1.45-5.068 2.34-7.55ZM16.132.364c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374Zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 0 0-.372-.117ZM6.55 3.564c-.734.078-1.196.762-1.735 1.206C3.552 6.02 2.55 7.511 1.681 9.053c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 0 0-.822-.839Zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 0 0 1.761-8.54.865.865 0 0 0-.785-.579Zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786A15.932 15.932 0 0 1 1.728 16a.876.876 0 0 0-.79-.692Zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422Zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443Z"
      })
    });
  };
  StartEventNonInterruptingEscalationIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingMessageIcon = function StartEventNonInterruptingMessageIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M8.746 10.393v11.064h14.506V10.393H8.746Zm3.223 1.728h8.06c-1.428.879-2.856 2.807-4.283 3.018l-3.777-3.018Zm9.557 1.018v6.59H10.473v-6.59l5.525 4.416 5.528-4.416ZM16.132 0c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374Zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 0 0-.372-.117ZM6.55 3.2c-.734.078-1.196.762-1.735 1.206C3.552 5.656 2.55 7.147 1.681 8.69c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 0 0-.822-.839Zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 0 0 1.761-8.54.865.865 0 0 0-.785-.579Zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786a15.932 15.932 0 0 1-1.672-6.874.876.876 0 0 0-.79-.692Zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422Zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443Z"
      })
    });
  };
  StartEventNonInterruptingMessageIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingMultipleIcon = function StartEventNonInterruptingMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M23.621 13.524 16 7.99l-7.622 5.534 2.911 8.952h9.422l2.911-8.952Zm-1.016.33-2.523 7.759h-8.165l-2.524-7.76L16 9.059l6.606 4.796ZM16.132 0c-1.51.016-3.055.139-4.492.614-.854.442-.266 1.861.651 1.578 2.266-.58 4.656-.596 6.944-.144.935.063 1.21-1.391.318-1.674-1.118-.26-2.274-.361-3.42-.374Zm8.865 2.777c-.931-.1-1.262 1.29-.425 1.666 1.863 1.364 3.222 3.298 4.322 5.296.617.737 1.875-.145 1.398-.979-1.184-2.275-2.808-4.384-4.923-5.866a.863.863 0 0 0-.372-.117ZM6.55 3.2c-.734.078-1.196.762-1.735 1.206C3.552 5.656 2.55 7.147 1.681 8.69c-.31.533-.71 1.33-.03 1.767.615.432 1.282-.132 1.446-.742.796-1.475 1.746-2.89 2.934-4.08.43-.548 1.292-.822 1.34-1.595a.874.874 0 0 0-.822-.839Zm24.582 11.078c-.771-.033-1.004.82-.873 1.437.13 2.395-.471 4.797-1.615 6.897-.33.876.984 1.559 1.512.785a14.276 14.276 0 0 0 1.761-8.54.865.865 0 0 0-.785-.579Zm-30.195.666c-.774-.06-1.032.785-.905 1.407.117 2.41.732 4.81 1.858 6.945.528.774 1.84.09 1.51-.786a15.932 15.932 0 0 1-1.672-6.874.876.876 0 0 0-.79-.692Zm24.57 11.817c-.762.099-1.243.835-1.919 1.16-1.514 1.002-3.237 1.632-4.978 2.092-.864.423-.307 1.855.616 1.591 2.528-.578 4.93-1.75 6.913-3.421.469-.522.07-1.42-.631-1.422Zm-19.16.042c-.845.001-1.12 1.228-.395 1.628 1.665 1.401 3.667 2.348 5.76 2.912.618.178 1.482.565 1.893-.177.355-.628-.226-1.297-.87-1.326-1.972-.515-3.912-1.285-5.5-2.594-.26-.213-.522-.472-.888-.443Z"
      })
    });
  };
  StartEventNonInterruptingMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingParallelMultipleIcon = function StartEventNonInterruptingParallelMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M13.503 9.016v4.428H9.075v4.98h4.428v4.428h4.98v-4.427h4.428v-4.981h-4.427V9.016h-4.981Zm.83.83h3.32v4.428h4.428v3.32h-4.428v4.428h-3.32v-4.454H9.905v-3.294h4.428V9.846ZM16.12 0h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136-.109-.118-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006l-.216-.042-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006l-.006-.001-.22-.017-.005-.001h-.006L17.06.03h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012L16.132 0h-.012Zm8.715 2.783-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.091-.002-.004-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004ZM6.377 3.21l-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1v.003l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007Zm24.596 11.088-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114v-.008l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01Zm-30.213.66-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V15.95l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004Zm24.585 11.83-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01Zm-19.17.054-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022Z",
        opacity: ".98"
      })
    });
  };
  StartEventNonInterruptingParallelMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingSignalIcon = function StartEventNonInterruptingSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16.007 8.82 9.21 21.022h13.596L16.007 8.82Zm0 1.775 5.328 9.563H10.68l5.327-9.563ZM16.14.386c-1.571.236-4.195-.284-4.9 1.381.619 1.703 2.745.069 4.085.365 1.421-.13 2.84.2 4.235.259C21.27.784 18.19.344 17 .413a20.456 20.456 0 0 0-.86-.027ZM25 3.162c-2.19.694.401 2.26 1.181 3.094 1.083 1.152 1.954 2.484 2.715 3.864 1.48 1.005 1.845-1.26.81-2.03-1.158-1.897-2.613-3.704-4.513-4.89l-.192-.038Zm-18.438.423c-1.793.712-2.909 2.548-4.01 4.061-.773.814-2.211 3.653.005 3.211 1.123-1.469 1.87-3.306 3.267-4.614.664-.7 2.73-2.013.738-2.658Zm24.57 11.072c-1.659.435-.468 2.667-.99 3.895a13.427 13.427 0 0 1-1.497 4.435c-.23 1.659 1.991 1.165 2.018-.199a14.277 14.277 0 0 0 1.254-7.552.865.865 0 0 0-.785-.579Zm-30.18.666c-1.677.386-.633 2.667-.608 3.876.371 1.623.792 3.35 1.79 4.696 2.382.321.571-2.338.292-3.492a15.92 15.92 0 0 1-.684-4.39.877.877 0 0 0-.79-.69Zm24.558 11.81c-1.755.865-3.303 2.266-5.274 2.765-1.162-.016-3.074 1.271-1.331 2.102 2.66-.447 5.163-1.733 7.236-3.445.472-.506.06-1.432-.631-1.421Zm-19.151.043c-2.004.786.416 2.405 1.43 2.913 1.608.904 3.379 1.636 5.208 1.877 1.77-.804-.228-2.094-1.357-2.073-1.75-.537-3.403-1.396-4.798-2.586l-.227-.104-.256-.027Z"
      })
    });
  };
  StartEventNonInterruptingSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNonInterruptingTimerIcon = function StartEventNonInterruptingTimerIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.991 8.7c-3.018-.042-5.92 1.925-7.03 4.725-1.138 2.695-.509 6.011 1.537 8.102 1.99 2.142 5.267 2.93 8.013 1.927 2.877-.98 4.99-3.826 5.067-6.87.153-2.956-1.624-5.88-4.299-7.135a7.551 7.551 0 0 0-3.288-.75Zm0 1.383c2.758-.052 5.372 1.972 6.014 4.654.704 2.578-.482 5.516-2.79 6.867-2.358 1.48-5.682 1.085-7.617-.919-2.043-1.97-2.407-5.38-.84-7.743 1.11-1.764 3.149-2.88 5.233-2.86Zm1.962 1.764-2.074 3.762c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.182l1.993-3.614-.757-.418ZM16.12.358h-.232l-.22.004h-.012l-.221.006h-.012l-.22.01h-.012l-.22.013h-.012l-.22.016h-.012l-.22.019h-.005l-.006.001-.22.021h-.006l-.005.001-.22.025h-.011l-.22.028h-.005l-.006.002-.219.03h-.005l-.006.001-.218.033-.006.001-.006.001-.217.036-.006.001-.006.001-.217.039-.006.001-.006.001-.216.042-.006.001-.006.001-.215.045-.006.001-.006.002-.215.047-.006.002-.006.001-.214.05-.006.002-.006.002-.115.029-.152.053-.14.081-.122.106-.1.126-.075.143-.047.154-.018.16.012.16.042.156.07.145.095.13.118.11.137.086.15.059.158.03h.161l.132-.022.11-.028.202-.047.203-.046.208-.043.202-.039.206-.037.206-.034.205-.03.208-.03.205-.025.209-.023.208-.02.21-.017.209-.015.207-.011.21-.009.21-.006.207-.003h.21l.21.002.207.005.207.008.212.011.207.014.208.017.209.019.208.022.205.025.206.028.207.03.208.035.205.036.202.039.052.01.16.018.16-.012.156-.042.146-.07.13-.096.109-.119.085-.136.06-.15.03-.159v-.16l-.03-.16-.059-.15-.086-.136L19.823.9l-.13-.096-.145-.07-.128-.038-.057-.011-.006-.002h-.006L19.135.64l-.006-.001-.006-.001-.217-.039H18.9l-.006-.002-.217-.035-.006-.001-.006-.001-.218-.032-.006-.001-.006-.001-.218-.03h-.006l-.006-.001-.219-.027h-.011l-.22-.024-.005-.001h-.006l-.22-.021h-.006L17.512.42l-.22-.017-.005-.001h-.006l-.22-.015h-.012l-.22-.012h-.012l-.22-.01h-.012l-.22-.005h-.012l-.221-.003h-.012Zm8.715 2.783-.157.034-.149.063-.134.089-.116.112-.092.132-.067.147-.038.157-.008.16.021.16.051.153.079.141.103.124.102.087.052.038h.001l.087.064v.001l.082.061.002.001.076.059h.001l.084.065.082.066.002.001.079.063.002.002.077.063.081.067.002.002.077.065.076.065.001.002.08.07.078.07h.002l.075.068.077.072.002.001.073.069.077.073.072.07.002.001.077.076.07.07v.001l.075.076.07.073.002.001.074.079.002.002.069.074.069.075.074.082.07.08.002.001.068.079h.001l.067.079.068.082.065.078.001.002.068.083.067.084.063.081.001.002.067.087.002.002.063.084.001.001.064.087.008.01.008.01.095.12.093.121.09.119.087.119.088.122.086.123.084.12.081.122.001.002.084.126.08.126.08.127.077.126.079.131.074.127.075.131.073.131.07.13.07.133.069.133.045.09.086.137.109.119.13.096.144.07.156.042.16.013.16-.017.155-.047.143-.075.126-.1.106-.121.082-.14.054-.151.025-.16-.005-.16-.035-.158-.05-.124-.048-.095-.002-.004-.002-.004-.073-.14-.002-.005-.002-.004-.074-.14-.002-.004-.002-.004-.076-.14-.002-.003-.002-.004-.077-.139-.003-.004-.002-.004-.078-.138-.003-.004-.002-.003-.08-.137-.002-.004-.003-.004-.081-.136-.002-.004-.003-.004-.083-.136-.002-.003-.002-.004-.085-.135-.002-.004-.003-.003-.085-.134-.003-.004-.002-.004-.087-.132-.003-.004-.003-.004-.088-.132-.003-.003-.002-.004-.09-.13-.003-.005-.003-.003-.091-.13-.003-.004-.002-.004-.093-.129-.003-.003-.003-.004-.094-.128-.003-.004-.003-.003-.095-.127-.003-.004-.003-.004-.097-.125-.003-.004-.003-.004-.09-.114-.06-.082-.003-.003-.002-.003-.069-.092-.002-.003-.002-.003-.07-.09-.003-.003-.002-.003-.07-.09-.003-.003-.002-.003-.071-.09-.002-.003-.003-.002-.072-.089-.002-.003-.002-.003-.073-.088-.002-.003-.002-.002-.074-.087-.002-.003-.002-.003-.074-.086-.003-.003-.002-.003-.074-.086-.003-.002-.002-.003-.075-.085-.003-.003-.002-.002-.076-.084-.002-.003-.003-.003-.076-.083-.002-.003-.003-.003-.077-.082-.002-.003-.003-.002-.077-.082-.003-.003-.003-.002-.078-.081-.002-.003-.003-.003-.078-.08-.003-.002-.003-.003-.079-.08-.002-.002-.003-.002-.08-.08-.002-.002-.003-.002-.08-.078-.003-.003-.003-.002-.08-.077-.003-.003-.003-.002-.082-.077-.002-.002-.003-.002-.082-.076-.003-.002-.002-.003-.083-.075-.003-.002-.002-.003-.084-.074-.002-.002-.003-.002-.084-.074-.003-.002-.002-.002-.085-.073-.002-.002-.003-.003-.085-.071-.003-.003-.002-.002-.086-.07-.003-.003-.002-.002-.086-.07-.003-.003-.003-.002-.086-.07-.003-.002-.003-.002-.087-.069-.002-.002-.003-.002-.088-.068-.002-.002-.003-.002-.088-.067-.003-.003-.003-.002-.088-.066-.003-.002-.003-.002-.089-.066-.003-.002-.003-.002-.057-.042-.14-.082-.15-.055-.16-.026-.16.004Zm-18.458.426-.157.037-.148.066-.111.074-.007.006-.003.002-.003.002-.086.069-.003.002-.002.002-.086.07-.003.002-.002.002-.086.07-.002.003-.003.002-.085.071-.002.002-.003.003-.084.071-.003.003-.002.002-.084.072-.003.003-.002.002-.083.073-.003.003-.002.002-.083.074-.002.002-.003.003-.082.074-.003.003-.002.002-.081.076-.003.002-.003.002-.08.077-.003.002-.003.003-.08.076-.002.003-.003.002-.08.078-.002.002-.003.003-.079.078-.002.003-.003.002-.078.08-.003.002-.002.002-.078.08-.002.003-.003.002-.077.08-.003.004-.002.002-.077.081-.002.003-.003.003-.076.082-.002.002-.003.003-.075.082-.002.003-.003.003-.074.083-.003.003-.002.003-.074.084-.003.003-.002.002-.074.085-.002.003-.002.003-.073.085-.003.003-.002.003-.072.086-.002.003-.003.003-.071.087-.003.003-.002.002-.07.088-.003.003-.002.003-.07.088-.003.003-.002.003-.07.09-.002.002-.002.003-.069.09-.002.003-.003.003-.068.09-.002.003-.002.003-.067.092-.003.003-.002.003-.067.092-.002.003-.002.003-.066.092-.002.003-.002.004-.066.093-.002.003-.002.003-.065.094-.002.003-.002.004-.064.094-.002.003-.002.004-.063.095-.002.003-.002.003-.063.097-.002.003-.002.003-.046.073-.05.07-.003.002-.002.003-.067.093-.003.003-.002.003-.066.094-.002.003-.002.003-.066.094-.002.003-.002.003-.064.094-.002.004-.002.003-.064.094-.002.004-.002.003-.062.095-.002.003-.002.003-.062.096-.002.003-.002.003-.06.096-.003.003-.002.003-.06.096-.001.004-.002.003-.059.096-.002.004-.002.003-.058.097-.002.003-.001.003-.057.098-.002.003-.002.003-.056.098-.002.003-.002.003-.055.098-.002.004-.001.003-.055.098-.001.004-.002.003-.054.099-.001.003-.002.003-.052.1-.002.002-.002.004-.051.1-.002.002-.002.004-.05.1-.002.003-.002.003-.05.1v.003l-.002.004-.05.1V9.5l-.002.004-.048.1-.002.004-.001.003-.047.101-.002.003-.001.004-.013.027-.052.152-.024.16.006.16.037.157.064.148.091.133.114.114.134.09.147.065.157.036.162.006.159-.024.152-.053.14-.08.122-.105.1-.126.066-.117.01-.023.044-.095.045-.095.002-.003.042-.087.048-.097.048-.095v-.001l.048-.092.001-.001.047-.09.05-.093.002-.002.049-.09.052-.092.001-.002.051-.089.001-.002.051-.087.053-.088.001-.002.055-.091.057-.091.057-.09.001-.002.057-.089.055-.083.001-.002.06-.09.06-.088.062-.089.001-.001.06-.084.063-.088.065-.089.017-.023.016-.025.06-.094.059-.09v-.002l.058-.086.057-.086.001-.001.062-.09.062-.088.001-.002.06-.085.002-.002.06-.082.063-.087.064-.084.002-.002.061-.08.065-.084.064-.08v-.001l.067-.083.067-.082.07-.083.069-.08.063-.074.074-.083.068-.077.002-.002.07-.076.07-.075.072-.077.001-.001.067-.07.076-.078.002-.002.07-.07.075-.075.002-.002.072-.07.075-.072.002-.002.073-.069.074-.068.001-.001.08-.073.076-.068.002-.002.072-.063v-.001l.078-.067.079-.068.002-.001.08-.068.002-.002.077-.063.082-.066.001-.001.075-.06.002-.002.006-.004.117-.111.094-.131.068-.146.04-.156.01-.161-.019-.16-.049-.154-.076-.141-.102-.125-.123-.105-.14-.079-.153-.052-.16-.023-.16.007Zm24.596 11.088-.156.04-.146.067-.131.094-.112.117-.087.135-.061.15-.033.157-.004.134.007.142.005.152.004.15.002.149v.153l.001.011v.015l.004.11.002.11v.002l.002.106v.321l-.003.102-.002.106-.004.107-.005.105-.006.106-.006.106-.008.106v.002l-.008.103v.002l-.01.1-.01.105-.01.105-.013.105-.012.099v.002l-.014.108-.014.1-.016.105-.016.103v.002l-.017.099-.018.104-.019.103v.002l-.019.097-.02.104-.022.103v.001l-.022.098-.023.103v.002l-.024.096-.025.103v.002l-.024.096-.027.102v.003l-.026.093v.001l-.029.103v.002l-.03.099-.028.097v.002l-.03.095-.03.096v.001l-.033.1-.031.095v.002l-.035.1v.003l-.034.094v.003l-.035.096v.001l-.034.09v.002l-.038.098-.036.093v.002l-.038.095-.079.194-.08.188-.085.189-.087.19-.09.184-.092.183-.095.184-.05.093-.064.148-.034.158-.005.16.026.16.054.151.082.14.106.12.127.1.143.075.154.046.16.017.161-.013.156-.042.144-.071.13-.096.109-.119.072-.112.053-.099.003-.005.003-.006.102-.195.003-.006.003-.006.098-.196.003-.006.003-.006.096-.197.002-.006.003-.006.093-.2.002-.006.003-.006.09-.2.002-.006.003-.007.086-.202.003-.006.002-.006.084-.203.002-.005.001-.005.04-.102.002-.003.001-.003.04-.103.001-.003.001-.003.04-.103v-.004l.001-.003.039-.103v-.003l.002-.003.037-.104.001-.003.001-.003.037-.104v-.004l.002-.003.035-.104.002-.003v-.004l.035-.104.002-.004v-.003l.034-.105.002-.003v-.003l.034-.105v-.004l.002-.003.032-.106.001-.003.001-.003.031-.106.001-.003.001-.004.031-.106.001-.003.001-.004.03-.106v-.003l.002-.004.028-.107.001-.003.001-.003.028-.107.001-.004.001-.003.027-.107.001-.004v-.003l.027-.108.001-.003v-.004l.026-.108.001-.003v-.004l.025-.108.001-.003v-.004l.025-.108v-.004l.001-.003.023-.109v-.003l.001-.004.022-.109v-.003l.002-.004.02-.109.001-.004v-.003l.02-.11.002-.003v-.004l.02-.11v-.007l.019-.11v-.003l.001-.004.017-.11v-.004l.001-.003.017-.11v-.008l.016-.11v-.004l.001-.004.015-.11v-.008l.015-.111v-.008l.013-.111v-.007l.013-.112v-.007l.011-.112v-.004l.001-.004.01-.112v-.007l.01-.112v-.008l.008-.112v-.008l.007-.113v-.007l.007-.113v-.008l.005-.113v-.007l.005-.114v-.007l.003-.114v-.007l.003-.114v-.129l.001-.114v-.13l-.003-.114V16.5l-.003-.115v-.007l-.003-.102v-.155l-.003-.158v-.01l-.004-.158v-.01l-.006-.158v-.01l-.007-.148-.023-.16-.051-.152-.08-.14-.103-.124-.125-.102-.142-.077-.153-.05-.16-.02-.161.01Zm-30.213.66-.157.034-.149.063-.134.09-.115.113-.092.132-.067.147-.037.156-.009.134.001.11V16.308l.006.22v.012l.01.22v.012l.012.22v.006l.001.006.015.22v.005l.001.006.018.22.001.006v.006l.022.219v.006l.001.006.024.219.001.006v.006l.028.218.001.006v.006l.031.218.001.006.001.006.033.218.001.006.001.005.037.218v.006l.002.005.04.217v.006l.001.006.043.216.001.006.001.006.046.216v.005l.002.006.048.215.002.006.001.006.051.214.002.006v.006l.055.214.002.005.001.006.057.213.002.006.001.005.06.213.002.005.001.006.063.212.002.005.001.006.066.21.002.006.002.006.068.21.002.005.002.005.07.21.003.005.002.005.074.208.002.006.002.005.077.207.002.006.002.005.08.206.002.005.002.006.082.204.002.006.002.005.086.204.002.005.002.006.088.202.002.005.003.006.09.2.003.006.002.005.094.2.002.006.003.005.096.199.002.005.003.005.03.062.086.137.11.118.128.097.145.07.156.043.16.013.16-.017.155-.047.143-.074.127-.1.106-.121.081-.14.055-.15.025-.16-.005-.161-.034-.158-.05-.124-.028-.055-.092-.19-.087-.188-.087-.192-.083-.19-.08-.193-.078-.194-.076-.196-.073-.195-.07-.197-.067-.198-.065-.199-.063-.2-.059-.2-.056-.2-.055-.204-.05-.201-.049-.202-.046-.205-.043-.206-.04-.203-.038-.207-.034-.204-.032-.207-.028-.205-.026-.207-.023-.208-.02-.207-.018-.207-.014-.208-.011-.207-.009-.208-.005-.207-.002-.104-.017-.16-.046-.155-.074-.143-.1-.126-.121-.107-.139-.081-.152-.055-.159-.025-.161.004Zm24.585 11.83-.156.039-.146.068-.11.076-.015.012-.163.129-.166.127-.168.125-.17.124-.17.12-.172.118-.173.115-.176.114-.177.111-.18.11-.178.105-.182.104-.182.101-.184.1-.184.095-.189.095-.186.09-.188.089-.19.086-.19.082-.193.081-.195.078-.191.074-.197.073-.195.07-.196.065-.198.064-.198.061-.2.058-.2.055-.2.052-.2.049-.151.035-.153.05-.141.078-.125.103-.103.124-.078.14-.05.154-.022.16.009.16.038.157.067.147.093.132.116.112.134.089.149.062.158.034.16.003.133-.02.158-.035.006-.002.006-.001.213-.052.006-.002.007-.001.212-.056.006-.001.006-.002.212-.058.006-.002.006-.002.211-.061.006-.002.006-.002.21-.064.006-.002.006-.002.21-.067.005-.002.006-.002.208-.07.006-.002.006-.003.207-.073.006-.002.006-.002.206-.077.006-.002.005-.002.206-.08.005-.001.006-.003.204-.082.006-.002.005-.002.203-.085.006-.003.005-.002.202-.088.006-.002.005-.003.2-.09.006-.003.006-.003.2-.093.005-.003.005-.002.198-.096.006-.003.005-.003.197-.099.005-.002.005-.003.196-.102.005-.002.005-.003.195-.105.005-.002.005-.003.193-.107.005-.003.005-.003.191-.11.005-.003.005-.003.19-.112.005-.003.005-.003.189-.115.005-.003.005-.003.187-.117.005-.003.004-.004.186-.12.005-.003.004-.003.184-.122.005-.003.005-.004.182-.125.004-.003.005-.003.18-.128.005-.003.005-.003.179-.13.004-.003.005-.004.177-.132.004-.004.005-.003.175-.135.005-.003.004-.004.173-.137.005-.003.004-.004.019-.015.115-.113.092-.132.066-.147.038-.157.008-.16-.022-.16-.052-.153-.079-.14-.103-.124-.125-.102-.142-.078-.153-.05-.16-.02-.16.01Zm-19.17.054-.153.051-.14.079-.124.103-.103.125-.077.141-.05.153-.02.16.009.161.04.156.067.147.093.131.095.094.047.04.005.004.005.004.17.14.005.004.005.004.172.137.004.004.005.003.086.067.003.002.003.002.087.067.003.002.003.002.088.066.002.003.003.002.089.065.002.002.003.002.09.065.002.002.003.002.09.064.002.002.003.002.09.063.003.002.003.002.09.063.003.002.003.002.092.062.002.002.003.002.092.061.003.002.003.002.092.06.003.003.003.001.093.06.003.002.003.002.093.06.003.001.003.002.094.058.003.002.003.002.095.058.003.001.003.002.095.057.003.002.003.002.095.056.003.002.003.002.096.055.004.002.003.001.096.055.003.002.003.002.098.053.003.002.003.002.097.053.004.002.003.001.098.053.003.001.003.002.099.052.003.001.003.002.1.05.003.002.003.002.1.05.003.002.003.001.1.05h.003l.004.003.1.048.004.001.003.002.101.048.003.001.004.002.101.046.004.002.003.001.102.046.004.002.003.001.103.045.003.002.003.001.103.045.004.001.003.002.104.043.003.001.004.002.104.042.003.002.004.001.104.042.004.001.003.002.105.04.004.002.003.001.106.04.003.002h.004l.106.04.004.001.003.002.107.038.003.001.004.001.107.038.003.001.004.001.107.037.004.001.004.001.108.036.003.001.004.001.108.035.004.001.003.001.11.034.003.001.004.001.109.033.004.002h.003l.11.033h.004l.003.002.11.031.004.001.004.001.084.023.081.028.004.001.003.001.109.037.003.001.004.001.109.036.003.001.004.001.109.035h.003l.004.002.11.033.003.001.003.001.11.033.003.001.004.001.109.031.004.002h.003l.11.031.003.001.004.001.11.03h.003l.003.001.11.029h.004l.003.002.11.027.003.001.004.001.11.027h.003l.004.001.004.001.16.022.16-.008.157-.038.147-.067.132-.092.112-.116.09-.134.062-.149.034-.157.004-.161-.025-.16-.055-.151-.082-.139-.107-.12-.127-.1-.143-.074-.124-.04h-.003l-.104-.025-.103-.026h-.002l-.095-.026h-.001l-.101-.027h-.002l-.1-.028h-.002l-.103-.03-.104-.032-.097-.03h-.002l-.103-.033-.102-.033-.101-.034-.106-.036-.027-.01-.027-.007-.107-.03-.104-.029-.104-.03h-.002l-.097-.03-.102-.032-.102-.032-.102-.034-.103-.035-.096-.034-.1-.036-.101-.037h-.002l-.094-.036-.096-.037-.097-.04h-.002l-.099-.04-.098-.042h-.002l-.092-.04-.097-.043-.095-.043-.097-.044h-.002l-.09-.043-.094-.045-.094-.046-.093-.047-.09-.046-.096-.05-.088-.047-.002-.001-.09-.049-.094-.052-.002-.002-.087-.049-.087-.05h-.002l-.088-.053h-.001l-.09-.055-.086-.052-.002-.001-.089-.055-.084-.054h-.002l-.09-.059h-.001l-.085-.056-.001-.001-.084-.056-.082-.056h-.001l-.086-.06-.082-.058H7.79l-.086-.062-.002-.002-.08-.058-.081-.06h-.001l-.085-.064-.002-.002-.076-.058-.002-.002-.082-.064-.161-.128-.162-.133-.04-.034-.132-.092-.147-.066-.157-.038-.16-.008-.16.022Z"
      })
    });
  };
  StartEventNonInterruptingTimerIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventNoneIcon = function StartEventNoneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.847.004C9.61-.016 3.624 4.014 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.101 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.268.403-6.228-3.26-12.441-8.87-15.154A15.924 15.924 0 0 0 15.846.004Zm.439 1.729c6.105.033 11.856 4.45 13.435 10.359 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.625-4.814-3.84-6.538-10.94-4.067-16.57 2.14-5.206 7.515-8.775 13.147-8.71.097-.001.194-.002.29-.001Z"
      })
    });
  };
  StartEventNoneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventParallelMultipleIcon = function StartEventParallelMultipleIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.847 0C9.61-.02 3.624 4.01 1.257 9.775-1.235 15.485.06 22.577 4.42 27.03c4.193 4.513 11.101 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.268.403-6.228-3.26-12.441-8.87-15.154A15.924 15.924 0 0 0 15.846 0Zm.439 1.729c6.105.033 11.856 4.45 13.435 10.359 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.625C2.101 23.17.377 16.07 2.848 10.44c2.134-5.2 7.522-8.78 13.147-8.71.097-.001.194-.002.29-.001ZM13.504 9.08v4.427H9.077v4.98h4.427v4.427h4.98v-4.427h4.428v-4.98h-4.427V9.08h-4.98Zm.83.83h3.32v4.427h4.428v3.32h-4.427v4.427h-3.32v-4.453H9.906v-3.294h4.427V9.91Z"
      })
    });
  };
  StartEventParallelMultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventSignalIcon = function StartEventSignalIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M15.995.005C9.705-.08 3.643 3.968 1.257 9.78-1.235 15.49.06 22.581 4.42 27.034c4.193 4.513 11.102 6.17 16.887 4.058 5.996-2.042 10.423-7.93 10.664-14.269.403-6.227-3.26-12.44-8.87-15.153A15.924 15.924 0 0 0 15.994.005Zm0 1.73c6.213-.108 12.122 4.355 13.726 10.357 1.678 5.653-.592 12.198-5.463 15.547-5.06 3.719-12.564 3.45-17.343-.626-4.814-3.838-6.538-10.939-4.067-16.57 2.14-5.205 7.515-8.774 13.147-8.708Zm0 6.776L9.19 20.724H22.8L15.995 8.511Zm0 1.777 5.332 9.572H10.662l5.333-9.572Z"
      })
    });
  };
  StartEventSignalIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var StartEventTimerIcon = function StartEventTimerIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M16 0C7.174 0 0 7.174 0 16s7.174 16 16 16 16-7.174 16-16S24.826 0 16 0Zm0 1.73c7.892 0 14.27 6.378 14.27 14.27 0 7.891-6.379 14.27-14.27 14.27S1.73 23.891 1.73 16C1.73 8.108 8.108 1.73 16 1.73Zm-.143 6.676c-2.967.02-5.797 1.97-6.89 4.727-1.138 2.695-.51 6.012 1.537 8.102 1.99 2.142 5.268 2.932 8.014 1.928 2.878-.98 4.992-3.827 5.068-6.87.153-2.957-1.624-5.881-4.3-7.137a7.552 7.552 0 0 0-3.43-.75Zm.27 1.383c2.71.012 5.254 2.015 5.886 4.656.704 2.577-.482 5.517-2.791 6.867-2.358 1.48-5.682 1.085-7.618-.918-2.043-1.971-2.407-5.381-.84-7.745 1.11-1.763 3.15-2.88 5.234-2.86h.13Zm1.833 1.765-2.074 3.763c-.64.068-.793 1.04-.202 1.3.39.27.696-.18 1.052-.165h3.17v-.865h-3.181l1.992-3.615-.757-.418Z"
      })
    });
  };
  StartEventTimerIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var SubprocessCollapsedIcon = function SubprocessCollapsedIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M5.637 3A5.644 5.644 0 0 0 0 8.637v15.417a5.644 5.644 0 0 0 5.637 5.637h20.726A5.644 5.644 0 0 0 32 24.054V8.637A5.644 5.644 0 0 0 26.363 3H5.637Zm0 1.778h20.726a3.83 3.83 0 0 1 3.859 3.859v15.417a3.83 3.83 0 0 1-3.859 3.858h-4.201V16.695H9.838v11.217H5.637a3.83 3.83 0 0 1-3.859-3.858V8.637a3.83 3.83 0 0 1 3.859-3.859Zm5.33 13.046h10.066v10.065H10.967V17.824Zm4.189 1.431V22.06H12.35v1.689h2.804V26.554h1.69V23.749h2.804V22.06h-2.804V19.255h-1.69Z"
      })
    });
  };
  SubprocessCollapsedIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var SubprocessExpandedIcon = function SubprocessExpandedIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M5.636 3A5.642 5.642 0 0 0 0 8.636v15.418a5.643 5.643 0 0 0 5.636 5.636h20.728A5.643 5.643 0 0 0 32 24.054V8.636A5.642 5.642 0 0 0 26.364 3H5.636Zm0 1.778h20.728a3.83 3.83 0 0 1 3.858 3.858v15.418a3.83 3.83 0 0 1-3.858 3.858h-4.203V16.723H9.84v11.189H5.636a3.83 3.83 0 0 1-3.858-3.858V8.636a3.83 3.83 0 0 1 3.858-3.858Zm5.331 13.074h10.066v10.06H10.967v-10.06Zm1.336 3.996v1.711h7.394v-1.71h-7.394Z"
      })
    });
  };
  SubprocessExpandedIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var TaskNoneIcon = function TaskNoneIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M6.494 2.667C2.916 2.667 0 5.57 0 9.142v13.383C0 26.097 2.916 29 6.494 29h19.012C29.084 29 32 26.097 32 22.525V9.142c0-3.572-2.916-6.475-6.494-6.475H6.494Zm0 2h19.012c2.509 0 4.494 1.98 4.494 4.475v13.383C30 25.02 28.015 27 25.506 27H6.494C3.985 27 2 25.02 2 22.525V9.142c0-2.495 1.985-4.475 4.494-4.475Z"
      })
    });
  };
  TaskNoneIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var TextAnnotationicon = function TextAnnotationicon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M22.087 0v31.647H32v-1.788h-8.125V1.788H32V0h-9.913Zm-2.924 13.999-2.737 2.167 2.167 2.738 2.738-2.167-2.168-2.738Zm-5.475 4.335L10.95 20.5l2.168 2.738 2.737-2.168-2.167-2.737Zm-5.475 4.335-2.738 2.167 2.168 2.738 2.737-2.168-2.167-2.737Zm-5.476 4.335L0 29.17l2.167 2.738 2.738-2.168-2.168-2.737Z"
      })
    });
  };
  TextAnnotationicon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var TransactionIcon = function TransactionIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        d: "M5.422 3A5.424 5.424 0 0 0 0 8.422v15.822a5.424 5.424 0 0 0 5.422 5.423h21.156A5.424 5.424 0 0 0 32 24.244V8.422A5.424 5.424 0 0 0 26.578 3H5.422Zm0 1.244h21.156a4.155 4.155 0 0 1 4.178 4.178v15.822a4.155 4.155 0 0 1-4.178 4.178H5.422a4.155 4.155 0 0 1-4.178-4.178V8.422a4.155 4.155 0 0 1 4.178-4.178Zm1.056 1.778a3.373 3.373 0 0 0-3.367 3.366v13.89a3.373 3.373 0 0 0 3.367 3.366h19.044a3.373 3.373 0 0 0 3.367-3.366V9.388a3.373 3.373 0 0 0-3.367-3.366H6.478Zm0 1.245h19.044c1.187 0 2.122.935 2.122 2.121v13.89a2.104 2.104 0 0 1-2.122 2.122H6.478a2.104 2.104 0 0 1-2.122-2.122V9.388c0-1.186.935-2.121 2.122-2.121Z"
      })
    });
  };
  TransactionIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var UserTaskIcon = function UserTaskIcon(props) {
    return u("svg", {
      ...props,
      children: u("path", {
        fillRule: "evenodd",
        d: "M10.263 7.468c-1.698 0-2.912 1.305-2.915 2.791v.001c0 .45.121.924.311 1.352.138.309.308.593.516.82-1.235.423-2.683 1.119-3.414 2.49l-.04.075v4.44h11.083v-4.44l-.04-.074c-.72-1.352-2.136-2.047-3.36-2.471.597-.608.774-1.392.774-2.192-.004-1.487-1.218-2.792-2.915-2.792Zm-1.16 1.583c.08 0 .165.003.26.008.757.045 1.012.181 1.207.31.196.13.334.252.851.268.404-.016.598-.087.737-.169.056-.033.103-.067.152-.1.128.275.197.578.198.893 0 .894-.154 1.52-.975 2.034l.08.604c.171.052.348.11.527.171.025.105.054.242.073.387.02.153.029.311.016.43a.422.422 0 0 1-.056.19c-.417.417-1.157.66-1.908.66-.75 0-1.49-.243-1.908-.66a.422.422 0 0 1-.056-.19 1.949 1.949 0 0 1 .016-.43c.02-.146.049-.284.074-.388.177-.062.352-.118.521-.17l.048-.648a.616.616 0 0 0-.126-.118c-.183-.138-.405-.44-.562-.793-.157-.353-.254-.757-.254-1.08 0-.387.105-.758.297-1.079l.11-.04c.143-.046.339-.09.679-.09Zm-1.448 4.304-.002.014c-.025.185-.04.387-.018.589.021.202.074.42.248.593.595.594 1.494.857 2.382.857.889 0 1.788-.263 2.382-.857.174-.174.227-.391.249-.593a2.496 2.496 0 0 0-.018-.59l-.002-.01c.903.396 1.776.963 2.258 1.81v3.599H13.53v-2.538h-.67v2.538H7.651v-2.538h-.67v2.538H5.39v-3.599c.483-.849 1.359-1.416 2.264-1.813ZM6.495 3C2.914 3 0 5.903 0 9.475v13.383c0 3.572 2.916 6.475 6.494 6.475h19.012c3.578 0 6.494-2.903 6.494-6.475V9.475C32 5.903 29.084 3 25.506 3H6.494Zm0 2h19.01C28.016 5 30 6.98 30 9.475v13.383c0 2.495-1.985 4.475-4.494 4.475H6.494C3.985 27.333 2 25.353 2 22.858V9.475C2 6.98 3.985 5 6.494 5Z"
      })
    });
  };
  UserTaskIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    width: "32",
    height: "32"
  };
  var iconsByType = {
    'Association': AssociationIcon,
    'BusinessRuleTask': BusinessRuleTaskIcon,
    'CallActivity': CallActivityIcon,
    'Collaboration': CollaborationIcon,
    'ConditionalFlow': ConditionalFlowIcon,
    'SequenceFlow': ConnectionIcon,
    'DataInput': DataInputIcon,
    'DataInputAssociation': DataInputOutputAssociationIcon,
    'DataOutput': DataOutputIcon,
    'DataOutputAssociation': DataInputOutputAssociationIcon,
    'DataObjectReference': DataObjectIcon,
    'DataStoreReference': DataStoreIcon,
    'DefaultFlow': DefaultFlowIcon,
    'CancelEndEvent': EndEventCancelIcon,
    'CompensateEndEvent': EndEventCompensationIcon,
    'ErrorEndEvent': EndEventErrorIcon,
    'EscalationEndEvent': EndEventEscalationIcon,
    'LinkEndEvent': EndEventLinkIcon,
    'MessageEndEvent': EndEventMessageIcon,
    'MultipleEndEvent': EndEventMultipleIcon,
    'EndEvent': EndEventNoneIcon,
    'SignalEndEvent': EndEventSignalIcon,
    'TerminateEndEvent': EndEventTerminateIcon,
    'EventSubProcess': EventSubProcessExpandedIcon,
    'ComplexGateway': GatewayComplexIcon,
    'EventBasedGateway': GatewayEventBasedIcon,
    'ExclusiveGateway': GatewayXorIcon,
    'Gateway': GatewayNoneIcon,
    'InclusiveGateway': GatewayOrIcon,
    'ParallelGateway': GatewayParallelIcon,
    'Group': GroupIcon,
    'CancelIntermediateCatchEvent': IntermediateEventCatchCancelIcon,
    'CompensateIntermediateCatchEvent': IntermediateEventCatchCompensationIcon,
    'ConditionalIntermediateCatchEvent': IntermediateEventCatchConditionIcon,
    'ErrorIntermediateCatchEvent': IntermediateEventCatchErrorIcon,
    'EscalationIntermediateCatchEvent': IntermediateEventCatchEscalationIcon,
    'LinkIntermediateCatchEvent': IntermediateEventCatchLinkIcon,
    'MessageIntermediateCatchEvent': IntermediateEventCatchMessageIcon,
    'MultipleIntermediateCatchEvent': IntermediateEventCatchMultipleIcon,
    'ConditionalIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingConditionIcon,
    'EscalationIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingEscalationIcon,
    'MessageIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingMessageIcon,
    'MultipleIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingMultipleIcon,
    'ParallelIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingParallelIcon,
    'SignalIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingSignalIcon,
    'TimerIntermediateCatchEventNonInterrupting': IntermediateEventCatchNonInterruptingTimerIcon,
    'ParallelMultipleIntermediateCatchEvent': IntermediateEventCatchParallelMultipleIcon,
    'SignalIntermediateCatchEvent': IntermediateEventCatchSignalIcon,
    'TimerIntermediateCatchEvent': IntermediateEventCatchTimerIcon,
    'IntermediateThrowEvent': IntermediateEventNoneIcon,
    'CompensateIntermediateThrowEvent': IntermediateEventThrowCompensationIcon,
    'EscalationIntermediateThrowEvent': IntermediateEventThrowEscalationIcon,
    'LinkIntermediateThrowEvent': IntermediateEventThrowLinkIcon,
    'MessageIntermediateThrowEvent': IntermediateEventThrowMessageIcon,
    'MultipleIntermediateThrowEvent': IntermediateEventThrowMultipleIcon,
    'SignalIntermediateThrowEvent': IntermediateEventThrowSignalIcon,
    'Lane': LaneIcon,
    'ManualTask': ManualTaskIcon,
    'MessageFlow': MessageFlowIcon,
    'Participant': ParticipantIcon,
    'Process': ProcessIcon,
    'ReceiveTask': ReceiveTaskIcon,
    'ScriptTask': ScriptTaskIcon,
    'SendTask': SendTaskIcon,
    'ServiceTask': ServiceTaskIcon,
    'CompensateStartEvent': StartEventCompensationIcon,
    'ConditionalStartEvent': StartEventConditionIcon,
    'ErrorStartEvent': StartEventErrorIcon,
    'EscalationStartEvent': StartEventEscalationIcon,
    'MessageStartEvent': StartEventMessageIcon,
    'MultipleStartEvent': StartEventMultipleIcon,
    'ConditionalStartEventNonInterrupting': StartEventNonInterruptingConditionIcon,
    'EscalationStartEventNonInterrupting': StartEventNonInterruptingEscalationIcon,
    'MessageStartEventNonInterrupting': StartEventNonInterruptingMessageIcon,
    'MultipleStartEventNonInterrupting': StartEventNonInterruptingMultipleIcon,
    'ParallelMultipleStartEventNonInterrupting': StartEventNonInterruptingParallelMultipleIcon,
    'SignalStartEventNonInterrupting': StartEventNonInterruptingSignalIcon,
    'TimerStartEventNonInterrupting': StartEventNonInterruptingTimerIcon,
    'CancelBoundaryEvent': IntermediateEventCatchCancelIcon,
    'CompensateBoundaryEvent': IntermediateEventCatchCompensationIcon,
    'ConditionalBoundaryEvent': IntermediateEventCatchConditionIcon,
    'ErrorBoundaryEvent': IntermediateEventCatchErrorIcon,
    'EscalationBoundaryEvent': IntermediateEventCatchEscalationIcon,
    'LinkBoundaryEvent': IntermediateEventCatchLinkIcon,
    'MessageBoundaryEvent': IntermediateEventCatchMessageIcon,
    'MultipleBoundaryEvent': IntermediateEventCatchMultipleIcon,
    'BoundaryEvent': IntermediateEventNoneIcon,
    'ConditionalBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingConditionIcon,
    'EscalationBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingEscalationIcon,
    'MessageBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingMessageIcon,
    'MultipleBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingMultipleIcon,
    'ParallelBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingParallelIcon,
    'SignalBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingSignalIcon,
    'TimerBoundaryEventNonInterrupting': IntermediateEventCatchNonInterruptingTimerIcon,
    'ParallelMultipleBoundaryEvent': IntermediateEventCatchParallelMultipleIcon,
    'SignalBoundaryEvent': IntermediateEventCatchSignalIcon,
    'TimerBoundaryEvent': IntermediateEventCatchTimerIcon,
    'StartEvent': StartEventNoneIcon,
    'ParallelMultipleStartEvent': StartEventParallelMultipleIcon,
    'SignalStartEvent': StartEventSignalIcon,
    'TimerStartEvent': StartEventTimerIcon,
    'CollapsedSubProcess': SubprocessCollapsedIcon,
    'CollapsedAdHocSubProcess': SubprocessCollapsedIcon,
    'ExpandedSubProcess': SubprocessExpandedIcon,
    'ExpandedAdHocSubProcess': SubprocessExpandedIcon,
    'Task': TaskNoneIcon,
    'TextAnnotation': TextAnnotationicon,
    'Transaction': TransactionIcon,
    'UserTask': UserTaskIcon
  };

  function getConcreteType(element) {
    const {
      type: elementType
    } = element;
    let type = getRawType(elementType);

    // (1) event definition types
    const eventDefinition = getEventDefinition$2(element);
    if (eventDefinition) {
      type = `${getEventDefinitionPrefix(eventDefinition)}${type}`;

      // (1.1) interrupting / non interrupting
      if (is$1(element, 'bpmn:StartEvent') && !isInterrupting(element) || is$1(element, 'bpmn:BoundaryEvent') && !isCancelActivity(element)) {
        type = `${type}NonInterrupting`;
      }
      return type;
    }

    // (2) sub process types
    if (is$1(element, 'bpmn:SubProcess') && !is$1(element, 'bpmn:Transaction')) {
      if (isEventSubProcess(element)) {
        type = `Event${type}`;
      } else {
        const expanded = isExpanded(element) && !isPlane(element);
        type = `${expanded ? 'Expanded' : 'Collapsed'}${type}`;
      }
    }

    // (3) conditional + default flows
    if (isDefaultFlow(element)) {
      type = 'DefaultFlow';
    }
    if (isConditionalFlow(element)) {
      type = 'ConditionalFlow';
    }
    return type;
  }
  const PanelHeaderProvider = {
    getDocumentationRef: element => {
      const elementTemplates = getTemplatesService();
      if (elementTemplates) {
        return getTemplateDocumentation(element, elementTemplates);
      }
    },
    getElementLabel: element => {
      if (is$1(element, 'bpmn:Process')) {
        return getBusinessObject(element).name;
      }
      return getLabel(element);
    },
    getElementIcon: element => {
      const concreteType = getConcreteType(element);
      const elementTemplates = getTemplatesService();
      if (elementTemplates) {
        const template = getTemplate(element, elementTemplates);
        if (template && template.icon) {
          return () => u("img", {
            class: "bio-properties-panel-header-template-icon",
            width: "32",
            height: "32",
            src: template.icon.contents
          });
        }
      }
      return iconsByType[concreteType];
    },
    getTypeLabel: element => {
      const elementTemplates = getTemplatesService();
      if (elementTemplates) {
        const template = getTemplate(element, elementTemplates);
        if (template && template.name) {
          return template.name;
        }
      }
      const concreteType = getConcreteType(element);
      return concreteType.replace(/(\B[A-Z])/g, ' $1').replace(/(\bNon Interrupting)/g, '($1)');
    }
  };

  // helpers ///////////////////////

  function isCancelActivity(element) {
    const businessObject = getBusinessObject(element);
    return businessObject && businessObject.cancelActivity !== false;
  }
  function getEventDefinition$2(element) {
    const businessObject = getBusinessObject(element),
      eventDefinitions = businessObject.eventDefinitions;
    return eventDefinitions && eventDefinitions[0];
  }
  function getRawType(type) {
    return type.split(':')[1];
  }
  function getEventDefinitionPrefix(eventDefinition) {
    const rawType = getRawType(eventDefinition.$type);
    return rawType.replace('EventDefinition', '');
  }
  function isDefaultFlow(element) {
    const businessObject = getBusinessObject(element);
    const sourceBusinessObject = getBusinessObject(element.source);
    if (!is$1(element, 'bpmn:SequenceFlow') || !sourceBusinessObject) {
      return false;
    }
    return sourceBusinessObject.default && sourceBusinessObject.default === businessObject && (is$1(sourceBusinessObject, 'bpmn:Gateway') || is$1(sourceBusinessObject, 'bpmn:Activity'));
  }
  function isConditionalFlow(element) {
    const businessObject = getBusinessObject(element);
    const sourceBusinessObject = getBusinessObject(element.source);
    if (!is$1(element, 'bpmn:SequenceFlow') || !sourceBusinessObject) {
      return false;
    }
    return businessObject.conditionExpression && is$1(sourceBusinessObject, 'bpmn:Activity');
  }
  function isPlane(element) {
    // Backwards compatibility for bpmn-js<8
    const di = element && (element.di || getBusinessObject(element).di);
    return is$1(di, 'bpmndi:BPMNPlane');
  }
  function getTemplatesService() {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useService('elementTemplates', false);
  }
  function getTemplate(element, elementTemplates) {
    return elementTemplates.get(element);
  }
  function getTemplateDocumentation(element, elementTemplates) {
    const template = getTemplate(element, elementTemplates);
    return template && template.documentationRef;
  }

  var EmptyIcon = function EmptyIcon(props) {
    return u("svg", {
      ...props,
      children: [u("defs", {
        children: [u("rect", {
          id: "a",
          width: "57",
          height: "47",
          x: "3",
          y: "8",
          rx: "7"
        }), u("mask", {
          id: "b",
          width: "57",
          height: "47",
          x: "0",
          y: "0",
          fill: "#fff",
          maskContentUnits: "userSpaceOnUse",
          maskUnits: "objectBoundingBox",
          children: u("use", {
            xlinkHref: "#a"
          })
        })]
      }), u("g", {
        fill: "none",
        fillRule: "evenodd",
        children: [u("path", {
          fill: "#818798",
          d: "M52 11a5 5 0 0 1 5 5v31a5 5 0 0 1-5 5H11a5 5 0 0 1-5-5V16a5 5 0 0 1 5-5h41Zm0 2H11a3 3 0 0 0-2.995 2.824L8 16v31a3 3 0 0 0 2.824 2.995L11 50h41a3 3 0 0 0 2.995-2.824L55 47V16a3 3 0 0 0-2.824-2.995L52 13Z"
        }), u("path", {
          fill: "#D5D7DD",
          d: "M16 24h31v6H16zM21 33h21v6H21z"
        }), u("use", {
          stroke: "#B9BCC6",
          strokeDasharray: "5 2",
          strokeWidth: "2",
          mask: "url(#b)",
          xlinkHref: "#a"
        })]
      })]
    });
  };
  EmptyIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: "64",
    height: "64"
  };
  var MultipleIcon = function MultipleIcon(props) {
    return u("svg", {
      ...props,
      children: [u("defs", {
        children: [u("path", {
          id: "a",
          d: "M9 9h110v47H9z"
        }), u("mask", {
          id: "b",
          width: "110",
          height: "47",
          x: "0",
          y: "0",
          fill: "#fff",
          maskContentUnits: "userSpaceOnUse",
          maskUnits: "objectBoundingBox",
          children: u("use", {
            xlinkHref: "#a"
          })
        })]
      }), u("g", {
        fill: "none",
        fillRule: "evenodd",
        children: [u("path", {
          fill: "#818798",
          d: "M25 20.272 37.728 33 25 45.728 12.272 33 25 20.272Zm0 2.829L15.1 33l9.9 9.9 9.9-9.9-9.9-9.9Z"
        }), u("path", {
          fill: "#D5D7DD",
          d: "M17 47h16v6H17z"
        }), u("path", {
          fill: "#818798",
          d: "M35 32h27v2H35z"
        }), u("path", {
          fill: "#818798",
          d: "M60 30v6l6-3z"
        }), u("path", {
          fill: "#D5D7DD",
          d: "M80 34h21v6H80z"
        }), u("path", {
          fill: "#818798",
          d: "M111 12a5 5 0 0 1 5 5v31a5 5 0 0 1-5 5H70a5 5 0 0 1-5-5V17a5 5 0 0 1 5-5h41Zm0 2H70a3 3 0 0 0-3 3v31a3 3 0 0 0 3 3h41a3 3 0 0 0 3-3V17a3 3 0 0 0-3-3Z"
        }), u("path", {
          fill: "#D5D7DD",
          d: "M75 25h31v6H75z"
        }), u("use", {
          stroke: "#B9BCC6",
          strokeDasharray: "5 2",
          strokeWidth: "2",
          mask: "url(#b)",
          xlinkHref: "#a"
        })]
      })]
    });
  };
  MultipleIcon.defaultProps = {
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    width: "128",
    height: "64"
  };
  const PanelPlaceholderProvider = translate => {
    if (!translate) translate = text => text;
    return {
      getEmpty: () => {
        return {
          text: translate('Select an element to edit its properties.'),
          icon: EmptyIcon
        };
      },
      getMultiple: () => {
        return {
          text: translate('Multiple elements are selected. Select a single element to edit its properties.'),
          icon: MultipleIcon
        };
      }
    };
  };

  function BpmnPropertiesPanel(props) {
    const {
      element,
      injector,
      getProviders,
      layoutConfig: initialLayoutConfig,
      descriptionConfig,
      tooltipConfig,
      feelPopupContainer
    } = props;
    const canvas = injector.get('canvas');
    const elementRegistry = injector.get('elementRegistry');
    const eventBus = injector.get('eventBus');
    const translate = injector.get('translate');
    const [state, setState] = d({
      selectedElement: element
    });
    const selectedElement = state.selectedElement;

    /**
     * @param {djs.model.Base | Array<djs.model.Base>} element
     */
    const _update = element => {
      if (!element) {
        return;
      }
      let newSelectedElement = element;

      // handle labels
      if (newSelectedElement && newSelectedElement.type === 'label') {
        newSelectedElement = newSelectedElement.labelTarget;
      }
      setState({
        ...state,
        selectedElement: newSelectedElement
      });

      // notify interested parties on property panel updates
      eventBus.fire('propertiesPanel.updated', {
        element: newSelectedElement
      });
    };

    // (2) react on element changes

    // (2a) selection changed
    y(() => {
      const onSelectionChanged = e => {
        const {
          newSelection = []
        } = e;
        if (newSelection.length > 1) {
          return _update(newSelection);
        }
        const newElement = newSelection[0];
        const rootElement = canvas.getRootElement();
        if (isImplicitRoot$1(rootElement)) {
          return;
        }
        _update(newElement || rootElement);
      };
      eventBus.on('selection.changed', onSelectionChanged);
      return () => {
        eventBus.off('selection.changed', onSelectionChanged);
      };
    }, []);

    // (2b) selected element changed
    y(() => {
      const onElementsChanged = e => {
        const elements = e.elements;
        const updatedElement = findElement(elements, selectedElement);
        if (updatedElement && elementExists(updatedElement, elementRegistry)) {
          _update(updatedElement);
        }
      };
      eventBus.on('elements.changed', onElementsChanged);
      return () => {
        eventBus.off('elements.changed', onElementsChanged);
      };
    }, [selectedElement]);

    // (2c) root element changed
    y(() => {
      const onRootAdded = e => {
        const element = e.element;
        _update(element);
      };
      eventBus.on('root.added', onRootAdded);
      return () => {
        eventBus.off('root.added', onRootAdded);
      };
    }, [selectedElement]);

    // (2d) provided entries changed
    y(() => {
      const onProvidersChanged = () => {
        _update(selectedElement);
      };
      eventBus.on('propertiesPanel.providersChanged', onProvidersChanged);
      return () => {
        eventBus.off('propertiesPanel.providersChanged', onProvidersChanged);
      };
    }, [selectedElement]);

    // (2e) element templates changed
    y(() => {
      const onTemplatesChanged = () => {
        _update(selectedElement);
      };
      eventBus.on('elementTemplates.changed', onTemplatesChanged);
      return () => {
        eventBus.off('elementTemplates.changed', onTemplatesChanged);
      };
    }, [selectedElement]);

    // (3) create properties panel context
    const bpmnPropertiesPanelContext = {
      selectedElement,
      injector,
      getService(type, strict) {
        return injector.get(type, strict);
      }
    };

    // (4) retrieve groups for selected element
    const providers = getProviders(selectedElement);
    const groups = T$1(() => {
      return reduce(providers, function (groups, provider) {
        // do not collect groups for multi element state
        if (isArray$3(selectedElement)) {
          return [];
        }
        const updater = provider.getGroups(selectedElement);
        return updater(groups);
      }, []);
    }, [providers, selectedElement]);

    // (5) notify layout changes
    const [layoutConfig, setLayoutConfig] = d(initialLayoutConfig || {});
    const onLayoutChanged = q$1(newLayout => {
      eventBus.fire('propertiesPanel.layoutChanged', {
        layout: newLayout
      });
    }, [eventBus]);

    // React to external layout changes
    y(() => {
      const cb = e => {
        const {
          layout
        } = e;
        setLayoutConfig(layout);
      };
      eventBus.on('propertiesPanel.setLayout', cb);
      return () => eventBus.off('propertiesPanel.setLayout', cb);
    }, [eventBus, setLayoutConfig]);

    // (6) notify description changes
    const onDescriptionLoaded = description => {
      eventBus.fire('propertiesPanel.descriptionLoaded', {
        description
      });
    };

    // (7) notify tooltip changes
    const onTooltipLoaded = tooltip => {
      eventBus.fire('propertiesPanel.tooltipLoaded', {
        tooltip
      });
    };
    return u(BpmnPropertiesPanelContext.Provider, {
      value: bpmnPropertiesPanelContext,
      children: u(PropertiesPanel, {
        element: selectedElement,
        headerProvider: PanelHeaderProvider,
        placeholderProvider: PanelPlaceholderProvider(translate),
        groups: groups,
        layoutConfig: layoutConfig,
        layoutChanged: onLayoutChanged,
        descriptionConfig: descriptionConfig,
        descriptionLoaded: onDescriptionLoaded,
        tooltipConfig: tooltipConfig,
        tooltipLoaded: onTooltipLoaded,
        feelPopupContainer: feelPopupContainer,
        eventBus: eventBus
      })
    });
  }

  // helpers //////////////////////////

  function isImplicitRoot$1(element) {
    // Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
    return element && (element.isImplicit || element.id === '__implicitroot');
  }
  function findElement(elements, element) {
    return find$1(elements, e => e === element);
  }
  function elementExists(element, elementRegistry) {
    return element && elementRegistry.get(element.id);
  }

  const DEFAULT_PRIORITY = 1000;

  /**
   * @typedef { import('@bpmn-io/properties-panel').GroupDefinition } GroupDefinition
   * @typedef { import('@bpmn-io/properties-panel').ListGroupDefinition } ListGroupDefinition
   * @typedef { { getGroups: (ModdleElement) => (Array{GroupDefinition|ListGroupDefinition}) => Array{GroupDefinition|ListGroupDefinition}) } PropertiesProvider
   */

  class BpmnPropertiesPanelRenderer {
    constructor(config, injector, eventBus) {
      const {
        parent,
        layout: layoutConfig,
        description: descriptionConfig,
        tooltip: tooltipConfig,
        feelPopupContainer
      } = config || {};
      this._eventBus = eventBus;
      this._injector = injector;
      this._layoutConfig = layoutConfig;
      this._descriptionConfig = descriptionConfig;
      this._tooltipConfig = tooltipConfig;
      this._feelPopupContainer = feelPopupContainer;
      this._container = domify$1('<div style="height: 100%" class="bio-properties-panel-container"></div>');
      var commandStack = injector.get('commandStack', false);
      commandStack && setupKeyboard(this._container, eventBus, commandStack);
      eventBus.on('diagram.init', () => {
        if (parent) {
          this.attachTo(parent);
        }
      });
      eventBus.on('diagram.destroy', () => {
        this.detach();
      });
      eventBus.on('root.added', event => {
        const {
          element
        } = event;
        this._render(element);
      });
    }

    /**
     * Attach the properties panel to a parent node.
     *
     * @param {HTMLElement} container
     */
    attachTo(container) {
      if (!container) {
        throw new Error('container required');
      }

      // unwrap jQuery if provided
      if (container.get && container.constructor.prototype.jquery) {
        container = container.get(0);
      }
      if (typeof container === 'string') {
        container = query(container);
      }

      // (1) detach from old parent
      this.detach();

      // (2) append to parent container
      container.appendChild(this._container);

      // (3) notify interested parties
      this._eventBus.fire('propertiesPanel.attach');
    }

    /**
     * Detach the properties panel from its parent node.
     */
    detach() {
      const parentNode = this._container.parentNode;
      if (parentNode) {
        parentNode.removeChild(this._container);
        this._eventBus.fire('propertiesPanel.detach');
      }
    }

    /**
     * Register a new properties provider to the properties panel.
     *
     * @param {Number} [priority]
     * @param {PropertiesProvider} provider
     */
    registerProvider(priority, provider) {
      if (!provider) {
        provider = priority;
        priority = DEFAULT_PRIORITY;
      }
      if (typeof provider.getGroups !== 'function') {
        console.error('Properties provider does not implement #getGroups(element) API');
        return;
      }
      this._eventBus.on('propertiesPanel.getProviders', priority, function (event) {
        event.providers.push(provider);
      });
      this._eventBus.fire('propertiesPanel.providersChanged');
    }

    /**
     * Updates the layout of the properties panel.
     * @param {Object} layout
     */
    setLayout(layout) {
      this._eventBus.fire('propertiesPanel.setLayout', {
        layout
      });
    }
    _getProviders() {
      const event = this._eventBus.createEvent({
        type: 'propertiesPanel.getProviders',
        providers: []
      });
      this._eventBus.fire(event);
      return event.providers;
    }
    _render(element) {
      const canvas = this._injector.get('canvas');
      if (!element) {
        element = canvas.getRootElement();
      }
      if (isImplicitRoot(element)) {
        return;
      }
      D$2(u(BpmnPropertiesPanel, {
        element: element,
        injector: this._injector,
        getProviders: this._getProviders.bind(this),
        layoutConfig: this._layoutConfig,
        descriptionConfig: this._descriptionConfig,
        tooltipConfig: this._tooltipConfig,
        feelPopupContainer: this._feelPopupContainer
      }), this._container);
      this._eventBus.fire('propertiesPanel.rendered');
    }
    _destroy() {
      if (this._container) {
        D$2(null, this._container);
        this._eventBus.fire('propertiesPanel.destroyed');
      }
    }
  }
  BpmnPropertiesPanelRenderer.$inject = ['config.propertiesPanel', 'injector', 'eventBus'];

  // helpers ///////////////////////

  function isImplicitRoot(element) {
    // Backwards compatibility for diagram-js<7.4.0, see https://github.com/bpmn-io/bpmn-properties-panel/pull/102
    return element && (element.isImplicit || element.id === '__implicitroot');
  }

  /**
   * Setup keyboard bindings (undo, redo) on the given container.
   *
   * @param {Element} container
   * @param {EventBus} eventBus
   * @param {CommandStack} commandStack
   */
  function setupKeyboard(container, eventBus, commandStack) {
    function cancel(event) {
      event.preventDefault();
      event.stopPropagation();
    }
    function handleKeys(event) {
      if (isUndo(event)) {
        commandStack.undo();
        return cancel(event);
      }
      if (isRedo(event)) {
        commandStack.redo();
        return cancel(event);
      }
    }
    eventBus.on('keyboard.bind', function () {
      event.bind(container, 'keydown', handleKeys);
    });
    eventBus.on('keyboard.unbind', function () {
      event.unbind(container, 'keydown', handleKeys);
    });
  }

  /**
   * A handler that combines and executes multiple commands.
   *
   * All updates are bundled on the command stack and executed in one step.
   * This also makes it possible to revert the changes in one step.
   *
   * Example use case: remove the camunda:formKey attribute and in addition
   * add all form fields needed for the camunda:formData property.
   */
  class MultiCommandHandler {
    constructor(commandStack) {
      this._commandStack = commandStack;
    }
    preExecute(context) {
      const commandStack = this._commandStack;
      forEach$1(context, function (command) {
        commandStack.execute(command.cmd, command.context);
      });
    }
  }
  MultiCommandHandler.$inject = ['commandStack'];

  const HANDLERS = {
    'properties-panel.multi-command-executor': MultiCommandHandler
  };
  function CommandInitializer(eventBus, commandStack) {
    eventBus.on('diagram.init', function () {
      forEach$1(HANDLERS, function (handler, id) {
        commandStack.registerHandler(id, handler);
      });
    });
  }
  CommandInitializer.$inject = ['eventBus', 'commandStack'];
  var Commands = {
    __init__: [CommandInitializer]
  };

  var index$3 = {
    __depends__: [Commands, index$1, index],
    __init__: ['propertiesPanel'],
    propertiesPanel: ['type', BpmnPropertiesPanelRenderer]
  };

  function ReferenceSelectEntry(props) {
    const {
      autoFocusEntry,
      element,
      getOptions
    } = props;
    const options = getOptions(element);
    const prevOptions = usePrevious(options);

    // auto focus specifc other entry when options changed
    y(() => {
      if (autoFocusEntry && prevOptions && options.length > prevOptions.length) {
        const entry = query(`[data-entry-id="${autoFocusEntry}"]`);
        const focusableInput = query('.bio-properties-panel-input', entry);
        if (focusableInput) {
          focusableInput.select();
        }
      }
    }, [options]);
    return u(SelectEntry, {
      ...props
    });
  }

  function isErrorSupported(element) {
    return isAny(element, ['bpmn:StartEvent', 'bpmn:BoundaryEvent', 'bpmn:EndEvent']) && !!getErrorEventDefinition(element);
  }
  function getErrorEventDefinition(element) {
    return getEventDefinition$1$1(element, 'bpmn:ErrorEventDefinition');
  }
  function getError(element) {
    const errorEventDefinition = getErrorEventDefinition(element);
    return errorEventDefinition && errorEventDefinition.get('errorRef');
  }
  function getEventDefinition$1$1(element, eventType) {
    const businessObject = getBusinessObject(element);
    const eventDefinitions = businessObject.get('eventDefinitions') || [];
    return find$1(eventDefinitions, function (definition) {
      return is$1(definition, eventType);
    });
  }
  function isMessageSupported(element) {
    return is$1(element, 'bpmn:ReceiveTask') || isAny(element, ['bpmn:StartEvent', 'bpmn:EndEvent', 'bpmn:IntermediateThrowEvent', 'bpmn:BoundaryEvent', 'bpmn:IntermediateCatchEvent']) && !!getMessageEventDefinition(element);
  }
  function getMessageEventDefinition(element) {
    if (is$1(element, 'bpmn:ReceiveTask')) {
      return getBusinessObject(element);
    }
    return getEventDefinition$1$1(element, 'bpmn:MessageEventDefinition');
  }
  function getMessage(element) {
    const messageEventDefinition = getMessageEventDefinition(element);
    return messageEventDefinition && messageEventDefinition.get('messageRef');
  }
  function getLinkEventDefinition(element) {
    return getEventDefinition$1$1(element, 'bpmn:LinkEventDefinition');
  }
  function getSignalEventDefinition$1(element) {
    return getEventDefinition$1$1(element, 'bpmn:SignalEventDefinition');
  }
  function isLinkSupported(element) {
    return isAny(element, ['bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent']) && !!getLinkEventDefinition(element);
  }
  function isSignalSupported$1(element) {
    return is$1(element, 'bpmn:Event') && !!getSignalEventDefinition$1(element);
  }
  function getSignal$1(element) {
    const signalEventDefinition = getSignalEventDefinition$1(element);
    return signalEventDefinition && signalEventDefinition.get('signalRef');
  }
  function getEscalationEventDefinition(element) {
    return getEventDefinition$1$1(element, 'bpmn:EscalationEventDefinition');
  }
  function isEscalationSupported(element) {
    return is$1(element, 'bpmn:Event') && !!getEscalationEventDefinition(element);
  }
  function getEscalation(element) {
    const escalationEventDefinition = getEscalationEventDefinition(element);
    return escalationEventDefinition && escalationEventDefinition.get('escalationRef');
  }
  function isCompensationSupported(element) {
    return isAny(element, ['bpmn:EndEvent', 'bpmn:IntermediateThrowEvent']) && !!getCompensateEventDefinition(element);
  }
  function getCompensateEventDefinition(element) {
    return getEventDefinition$1$1(element, 'bpmn:CompensateEventDefinition');
  }
  function getCompensateActivity(element) {
    const compensateEventDefinition = getCompensateEventDefinition(element);
    return compensateEventDefinition && compensateEventDefinition.get('activityRef');
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function CompensationProps(props) {
    const {
      element
    } = props;
    if (!isCompensationSupported(element)) {
      return [];
    }
    return [{
      id: 'waitForCompletion',
      component: WaitForCompletion,
      isEdited: isEdited$5
    }, {
      id: 'activityRef',
      component: ActivityRef,
      isEdited: isEdited$3
    }];
  }
  function WaitForCompletion(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const compensateEventDefinition = getCompensateEventDefinition(element);
    const getValue = () => {
      return compensateEventDefinition.get('waitForCompletion');
    };
    const setValue = value => {
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: compensateEventDefinition,
        properties: {
          waitForCompletion: value
        }
      });
    };
    return CheckboxEntry({
      element,
      id: 'waitForCompletion',
      label: translate('Wait for completion'),
      getValue,
      setValue
    });
  }
  function ActivityRef(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const elementRegistry = useService('elementRegistry');
    const translate = useService('translate');
    const compensateEventDefinition = getCompensateEventDefinition(element);
    const getValue = () => {
      const activityRef = getCompensateActivity(element);
      return activityRef && activityRef.get('id');
    };
    const setValue = value => {
      // update (or remove) activityRef
      const activityRef = value ? getBusinessObject(elementRegistry.get(value)) : undefined;
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: compensateEventDefinition,
        properties: {
          activityRef
        }
      });
    };
    const getOptions = () => {
      let options = [{
        value: '',
        label: translate('<none>')
      }];
      const activities = findActivityRefs(element);
      sortByName$6(activities).forEach(function (activity) {
        options.push({
          value: activity.id,
          label: createOptionLabel(activity)
        });
      });
      return options;
    };
    return ReferenceSelectEntry({
      element,
      id: 'activityRef',
      label: translate('Activity reference'),
      getValue,
      setValue,
      getOptions
    });
  }

  // helper /////////////////////////

  function getFlowElements(element, type) {
    const {
      flowElements
    } = element;
    return flowElements.filter(function (flowElement) {
      return is$1(flowElement, type);
    });
  }
  function getContainedActivities(element) {
    return getFlowElements(element, 'bpmn:Activity');
  }
  function getContainedBoundaryEvents(element) {
    return getFlowElements(element, 'bpmn:BoundaryEvent');
  }

  /**
   * Checks whether an Activity is attaching a CompensateEvent of the parent container.
   *
   * @param {ModdleElement} activity
   * @param {Array<ModdleElement>} boundaryEvents
   * @returns {Boolean}
   */
  function hasCompensationEventAttached(activity, boundaryEvents) {
    const {
      id: activityId
    } = activity;
    return !!find$1(boundaryEvents, function (boundaryEvent) {
      const {
        attachedToRef
      } = boundaryEvent;
      const compensateEventDefinition = getCompensateEventDefinition(boundaryEvent);
      return attachedToRef && compensateEventDefinition && attachedToRef.id === activityId;
    });
  }

  /**
   * Checks whether an Activity can be compensated. That's the case when it is
   * a) a CallActivity
   * b) a SubProcess, when it is not event based and not a compensation
   * c) any other Activity, when it is attaching a CompensateEvent of the parent container
   *
   * @param {ModdleElement} activity
   * @param {Array<ModdleElement>} boundaryEvents
   * @returns {Boolean}
   */
  function canBeCompensated(activity, boundaryEvents) {
    return is$1(activity, 'bpmn:CallActivity') || is$1(activity, 'bpmn:SubProcess') && !activity.triggeredByEvent && !activity.isForCompensation || hasCompensationEventAttached(activity, boundaryEvents);
  }
  function getActivitiesForCompensation(element) {
    const activities = getContainedActivities(element);
    const boundaryEvents = getContainedBoundaryEvents(element);
    return activities.filter(function (activity) {
      return canBeCompensated(activity, boundaryEvents);
    });
  }

  /**
   * Retrieves all possible activities to reference for a Compensation.
   *
   * @param {djs.model.Base} element
   * @returns {Array<ModdleElement>}
   */
  function findActivityRefs(element) {
    const businessObject = getBusinessObject(element);
    let parent = businessObject.$parent;

    // (1) get all activities in parent container
    let activities = getActivitiesForCompensation(parent);

    // (2) if throwing compensation event is inside an EventSubProcess,
    // also get all activities outside of the event sub process
    if (is$1(parent, 'bpmn:SubProcess') && parent.triggeredByEvent) {
      parent = parent.$parent;
      if (parent) {
        activities = [...activities, ...getActivitiesForCompensation(parent)];
      }
    }
    return activities;
  }

  /**
   * Retrieves an option label in the form
   * a) with name: "my Task (id=Task_1)"
   * b) without name: "(id=Task_1)"
   *
   * @param {ModdleElement} activity
   * @returns {String}
   */
  function createOptionLabel(activity) {
    const {
      id,
      name
    } = activity;
    return `${name ? name + ' ' : ''}(id=${id})`;
  }
  function sortByName$6(elements) {
    return sortBy(elements, e => (e.name || '').toLowerCase());
  }

  const DOCUMENTATION_TEXT_FORMAT = 'text/plain';

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function DocumentationProps(props) {
    const {
      element
    } = props;
    const entries = [{
      id: 'documentation',
      component: ElementDocumentationProperty,
      isEdited: isEdited$1
    }];
    if (hasProcessRef$2(element)) {
      entries.push({
        id: 'processDocumentation',
        component: ProcessDocumentationProperty,
        isEdited: isEdited$1
      });
    }
    return entries;
  }
  function ElementDocumentationProperty(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const getValue = getDocumentation(getBusinessObject(element));
    const setValue = setDocumentation(element, getBusinessObject(element), bpmnFactory, commandStack);
    return TextAreaEntry({
      element,
      id: 'documentation',
      label: translate('Element documentation'),
      getValue,
      setValue,
      debounce
    });
  }
  function ProcessDocumentationProperty(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const processRef = getBusinessObject(element).processRef;
    const getValue = getDocumentation(processRef);
    const setValue = setDocumentation(element, processRef, bpmnFactory, commandStack);
    return TextAreaEntry({
      element,
      id: 'processDocumentation',
      label: translate('Process documentation'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper ////////////////////////////

  function hasProcessRef$2(element) {
    return is$1(element, 'bpmn:Participant') && element.businessObject.get('processRef');
  }
  function findDocumentation(docs) {
    return docs.find(function (d) {
      return (d.textFormat || DOCUMENTATION_TEXT_FORMAT) === DOCUMENTATION_TEXT_FORMAT;
    });
  }

  /**
   * Retrieves a documentation element from a given moddle element.
   *
   * @param {ModdleElement} businessObject
   *
   * @returns {ModdleElement} documentation element inside the given moddle element.
   */
  function getDocumentation(businessObject) {
    return function () {
      const documentation = findDocumentation(businessObject && businessObject.get('documentation'));
      return documentation && documentation.text;
    };
  }

  /**
   * Sets a documentation element for a given moddle element.
   *
   * @param {ModdleElement} businessObject
   */
  function setDocumentation(element, businessObject, bpmnFactory, commandStack) {
    return function (value) {
      let documentation = findDocumentation(businessObject && businessObject.get('documentation'));

      // (1) update or removing existing documentation
      if (documentation) {
        if (value) {
          return commandStack.execute('element.updateModdleProperties', {
            element,
            moddleElement: documentation,
            properties: {
              text: value
            }
          });
        } else {
          return commandStack.execute('element.updateModdleProperties', {
            element,
            moddleElement: businessObject,
            properties: {
              documentation: without(businessObject.get('documentation'), documentation)
            }
          });
        }
      }

      // (2) create new documentation entry
      if (value) {
        documentation = bpmnFactory.create('bpmn:Documentation', {
          text: value
        });
        return commandStack.execute('element.updateModdleProperties', {
          element,
          moddleElement: businessObject,
          properties: {
            documentation: [...businessObject.get('documentation'), documentation]
          }
        });
      }
    };
  }

  /**
   * Create a new element and set its parent.
   *
   * @param {String} elementType of the new element
   * @param {Object} properties of the new element in key-value pairs
   * @param {moddle.object} parent of the new element
   * @param {BpmnFactory} factory which creates the new element
   *
   * @returns {djs.model.Base} element which is created
   */
  function createElement$1(elementType, properties, parent, factory) {
    const element = factory.create(elementType, properties);
    if (parent) {
      element.$parent = parent;
    }
    return element;
  }

  /**
   * generate a semantic id with given prefix
   */
  function nextId$1(prefix) {
    const ids = new Ids$1([32, 32, 1]);
    return ids.nextPrefixed(prefix);
  }
  function getRoot(businessObject) {
    let parent = businessObject;
    while (parent.$parent) {
      parent = parent.$parent;
    }
    return parent;
  }
  function filterElementsByType(objectList, type) {
    const list = objectList || [];
    return list.filter(element => is$1(element, type));
  }
  function findRootElementsByType(businessObject, referencedType) {
    const root = getRoot(businessObject);
    return filterElementsByType(root.get('rootElements'), referencedType);
  }
  function findRootElementById(businessObject, type, id) {
    const elements = findRootElementsByType(businessObject, type);
    return elements.find(element => element.id === id);
  }

  const EMPTY_OPTION$4 = '';
  const CREATE_NEW_OPTION$4 = 'create-new';

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function ErrorProps$2(props) {
    const {
      element
    } = props;
    if (!isErrorSupported(element)) {
      return [];
    }
    const error = getError(element);
    let entries = [{
      id: 'errorRef',
      component: ErrorRef$1,
      isEdited: isEdited$3
    }];
    if (error) {
      entries = [...entries, {
        id: 'errorName',
        component: ErrorName$1,
        isEdited: isEdited$2
      }, {
        id: 'errorCode',
        component: ErrorCode$2,
        isEdited: isEdited$2
      }];
    }
    return entries;
  }
  function ErrorRef$1(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const errorEventDefinition = getErrorEventDefinition(element);
    const getValue = () => {
      const error = getError(element);
      if (error) {
        return error.get('id');
      }
      return EMPTY_OPTION$4;
    };
    const setValue = value => {
      const root = getRoot(errorEventDefinition);
      const commands = [];
      let error;

      // (1) create new error
      if (value === CREATE_NEW_OPTION$4) {
        error = createElement$1('bpmn:Error', {
          name: nextId$1('Error_')
        }, root, bpmnFactory);
        value = error.get('id');
        commands.push({
          cmd: 'element.updateModdleProperties',
          context: {
            element,
            moddleElement: root,
            properties: {
              rootElements: [...root.get('rootElements'), error]
            }
          }
        });
      }

      // (2) update (or remove) errorRef
      error = error || findRootElementById(errorEventDefinition, 'bpmn:Error', value);
      commands.push({
        cmd: 'element.updateModdleProperties',
        context: {
          element,
          moddleElement: errorEventDefinition,
          properties: {
            errorRef: error
          }
        }
      });

      // (3) commit all updates
      return commandStack.execute('properties-panel.multi-command-executor', commands);
    };
    const getOptions = () => {
      let options = [{
        value: EMPTY_OPTION$4,
        label: translate('<none>')
      }, {
        value: CREATE_NEW_OPTION$4,
        label: translate('Create new ...')
      }];
      const errors = findRootElementsByType(getBusinessObject(element), 'bpmn:Error');
      sortByName$5(errors).forEach(error => {
        options.push({
          value: error.get('id'),
          label: error.get('name')
        });
      });
      return options;
    };
    return ReferenceSelectEntry({
      element,
      id: 'errorRef',
      label: translate('Global error reference'),
      autoFocusEntry: 'errorName',
      getValue,
      setValue,
      getOptions
    });
  }
  function ErrorName$1(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const error = getError(element);
    const getValue = () => {
      return error.get('name');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: error,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'errorName',
      label: translate('Name'),
      getValue,
      setValue,
      debounce
    });
  }
  function ErrorCode$2(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const error = getError(element);
    const getValue = () => {
      return error.get('errorCode');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: error,
        properties: {
          errorCode: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'errorCode',
      label: translate('Code'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper /////////////////////////

  function sortByName$5(elements) {
    return sortBy(elements, e => (e.name || '').toLowerCase());
  }

  const CREATE_NEW_OPTION$3 = 'create-new';

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function EscalationProps$2(props) {
    const {
      element
    } = props;
    if (!isEscalationSupported(element)) {
      return [];
    }
    const escalation = getEscalation(element);
    let entries = [{
      id: 'escalationRef',
      component: EscalationRef,
      isEdited: isEdited$3
    }];
    if (escalation) {
      entries = [...entries, {
        id: 'escalationName',
        component: EscalationName,
        isEdited: isEdited$2
      }, {
        id: 'escalationCode',
        component: EscalationCode$1,
        isEdited: isEdited$2
      }];
    }
    return entries;
  }
  function EscalationRef(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const escalationEventDefinition = getEscalationEventDefinition(element);
    const getValue = () => {
      const escalation = getEscalation(element);
      return escalation && escalation.get('id');
    };
    const setValue = value => {
      const root = getRoot(escalationEventDefinition);
      const commands = [];
      let escalation;

      // (1) create new escalation
      if (value === CREATE_NEW_OPTION$3) {
        const id = nextId$1('Escalation_');
        escalation = createElement$1('bpmn:Escalation', {
          id,
          name: id
        }, root, bpmnFactory);
        value = escalation.get('id');
        commands.push({
          cmd: 'element.updateModdleProperties',
          context: {
            element,
            moddleElement: root,
            properties: {
              rootElements: [...root.get('rootElements'), escalation]
            }
          }
        });
      }

      // (2) update (or remove) escalationRef
      escalation = escalation || findRootElementById(escalationEventDefinition, 'bpmn:Escalation', value);
      commands.push({
        cmd: 'element.updateModdleProperties',
        context: {
          element,
          moddleElement: escalationEventDefinition,
          properties: {
            escalationRef: escalation
          }
        }
      });

      // (3) commit all updates
      return commandStack.execute('properties-panel.multi-command-executor', commands);
    };
    const getOptions = () => {
      let options = [{
        value: '',
        label: translate('<none>')
      }, {
        value: CREATE_NEW_OPTION$3,
        label: translate('Create new ...')
      }];
      const escalations = findRootElementsByType(getBusinessObject(element), 'bpmn:Escalation');
      sortByName$4(escalations).forEach(escalation => {
        options.push({
          value: escalation.get('id'),
          label: escalation.get('name')
        });
      });
      return options;
    };
    return ReferenceSelectEntry({
      element,
      id: 'escalationRef',
      label: translate('Global escalation reference'),
      autoFocusEntry: 'escalationName',
      getValue,
      setValue,
      getOptions
    });
  }
  function EscalationName(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const escalation = getEscalation(element);
    const getValue = () => {
      return escalation.get('name');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: escalation,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'escalationName',
      label: translate('Name'),
      getValue,
      setValue,
      debounce
    });
  }
  function EscalationCode$1(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const escalation = getEscalation(element);
    const getValue = () => {
      return escalation.get('escalationCode');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: escalation,
        properties: {
          escalationCode: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'escalationCode',
      label: translate('Code'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper /////////////////////////

  function sortByName$4(elements) {
    return sortBy(elements, e => (e.name || '').toLowerCase());
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function ExecutableProps(props) {
    const {
      element
    } = props;
    if (!is$1(element, 'bpmn:Process') && !hasProcessRef$1(element)) {
      return [];
    }
    return [{
      id: 'isExecutable',
      component: Executable,
      isEdited: isEdited$5
    }];
  }
  function Executable(props) {
    const {
      element
    } = props;
    const modeling = useService('modeling');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    let getValue, setValue;
    setValue = value => {
      modeling.updateProperties(element, {
        isExecutable: value
      });
    };
    getValue = element => {
      return element.businessObject.isExecutable;
    };

    // handle properties on processRef level for participants
    if (is$1(element, 'bpmn:Participant')) {
      const process = element.businessObject.get('processRef');
      setValue = value => {
        commandStack.execute('element.updateModdleProperties', {
          element,
          moddleElement: process,
          properties: {
            isExecutable: value
          }
        });
      };
      getValue = () => {
        return process.get('isExecutable');
      };
    }
    return CheckboxEntry({
      element,
      id: 'isExecutable',
      label: translate('Executable'),
      getValue,
      setValue
    });
  }

  // helper /////////////////////

  function hasProcessRef$1(element) {
    return is$1(element, 'bpmn:Participant') && element.businessObject.get('processRef');
  }

  const SPACE_REGEX = /\s/;

  // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
  const QNAME_REGEX = /^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;

  // for ID validation as per BPMN Schema (QName - Namespace)
  const ID_REGEX = /^[a-z_][\w-.]*$/i;

  /**
   * checks whether the id value is valid
   *
   * @param {ModdleElement} element
   * @param {String} idValue
   * @param {Function} translate
   *
   * @return {String} error message
   */
  function isIdValid(element, idValue, translate) {
    const assigned = element.$model.ids.assigned(idValue);
    const idAlreadyExists = assigned && assigned !== element;
    if (!idValue) {
      return translate('ID must not be empty.');
    }
    if (idAlreadyExists) {
      return translate('ID must be unique.');
    }
    return validateId(idValue, translate);
  }
  function validateId(idValue, translate) {
    if (containsSpace(idValue)) {
      return translate('ID must not contain spaces.');
    }
    if (!ID_REGEX.test(idValue)) {
      if (QNAME_REGEX.test(idValue)) {
        return translate('ID must not contain prefix.');
      }
      return translate('ID must be a valid QName.');
    }
  }
  function containsSpace(value) {
    return SPACE_REGEX.test(value);
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function IdProps() {
    return [{
      id: 'id',
      component: Id$3,
      isEdited: isEdited$2
    }];
  }
  function Id$3(props) {
    const {
      element
    } = props;
    const modeling = useService('modeling');
    const debounce = useService('debounceInput');
    const translate = useService('translate');
    const setValue = (value, error) => {
      if (error) {
        return;
      }
      modeling.updateProperties(element, {
        id: value
      });
    };
    const getValue = element => {
      return element.businessObject.id;
    };
    const validate = value => {
      const businessObject = getBusinessObject(element);
      return isIdValid(businessObject, value, translate);
    };
    return TextfieldEntry({
      element,
      id: 'id',
      label: translate(is$1(element, 'bpmn:Participant') ? 'Participant ID' : 'ID'),
      getValue,
      setValue,
      debounce,
      validate
    });
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function LinkProps(props) {
    const {
      element
    } = props;
    if (!isLinkSupported(element)) {
      return [];
    }
    return [{
      id: 'linkName',
      component: LinkName,
      isEdited: isEdited$2
    }];
  }
  function LinkName(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const linkEventDefinition = getLinkEventDefinition(element);
    const getValue = () => {
      return linkEventDefinition.get('name');
    };
    const setValue = value => {
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: linkEventDefinition,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'linkName',
      label: translate('Name'),
      getValue,
      setValue,
      debounce
    });
  }

  const EMPTY_OPTION$3 = '';
  const CREATE_NEW_OPTION$2 = 'create-new';

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function MessageProps$1(props) {
    const {
      element
    } = props;
    if (!isMessageSupported(element)) {
      return [];
    }
    const message = getMessage(element);
    let entries = [{
      id: 'messageRef',
      component: MessageRef,
      isEdited: isEdited$3
    }];
    if (message) {
      entries = [...entries, {
        id: 'messageName',
        component: MessageName$1,
        isEdited: isEdited$2
      }];
    }
    return entries;
  }
  function MessageRef(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const messageEventDefinition = getMessageEventDefinition(element);
    const getValue = () => {
      const message = getMessage(element);
      if (message) {
        return message.get('id');
      }
      return EMPTY_OPTION$3;
    };
    const setValue = value => {
      const root = getRoot(messageEventDefinition);
      const commands = [];
      let message;

      // (1) create new message
      if (value === CREATE_NEW_OPTION$2) {
        const id = nextId$1('Message_');
        message = createElement$1('bpmn:Message', {
          id,
          name: id
        }, root, bpmnFactory);
        value = message.get('id');
        commands.push({
          cmd: 'element.updateModdleProperties',
          context: {
            element,
            moddleElement: root,
            properties: {
              rootElements: [...root.get('rootElements'), message]
            }
          }
        });
      }

      // (2) update (or remove) messageRef
      message = message || findRootElementById(messageEventDefinition, 'bpmn:Message', value);
      commands.push({
        cmd: 'element.updateModdleProperties',
        context: {
          element,
          moddleElement: messageEventDefinition,
          properties: {
            messageRef: message
          }
        }
      });

      // (3) commit all updates
      return commandStack.execute('properties-panel.multi-command-executor', commands);
    };
    const getOptions = () => {
      let options = [{
        value: EMPTY_OPTION$3,
        label: translate('<none>')
      }, {
        value: CREATE_NEW_OPTION$2,
        label: translate('Create new ...')
      }];
      const messages = findRootElementsByType(getBusinessObject(element), 'bpmn:Message');
      sortByName$3(messages).forEach(message => {
        options.push({
          value: message.get('id'),
          label: message.get('name')
        });
      });
      return options;
    };
    return ReferenceSelectEntry({
      element,
      id: 'messageRef',
      label: translate('Global message reference'),
      autoFocusEntry: 'messageName',
      getValue,
      setValue,
      getOptions
    });
  }
  function MessageName$1(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const message = getMessage(element);
    const getValue = () => {
      return message.get('name');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: message,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'messageName',
      label: translate('Name'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper /////////////////////////

  function sortByName$3(elements) {
    return sortBy(elements, e => (e.name || '').toLowerCase());
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function MultiInstanceProps$2(props) {
    const {
      element
    } = props;
    if (!isMultiInstanceSupported$1(element)) {
      return [];
    }
    const entries = [{
      id: 'loopCardinality',
      component: LoopCardinality,
      isEdited: isEdited$2
    }, {
      id: 'completionCondition',
      component: CompletionCondition$1,
      isEdited: isEdited$2
    }];
    return entries;
  }
  function LoopCardinality(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const debounce = useService('debounceInput');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const getValue = () => {
      return getLoopCardinalityValue(element);
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', updateFormalExpression(element, 'loopCardinality', value, bpmnFactory));
    };
    return TextfieldEntry({
      element,
      id: 'loopCardinality',
      label: translate('Loop cardinality'),
      getValue,
      setValue,
      debounce
    });
  }
  function CompletionCondition$1(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const debounce = useService('debounceInput');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const getValue = () => {
      return getCompletionConditionValue(element);
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', updateFormalExpression(element, 'completionCondition', value, bpmnFactory));
    };
    return TextfieldEntry({
      element,
      id: 'completionCondition',
      label: translate('Completion condition'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper ////////////////////////////

  // generic ///////////////////////////

  /**
   * isMultiInstanceSupported - check whether given element supports MultiInstanceLoopCharacteristics.
   *
   * @param {djs.model.Base} element
   * @return {boolean}
   */
  function isMultiInstanceSupported$1(element) {
    const loopCharacteristics = getLoopCharacteristics$2(element);
    return !!loopCharacteristics && is$1(loopCharacteristics, 'bpmn:MultiInstanceLoopCharacteristics');
  }

  /**
   * getBody - get the body of a given expression.
   *
   * @param {ModdleElement<bpmn:FormalExpression>} expression
   * @return {string} the body (value) of the expression
   */
  function getBody(expression) {
    return expression && expression.get('body');
  }

  /**
   * getProperty - get a property value of the loop characteristics.
   *
   * @param {djs.model.Base} element
   * @param {string} propertyName
   *
   * @return {any} the property value
   */
  function getProperty$2(element, propertyName) {
    const loopCharacteristics = getLoopCharacteristics$2(element);
    return loopCharacteristics && loopCharacteristics.get(propertyName);
  }

  /**
   * getLoopCharacteristics - get loopCharacteristics of a given element.
   *
   * @param {djs.model.Base} element
   * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics> | undefined}
   */
  function getLoopCharacteristics$2(element) {
    const bo = getBusinessObject(element);
    return bo.loopCharacteristics;
  }

  /**
   * createFormalExpression - creates a 'bpmn:FormalExpression' element.
   *
   * @param {ModdleElement} parent
   * @param {string} body
   * @param {BpmnFactory} bpmnFactory
   *
   * @result {ModdleElement<bpmn:FormalExpression>} a formal expression
   */
  function createFormalExpression$1(parent, body, bpmnFactory) {
    return createElement$1('bpmn:FormalExpression', {
      body: body
    }, parent, bpmnFactory);
  }

  /**
   * updateFormalExpression - updates a specific formal expression of the loop characteristics.
   *
   * @param {djs.model.Base} element
   * @param {string} propertyName
   * @param {string} newValue
   * @param {BpmnFactory} bpmnFactory
   */
  function updateFormalExpression(element, propertyName, newValue, bpmnFactory) {
    const loopCharacteristics = getLoopCharacteristics$2(element);
    const expressionProps = {};
    if (!newValue) {
      // remove formal expression
      expressionProps[propertyName] = undefined;
      return {
        element,
        moddleElement: loopCharacteristics,
        properties: expressionProps
      };
    }
    const existingExpression = loopCharacteristics.get(propertyName);
    if (!existingExpression) {
      // add formal expression
      expressionProps[propertyName] = createFormalExpression$1(loopCharacteristics, newValue, bpmnFactory);
      return {
        element,
        moddleElement: loopCharacteristics,
        properties: expressionProps
      };
    }

    // edit existing formal expression
    return {
      element,
      moddleElement: existingExpression,
      properties: {
        body: newValue
      }
    };
  }

  // loopCardinality

  /**
   * getLoopCardinality - get the loop cardinality of the loop characteristics.
   *
   * @param {djs.model.Base} element
   *
   * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the loop cardinality
   */
  function getLoopCardinality(element) {
    return getProperty$2(element, 'loopCardinality');
  }

  /**
   * getLoopCardinalityValue - get the loop cardinality value of the loop characteristics.
   *
   * @param {djs.model.Base} element
   *
   * @return {string} the loop cardinality value
   */
  function getLoopCardinalityValue(element) {
    const loopCardinality = getLoopCardinality(element);
    return getBody(loopCardinality);
  }

  // completionCondition /////////////////////

  /**
   * getCompletionCondition - get the completion condition of the loop characteristics.
   *
   * @param {djs.model.Base} element
   *
   * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the completion condition
   */
  function getCompletionCondition$1(element) {
    return getProperty$2(element, 'completionCondition');
  }

  /**
   * getCompletionConditionValue - get the completion condition value of the loop characteristics.
   *
   * @param {djs.model.Base} element
   *
   * @return {string} the completion condition value
   */
  function getCompletionConditionValue(element) {
    const completionCondition = getCompletionCondition$1(element);
    return getBody(completionCondition);
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function NameProps(props) {
    const {
      element
    } = props;
    if (isAny(element, ['bpmn:Collaboration', 'bpmn:DataAssociation', 'bpmn:Association'])) {
      return [];
    }
    return [{
      id: 'name',
      component: Name$3,
      isEdited: isEdited$1
    }];
  }
  function Name$3(props) {
    const {
      element
    } = props;
    const modeling = useService('modeling');
    const debounce = useService('debounceInput');
    const canvas = useService('canvas');
    const bpmnFactory = useService('bpmnFactory');
    const translate = useService('translate');

    // (1) default: name
    let options = {
      element,
      id: 'name',
      label: translate('Name'),
      debounce,
      setValue: value => {
        modeling.updateProperties(element, {
          name: value
        });
      },
      getValue: element => {
        return element.businessObject.name;
      },
      autoResize: true
    };

    // (2) text annotations
    if (is$1(element, 'bpmn:TextAnnotation')) {
      options = {
        ...options,
        setValue: value => {
          modeling.updateProperties(element, {
            text: value
          });
        },
        getValue: element => {
          return element.businessObject.text;
        }
      };
    }

    // (3) groups
    else if (is$1(element, 'bpmn:Group')) {
      options = {
        ...options,
        setValue: value => {
          const businessObject = getBusinessObject(element),
            categoryValueRef = businessObject.categoryValueRef;
          if (!categoryValueRef) {
            initializeCategory(businessObject, canvas.getRootElement(), bpmnFactory);
          }
          modeling.updateLabel(element, value);
        },
        getValue: element => {
          const businessObject = getBusinessObject(element),
            categoryValueRef = businessObject.categoryValueRef;
          return categoryValueRef && categoryValueRef.value;
        }
      };
    }

    // (4) participants (only update label)
    else if (is$1(element, 'bpmn:Participant')) {
      options.label = translate('Participant Name');
    }
    return TextAreaEntry(options);
  }

  // helpers ////////////////////////

  function initializeCategory(businessObject, rootElement, bpmnFactory) {
    const definitions = getBusinessObject(rootElement).$parent;
    const categoryValue = createCategoryValue(definitions, bpmnFactory);
    businessObject.categoryValueRef = categoryValue;
  }
  function createCategoryValue(definitions, bpmnFactory) {
    const categoryValue = bpmnFactory.create('bpmn:CategoryValue');
    const category = bpmnFactory.create('bpmn:Category', {
      categoryValue: [categoryValue]
    });

    // add to correct place
    add$1(definitions.get('rootElements'), category);
    getBusinessObject(category).$parent = definitions;
    getBusinessObject(categoryValue).$parent = category;
    return categoryValue;
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  /**
   * @returns {Array<Entry>} entries
   */
  function ProcessProps(props) {
    const {
      element
    } = props;
    if (!hasProcessRef(element)) {
      return [];
    }
    return [{
      id: 'processId',
      component: ProcessId,
      isEdited: isEdited$2
    }, {
      id: 'processName',
      component: ProcessName,
      isEdited: isEdited$2
    }];
  }
  function ProcessName(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const process = element.businessObject.get('processRef');
    const getValue = () => {
      return process.get('name');
    };
    const setValue = value => {
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: process,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'processName',
      label: translate('Process name'),
      getValue,
      setValue,
      debounce
    });
  }
  function ProcessId(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const process = element.businessObject.get('processRef');
    const getValue = () => {
      return process.get('id');
    };
    const setValue = (value, error) => {
      if (error) {
        return;
      }
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: process,
        properties: {
          id: value
        }
      });
    };
    const validate = value => {
      return isIdValid(process, value, translate);
    };
    return TextfieldEntry({
      element,
      id: 'processId',
      label: translate('Process ID'),
      getValue,
      setValue,
      debounce,
      validate
    });
  }

  // helper ////////////////

  function hasProcessRef(element) {
    return is$1(element, 'bpmn:Participant') && element.businessObject.get('processRef');
  }

  /**
   * @typedef { import('@bpmn-io/properties-panel').EntryDefinition } Entry
   */

  const EMPTY_OPTION$2 = '';
  const CREATE_NEW_OPTION$1 = 'create-new';

  /**
   * @returns {Entry[]}
   */
  function SignalProps$1(props) {
    const {
      element
    } = props;
    if (!isSignalSupported$1(element)) {
      return [];
    }
    const signal = getSignal$1(element);
    let entries = [{
      id: 'signalRef',
      component: SignalRef,
      isEdited: isEdited$3
    }];
    if (signal) {
      entries = [...entries, {
        id: 'signalName',
        component: SignalName$1,
        isEdited: isEdited$2
      }];
    }
    return entries;
  }
  function SignalRef(props) {
    const {
      element
    } = props;
    const bpmnFactory = useService('bpmnFactory');
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const signalEventDefinition = getSignalEventDefinition$1(element);
    const getValue = () => {
      const signal = getSignal$1(element);
      if (signal) {
        return signal.get('id');
      }
      return EMPTY_OPTION$2;
    };
    const setValue = value => {
      const root = getRoot(signalEventDefinition);
      const commands = [];
      let signal;

      // (1) create new signal
      if (value === CREATE_NEW_OPTION$1) {
        const id = nextId$1('Signal_');
        signal = createElement$1('bpmn:Signal', {
          id,
          name: id
        }, root, bpmnFactory);
        value = signal.get('id');
        commands.push({
          cmd: 'element.updateModdleProperties',
          context: {
            element,
            moddleElement: root,
            properties: {
              rootElements: [...root.get('rootElements'), signal]
            }
          }
        });
      }

      // (2) update (or remove) signalRef
      signal = signal || findRootElementById(signalEventDefinition, 'bpmn:Signal', value);
      commands.push({
        cmd: 'element.updateModdleProperties',
        context: {
          element,
          moddleElement: signalEventDefinition,
          properties: {
            signalRef: signal
          }
        }
      });

      // (3) commit all updates
      return commandStack.execute('properties-panel.multi-command-executor', commands);
    };
    const getOptions = () => {
      let options = [{
        value: EMPTY_OPTION$2,
        label: translate('<none>')
      }, {
        value: CREATE_NEW_OPTION$1,
        label: translate('Create new ...')
      }];
      const signals = findRootElementsByType(getBusinessObject(element), 'bpmn:Signal');
      sortByName$2(signals).forEach(signal => {
        options.push({
          value: signal.get('id'),
          label: signal.get('name')
        });
      });
      return options;
    };
    return ReferenceSelectEntry({
      element,
      id: 'signalRef',
      label: translate('Global signal reference'),
      autoFocusEntry: 'signalName',
      getValue,
      setValue,
      getOptions
    });
  }
  function SignalName$1(props) {
    const {
      element
    } = props;
    const commandStack = useService('commandStack');
    const translate = useService('translate');
    const debounce = useService('debounceInput');
    const signal = getSignal$1(element);
    const getValue = () => {
      return signal.get('name');
    };
    const setValue = value => {
      return commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: signal,
        properties: {
          name: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'signalName',
      label: translate('Name'),
      getValue,
      setValue,
      debounce
    });
  }

  // helper /////////////////////////

  function sortByName$2(elements) {
    return sortBy(elements, e => (e.name || '').toLowerCase());
  }

  function isTimerSupported(element) {
    return isAny(element, ['bpmn:StartEvent', 'bpmn:IntermediateCatchEvent', 'bpmn:BoundaryEvent']) && !!getTimerEventDefinition(element);
  }

  /**
   * Get the timer definition type for a given timer event definition.
   *
   * @param {ModdleElement<bpmn:TimerEventDefinition>} timer
   *
   * @return {string|undefined} the timer definition type
   */
  function getTimerDefinitionType(timer) {
    if (!timer) {
      return;
    }
    const timeDate = timer.get('timeDate');
    if (typeof timeDate !== 'undefined') {
      return 'timeDate';
    }
    const timeCycle = timer.get('timeCycle');
    if (typeof timeCycle !== 'undefined') {
      return 'timeCycle';
    }
    const timeDuration = timer.get('timeDuration');
    if (typeof timeDuration !== 'undefined') {
      return 'timeDuration';
    }
  }
  function getTimerEventDefinition(element) {
    return getEventDefinition(element, 'bpmn:TimerEventDefinition');
  }
  function getEventDefinition(element, eventType) {
    const businessObject = getBusinessObject(element);
    const eventDefinitions = businessObject.get('eventDefinitions') || [];
    return find$1(eventDefinitions, function (definition) {
      return is$1(definition, eventType);
    });
  }

  function TimerProps$2(props) {
    const {
      element,
      idPrefix
    } = props;
    let {
      timerEventDefinition
    } = props;
    if (!timerEventDefinition) {
      const businessObject = getBusinessObject(element);
      timerEventDefinition = getTimerEventDefinition(businessObject);
    }
    const timerEventDefinitionType = getTimerDefinitionType(timerEventDefinition);

    // (1) Only show for supported elements
    if (!isTimerSupported(element)) {
      return [];
    }

    // (2) Provide entries, have a value only if selection was made
    const entries = [];
    entries.push({
      id: getId$1(idPrefix, 'timerEventDefinitionType'),
      component: TimerEventDefinitionType$2,
      isEdited: isEdited$3,
      timerEventDefinition,
      timerEventDefinitionType
    });
    if (timerEventDefinitionType) {
      entries.push({
        id: getId$1(idPrefix, 'timerEventDefinitionValue'),
        component: TimerEventDefinitionValue$2,
        isEdited: isEdited$2,
        timerEventDefinition,
        timerEventDefinitionType
      });
    }
    return entries;
  }

  /**
   * TimerEventDefinitionType - Generic select entry allowing to select a specific
   * timerEventDefintionType. To be used together with timerEventDefinitionValue.
   *
   * @param  {type} props
   * @return {SelectEntry}
   */
  function TimerEventDefinitionType$2(props) {
    const {
      element,
      timerEventDefinition,
      timerEventDefinitionType
    } = props;
    const commandStack = useService('commandStack'),
      bpmnFactory = useService('bpmnFactory'),
      translate = useService('translate');
    const getValue = () => {
      return timerEventDefinitionType || '';
    };
    const setValue = value => {
      // (1) Check if value is different to current type
      if (value === timerEventDefinitionType) {
        return;
      }

      // (2) Create empty formalExpression element
      const formalExpression = bpmnFactory.create('bpmn:FormalExpression', {
        body: undefined
      });
      formalExpression.$parent = timerEventDefinition;

      // (3) Set the value for selected timerEventDefinitionType
      const newProps = {
        timeDuration: undefined,
        timeDate: undefined,
        timeCycle: undefined
      };
      if (value !== '') {
        newProps[value] = formalExpression;
      }

      // (4) Execute businessObject update
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: timerEventDefinition,
        properties: newProps
      });
    };
    const getOptions = element => {
      return [{
        value: '',
        label: translate('<none>')
      }, {
        value: 'timeDate',
        label: translate('Date')
      }, {
        value: 'timeDuration',
        label: translate('Duration')
      }, {
        value: 'timeCycle',
        label: translate('Cycle')
      }];
    };
    return SelectEntry({
      element,
      id: 'timerEventDefinitionType',
      label: translate('Type'),
      getValue,
      setValue,
      getOptions
    });
  }

  /**
   * TimerEventDefinitionValue - Generic textField entry allowing to specify the
   * timerEventDefintionValue based on the set timerEventDefintionType. To be used
   * together with timerEventDefinitionType.
   *
   * @param  {type} props
   * @return {TextFieldEntry}
   */
  function TimerEventDefinitionValue$2(props) {
    const {
      element,
      timerEventDefinition,
      timerEventDefinitionType
    } = props;
    const commandStack = useService('commandStack'),
      translate = useService('translate'),
      debounce = useService('debounceInput');
    const timerEventFormalExpression = timerEventDefinition.get(timerEventDefinitionType);
    const getValue = () => {
      return timerEventFormalExpression && timerEventFormalExpression.get('body');
    };
    const setValue = value => {
      commandStack.execute('element.updateModdleProperties', {
        element,
        moddleElement: timerEventFormalExpression,
        properties: {
          body: value
        }
      });
    };
    return TextfieldEntry({
      element,
      id: 'timerEventDefinitionValue',
      label: translate('Value'),
      getValue,
      setValue,
      debounce,
      tooltip: getTimerEventDefinitionValueDescription$2(timerEventDefinitionType, translate)
    });
  }

  // helper //////////////////////////

  function getTimerEventDefinitionValueDescription$2(timerDefinitionType, translate) {
    switch (timerDefinitionType) {
      case 'timeDate':
        return u("div", {
          children: [u("p", {
            children: translate('A specific point in time defined as ISO 8601 combined date and time representation.')
          }), u("ul", {
            children: [u("li", {
              children: [u("code", {
                children: "2019-10-01T12:00:00Z"
              }), " - ", translate('UTC time')]
            }), u("li", {
              children: [u("code", {
                children: "2019-10-02T08:09:40+02:00"
              }), " - ", translate('UTC plus 2 hours zone offset')]
            })]
          }), u("a", {
            href: "https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-date",
            target: "_blank",
            rel: "noopener",
            children: translate('Documentation: Timer events')
          })]
        });
      case 'timeCycle':
        return u("div", {
          children: [u("p", {
            children: translate('A cycle defined as ISO 8601 repeating intervals format.')
          }), u("ul", {
            children: [u("li", {
              children: [u("code", {
                children: "R5/PT10S"
              }), " - ", translate('every 10 seconds, up to 5 times')]
            }), u("li", {
              children: [u("code", {
                children: "R/P1D"
              }), " - ", translate('every day, infinitely')]
            })]
          }), u("a", {
            href: "https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-cycle",
            target: "_blank",
            rel: "noopener",
            children: translate('Documentation: Timer events')
          })]
        });
      case 'timeDuration':
        return u("div", {
          children: [u("p", {
            children: translate('A time duration defined as ISO 8601 durations format.')
          }), u("ul", {
            children: [u("li", {
              children: [u("code", {
                children: "PT15S"
              }), " - ", translate('15 seconds')]
            }), u("li", {
              children: [u("code", {
                children: "PT1H30M"
              }), " - ", translate('1 hour and 30 minutes')]
            }), u("li", {
              children: [u("code", {
                children: "P14D"
              }), " - ", translate('14 days')]
            })]
          }), u("a", {
            href: "https://docs.camunda.org/manual/latest/reference/bpmn20/events/timer-events/#time-duration",
            target: "_blank",
            rel: "noopener",
            children: translate('Documentation: Timer events')
          })]
        });
    }
  }
  function getId$1(idPrefix, id) {
    return idPrefix ? idPrefix + id : id;
  }

  function GeneralGroup(element, injector) {
    const translate = injector.get('translate');
    const entries = [...NameProps({
      element
    }), ...IdProps(), ...ProcessProps({
      element
    }), ...ExecutableProps({
      element
    })];
    return {
      id: 'general',
      label: translate('General'),
      entries,
      component: Group
    };
  }
  function CompensationGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      label: translate('Compensation'),
      id: 'compensation',
      component: Group,
      entries: [...CompensationProps({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function DocumentationGroup(element, injector) {
    const translate = injector.get('translate');
    const entries = [...DocumentationProps({
      element
    })];
    return {
      id: 'documentation',
      label: translate('Documentation'),
      entries,
      component: Group
    };
  }
  function ErrorGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      id: 'error',
      label: translate('Error'),
      component: Group,
      entries: [...ErrorProps$2({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function MessageGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      id: 'message',
      label: translate('Message'),
      component: Group,
      entries: [...MessageProps$1({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function SignalGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      id: 'signal',
      label: translate('Signal'),
      component: Group,
      entries: [...SignalProps$1({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function LinkGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      label: translate('Link'),
      id: 'link',
      component: Group,
      entries: [...LinkProps({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function EscalationGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      id: 'escalation',
      label: translate('Escalation'),
      component: Group,
      entries: [...EscalationProps$2({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function TimerGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      label: translate('Timer'),
      id: 'timer',
      component: Group,
      entries: [...TimerProps$2({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function MultiInstanceGroup(element, injector) {
    const translate = injector.get('translate');
    const group = {
      label: translate('Multi-instance'),
      id: 'multiInstance',
      component: Group,
      entries: [...MultiInstanceProps$2({
        element
      })]
    };
    if (group.entries.length) {
      return group;
    }
    return null;
  }
  function getGroups(element, injector) {
    const groups = [GeneralGroup(element, injector), DocumentationGroup(element, injector), CompensationGroup(element, injector), ErrorGroup(element, injector), LinkGroup(element, injector), MessageGroup(element, injector), MultiInstanceGroup(element, injector), SignalGroup(element, injector), EscalationGroup(element, injector), TimerGroup(element, injector)];

    // contract: if a group returns null, it should not be displayed at all
    return groups.filter(group => group !== null);
  }
  class BpmnPropertiesProvider {
    constructor(propertiesPanel, injector) {
      propertiesPanel.registerProvider(this);
      this._injector = injector;
    }
    getGroups(element) {
      return groups => {
        groups = groups.concat(getGroups(element, this._injector));
        return groups;
      };
    }
  }
  BpmnPropertiesProvider.$inject = ['propertiesPanel', 'injector'];

  var index$2 = {
    __init__: ['bpmnPropertiesProvider'],
    bpmnPropertiesProvider: ['type', BpmnPropertiesProvider]
  };

  function isEdited(node) {
      return node && !!node.value;
  }

  function getExtension(bo, type) {
      if (!bo.extensionElements) {
          return null;
      }

      return bo.extensionElements.values.filter(function (e) {
          return e.$instanceOf(type);
      })[0];
  }

  function createElement(elementType, properties, parent, factory) {
      const element = factory.create(elementType, properties);

      if (parent) {
          element.$parent = parent;
      }

      return element;
  }


  function nextId(prefix) {
      const ids = new Ids$1([32, 32, 1]);

      return ids.nextPrefixed(prefix);
  }

  function getExtensionElement(elem, type) {
      if (!elem) return null;
      const bo = getBusinessObject(elem);
      return getExtension(bo, type);
  }

  function getOrCreateExtensionElements(elem, bpmnFactory, commands) {

      const bo = getBusinessObject(elem);
      let ee = bo.get('extensionElements');

      // (1) ensure extension elements
      if (!ee) {
          ee = createElement(
              'bpmn:ExtensionElements',
              { values: [] },
              bo,
              bpmnFactory
          );

          commands.push({
              cmd: 'element.updateModdleProperties',
              context: {
                  element: elem,
                  moddleElement: bo,
                  properties: { extensionElements: ee }
              }
          });
      }
      return ee;
  }

  function setExtensionElementValue(element, elemName) {

  	const bpmnFactory = useService('bpmnFactory');
  	const commandStack = useService('commandStack');

  	return function (value) {
  		const commands = [];
  		const bo = getBusinessObject(element);

  		// (1) ensure extension elements
  		let ee = getOrCreateExtensionElements(element, bpmnFactory, commands);

  		let gse = getExtension(bo, elemName);
  		// (2) ensure Script extension

  		if (!gse) {
  			gse = createElement(elemName, { text: value }, ee, bpmnFactory);
  			commands.push({
  				cmd: 'element.updateModdleProperties',
  				context: {
  					element,
  					moddleElement: ee,
  					properties: {
  						values: [...ee.get('values'), gse]
  					}
  				}
  			});
  		}

  		// (3) update value
  		commands.push({
  			cmd: 'element.updateModdleProperties',
  			context: {
  				element,
  				moddleElement: gse,
  				properties: {
  					text: value
  				}
  			}
  		});

  		commandStack.execute('properties-panel.multi-command-executor', commands);
  	}
  }

  function getExtensionElementValue(element, elemName) {
  	return function (parameter) {
  		let ee = getExtensionElement(element, elemName);
  		return ee ? ee.text : '';
  	}
  }
  function getBusinessObject$1(element) {
  	return element && element.businessObject || element;
  }

  function is$4(element, type) {
  	var bo = getBusinessObject$1(element);
  	return bo && typeof bo.$instanceOf === 'function' && bo.$instanceOf(type);
  }


  function getConditionalEventDefinition(element) {
  	if (!is$4(element, 'bpmn:Event')) {
  		return false;
  	}
  	return getEventDefinition$1(element, 'bpmn:ConditionalEventDefinition');
  }

  function createFormalExpression(parent, attributes, bpmnFactory) {
  	return createElement('bpmn:FormalExpression', attributes, is$4(parent, 'bpmn:SequenceFlow') ? getBusinessObject$1(parent) : getConditionalEventDefinition(parent), bpmnFactory);
  }

  function updateCondition(element, commandStack, condition = undefined) {
      if (is$4(element, 'bpmn:SequenceFlow')) {
          commandStack.execute('element.updateProperties', {
              element,
              properties: {
                  conditionExpression: condition
              }
          });
      } else {
          commandStack.execute('element.updateModdleProperties', {
              element,
              moddleElement: getConditionalEventDefinition(element),
              properties: {
                  condition
              }
          });
      }
  }

  function getConditionExpression(element) {
      const businessObject = getBusinessObject$1(element);
      if (is$4(businessObject, 'bpmn:SequenceFlow')) {
          return businessObject.get('conditionExpression');
      } else if (getConditionalEventDefinition(businessObject)) {
          return getConditionalEventDefinition(businessObject).get('condition');
      }
  }

  /**
   * ToggleSwitchEntry,
   * CollapsibleEntry,
   * CheckboxEntry
   * SelectEntry,
   * TextAreaEntry
   * ReferenceSelectEntry
   * 
   */

  function VariableProps(props) {

  	const {idPrefix, parameter } = props;

  	return [
  		{
  			id: idPrefix + '-name',
  			component: Name,
  			idPrefix,
  			parameter
  		},
  		{
  			id: idPrefix + '-type',
  			component: Type,
  			idPrefix,
  			parameter
  		},
  		{
  			id: idPrefix + '-dir',
  			component: Direction,
  			idPrefix,
  			parameter
  		},
  		{
  			id: idPrefix + '-value',
  			component: Value,
  			idPrefix,
  			parameter
  		},
  		{
  			id: idPrefix + '-external',
  			component: External,
  			idPrefix,
  			parameter
  		},
  		{
  			id: idPrefix + '-correlationid',
  			component: CorrelationId,
  			idPrefix,
  			parameter
  		}
  	];
  }

  function Name(props) {
  	const { idPrefix, element, parameter } = props;

  	const commandStack = useService('commandStack');
  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				Name: value
  			}
  		});
  	};

  	return TextfieldEntry({
  		element: parameter,
  		id: idPrefix + '-name',
  		label: translate('Name'),
  		getValue: () => parameter.Name,
  		setValue,
  		debounce
  	});
  }

  function Value(props) {
  	const { idPrefix, element, parameter } = props;

  	const commandStack = useService('commandStack');
  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				Value: value
  			}
  		});
  	};

  	return TextfieldEntry({
  		element: parameter,
  		id: idPrefix + '-value',
  		label: translate('Value'),
  		getValue: () => parameter.Value,
  		setValue,
  		debounce
  	});
  }

  function External(props) {
  	const {idPrefix, element, parameter} = props;

  	const commandStack = useService('commandStack');
  	const translate = useService('translate');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				External: value
  			}
  		});
  	};

  	return CheckboxEntry({
  		element: parameter,
  		id: idPrefix + '-external',
  		label: translate('External'),
  		getValue: () => parameter.External || false,
  		setValue
  	});
  }

  function CorrelationId(props) {
  	const {
  		idPrefix,
  		element,
  		parameter
  	} = props;

  	const commandStack = useService('commandStack');
  	useService('translate');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				CorrelationId: value
  			}
  		});
  	};

  	return CheckboxEntry({
  		element: parameter,
  		id: idPrefix + '-correlationid',
  		label: 'Correlation Id',
  		getValue: () => parameter.CorrelationId || false,	
  		setValue
  	});
  }


  function Type(props) {
  	const { idPrefix, element, parameter } = props;

  	const commandStack = useService('commandStack');
  	const translate = useService('translate');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				Type: value
  			}
  		});
  	};

  	const getOptions = (elem) => [
  		{ value: 'String', label: 'String' },
  		{ value: 'Number', label: 'Number' },
  		{ value: 'Boolean', label: 'Boolean' },
  		{ value: 'Object', label: 'Object' },
  		{ value: 'PersistentObject', label: 'PersistentObject' },
  		{ value: 'Bigint', label: 'Bigint' },
  		{ value: 'Date', label: 'Date' },
  		{ value: 'Guid', label: 'Guid' }
  	];

  	return SelectEntry({
  		element,
  		id: idPrefix + '-variableType',
  		label: translate('Type'),
  		getValue: () => parameter.Type || 'String',
  		setValue,
  		getOptions
  	});
  }

  function Direction(props) {
  	const { idPrefix, element, parameter } = props;

  	const commandStack = useService('commandStack');
  	const translate = useService('translate');

  	const setValue = (value) => {
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: parameter,
  			properties: {
  				Dir: value
  			}
  		});
  	};

  	const getOptions = (elem) => [
  		{ value: 'Local', label: 'Local' },
  		{ value: 'In', label: 'In' },
  		{ value: 'Out', label: 'Out' },
  		{ value: 'InOut', label: 'InOut' }
  	];

  	return SelectEntry({
  		element,
  		id: idPrefix + '-variableDir',
  		label: translate('Direction'),
  		getValue: () => parameter.Dir || 'Local',
  		setValue,
  		getOptions
  	});
  }

  function VariablesProps({ element, injector }) {

      let bo = getBusinessObject(element);
      const vars = getExtension(bo, 'wf:Variables');
      const parameters = vars ? vars.get('values') : [];

      const bpmnFactory = injector.get('bpmnFactory'),
          commandStack = injector.get('commandStack');

      const items = parameters.map((parameter, index) => {
          const id = element.id + '-variable-' + index;

          return {
              id,
              label: parameter.get('Name') || '',
              entries: VariableProps({
                  idPrefix: id,
                  parameter
              }),
              autoFocusEntry: id + '-Name',
              remove: removeFactory({ commandStack, element, parameter })
          };
      });

      return {
          items,
          add: addFactory({ element, bpmnFactory, commandStack })
      };
  }

  function removeFactory({ commandStack, element, parameter }) {
      return function (event) {
          event.stopPropagation();

          let bo = getBusinessObject(element);
          const extension = getExtension(bo, 'wf:Variables');
          if (!extension)
              return;

          const parameters = without(extension.get('values'), parameter);

          commandStack.execute('element.updateModdleProperties', {
              element,
              moddleElement: extension,
              properties: {
                  values: parameters
              }
          });
      };
  }

  function addFactory({ element, bpmnFactory, commandStack }) {
      return function (event) {
          event.stopPropagation();

          const commands = [];

          const bo = getBusinessObject(element);

          // (1) ensure extension elements

          let extensionElements = getOrCreateExtensionElements(element, bpmnFactory, commands);

          let extension = getExtension(bo, 'wf:Variables');

          // (2) ensure variables extension
          if (!extension) {
              extension = createElement('wf:Variables', { values: [] }, extensionElements, bpmnFactory);

              commands.push({
                  cmd: 'element.updateModdleProperties',
                  context: {
                      element,
                      moddleElement: extensionElements,
                      properties: {
                          values: [...extensionElements.get('values'), extension]
                      }
                  }
              });
          }

          // (3) create variable
          const newParameter = createElement('wf:Variable', {
              Name: nextId('Variable_'),
              //Value: '',
              Type: 'String',
              Dir: 'Local'
              //External: false,
              //CorrelationId : false
          }, extension, bpmnFactory);

          // (4) add parameter to list
          commands.push({
              cmd: 'element.updateModdleProperties',
              context: {
                  element,
                  moddleElement: extension,
                  properties: {
                      values: [...extension.get('values'), newParameter]
                  }
              }
          });

          commandStack.execute('properties-panel.multi-command-executor', commands);
      };
  }

  function GlobalProps(props) {
  	return [
  		{
  			id: 'global',
  			component: GlobalScriptProperty,
  			isEdited: (node) => node && !!node.value
  		}
  	];
  }

  function GlobalScriptProperty(props) {

  	const {element} = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	return TextAreaEntry({
  		element,
  		id: 'global',
  		label: translate('Script'),
  		monospace: true,
  		rows: 7,
  		getValue: getExtensionElementValue(element, "wf:GlobalScript"),
  		setValue: setExtensionElementValue(element, "wf:GlobalScript"),
  		debounce
  	});
  }

  function DetailsProps(props) {
  	const { element} = props;
  	const entries = [];

  	if (is$1(element, 'bpmn:UserTask')) {
  		entries.push({
  			id: 'bookmark',
  			component: Bookmark
  		});
  		entries.push({
  			id: 'inbox',
  			component: Inbox
  		});
  	}

  	if (is$1(element, 'bpmn:ScriptTask')) {
  		entries.push({
  			id: 'script',
  			component: ScriptProp
  		});
  	}

  	if (is$1(element, 'bpmn:CallActivity')) {
  		entries.push({
  			id: 'called-element',
  			component: CalledElement
  		});
  		entries.push({
  			id: 'parameters',
  			component: Parameters
  		});
  	}

  	if (isAny(element, ['bpmn:UserTask', 'bpmn:StartEvent', 'bpmn:EndEvent', 'bpmn:CallActivity'])) {
  		entries.push({
  			id: 'script',
  			component: Script,
  			isEdited: (node) => node && !!node.value
  		});
  	}

  	return entries;
  }

  function Bookmark(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');
  	const modeling = useService('modeling');

  	const setValue = (value) => {
  		modeling.updateProperties(element, {
  			bookmark: value
  		});
  	};

  	const getValue = (parameter) => {
  		return element.businessObject.bookmark ?? '';
  	};

  	return TextfieldEntry({
  		element,
  		id: 'bookmark',
  		label: translate('Bookmark'),
  		getValue,
  		setValue,
  		debounce
  	});
  }

  function ScriptProp(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');
  	const modeling = useService('modeling');

  	const setValue = (value) => {
  		modeling.updateProperties(element, {
  			script: value
  		});
  	};

  	const getValue = (parameter) => {
  		return element.businessObject.script ?? '';
  	};

  	return TextAreaEntry({
  		element,
  		id: 'script',
  		label:  translate('Script'),
  		monospace: true,
  		rows: 7,
  		getValue,
  		setValue,
  		debounce,
  	});
  }

  function Script(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	return TextAreaEntry({
  		element,
  		id: 'script',
  		label: translate('Script'),
  		description: translate('Executed after completion'),
  		monospace: true,
  		rows: 7,
  		getValue: getExtensionElementValue(element, "wf:Script"),
  		setValue: setExtensionElementValue(element, "wf:Script"),
  		debounce
  	});
  }

  function Inbox(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	return TextAreaEntry({
  		element,
  		id: 'inbox',
  		label: translate('Inbox'),
  		monospace: true,
  		rows: 7,
  		getValue: getExtensionElementValue(element, "wf:Inbox"),
  		setValue: setExtensionElementValue(element, "wf:Inbox"),
  		debounce
  	});
  }

  function CalledElement(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');
  	const modeling = useService('modeling');

  	const setValue = (value) => {
  		modeling.updateProperties(element, {
  			calledElement: value
  		});
  	};

  	const getValue = (parameter) => {
  		return element.businessObject.calledElement ?? '';
  	};

  	return TextfieldEntry({
  		element,
  		id: 'called-element',
  		label: translate('Called Element'),
  		getValue,
  		setValue,
  		debounce
  	});
  }

  function Parameters(props) {
  	const { element } = props;

  	const translate = useService('translate');
  	const debounce = useService('debounceInput');

  	return TextAreaEntry({
  		element,
  		id: 'parameters',
  		label: translate('Parameters'),
  		monospace: true,
  		rows: 2,
  		getValue: getExtensionElementValue(element, "wf:Parameters"),
  		setValue: setExtensionElementValue(element, "wf:Parameters"),
  		debounce
  	});
  }

  function ConditinalProps(props) {
  	const { element} = props;
  	const entries = [];

  	const CONDITIONAL_SOURCES = [
  		'bpmn:Activity',
  		'bpmn:ExclusiveGateway',
  		'bpmn:InclusiveGateway',
  		'bpmn:ComplexGateway'
  	];


  	if (is$1(element, 'bpmn:SequenceFlow') && isAny(element.source, CONDITIONAL_SOURCES)) {
  		entries.push({
  			id: 'conditionExpression',
  			component: ConditionExpression,
  			isEdited: isEdited
  		});
  	}
  	return entries;
  }

  function ConditionExpression(props) {
  	const { element } = props;
  	const commandStack = useService('commandStack'),
  		bpmnFactory = useService('bpmnFactory'),
  		translate = useService('translate'),
  		debounce = useService('debounceInput');

  	const getValue = () => {
  		let ce = getConditionExpression(element);
  		if (ce)
  			return ce.get('body');
  		return '';
  	};
  	const setValue = value => {
  		const conditionExpression = createFormalExpression(element, {
  			body: value
  		}, bpmnFactory);
  		updateCondition(element, commandStack, conditionExpression);
  	};
  	return TextAreaEntry({
  		element: element,
  		id: "conditionExpression",
  		label: translate('Condition Expression'),
  		monospace: true,
  		rows: 1,
  		getValue: getValue,
  		setValue: setValue,
  		debounce: debounce
  	});
  }

  function MultiInstanceProps(props) {
  	const { element, injector, parameter } = props;
  	const entries = [];

  	entries.push({
  		id: 'conditionExpression',
  		component: Collection,
  		isEdited: isEdited
  	});
  	entries.push({
  		id: 'conditionVariable',
  		component: Variable,
  		isEdited: isEdited
  	});
  	return entries;
  }

  function getLoopCharacteristics(element) {
  	var bo = getBusinessObject(element);
  	var lc = bo.loopCharacteristics;
  	if (is$1(lc, "bpmn:StandardLoopCharacteristics"))
  		return null;
  	return lc;
  }

  function Collection(props) {
  	const { element } = props;
  	const commandStack = useService('commandStack'),
  		translate = useService('translate'),
  		debounce = useService('debounceInput');

  	const getValue = () => {
  		var lc = getLoopCharacteristics(element);
  		return (lc ? lc.collection : '') ?? '';
  	};
  	const setValue = value => {
  		var lc = getLoopCharacteristics(element);
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: lc,
  			properties: {
  				collection: value
  			}
  		});
  	};

  	return TextAreaEntry({
  		element: element,
  		id: "mi-collection",
  		label: translate('Collection'),
  		monospace: true,
  		rows: 1,
  		getValue: getValue,
  		setValue: setValue,
  		debounce: debounce
  	});
  }


  function Variable(props) {
  	const { element } = props;
  	const commandStack = useService('commandStack'),
  		translate = useService('translate'),
  		debounce = useService('debounceInput');

  	const getValue = () => {
  		var lc = getLoopCharacteristics(element);
  		return (lc ? lc.variable : '') ?? '';
  	};
  	const setValue = value => {
  		var lc = getLoopCharacteristics(element);
  		commandStack.execute('element.updateModdleProperties', {
  			element,
  			moddleElement: lc,
  			properties: {
  				variable: value
  			}
  		});
  	};

  	return TextAreaEntry({
  		element: element,
  		id: "mi-variable",
  		label: translate('Variable'),
  		monospace: true,
  		rows: 1,
  		getValue: getValue,
  		setValue: setValue,
  		debounce: debounce
  	});
  }

  const LOW_PRIORITY = 500;

  function WorkflowPropertiesProvider$1(propertiesPanel, injector, translate) {

      this.getGroups = (element) => {
          return function (groups) {
              let set = false;
              if (isAny(element, ['bpmn:Process', 'bpmn:Collaboration'])) {
                  groups.push(createGlobalGroup(element, injector, translate));
                  set = true;
              }

              if (isAny(element, ['bpmn:Process', 'bpmn:SubProcess', 'bpmn:Collaboration', 'bpmn:Participant'])) {
                  groups.push(createVariablesGroup(element, injector, translate));
                  set = true;
              }
              if (!set) {
                  let details = createDetailsGroup(element, injector, translate);
                  if (details)
                      groups.push(details);
                  let conditional = createConditionalGroup(element, injector, translate);
                  if (conditional)
  					groups.push(conditional);
              }

              let mi = groups.find(g => g.id === "multiInstance");
              if (mi) {
                  // delete std: Loop Cardinality and Loop Condition   
                  let np = MultiInstanceProps(element);
                  mi.entries.splice(0);
  				mi.entries.push(...np);
              }

              return groups;
          };
      };

      propertiesPanel.registerProvider(LOW_PRIORITY, this);
  }

  WorkflowPropertiesProvider$1.$inject = ['propertiesPanel', 'injector', 'translate'];

  function createVariablesGroup(element, injector, translate) {

      const variablesGroup = {
          id: 'variables',
          label: translate('Variables'),
          component: ListGroup,
          ...VariablesProps({ element, injector })
      };

      return variablesGroup;
  }

  function createGlobalGroup(element, injector, translate) {
      const entries = [...GlobalProps()];
      const globalGroup = {
          id: 'global',
          label: translate('Global Script'),
          entries,
          component: Group
      };

      return globalGroup;
  }

  function createDetailsGroup(element, injector, translate) {
      const entries = [...DetailsProps({ element})];
      if (!entries.length)
          return null;
      return {
          id: 'details',
          label: translate('Details'),
          entries,
          component: Group
      };
  }

  function createConditionalGroup(element, injector, translate) {
      const entries = [...ConditinalProps({ element})];
      if (!entries.length)
          return null;
      return {
          id: 'conditional',
          label: translate('Condition'),
          entries,
          component: Group
      };
  }

  var WorkflowPropertiesProvider = {
  	__init__: ['propertiesProvider'],
  	propertiesProvider: ['type', WorkflowPropertiesProvider$1]
  };

  var workflowModdleDescriptor = {
  	"name": "wf",
  	"prefix": "wf",
  	"uri": "clr-namespace:A2v10.Workflow;assembly=A2v10.Workflow",
  	"associations": [],
  	"types": [
  		{
  			name: 'Variables',
  			"superClass": ['Element'],
  			properties: [
  				{
  					name: "values",
  					isMany: true,
  					type: "Variable"
  				}
  			]
  		},
  		{
  			name: "Variable",
  			superClass: [
  				'Element'
  			],
  			properties: [
  				{
  					name: "Name",
  					isAttr: true,
  					type: "String"
  				},
  				{
  					name: "Value",
  					isAttr: true,
  					type: "String"
  				},
  				{
  					name: "Type",
  					isAttr: true,
  					type: "String"
  				},
  				{
  					name: "Dir",
  					isAttr: true,
  					type: "String"
  				},
  				{
  					name: "External",
  					isAttr: true,
  					type: "Boolean"
  				},
  				{
  					name: "CorrelationId",
  					isAttr: true,
  					type: "Boolean"
  				}
  			]
  		},
  		{
  			name: "GlobalScript",
  			superClass: [
  				'Element'
  			],
  			properties: [
  				{
  					name: "text",
  					type: "String",
  					isBody: true
  				}
  			]
  		},
  		{
  			name: 'Script',
  			superClass: [
  				'Element'
  			],
  			properties: [
  				{
  					name: "text",
  					type: "String",
  					isBody: true
  				}
  			]
  		},
  		{
  			name: "wfUserTask",
  			extends: [
  				"bpmn:UserTask"
  			],
  			properties: [
  				{
  					"name": "bookmark",
  					"isAttr": true,
  					"type": "String"
  				}
  			]
  		},
  		{
  			name: "Inbox",
  			superClass: [
  				"Element"
  			],
  			properties: [
  				{
  					name: "text",
  					type: "String",
  					isBody: true
  				}
  			]
  		},
  		{
  			name: "Parameters",
  			superClass: [
  				"Element"
  			],
  			properties: [
  				{
  					name: "text",
  					type: "String",
  					isBody: true
  				}
  			]
  		},
  		{
  			name: "wfMultiInstanceLoopCharacteristics",
  			extends: [
  				"bpmn:MultiInstanceLoopCharacteristics"
  			],
  			properties: [
  				{
  					"name": "collection",
  					"isAttr": true,
  					"type": "String"
  				},
  				{
  					"name": "variable",
  					"isAttr": true,
  					"type": "String"
  				}
  			]
  		},
  	]
  };

  const defaultXml = `
<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
	xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
	xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI"
	xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wf="clr-namespace:A2v10.Workflow;assembly=A2v10.Workflow">
	<process id="Process_1" isExecutable="true">
		<startEvent id="StartEvent_1" name="Start">
			<outgoing>SequenceFlow_1</outgoing>
		</startEvent>
		<task id="Task_1">
			<incoming>SequenceFlow_1</incoming>
			<outgoing>SequenceFlow_2</outgoing>
		</task>
		<endEvent id="EndEvent_1" name="End">
			<incoming>SequenceFlow_2</incoming>
		</endEvent>
		<sequenceFlow id="SequenceFlow_1" sourceRef="StartEvent_1" targetRef="Task_1" />
		<sequenceFlow id="SequenceFlow_2" sourceRef="Task_1" targetRef="EndEvent_1" />
	</process>
	<bpmndi:BPMNDiagram id="BpmnDiagram_1">
		<bpmndi:BPMNPlane id="BpmnPlane_1" bpmnElement="Process_1">
			<bpmndi:BPMNEdge id="SequenceFlow_1_di" bpmnElement="SequenceFlow_1">
				<omgdi:waypoint x="188" y="210" />
				<omgdi:waypoint x="290" y="210" />
			</bpmndi:BPMNEdge>
			<bpmndi:BPMNEdge id="SequenceFlow_2_di" bpmnElement="SequenceFlow_2">
				<omgdi:waypoint x="390" y="210" />
				<omgdi:waypoint x="482" y="210" />
			</bpmndi:BPMNEdge>
			<bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
				<omgdc:Bounds x="152" y="192" width="36" height="36" />
				<bpmndi:BPMNLabel>
					<omgdc:Bounds x="159" y="235" width="23" height="14" />
				</bpmndi:BPMNLabel>
			</bpmndi:BPMNShape>
			<bpmndi:BPMNShape id="Event_1_di" bpmnElement="EndEvent_1">
				<omgdc:Bounds x="482" y="192" width="36" height="36" />
				<bpmndi:BPMNLabel>
					<omgdc:Bounds x="489" y="235" width="23" height="14" />
				</bpmndi:BPMNLabel>
			</bpmndi:BPMNShape>
			<bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
				<omgdc:Bounds x="290" y="170" width="100" height="80" />
			</bpmndi:BPMNShape>
		</bpmndi:BPMNPlane>
	</bpmndi:BPMNDiagram>
</definitions>
`;


  function main() {
  	this.createViewer = function (container) {
  		return new Viewer({
  			container,
  			keyboard: {
  				//bindTo: document.getRootNode()
  			},
  			additionalModules: [
  				index$4,
  				MoveCanvasModule,
  				ZoomScrollModule,
  				OutlineModule,
  				modeling
  			],
  			moddleExtensions: {
  				Workflow: workflowModdleDescriptor,
  			}
  		});
  	};
  	this.createModeler = function (container, ppContainer) {
  		return new Modeler({
  			container,
  			propertiesPanel: {
  				parent: ppContainer
  			},
  			additionalModules: [
  				index$4,
  				ColorPickerModule,
  			    index$3,
  				index$2,
  				//ZeebePropertiesProviderModule,
  				WorkflowPropertiesProvider
  			],
  			moddleExtensions: {
  				Workflow: workflowModdleDescriptor,
  			}
  		});
  	};

  	this.registerDropZone = registerDropZone;
  	this.saveXmlAndSvg = saveXmlAndSvg;
  	this.defaultXml = defaultXml;
  }
  function registerDropZone(container, callback) {

  	if (!window.FileList || !window.FileReader) {
  		window.alert('Looks like you use an older browser that does not support drag and drop.');
  		return;
  	}

  	function handleFileSelect(e) {
  		e.stopPropagation();
  		e.preventDefault();

  		let files = e.dataTransfer.files;
  		let file = files[0];
  		let reader = new FileReader();

  		reader.onload = function (e) {
  			let xml = e.target.result;
  			callback({ xml, name: file.name });
  		};
  		reader.readAsText(file);
  	}
  	function handleDragOver(e) {
  		e.stopPropagation();
  		e.preventDefault();
  		e.dataTransfer.dropEffect = 'copy';
  	}
  	container.addEventListener('dragover', handleDragOver, false);
  	container.addEventListener('drop', handleFileSelect, false);
  }

  async function saveXmlAndSvg(modeler) {
  	let xmlResult = await modeler.saveXML();
  	let xml = xmlResult.xml;

  	// saveSVG destroys main CSS table!
  	let el = document.createElement('div');

  	let clone = this.createViewer(el);
  	document.body.appendChild(el);
  	await clone.importXML(xml);

  	let svgResult = await clone.saveSVG();

  	el.remove();

  	// fit svg viewbox
  	let svgParser = new DOMParser();
  	let svgObj = svgParser.parseFromString(svgResult.svg, 'image/svg+xml');
  	let baseViewBox = svgObj.documentElement.viewBox.baseVal;

  	const WTH = 500;
  	const HTH = 300;

  	baseViewBox.width += 10;
  	baseViewBox.height += 10;
  	baseViewBox.y -= 5;

  	svgResult.svg = svgObj.documentElement.outerHTML;

  	let zoom = 1;
  	if (baseViewBox.width > WTH || baseViewBox.height > HTH)
  		zoom = Math.min(WTH / baseViewBox.width, HTH / baseViewBox.height);

  	return {
  		xml,
  		svg: svgResult.svg,
  		rect: {
  			width: baseViewBox.width,
  			height: baseViewBox.height,
  		},
  		zoom
  	};
  }

  return main;

}));
//# sourceMappingURL=bpmnfull.js.map
